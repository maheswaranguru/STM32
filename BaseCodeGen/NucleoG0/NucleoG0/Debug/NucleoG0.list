
NucleoG0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005660  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000018c  08005720  08005720  00015720  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058ac  080058ac  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  080058ac  080058ac  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058ac  080058ac  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058ac  080058ac  000158ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080058b0  080058b0  000158b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  080058b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000122c  20000044  080058f8  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001270  080058f8  00021270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104e9  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d62  00000000  00000000  00030555  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  000332b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  00034100  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000037f1  00000000  00000000  00034dd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dfed  00000000  00000000  000385c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008613a  00000000  00000000  000465ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc6e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030b8  00000000  00000000  000cc764  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000044 	.word	0x20000044
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005708 	.word	0x08005708

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000048 	.word	0x20000048
 8000104:	08005708 	.word	0x08005708

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040a:	f000 fe59 	bl	80010c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040e:	f000 f81b 	bl	8000448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000412:	f000 f8c7 	bl	80005a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000416:	f000 f877 	bl	8000508 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	4a08      	ldr	r2, [pc, #32]	; (8000440 <main+0x3c>)
 800041e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000420:	c313      	stmia	r3!, {r0, r1, r4}
 8000422:	ca03      	ldmia	r2!, {r0, r1}
 8000424:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2100      	movs	r1, #0
 800042a:	0018      	movs	r0, r3
 800042c:	f003 fc63 	bl	8003cf6 <osThreadCreate>
 8000430:	0002      	movs	r2, r0
 8000432:	4b04      	ldr	r3, [pc, #16]	; (8000444 <main+0x40>)
 8000434:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  application();
 8000436:	f000 f9f3 	bl	8000820 <application>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800043a:	f003 fc54 	bl	8003ce6 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800043e:	e7fe      	b.n	800043e <main+0x3a>
 8000440:	0800572c 	.word	0x0800572c
 8000444:	200011b4 	.word	0x200011b4

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b099      	sub	sp, #100	; 0x64
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	242c      	movs	r4, #44	; 0x2c
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2334      	movs	r3, #52	; 0x34
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f005 f94c 	bl	80056f6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045e:	231c      	movs	r3, #28
 8000460:	18fb      	adds	r3, r7, r3
 8000462:	0018      	movs	r0, r3
 8000464:	2310      	movs	r3, #16
 8000466:	001a      	movs	r2, r3
 8000468:	2100      	movs	r1, #0
 800046a:	f005 f944 	bl	80056f6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800046e:	003b      	movs	r3, r7
 8000470:	0018      	movs	r0, r3
 8000472:	231c      	movs	r3, #28
 8000474:	001a      	movs	r2, r3
 8000476:	2100      	movs	r1, #0
 8000478:	f005 f93d 	bl	80056f6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	0018      	movs	r0, r3
 8000482:	f001 fa97 	bl	80019b4 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000486:	193b      	adds	r3, r7, r4
 8000488:	2202      	movs	r2, #2
 800048a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2280      	movs	r2, #128	; 0x80
 8000490:	0052      	lsls	r2, r2, #1
 8000492:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2240      	movs	r2, #64	; 0x40
 800049e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 facf 	bl	8001a4c <HAL_RCC_OscConfig>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004b2:	f000 f8e3 	bl	800067c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b6:	211c      	movs	r1, #28
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2207      	movs	r2, #7
 80004bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2200      	movs	r2, #0
 80004c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2100      	movs	r1, #0
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 fdcf 	bl	8002078 <HAL_RCC_ClockConfig>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004de:	f000 f8cd 	bl	800067c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004e2:	003b      	movs	r3, r7
 80004e4:	2202      	movs	r2, #2
 80004e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004e8:	003b      	movs	r3, r7
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ee:	003b      	movs	r3, r7
 80004f0:	0018      	movs	r0, r3
 80004f2:	f001 ff6b 	bl	80023cc <HAL_RCCEx_PeriphCLKConfig>
 80004f6:	1e03      	subs	r3, r0, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80004fa:	f000 f8bf 	bl	800067c <Error_Handler>
  }
}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b019      	add	sp, #100	; 0x64
 8000504:	bd90      	pop	{r4, r7, pc}
	...

08000508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800050c:	4b23      	ldr	r3, [pc, #140]	; (800059c <MX_USART2_UART_Init+0x94>)
 800050e:	4a24      	ldr	r2, [pc, #144]	; (80005a0 <MX_USART2_UART_Init+0x98>)
 8000510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000514:	22e1      	movs	r2, #225	; 0xe1
 8000516:	0252      	lsls	r2, r2, #9
 8000518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <MX_USART2_UART_Init+0x94>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_USART2_UART_Init+0x94>)
 800052e:	220c      	movs	r2, #12
 8000530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_USART2_UART_Init+0x94>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800053e:	4b17      	ldr	r3, [pc, #92]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_USART2_UART_Init+0x94>)
 800054c:	2200      	movs	r2, #0
 800054e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000552:	0018      	movs	r0, r3
 8000554:	f002 f870 	bl	8002638 <HAL_UART_Init>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800055c:	f000 f88e 	bl	800067c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000562:	2100      	movs	r1, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f003 fab9 	bl	8003adc <HAL_UARTEx_SetTxFifoThreshold>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800056e:	f000 f885 	bl	800067c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000574:	2100      	movs	r1, #0
 8000576:	0018      	movs	r0, r3
 8000578:	f003 faf0 	bl	8003b5c <HAL_UARTEx_SetRxFifoThreshold>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000580:	f000 f87c 	bl	800067c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000586:	0018      	movs	r0, r3
 8000588:	f003 fa6e 	bl	8003a68 <HAL_UARTEx_DisableFifoMode>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000590:	f000 f874 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	200011b8 	.word	0x200011b8
 80005a0:	40004400 	.word	0x40004400

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b089      	sub	sp, #36	; 0x24
 80005a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	240c      	movs	r4, #12
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	0018      	movs	r0, r3
 80005b0:	2314      	movs	r3, #20
 80005b2:	001a      	movs	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	f005 f89e 	bl	80056f6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005be:	4b28      	ldr	r3, [pc, #160]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005c0:	2104      	movs	r1, #4
 80005c2:	430a      	orrs	r2, r1
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34
 80005c6:	4b26      	ldr	r3, [pc, #152]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ca:	2204      	movs	r2, #4
 80005cc:	4013      	ands	r3, r2
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005d8:	2120      	movs	r1, #32
 80005da:	430a      	orrs	r2, r1
 80005dc:	635a      	str	r2, [r3, #52]	; 0x34
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005e2:	2220      	movs	r2, #32
 80005e4:	4013      	ands	r3, r2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005f0:	2101      	movs	r1, #1
 80005f2:	430a      	orrs	r2, r1
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005fa:	2201      	movs	r2, #1
 80005fc:	4013      	ands	r3, r2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000602:	23a0      	movs	r3, #160	; 0xa0
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	2200      	movs	r2, #0
 8000608:	2120      	movs	r1, #32
 800060a:	0018      	movs	r0, r3
 800060c:	f001 f9b5 	bl	800197a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000610:	193b      	adds	r3, r7, r4
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	0192      	lsls	r2, r2, #6
 8000616:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000624:	193b      	adds	r3, r7, r4
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <MX_GPIO_Init+0xc0>)
 8000628:	0019      	movs	r1, r3
 800062a:	0010      	movs	r0, r2
 800062c:	f000 ff54 	bl	80014d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000630:	0021      	movs	r1, r4
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2220      	movs	r2, #32
 8000636:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2201      	movs	r2, #1
 800063c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	187a      	adds	r2, r7, r1
 800064c:	23a0      	movs	r3, #160	; 0xa0
 800064e:	05db      	lsls	r3, r3, #23
 8000650:	0011      	movs	r1, r2
 8000652:	0018      	movs	r0, r3
 8000654:	f000 ff40 	bl	80014d8 <HAL_GPIO_Init>

}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b009      	add	sp, #36	; 0x24
 800065e:	bd90      	pop	{r4, r7, pc}
 8000660:	40021000 	.word	0x40021000
 8000664:	50000800 	.word	0x50000800

08000668 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
//		osDelay(500);
//		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
		osDelay(500);
 8000670:	23fa      	movs	r3, #250	; 0xfa
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	0018      	movs	r0, r3
 8000676:	f003 fb66 	bl	8003d46 <osDelay>
 800067a:	e7f9      	b.n	8000670 <StartDefaultTask+0x8>

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_MspInit+0x50>)
 8000690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <HAL_MspInit+0x50>)
 8000694:	2101      	movs	r1, #1
 8000696:	430a      	orrs	r2, r1
 8000698:	641a      	str	r2, [r3, #64]	; 0x40
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_MspInit+0x50>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	2201      	movs	r2, #1
 80006a0:	4013      	ands	r3, r2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_MspInit+0x50>)
 80006a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <HAL_MspInit+0x50>)
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	0549      	lsls	r1, r1, #21
 80006b0:	430a      	orrs	r2, r1
 80006b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <HAL_MspInit+0x50>)
 80006b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	055b      	lsls	r3, r3, #21
 80006bc:	4013      	ands	r3, r2
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80006c2:	2302      	movs	r3, #2
 80006c4:	425b      	negs	r3, r3
 80006c6:	2200      	movs	r2, #0
 80006c8:	2103      	movs	r1, #3
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 fe48 	bl	8001360 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000

080006dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	2314      	movs	r3, #20
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	0018      	movs	r0, r3
 80006ea:	2314      	movs	r3, #20
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f005 f801 	bl	80056f6 <memset>
  if(huart->Instance==USART2)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <HAL_UART_MspInit+0x9c>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d138      	bne.n	8000770 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <HAL_UART_MspInit+0xa0>)
 8000700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <HAL_UART_MspInit+0xa0>)
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	0289      	lsls	r1, r1, #10
 8000708:	430a      	orrs	r2, r1
 800070a:	63da      	str	r2, [r3, #60]	; 0x3c
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <HAL_UART_MspInit+0xa0>)
 800070e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	029b      	lsls	r3, r3, #10
 8000714:	4013      	ands	r3, r2
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <HAL_UART_MspInit+0xa0>)
 800071c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <HAL_UART_MspInit+0xa0>)
 8000720:	2101      	movs	r1, #1
 8000722:	430a      	orrs	r2, r1
 8000724:	635a      	str	r2, [r3, #52]	; 0x34
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <HAL_UART_MspInit+0xa0>)
 8000728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072a:	2201      	movs	r2, #1
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000732:	2114      	movs	r1, #20
 8000734:	187b      	adds	r3, r7, r1
 8000736:	220c      	movs	r2, #12
 8000738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2202      	movs	r2, #2
 800073e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2201      	movs	r2, #1
 8000750:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	187a      	adds	r2, r7, r1
 8000754:	23a0      	movs	r3, #160	; 0xa0
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f000 febc 	bl	80014d8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2103      	movs	r1, #3
 8000764:	201c      	movs	r0, #28
 8000766:	f000 fdfb 	bl	8001360 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800076a:	201c      	movs	r0, #28
 800076c:	f000 fe0d 	bl	800138a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b00a      	add	sp, #40	; 0x28
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40004400 	.word	0x40004400
 800077c:	40021000 	.word	0x40021000

08000780 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	b082      	sub	sp, #8
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a0a      	ldr	r2, [pc, #40]	; (80007b8 <HAL_UART_MspDeInit+0x38>)
 800078e:	4293      	cmp	r3, r2
 8000790:	d10e      	bne.n	80007b0 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8000792:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <HAL_UART_MspDeInit+0x3c>)
 8000794:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000796:	4b09      	ldr	r3, [pc, #36]	; (80007bc <HAL_UART_MspDeInit+0x3c>)
 8000798:	4909      	ldr	r1, [pc, #36]	; (80007c0 <HAL_UART_MspDeInit+0x40>)
 800079a:	400a      	ands	r2, r1
 800079c:	63da      	str	r2, [r3, #60]	; 0x3c
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 800079e:	23a0      	movs	r3, #160	; 0xa0
 80007a0:	05db      	lsls	r3, r3, #23
 80007a2:	210c      	movs	r1, #12
 80007a4:	0018      	movs	r0, r3
 80007a6:	f000 fffb 	bl	80017a0 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 80007aa:	201c      	movs	r0, #28
 80007ac:	f000 fdfd 	bl	80013aa <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 80007b0:	46c0      	nop			; (mov r8, r8)
 80007b2:	46bd      	mov	sp, r7
 80007b4:	b002      	add	sp, #8
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40004400 	.word	0x40004400
 80007bc:	40021000 	.word	0x40021000
 80007c0:	fffdffff 	.word	0xfffdffff

080007c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80007c8:	46c0      	nop			; (mov r8, r8)
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}

080007ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ce:	b580      	push	{r7, lr}
 80007d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007d2:	e7fe      	b.n	80007d2 <HardFault_Handler+0x4>

080007d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007d8:	f000 fcdc 	bl	8001194 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80007dc:	f004 fbba 	bl	8004f54 <xTaskGetSchedulerState>
 80007e0:	0003      	movs	r3, r0
 80007e2:	2b01      	cmp	r3, #1
 80007e4:	d001      	beq.n	80007ea <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007e6:	f004 fd77 	bl	80052d8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007ea:	46c0      	nop			; (mov r8, r8)
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007f4:	4b03      	ldr	r3, [pc, #12]	; (8000804 <USART2_IRQHandler+0x14>)
 80007f6:	0018      	movs	r0, r3
 80007f8:	f002 f848 	bl	800288c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007fc:	46c0      	nop			; (mov r8, r8)
 80007fe:	46bd      	mov	sp, r7
 8000800:	bd80      	pop	{r7, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	200011b8 	.word	0x200011b8

08000808 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800080c:	4b03      	ldr	r3, [pc, #12]	; (800081c <SystemInit+0x14>)
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	0512      	lsls	r2, r2, #20
 8000812:	609a      	str	r2, [r3, #8]
#endif
}
 8000814:	46c0      	nop			; (mov r8, r8)
 8000816:	46bd      	mov	sp, r7
 8000818:	bd80      	pop	{r7, pc}
 800081a:	46c0      	nop			; (mov r8, r8)
 800081c:	e000ed00 	.word	0xe000ed00

08000820 <application>:

TaskHandle_t xHandle = NULL;


void application(void)
{
 8000820:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000822:	b085      	sub	sp, #20
 8000824:	af02      	add	r7, sp, #8
    volatile uint8_t i = 0;
 8000826:	1dfb      	adds	r3, r7, #7
 8000828:	2200      	movs	r2, #0
 800082a:	701a      	strb	r2, [r3, #0]
    volatile uint8_t TaskStatus = 0;
 800082c:	1dbb      	adds	r3, r7, #6
 800082e:	2200      	movs	r2, #0
 8000830:	701a      	strb	r2, [r3, #0]

    for( i = 0; i< MAXMUM_TASK; i++)
 8000832:	1dfb      	adds	r3, r7, #7
 8000834:	2200      	movs	r2, #0
 8000836:	701a      	strb	r2, [r3, #0]
 8000838:	e05e      	b.n	80008f8 <application+0xd8>
    {
        if( pdPASS !=  xTaskCreate(sysTask[i].vTaskfunPtr, sysTask[i].vTaskName, sysTask[i].stacksize, sysTask[i].VTaskparaeter, sysTask[i].VtaskPriority, sysTask[i].pxCreatedTask) )
 800083a:	1dfb      	adds	r3, r7, #7
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	0019      	movs	r1, r3
 8000842:	4a3f      	ldr	r2, [pc, #252]	; (8000940 <application+0x120>)
 8000844:	000b      	movs	r3, r1
 8000846:	00db      	lsls	r3, r3, #3
 8000848:	185b      	adds	r3, r3, r1
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	589c      	ldr	r4, [r3, r2]
 800084e:	1dfb      	adds	r3, r7, #7
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	b2db      	uxtb	r3, r3
 8000854:	001a      	movs	r2, r3
 8000856:	0013      	movs	r3, r2
 8000858:	00db      	lsls	r3, r3, #3
 800085a:	189b      	adds	r3, r3, r2
 800085c:	009b      	lsls	r3, r3, #2
 800085e:	4a38      	ldr	r2, [pc, #224]	; (8000940 <application+0x120>)
 8000860:	189b      	adds	r3, r3, r2
 8000862:	1d1d      	adds	r5, r3, #4
 8000864:	1dfb      	adds	r3, r7, #7
 8000866:	781b      	ldrb	r3, [r3, #0]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	0019      	movs	r1, r3
 800086c:	4a34      	ldr	r2, [pc, #208]	; (8000940 <application+0x120>)
 800086e:	000b      	movs	r3, r1
 8000870:	00db      	lsls	r3, r3, #3
 8000872:	185b      	adds	r3, r3, r1
 8000874:	009b      	lsls	r3, r3, #2
 8000876:	18d3      	adds	r3, r2, r3
 8000878:	3314      	adds	r3, #20
 800087a:	881e      	ldrh	r6, [r3, #0]
 800087c:	1dfb      	adds	r3, r7, #7
 800087e:	781b      	ldrb	r3, [r3, #0]
 8000880:	b2db      	uxtb	r3, r3
 8000882:	0019      	movs	r1, r3
 8000884:	4a2e      	ldr	r2, [pc, #184]	; (8000940 <application+0x120>)
 8000886:	000b      	movs	r3, r1
 8000888:	00db      	lsls	r3, r3, #3
 800088a:	185b      	adds	r3, r3, r1
 800088c:	009b      	lsls	r3, r3, #2
 800088e:	18d3      	adds	r3, r2, r3
 8000890:	3318      	adds	r3, #24
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	469c      	mov	ip, r3
 8000896:	1dfb      	adds	r3, r7, #7
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	0019      	movs	r1, r3
 800089e:	4a28      	ldr	r2, [pc, #160]	; (8000940 <application+0x120>)
 80008a0:	000b      	movs	r3, r1
 80008a2:	00db      	lsls	r3, r3, #3
 80008a4:	185b      	adds	r3, r3, r1
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	18d3      	adds	r3, r2, r3
 80008aa:	331c      	adds	r3, #28
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	1dfb      	adds	r3, r7, #7
 80008b0:	781b      	ldrb	r3, [r3, #0]
 80008b2:	b2db      	uxtb	r3, r3
 80008b4:	0018      	movs	r0, r3
 80008b6:	4922      	ldr	r1, [pc, #136]	; (8000940 <application+0x120>)
 80008b8:	0003      	movs	r3, r0
 80008ba:	00db      	lsls	r3, r3, #3
 80008bc:	181b      	adds	r3, r3, r0
 80008be:	009b      	lsls	r3, r3, #2
 80008c0:	18cb      	adds	r3, r1, r3
 80008c2:	3320      	adds	r3, #32
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	9301      	str	r3, [sp, #4]
 80008c8:	9200      	str	r2, [sp, #0]
 80008ca:	4663      	mov	r3, ip
 80008cc:	0032      	movs	r2, r6
 80008ce:	0029      	movs	r1, r5
 80008d0:	0020      	movs	r0, r4
 80008d2:	f003 fe7e 	bl	80045d2 <xTaskCreate>
 80008d6:	0003      	movs	r3, r0
 80008d8:	2b01      	cmp	r3, #1
 80008da:	d006      	beq.n	80008ea <application+0xca>
        {
            TaskStatus++;
 80008dc:	1dbb      	adds	r3, r7, #6
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	b2db      	uxtb	r3, r3
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	1dbb      	adds	r3, r7, #6
 80008e8:	701a      	strb	r2, [r3, #0]
    for( i = 0; i< MAXMUM_TASK; i++)
 80008ea:	1dfb      	adds	r3, r7, #7
 80008ec:	781b      	ldrb	r3, [r3, #0]
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	3301      	adds	r3, #1
 80008f2:	b2da      	uxtb	r2, r3
 80008f4:	1dfb      	adds	r3, r7, #7
 80008f6:	701a      	strb	r2, [r3, #0]
 80008f8:	1dfb      	adds	r3, r7, #7
 80008fa:	781b      	ldrb	r3, [r3, #0]
 80008fc:	b2db      	uxtb	r3, r3
 80008fe:	2b02      	cmp	r3, #2
 8000900:	d99b      	bls.n	800083a <application+0x1a>
        }
    }

    if( 0 != TaskStatus )       //!< If any of the task not created successfully, freeze here !
 8000902:	1dbb      	adds	r3, r7, #6
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	b2db      	uxtb	r3, r3
 8000908:	2b00      	cmp	r3, #0
 800090a:	d000      	beq.n	800090e <application+0xee>
    {
        while(1);
 800090c:	e7fe      	b.n	800090c <application+0xec>
    }

    gKeyDetectQ = xQueueCreate( 3, sizeof(keyReadStatus_t));    //!< 3 number of keys can stored inside.
 800090e:	2200      	movs	r2, #0
 8000910:	2114      	movs	r1, #20
 8000912:	2003      	movs	r0, #3
 8000914:	f003 fb28 	bl	8003f68 <xQueueGenericCreate>
 8000918:	0002      	movs	r2, r0
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <application+0x124>)
 800091c:	601a      	str	r2, [r3, #0]
    if( NULL == gKeyDetectQ )
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <application+0x124>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	d100      	bne.n	8000928 <application+0x108>
    {
        while(1);
 8000926:	e7fe      	b.n	8000926 <application+0x106>
    }

    xMutexDebugUart = xSemaphoreCreateMutex();
 8000928:	2001      	movs	r0, #1
 800092a:	f003 fb8b 	bl	8004044 <xQueueCreateMutex>
 800092e:	0002      	movs	r2, r0
 8000930:	4b05      	ldr	r3, [pc, #20]	; (8000948 <application+0x128>)
 8000932:	601a      	str	r2, [r3, #0]
        // TURN ON ERROR LED;
    }


    /* Start scheduler */
    osKernelStart();
 8000934:	f003 f9d7 	bl	8003ce6 <osKernelStart>
}
 8000938:	46c0      	nop			; (mov r8, r8)
 800093a:	46bd      	mov	sp, r7
 800093c:	b003      	add	sp, #12
 800093e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000940:	08005808 	.word	0x08005808
 8000944:	20001244 	.word	0x20001244
 8000948:	20000060 	.word	0x20000060

0800094c <buttonTask>:
 *Para1:- argument
 *Return:-N/A
 *Details:-  Main task body for button..
 **********************************************************************************/
void buttonTask(void const * argument)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b085      	sub	sp, #20
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000954:	230f      	movs	r3, #15
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	2200      	movs	r2, #0
 800095a:	701a      	strb	r2, [r3, #0]
    bool tempPinStatus;

    (void) argument;            //!< Just ignore the parameter.
    intiButton();               //!< Initialize button
 800095c:	f000 f8a6 	bl	8000aac <intiButton>

    for ( ;; )
    {
        mKeyStatus.newStatus = 0;      //!< Reset before read all key
 8000960:	4b4e      	ldr	r3, [pc, #312]	; (8000a9c <buttonTask+0x150>)
 8000962:	2200      	movs	r2, #0
 8000964:	605a      	str	r2, [r3, #4]

        for ( i = CLEAR; i < MAXIMUM_BUTTON; i++ )      //!< Read all the keys one-by-one.
 8000966:	230f      	movs	r3, #15
 8000968:	18fb      	adds	r3, r7, r3
 800096a:	2200      	movs	r2, #0
 800096c:	701a      	strb	r2, [r3, #0]
 800096e:	e08a      	b.n	8000a86 <buttonTask+0x13a>
        {
            tempPinStatus = READ_PIN(key [ i ].port, key [ i ].pinConfig.Pin);
 8000970:	240f      	movs	r4, #15
 8000972:	193b      	adds	r3, r7, r4
 8000974:	781a      	ldrb	r2, [r3, #0]
 8000976:	494a      	ldr	r1, [pc, #296]	; (8000aa0 <buttonTask+0x154>)
 8000978:	0013      	movs	r3, r2
 800097a:	00db      	lsls	r3, r3, #3
 800097c:	1a9b      	subs	r3, r3, r2
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	5858      	ldr	r0, [r3, r1]
 8000982:	193b      	adds	r3, r7, r4
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	4946      	ldr	r1, [pc, #280]	; (8000aa0 <buttonTask+0x154>)
 8000988:	0013      	movs	r3, r2
 800098a:	00db      	lsls	r3, r3, #3
 800098c:	1a9b      	subs	r3, r3, r2
 800098e:	009b      	lsls	r3, r3, #2
 8000990:	18cb      	adds	r3, r1, r3
 8000992:	3304      	adds	r3, #4
 8000994:	681b      	ldr	r3, [r3, #0]
 8000996:	b29b      	uxth	r3, r3
 8000998:	0019      	movs	r1, r3
 800099a:	f000 ffd1 	bl	8001940 <HAL_GPIO_ReadPin>
 800099e:	0003      	movs	r3, r0
 80009a0:	001a      	movs	r2, r3
 80009a2:	200e      	movs	r0, #14
 80009a4:	183b      	adds	r3, r7, r0
 80009a6:	1e51      	subs	r1, r2, #1
 80009a8:	418a      	sbcs	r2, r1
 80009aa:	701a      	strb	r2, [r3, #0]

            if ( tempPinStatus )           //!< Update pin status / voltage level on corresponding bit.
 80009ac:	183b      	adds	r3, r7, r0
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d009      	beq.n	80009c8 <buttonTask+0x7c>
            {
                mKeyStatus.newStatus = (SET << i);
 80009b4:	230f      	movs	r3, #15
 80009b6:	18fb      	adds	r3, r7, r3
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	2201      	movs	r2, #1
 80009bc:	409a      	lsls	r2, r3
 80009be:	0013      	movs	r3, r2
 80009c0:	001a      	movs	r2, r3
 80009c2:	4b36      	ldr	r3, [pc, #216]	; (8000a9c <buttonTask+0x150>)
 80009c4:	605a      	str	r2, [r3, #4]
 80009c6:	e00b      	b.n	80009e0 <buttonTask+0x94>
            }
            else
            {
                mKeyStatus.newStatus &= ~(SET << i);
 80009c8:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <buttonTask+0x150>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	220f      	movs	r2, #15
 80009ce:	18ba      	adds	r2, r7, r2
 80009d0:	7812      	ldrb	r2, [r2, #0]
 80009d2:	2101      	movs	r1, #1
 80009d4:	4091      	lsls	r1, r2
 80009d6:	000a      	movs	r2, r1
 80009d8:	43d2      	mvns	r2, r2
 80009da:	401a      	ands	r2, r3
 80009dc:	4b2f      	ldr	r3, [pc, #188]	; (8000a9c <buttonTask+0x150>)
 80009de:	605a      	str	r2, [r3, #4]
            }



			if ( mKeyStatus.newStatus != mKeyStatus.currentStatus )             //!< Some key pressed now !
 80009e0:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <buttonTask+0x150>)
 80009e2:	685a      	ldr	r2, [r3, #4]
 80009e4:	4b2d      	ldr	r3, [pc, #180]	; (8000a9c <buttonTask+0x150>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d046      	beq.n	8000a7a <buttonTask+0x12e>
			{
				if ( mKeyStatus.latchedStatus == mKeyStatus.newStatus )          //!< if it was detected before
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <buttonTask+0x150>)
 80009ee:	689a      	ldr	r2, [r3, #8]
 80009f0:	4b2a      	ldr	r3, [pc, #168]	; (8000a9c <buttonTask+0x150>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	d13c      	bne.n	8000a72 <buttonTask+0x126>
				{
					if ( KEY_DEBOUNCE_CNT <= mKeyStatus.debounceCnt++ )
 80009f8:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <buttonTask+0x150>)
 80009fa:	7c1b      	ldrb	r3, [r3, #16]
 80009fc:	1c5a      	adds	r2, r3, #1
 80009fe:	b2d1      	uxtb	r1, r2
 8000a00:	4a26      	ldr	r2, [pc, #152]	; (8000a9c <buttonTask+0x150>)
 8000a02:	7411      	strb	r1, [r2, #16]
 8000a04:	2b02      	cmp	r3, #2
 8000a06:	d938      	bls.n	8000a7a <buttonTask+0x12e>
					{
						mKeyStatus.whichKey = mKeyStatus.currentStatus ^ mKeyStatus.newStatus;
 8000a08:	4b24      	ldr	r3, [pc, #144]	; (8000a9c <buttonTask+0x150>)
 8000a0a:	681a      	ldr	r2, [r3, #0]
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <buttonTask+0x150>)
 8000a0e:	685b      	ldr	r3, [r3, #4]
 8000a10:	405a      	eors	r2, r3
 8000a12:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <buttonTask+0x150>)
 8000a14:	60da      	str	r2, [r3, #12]
						mKeyStatus.currentStatus = mKeyStatus.latchedStatus;        //!< Update detected/accepted key
 8000a16:	4b21      	ldr	r3, [pc, #132]	; (8000a9c <buttonTask+0x150>)
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <buttonTask+0x150>)
 8000a1c:	601a      	str	r2, [r3, #0]


						//mKeyStatus.keyStat = (tempPinStatus == key[i].defaultState ) ? PRESSED : RELEASED;

						if ( key[i].keyDetectStat == tempPinStatus )
 8000a1e:	230f      	movs	r3, #15
 8000a20:	18fb      	adds	r3, r7, r3
 8000a22:	781a      	ldrb	r2, [r3, #0]
 8000a24:	491e      	ldr	r1, [pc, #120]	; (8000aa0 <buttonTask+0x154>)
 8000a26:	0013      	movs	r3, r2
 8000a28:	00db      	lsls	r3, r3, #3
 8000a2a:	1a9b      	subs	r3, r3, r2
 8000a2c:	009b      	lsls	r3, r3, #2
 8000a2e:	18cb      	adds	r3, r1, r3
 8000a30:	3319      	adds	r3, #25
 8000a32:	781a      	ldrb	r2, [r3, #0]
 8000a34:	230e      	movs	r3, #14
 8000a36:	18fb      	adds	r3, r7, r3
 8000a38:	781b      	ldrb	r3, [r3, #0]
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d112      	bne.n	8000a64 <buttonTask+0x118>
						{
							keyMsgData.whichKey = 0;
 8000a3e:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <buttonTask+0x158>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	711a      	strb	r2, [r3, #4]

								do
								{
									mKeyStatus.whichKey>>=1;
 8000a44:	4b15      	ldr	r3, [pc, #84]	; (8000a9c <buttonTask+0x150>)
 8000a46:	68db      	ldr	r3, [r3, #12]
 8000a48:	085a      	lsrs	r2, r3, #1
 8000a4a:	4b14      	ldr	r3, [pc, #80]	; (8000a9c <buttonTask+0x150>)
 8000a4c:	60da      	str	r2, [r3, #12]
								}while ( RESET != mKeyStatus.whichKey );
 8000a4e:	4b13      	ldr	r3, [pc, #76]	; (8000a9c <buttonTask+0x150>)
 8000a50:	68db      	ldr	r3, [r3, #12]
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d1f6      	bne.n	8000a44 <buttonTask+0xf8>

							// SEND RELEASE MESSAGE
							xQueueSend( gKeyDetectQ, &mKeyStatus, CLEAR);       //!< Send Message immediately
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <buttonTask+0x15c>)
 8000a58:	6818      	ldr	r0, [r3, #0]
 8000a5a:	4910      	ldr	r1, [pc, #64]	; (8000a9c <buttonTask+0x150>)
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	2200      	movs	r2, #0
 8000a60:	f003 fb0c 	bl	800407c <xQueueGenericSend>
						}

						mKeyStatus.debounceCnt = 0;
 8000a64:	4b0d      	ldr	r3, [pc, #52]	; (8000a9c <buttonTask+0x150>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	741a      	strb	r2, [r3, #16]
						mKeyStatus.latchedStatus = 0;
 8000a6a:	4b0c      	ldr	r3, [pc, #48]	; (8000a9c <buttonTask+0x150>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	e003      	b.n	8000a7a <buttonTask+0x12e>
					}
				}
				else
				{
					mKeyStatus.latchedStatus = mKeyStatus.newStatus;        //!< first change detected.
 8000a72:	4b0a      	ldr	r3, [pc, #40]	; (8000a9c <buttonTask+0x150>)
 8000a74:	685a      	ldr	r2, [r3, #4]
 8000a76:	4b09      	ldr	r3, [pc, #36]	; (8000a9c <buttonTask+0x150>)
 8000a78:	609a      	str	r2, [r3, #8]
        for ( i = CLEAR; i < MAXIMUM_BUTTON; i++ )      //!< Read all the keys one-by-one.
 8000a7a:	210f      	movs	r1, #15
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	781a      	ldrb	r2, [r3, #0]
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	3201      	adds	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
 8000a86:	230f      	movs	r3, #15
 8000a88:	18fb      	adds	r3, r7, r3
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d100      	bne.n	8000a92 <buttonTask+0x146>
 8000a90:	e76e      	b.n	8000970 <buttonTask+0x24>
				}
			}

        }

        vTaskDelay(KEY_POLLING_INTERVEL);
 8000a92:	200a      	movs	r0, #10
 8000a94:	f003 fec4 	bl	8004820 <vTaskDelay>
        mKeyStatus.newStatus = 0;      //!< Reset before read all key
 8000a98:	e762      	b.n	8000960 <buttonTask+0x14>
 8000a9a:	46c0      	nop			; (mov r8, r8)
 8000a9c:	20001248 	.word	0x20001248
 8000aa0:	08005874 	.word	0x08005874
 8000aa4:	2000125c 	.word	0x2000125c
 8000aa8:	20001244 	.word	0x20001244

08000aac <intiButton>:
 *Return:-N/A
 *Details:-  Initialize all the button gpio pins as per the configuration structure data.
 *NOTE : THIS INITIALIZATION BLOCK MAY BE NEED CHANGE FOR DIFFERENT PLATFORM/DRIVER
 **********************************************************************************/
void intiButton(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	701a      	strb	r2, [r3, #0]

    for ( i = 0; i < MAXIMUM_BUTTON; i++ )
 8000ab8:	1dfb      	adds	r3, r7, #7
 8000aba:	2200      	movs	r2, #0
 8000abc:	701a      	strb	r2, [r3, #0]
 8000abe:	e018      	b.n	8000af2 <intiButton+0x46>
    {
        PIN_INIT( (key [ i ].port), &(key[i].pinConfig));      //!< Macro defined in buttonWrapper.h. May be need to change if required.
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	781a      	ldrb	r2, [r3, #0]
 8000ac4:	490f      	ldr	r1, [pc, #60]	; (8000b04 <intiButton+0x58>)
 8000ac6:	0013      	movs	r3, r2
 8000ac8:	00db      	lsls	r3, r3, #3
 8000aca:	1a9b      	subs	r3, r3, r2
 8000acc:	009b      	lsls	r3, r3, #2
 8000ace:	5858      	ldr	r0, [r3, r1]
 8000ad0:	1dfb      	adds	r3, r7, #7
 8000ad2:	781a      	ldrb	r2, [r3, #0]
 8000ad4:	0013      	movs	r3, r2
 8000ad6:	00db      	lsls	r3, r3, #3
 8000ad8:	1a9b      	subs	r3, r3, r2
 8000ada:	009b      	lsls	r3, r3, #2
 8000adc:	4a09      	ldr	r2, [pc, #36]	; (8000b04 <intiButton+0x58>)
 8000ade:	189b      	adds	r3, r3, r2
 8000ae0:	3304      	adds	r3, #4
 8000ae2:	0019      	movs	r1, r3
 8000ae4:	f000 fcf8 	bl	80014d8 <HAL_GPIO_Init>
    for ( i = 0; i < MAXIMUM_BUTTON; i++ )
 8000ae8:	1dfb      	adds	r3, r7, #7
 8000aea:	781a      	ldrb	r2, [r3, #0]
 8000aec:	1dfb      	adds	r3, r7, #7
 8000aee:	3201      	adds	r2, #1
 8000af0:	701a      	strb	r2, [r3, #0]
 8000af2:	1dfb      	adds	r3, r7, #7
 8000af4:	781b      	ldrb	r3, [r3, #0]
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d0e2      	beq.n	8000ac0 <intiButton+0x14>
    }
}
 8000afa:	46c0      	nop			; (mov r8, r8)
 8000afc:	46bd      	mov	sp, r7
 8000afe:	b002      	add	sp, #8
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			; (mov r8, r8)
 8000b04:	08005874 	.word	0x08005874

08000b08 <debugconsoleTask>:
uint8_t name[] = "Jithu...";

uint32_t number = 0;

void debugconsoleTask(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0


    if( ! debugConsoleInit() )
 8000b0c:	f000 f842 	bl	8000b94 <debugConsoleInit>
 8000b10:	0003      	movs	r3, r0
 8000b12:	001a      	movs	r2, r3
 8000b14:	2301      	movs	r3, #1
 8000b16:	4053      	eors	r3, r2
 8000b18:	b2db      	uxtb	r3, r3
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d000      	beq.n	8000b20 <debugconsoleTask+0x18>
    {
        while(1);           ///!< If uart initialization failed, don't run the task
 8000b1e:	e7fe      	b.n	8000b1e <debugconsoleTask+0x16>
    }

    for (;;)
    {
        debugTextValue("\nNOW I CAN PRINT DECIMAL\t", number, DECIMAL );
 8000b20:	4b17      	ldr	r3, [pc, #92]	; (8000b80 <debugconsoleTask+0x78>)
 8000b22:	6819      	ldr	r1, [r3, #0]
 8000b24:	4b17      	ldr	r3, [pc, #92]	; (8000b84 <debugconsoleTask+0x7c>)
 8000b26:	220a      	movs	r2, #10
 8000b28:	0018      	movs	r0, r3
 8000b2a:	f000 f89f 	bl	8000c6c <debugTextValue>
        vTaskDelay(10);
 8000b2e:	200a      	movs	r0, #10
 8000b30:	f003 fe76 	bl	8004820 <vTaskDelay>
        debugTextValue("\nNOW I CAN PRINT HEX\t", number, HEX );
 8000b34:	4b12      	ldr	r3, [pc, #72]	; (8000b80 <debugconsoleTask+0x78>)
 8000b36:	6819      	ldr	r1, [r3, #0]
 8000b38:	4b13      	ldr	r3, [pc, #76]	; (8000b88 <debugconsoleTask+0x80>)
 8000b3a:	2210      	movs	r2, #16
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	f000 f895 	bl	8000c6c <debugTextValue>
        vTaskDelay(10);
 8000b42:	200a      	movs	r0, #10
 8000b44:	f003 fe6c 	bl	8004820 <vTaskDelay>
        debugTextValue("\nNOW I CAN PRINT BINARY\t", number, BINARY );
 8000b48:	4b0d      	ldr	r3, [pc, #52]	; (8000b80 <debugconsoleTask+0x78>)
 8000b4a:	6819      	ldr	r1, [r3, #0]
 8000b4c:	4b0f      	ldr	r3, [pc, #60]	; (8000b8c <debugconsoleTask+0x84>)
 8000b4e:	2202      	movs	r2, #2
 8000b50:	0018      	movs	r0, r3
 8000b52:	f000 f88b 	bl	8000c6c <debugTextValue>
        number++;
 8000b56:	4b0a      	ldr	r3, [pc, #40]	; (8000b80 <debugconsoleTask+0x78>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <debugconsoleTask+0x78>)
 8000b5e:	601a      	str	r2, [r3, #0]

    	if( HAL_UART_ERROR_NONE != HAL_UART_GetError(&huart2) )
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <debugconsoleTask+0x88>)
 8000b62:	0018      	movs	r0, r3
 8000b64:	f002 f813 	bl	8002b8e <HAL_UART_GetError>
 8000b68:	1e03      	subs	r3, r0, #0
 8000b6a:	d005      	beq.n	8000b78 <debugconsoleTask+0x70>
    	{
    		HAL_UART_DeInit(&huart2);
 8000b6c:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <debugconsoleTask+0x88>)
 8000b6e:	0018      	movs	r0, r3
 8000b70:	f001 fdb8 	bl	80026e4 <HAL_UART_DeInit>
    		debugConsoleInit();
 8000b74:	f000 f80e 	bl	8000b94 <debugConsoleInit>
    	}

        vTaskDelay(200);
 8000b78:	20c8      	movs	r0, #200	; 0xc8
 8000b7a:	f003 fe51 	bl	8004820 <vTaskDelay>
        debugTextValue("\nNOW I CAN PRINT DECIMAL\t", number, DECIMAL );
 8000b7e:	e7cf      	b.n	8000b20 <debugconsoleTask+0x18>
 8000b80:	20000068 	.word	0x20000068
 8000b84:	08005740 	.word	0x08005740
 8000b88:	0800575c 	.word	0x0800575c
 8000b8c:	08005774 	.word	0x08005774
 8000b90:	200011b8 	.word	0x200011b8

08000b94 <debugConsoleInit>:
 *Para1:- N/A
 *Return:-N/A
 *Details:-  Initialize the uart used for debug.
 **********************************************************************************/
static bool debugConsoleInit( void )
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0

    bool returnValue = true;
 8000b9a:	1dfb      	adds	r3, r7, #7
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
     /* USER CODE END USART2_Init  */
     huart2.Instance = USART2;
 8000ba0:	4b1a      	ldr	r3, [pc, #104]	; (8000c0c <debugConsoleInit+0x78>)
 8000ba2:	4a1b      	ldr	r2, [pc, #108]	; (8000c10 <debugConsoleInit+0x7c>)
 8000ba4:	601a      	str	r2, [r3, #0]
     huart2.Init.BaudRate = 115200;
 8000ba6:	4b19      	ldr	r3, [pc, #100]	; (8000c0c <debugConsoleInit+0x78>)
 8000ba8:	22e1      	movs	r2, #225	; 0xe1
 8000baa:	0252      	lsls	r2, r2, #9
 8000bac:	605a      	str	r2, [r3, #4]
     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000bae:	4b17      	ldr	r3, [pc, #92]	; (8000c0c <debugConsoleInit+0x78>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	609a      	str	r2, [r3, #8]
     huart2.Init.StopBits = UART_STOPBITS_1;
 8000bb4:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <debugConsoleInit+0x78>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	60da      	str	r2, [r3, #12]
     huart2.Init.Parity = UART_PARITY_NONE;
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <debugConsoleInit+0x78>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	611a      	str	r2, [r3, #16]
     huart2.Init.Mode = UART_MODE_TX_RX;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <debugConsoleInit+0x78>)
 8000bc2:	220c      	movs	r2, #12
 8000bc4:	615a      	str	r2, [r3, #20]
     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <debugConsoleInit+0x78>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	619a      	str	r2, [r3, #24]
     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <debugConsoleInit+0x78>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	61da      	str	r2, [r3, #28]
     if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <debugConsoleInit+0x78>)
 8000bd4:	0018      	movs	r0, r3
 8000bd6:	f001 fd2f 	bl	8002638 <HAL_UART_Init>
 8000bda:	1e03      	subs	r3, r0, #0
 8000bdc:	d003      	beq.n	8000be6 <debugConsoleInit+0x52>
     {
         returnValue = false;
 8000bde:	1dfb      	adds	r3, r7, #7
 8000be0:	2200      	movs	r2, #0
 8000be2:	701a      	strb	r2, [r3, #0]
 8000be4:	e007      	b.n	8000bf6 <debugConsoleInit+0x62>
       // Error_Handler(); NEED TO ADD error handling function.
     }else
     {
         __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 8000be6:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <debugConsoleInit+0x78>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b07      	ldr	r3, [pc, #28]	; (8000c0c <debugConsoleInit+0x78>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	2140      	movs	r1, #64	; 0x40
 8000bf2:	430a      	orrs	r2, r1
 8000bf4:	601a      	str	r2, [r3, #0]
     }



     mDebugConInit = returnValue;
 8000bf6:	4b07      	ldr	r3, [pc, #28]	; (8000c14 <debugConsoleInit+0x80>)
 8000bf8:	1dfa      	adds	r2, r7, #7
 8000bfa:	7812      	ldrb	r2, [r2, #0]
 8000bfc:	701a      	strb	r2, [r3, #0]
     return ( returnValue );
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	781b      	ldrb	r3, [r3, #0]

}
 8000c02:	0018      	movs	r0, r3
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	200011b8 	.word	0x200011b8
 8000c10:	40004400 	.word	0x40004400
 8000c14:	20000064 	.word	0x20000064

08000c18 <debugText>:
 *Para1:- debugMsg
 *Return:-N/A
 *Details:-
 **********************************************************************************/
bool debugText( const char *debugMsg )
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	b084      	sub	sp, #16
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
    char *msg =(char*) debugMsg;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	60bb      	str	r3, [r7, #8]
    bool returnValue = false;
 8000c24:	230f      	movs	r3, #15
 8000c26:	18fb      	adds	r3, r7, r3
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]

    if( mDebugConInit )
 8000c2c:	4b0d      	ldr	r3, [pc, #52]	; (8000c64 <debugText+0x4c>)
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d010      	beq.n	8000c56 <debugText+0x3e>
    {
        if( HAL_OK == HAL_UART_Transmit_IT(&huart2, (uint8_t *)msg, strlen(msg)) )
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	0018      	movs	r0, r3
 8000c38:	f7ff fa66 	bl	8000108 <strlen>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	b29a      	uxth	r2, r3
 8000c40:	68b9      	ldr	r1, [r7, #8]
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <debugText+0x50>)
 8000c44:	0018      	movs	r0, r3
 8000c46:	f001 fd87 	bl	8002758 <HAL_UART_Transmit_IT>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d103      	bne.n	8000c56 <debugText+0x3e>
        {
            returnValue = true;
 8000c4e:	230f      	movs	r3, #15
 8000c50:	18fb      	adds	r3, r7, r3
 8000c52:	2201      	movs	r2, #1
 8000c54:	701a      	strb	r2, [r3, #0]
        }
    }

    return ( returnValue );
 8000c56:	230f      	movs	r3, #15
 8000c58:	18fb      	adds	r3, r7, r3
 8000c5a:	781b      	ldrb	r3, [r3, #0]
}
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	b004      	add	sp, #16
 8000c62:	bd80      	pop	{r7, pc}
 8000c64:	20000064 	.word	0x20000064
 8000c68:	200011b8 	.word	0x200011b8

08000c6c <debugTextValue>:
 *Para3:- baseValue
 *Return:-N/A
 *Details:-
 **********************************************************************************/
bool debugTextValue( const char *debugMsg, uint32_t value, uint8_t baseValue )
{
 8000c6c:	b590      	push	{r4, r7, lr}
 8000c6e:	b087      	sub	sp, #28
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	701a      	strb	r2, [r3, #0]
    bool returnValue = false;
 8000c7a:	2117      	movs	r1, #23
 8000c7c:	187b      	adds	r3, r7, r1
 8000c7e:	2200      	movs	r2, #0
 8000c80:	701a      	strb	r2, [r3, #0]

    returnValue = debugText( debugMsg );
 8000c82:	187c      	adds	r4, r7, r1
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	0018      	movs	r0, r3
 8000c88:	f7ff ffc6 	bl	8000c18 <debugText>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	7023      	strb	r3, [r4, #0]

    while(   HAL_UART_STATE_READY != HAL_UART_GetState(&huart2) );
 8000c90:	46c0      	nop			; (mov r8, r8)
 8000c92:	4b0c      	ldr	r3, [pc, #48]	; (8000cc4 <debugTextValue+0x58>)
 8000c94:	0018      	movs	r0, r3
 8000c96:	f001 ff67 	bl	8002b68 <HAL_UART_GetState>
 8000c9a:	0003      	movs	r3, r0
 8000c9c:	2b20      	cmp	r3, #32
 8000c9e:	d1f8      	bne.n	8000c92 <debugTextValue+0x26>

    IntToText(value, baseValue, tempBuff);
 8000ca0:	4a09      	ldr	r2, [pc, #36]	; (8000cc8 <debugTextValue+0x5c>)
 8000ca2:	1dfb      	adds	r3, r7, #7
 8000ca4:	7819      	ldrb	r1, [r3, #0]
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	0018      	movs	r0, r3
 8000caa:	f000 f80f 	bl	8000ccc <IntToText>
    debugText( tempBuff );
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <debugTextValue+0x5c>)
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	f7ff ffb1 	bl	8000c18 <debugText>

    return returnValue;
 8000cb6:	2317      	movs	r3, #23
 8000cb8:	18fb      	adds	r3, r7, r3
 8000cba:	781b      	ldrb	r3, [r3, #0]
}
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	b007      	add	sp, #28
 8000cc2:	bd90      	pop	{r4, r7, pc}
 8000cc4:	200011b8 	.word	0x200011b8
 8000cc8:	20000004 	.word	0x20000004

08000ccc <IntToText>:
 *Para3:- str  ( pointer to buffer )
 *Return:-N/A
 *Details:-
 **********************************************************************************/
bool IntToText(uint32_t value, uint8_t base, char * str )
{
 8000ccc:	b590      	push	{r4, r7, lr}
 8000cce:	b089      	sub	sp, #36	; 0x24
 8000cd0:	af00      	add	r7, sp, #0
 8000cd2:	60f8      	str	r0, [r7, #12]
 8000cd4:	607a      	str	r2, [r7, #4]
 8000cd6:	230b      	movs	r3, #11
 8000cd8:	18fb      	adds	r3, r7, r3
 8000cda:	1c0a      	adds	r2, r1, #0
 8000cdc:	701a      	strb	r2, [r3, #0]
    uint32_t temp = 0;
 8000cde:	2300      	movs	r3, #0
 8000ce0:	617b      	str	r3, [r7, #20]
    uint8_t i = 0;
 8000ce2:	231f      	movs	r3, #31
 8000ce4:	18fb      	adds	r3, r7, r3
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	701a      	strb	r2, [r3, #0]
    uint32_t division = value;
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	61bb      	str	r3, [r7, #24]

    if( 0 == division )
 8000cee:	69bb      	ldr	r3, [r7, #24]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d14c      	bne.n	8000d8e <IntToText+0xc2>
    {
        *(str+i++) = temp|0x30;
 8000cf4:	697b      	ldr	r3, [r7, #20]
 8000cf6:	b2da      	uxtb	r2, r3
 8000cf8:	241f      	movs	r4, #31
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	781b      	ldrb	r3, [r3, #0]
 8000cfe:	1939      	adds	r1, r7, r4
 8000d00:	1c58      	adds	r0, r3, #1
 8000d02:	7008      	strb	r0, [r1, #0]
 8000d04:	0019      	movs	r1, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	185b      	adds	r3, r3, r1
 8000d0a:	2130      	movs	r1, #48	; 0x30
 8000d0c:	430a      	orrs	r2, r1
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	701a      	strb	r2, [r3, #0]
        *(str+i) = '\0';
 8000d12:	193b      	adds	r3, r7, r4
 8000d14:	781b      	ldrb	r3, [r3, #0]
 8000d16:	687a      	ldr	r2, [r7, #4]
 8000d18:	18d3      	adds	r3, r2, r3
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	701a      	strb	r2, [r3, #0]
 8000d1e:	e090      	b.n	8000e42 <IntToText+0x176>
    }else
    {
        while ( 0 != division )
        {
            temp = division%base;
 8000d20:	240b      	movs	r4, #11
 8000d22:	193b      	adds	r3, r7, r4
 8000d24:	781a      	ldrb	r2, [r3, #0]
 8000d26:	69bb      	ldr	r3, [r7, #24]
 8000d28:	0011      	movs	r1, r2
 8000d2a:	0018      	movs	r0, r3
 8000d2c:	f7ff fa7a 	bl	8000224 <__aeabi_uidivmod>
 8000d30:	000b      	movs	r3, r1
 8000d32:	617b      	str	r3, [r7, #20]
            division /= base;
 8000d34:	193b      	adds	r3, r7, r4
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	0019      	movs	r1, r3
 8000d3a:	69b8      	ldr	r0, [r7, #24]
 8000d3c:	f7ff f9ec 	bl	8000118 <__udivsi3>
 8000d40:	0003      	movs	r3, r0
 8000d42:	61bb      	str	r3, [r7, #24]

            if( ( base == HEX ) && (temp >= DECIMAL) )
 8000d44:	193b      	adds	r3, r7, r4
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	2b10      	cmp	r3, #16
 8000d4a:	d111      	bne.n	8000d70 <IntToText+0xa4>
 8000d4c:	697b      	ldr	r3, [r7, #20]
 8000d4e:	2b09      	cmp	r3, #9
 8000d50:	d90e      	bls.n	8000d70 <IntToText+0xa4>
            {
                *(str+i++) = (temp - DECIMAL ) + 'A';
 8000d52:	697b      	ldr	r3, [r7, #20]
 8000d54:	b2da      	uxtb	r2, r3
 8000d56:	211f      	movs	r1, #31
 8000d58:	187b      	adds	r3, r7, r1
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	1879      	adds	r1, r7, r1
 8000d5e:	1c58      	adds	r0, r3, #1
 8000d60:	7008      	strb	r0, [r1, #0]
 8000d62:	0019      	movs	r1, r3
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	185b      	adds	r3, r3, r1
 8000d68:	3237      	adds	r2, #55	; 0x37
 8000d6a:	b2d2      	uxtb	r2, r2
 8000d6c:	701a      	strb	r2, [r3, #0]
 8000d6e:	e00e      	b.n	8000d8e <IntToText+0xc2>
             }
            else
            {
                *(str+i++) = temp|0x30;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	b2da      	uxtb	r2, r3
 8000d74:	211f      	movs	r1, #31
 8000d76:	187b      	adds	r3, r7, r1
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	1879      	adds	r1, r7, r1
 8000d7c:	1c58      	adds	r0, r3, #1
 8000d7e:	7008      	strb	r0, [r1, #0]
 8000d80:	0019      	movs	r1, r3
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	185b      	adds	r3, r3, r1
 8000d86:	2130      	movs	r1, #48	; 0x30
 8000d88:	430a      	orrs	r2, r1
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	701a      	strb	r2, [r3, #0]
        while ( 0 != division )
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d1c5      	bne.n	8000d20 <IntToText+0x54>
            }
        }
       	if( base == HEX )
 8000d94:	230b      	movs	r3, #11
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	2b10      	cmp	r3, #16
 8000d9c:	d11f      	bne.n	8000dde <IntToText+0x112>
		{
			*(str+i++) = 'x';
 8000d9e:	201f      	movs	r0, #31
 8000da0:	183b      	adds	r3, r7, r0
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	183a      	adds	r2, r7, r0
 8000da6:	1c59      	adds	r1, r3, #1
 8000da8:	7011      	strb	r1, [r2, #0]
 8000daa:	001a      	movs	r2, r3
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	189b      	adds	r3, r3, r2
 8000db0:	2278      	movs	r2, #120	; 0x78
 8000db2:	701a      	strb	r2, [r3, #0]
			*(str+i++) = '0';
 8000db4:	183b      	adds	r3, r7, r0
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	183a      	adds	r2, r7, r0
 8000dba:	1c59      	adds	r1, r3, #1
 8000dbc:	7011      	strb	r1, [r2, #0]
 8000dbe:	001a      	movs	r2, r3
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	189b      	adds	r3, r3, r2
 8000dc4:	2230      	movs	r2, #48	; 0x30
 8000dc6:	701a      	strb	r2, [r3, #0]
			*(str+i++) = ' ';
 8000dc8:	183b      	adds	r3, r7, r0
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	183a      	adds	r2, r7, r0
 8000dce:	1c59      	adds	r1, r3, #1
 8000dd0:	7011      	strb	r1, [r2, #0]
 8000dd2:	001a      	movs	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	189b      	adds	r3, r3, r2
 8000dd8:	2220      	movs	r2, #32
 8000dda:	701a      	strb	r2, [r3, #0]
 8000ddc:	e023      	b.n	8000e26 <IntToText+0x15a>
		}else if( base == BINARY )
 8000dde:	230b      	movs	r3, #11
 8000de0:	18fb      	adds	r3, r7, r3
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b02      	cmp	r3, #2
 8000de6:	d11e      	bne.n	8000e26 <IntToText+0x15a>
		{
			*(str+i++) = '.';
 8000de8:	201f      	movs	r0, #31
 8000dea:	183b      	adds	r3, r7, r0
 8000dec:	781b      	ldrb	r3, [r3, #0]
 8000dee:	183a      	adds	r2, r7, r0
 8000df0:	1c59      	adds	r1, r3, #1
 8000df2:	7011      	strb	r1, [r2, #0]
 8000df4:	001a      	movs	r2, r3
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	189b      	adds	r3, r3, r2
 8000dfa:	222e      	movs	r2, #46	; 0x2e
 8000dfc:	701a      	strb	r2, [r3, #0]
			*(str+i++) = 'b';
 8000dfe:	183b      	adds	r3, r7, r0
 8000e00:	781b      	ldrb	r3, [r3, #0]
 8000e02:	183a      	adds	r2, r7, r0
 8000e04:	1c59      	adds	r1, r3, #1
 8000e06:	7011      	strb	r1, [r2, #0]
 8000e08:	001a      	movs	r2, r3
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	189b      	adds	r3, r3, r2
 8000e0e:	2262      	movs	r2, #98	; 0x62
 8000e10:	701a      	strb	r2, [r3, #0]
			*(str+i++) = ' ';
 8000e12:	183b      	adds	r3, r7, r0
 8000e14:	781b      	ldrb	r3, [r3, #0]
 8000e16:	183a      	adds	r2, r7, r0
 8000e18:	1c59      	adds	r1, r3, #1
 8000e1a:	7011      	strb	r1, [r2, #0]
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	189b      	adds	r3, r3, r2
 8000e22:	2220      	movs	r2, #32
 8000e24:	701a      	strb	r2, [r3, #0]
		}


        *(str+i) = '\0';
 8000e26:	211f      	movs	r1, #31
 8000e28:	187b      	adds	r3, r7, r1
 8000e2a:	781b      	ldrb	r3, [r3, #0]
 8000e2c:	687a      	ldr	r2, [r7, #4]
 8000e2e:	18d3      	adds	r3, r2, r3
 8000e30:	2200      	movs	r2, #0
 8000e32:	701a      	strb	r2, [r3, #0]
        reverseStr(str, i);
 8000e34:	187b      	adds	r3, r7, r1
 8000e36:	781a      	ldrb	r2, [r3, #0]
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	0011      	movs	r1, r2
 8000e3c:	0018      	movs	r0, r3
 8000e3e:	f000 f805 	bl	8000e4c <reverseStr>
    }


    return true;
 8000e42:	2301      	movs	r3, #1
}
 8000e44:	0018      	movs	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b009      	add	sp, #36	; 0x24
 8000e4a:	bd90      	pop	{r4, r7, pc}

08000e4c <reverseStr>:
 *Para2:- size of the string.
 *Return:-N/A
 *Details:-
 **********************************************************************************/
void reverseStr(char *str, uint8_t size)
{
 8000e4c:	b590      	push	{r4, r7, lr}
 8000e4e:	b085      	sub	sp, #20
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	000a      	movs	r2, r1
 8000e56:	1cfb      	adds	r3, r7, #3
 8000e58:	701a      	strb	r2, [r3, #0]
    uint8_t i = size-1;
 8000e5a:	210f      	movs	r1, #15
 8000e5c:	187b      	adds	r3, r7, r1
 8000e5e:	1cfa      	adds	r2, r7, #3
 8000e60:	7812      	ldrb	r2, [r2, #0]
 8000e62:	3a01      	subs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
    uint8_t j = 0;
 8000e66:	230e      	movs	r3, #14
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	701a      	strb	r2, [r3, #0]
    uint8_t temp = i;
 8000e6e:	230d      	movs	r3, #13
 8000e70:	18fb      	adds	r3, r7, r3
 8000e72:	187a      	adds	r2, r7, r1
 8000e74:	7812      	ldrb	r2, [r2, #0]
 8000e76:	701a      	strb	r2, [r3, #0]

    do
    {
        temp     = *(str+j);
 8000e78:	210e      	movs	r1, #14
 8000e7a:	187b      	adds	r3, r7, r1
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	687a      	ldr	r2, [r7, #4]
 8000e80:	18d2      	adds	r2, r2, r3
 8000e82:	240d      	movs	r4, #13
 8000e84:	193b      	adds	r3, r7, r4
 8000e86:	7812      	ldrb	r2, [r2, #0]
 8000e88:	701a      	strb	r2, [r3, #0]
        *(str+j) = *(str+i);
 8000e8a:	200f      	movs	r0, #15
 8000e8c:	183b      	adds	r3, r7, r0
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	687a      	ldr	r2, [r7, #4]
 8000e92:	18d2      	adds	r2, r2, r3
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	6879      	ldr	r1, [r7, #4]
 8000e9a:	18cb      	adds	r3, r1, r3
 8000e9c:	7812      	ldrb	r2, [r2, #0]
 8000e9e:	701a      	strb	r2, [r3, #0]
        *(str+i) = temp;
 8000ea0:	183b      	adds	r3, r7, r0
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	18d3      	adds	r3, r2, r3
 8000ea8:	193a      	adds	r2, r7, r4
 8000eaa:	7812      	ldrb	r2, [r2, #0]
 8000eac:	701a      	strb	r2, [r3, #0]
        if( i == 0 ) break;		//!<  NEED TO FIND A BETTER WAY TO HANDLE THE UNDERFLOW !
 8000eae:	183b      	adds	r3, r7, r0
 8000eb0:	781b      	ldrb	r3, [r3, #0]
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d018      	beq.n	8000ee8 <reverseStr+0x9c>
        i = i-1;
 8000eb6:	210f      	movs	r1, #15
 8000eb8:	187b      	adds	r3, r7, r1
 8000eba:	187a      	adds	r2, r7, r1
 8000ebc:	7812      	ldrb	r2, [r2, #0]
 8000ebe:	3a01      	subs	r2, #1
 8000ec0:	701a      	strb	r2, [r3, #0]
        j = j +1;
 8000ec2:	200e      	movs	r0, #14
 8000ec4:	183b      	adds	r3, r7, r0
 8000ec6:	183a      	adds	r2, r7, r0
 8000ec8:	7812      	ldrb	r2, [r2, #0]
 8000eca:	3201      	adds	r2, #1
 8000ecc:	701a      	strb	r2, [r3, #0]
        temp = (unsigned char) i/2;
 8000ece:	230d      	movs	r3, #13
 8000ed0:	18fb      	adds	r3, r7, r3
 8000ed2:	187a      	adds	r2, r7, r1
 8000ed4:	7812      	ldrb	r2, [r2, #0]
 8000ed6:	0852      	lsrs	r2, r2, #1
 8000ed8:	701a      	strb	r2, [r3, #0]
    }while( i > j );
 8000eda:	187a      	adds	r2, r7, r1
 8000edc:	183b      	adds	r3, r7, r0
 8000ede:	7812      	ldrb	r2, [r2, #0]
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	429a      	cmp	r2, r3
 8000ee4:	d8c8      	bhi.n	8000e78 <reverseStr+0x2c>

}
 8000ee6:	e000      	b.n	8000eea <reverseStr+0x9e>
        if( i == 0 ) break;		//!<  NEED TO FIND A BETTER WAY TO HANDLE THE UNDERFLOW !
 8000ee8:	46c0      	nop			; (mov r8, r8)
}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	46bd      	mov	sp, r7
 8000eee:	b005      	add	sp, #20
 8000ef0:	bd90      	pop	{r4, r7, pc}
	...

08000ef4 <ledTask>:
void ledTurnOff(  eLedName_t ledName  );

keyMsgData_t mkeyDetectedPtr;

void ledTask(void const * argument)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
    static char status = 0;
    (void) argument;            //!< Just ignore the parameter.

    intLed();               //!< Initialize Led
 8000efc:	f000 f828 	bl	8000f50 <intLed>


  for(;;)
  {
      while( 0 != uxQueueMessagesWaiting( gKeyDetectQ ))
 8000f00:	e018      	b.n	8000f34 <ledTask+0x40>
      {
          if( pdPASS == xQueueReceive( gKeyDetectQ, &mkeyDetectedPtr, 0) )
 8000f02:	4b10      	ldr	r3, [pc, #64]	; (8000f44 <ledTask+0x50>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4910      	ldr	r1, [pc, #64]	; (8000f48 <ledTask+0x54>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	0018      	movs	r0, r3
 8000f0c:	f003 f97a 	bl	8004204 <xQueueReceive>
 8000f10:	0003      	movs	r3, r0
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d10e      	bne.n	8000f34 <ledTask+0x40>
          {

              if( 0 == status )
 8000f16:	4b0d      	ldr	r3, [pc, #52]	; (8000f4c <ledTask+0x58>)
 8000f18:	781b      	ldrb	r3, [r3, #0]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d105      	bne.n	8000f2a <ledTask+0x36>
              {
                  status = 1;
 8000f1e:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <ledTask+0x58>)
 8000f20:	2201      	movs	r2, #1
 8000f22:	701a      	strb	r2, [r3, #0]
                  ledTurnOnAll();
 8000f24:	f000 f842 	bl	8000fac <ledTurnOnAll>
 8000f28:	e004      	b.n	8000f34 <ledTask+0x40>
              }else
              {
                  status = 0;
 8000f2a:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <ledTask+0x58>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	701a      	strb	r2, [r3, #0]
                  ledTurnOffAll();
 8000f30:	f000 f86c 	bl	800100c <ledTurnOffAll>
      while( 0 != uxQueueMessagesWaiting( gKeyDetectQ ))
 8000f34:	4b03      	ldr	r3, [pc, #12]	; (8000f44 <ledTask+0x50>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f003 fa18 	bl	800436e <uxQueueMessagesWaiting>
 8000f3e:	1e03      	subs	r3, r0, #0
 8000f40:	d1df      	bne.n	8000f02 <ledTask+0xe>
 8000f42:	e7f7      	b.n	8000f34 <ledTask+0x40>
 8000f44:	20001244 	.word	0x20001244
 8000f48:	20001264 	.word	0x20001264
 8000f4c:	2000006c 	.word	0x2000006c

08000f50 <intLed>:
 *Para1 :N/A
 *Return:N/A
 *Note: Initialize all LED pins configured on 'led' structure.
 ************************************************************************************/
void intLed(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8000f56:	1dfb      	adds	r3, r7, #7
 8000f58:	2200      	movs	r2, #0
 8000f5a:	701a      	strb	r2, [r3, #0]

    for ( i = 0; i < MAXIMUM_LED; i++ )
 8000f5c:	1dfb      	adds	r3, r7, #7
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
 8000f62:	e018      	b.n	8000f96 <intLed+0x46>
    {
        PIN_INIT( (led[ i ].port), &(led[i].pinConfig));      //!< Macro defined in buttonWrapper.h. May be need to change if required.
 8000f64:	1dfb      	adds	r3, r7, #7
 8000f66:	781a      	ldrb	r2, [r3, #0]
 8000f68:	490f      	ldr	r1, [pc, #60]	; (8000fa8 <intLed+0x58>)
 8000f6a:	0013      	movs	r3, r2
 8000f6c:	00db      	lsls	r3, r3, #3
 8000f6e:	1a9b      	subs	r3, r3, r2
 8000f70:	009b      	lsls	r3, r3, #2
 8000f72:	5858      	ldr	r0, [r3, r1]
 8000f74:	1dfb      	adds	r3, r7, #7
 8000f76:	781a      	ldrb	r2, [r3, #0]
 8000f78:	0013      	movs	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	1a9b      	subs	r3, r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <intLed+0x58>)
 8000f82:	189b      	adds	r3, r3, r2
 8000f84:	3304      	adds	r3, #4
 8000f86:	0019      	movs	r1, r3
 8000f88:	f000 faa6 	bl	80014d8 <HAL_GPIO_Init>
    for ( i = 0; i < MAXIMUM_LED; i++ )
 8000f8c:	1dfb      	adds	r3, r7, #7
 8000f8e:	781a      	ldrb	r2, [r3, #0]
 8000f90:	1dfb      	adds	r3, r7, #7
 8000f92:	3201      	adds	r2, #1
 8000f94:	701a      	strb	r2, [r3, #0]
 8000f96:	1dfb      	adds	r3, r7, #7
 8000f98:	781b      	ldrb	r3, [r3, #0]
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0e2      	beq.n	8000f64 <intLed+0x14>
    }
}
 8000f9e:	46c0      	nop			; (mov r8, r8)
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	b002      	add	sp, #8
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	46c0      	nop			; (mov r8, r8)
 8000fa8:	08005890 	.word	0x08005890

08000fac <ledTurnOnAll>:
 *Para1 :N/A
 *Return:N/A
 *Note: Turn ON all LEDs
 ************************************************************************************/
void ledTurnOnAll( void )
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8000fb2:	1dfb      	adds	r3, r7, #7
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	701a      	strb	r2, [r3, #0]

    for ( i = 0; i < MAXIMUM_LED; i++ )
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	701a      	strb	r2, [r3, #0]
 8000fbe:	e01b      	b.n	8000ff8 <ledTurnOnAll+0x4c>
    {
        WRITE_PIN((led[ i ].port), led[i].pinConfig.Pin, LED_ON );
 8000fc0:	1dfb      	adds	r3, r7, #7
 8000fc2:	781a      	ldrb	r2, [r3, #0]
 8000fc4:	4910      	ldr	r1, [pc, #64]	; (8001008 <ledTurnOnAll+0x5c>)
 8000fc6:	0013      	movs	r3, r2
 8000fc8:	00db      	lsls	r3, r3, #3
 8000fca:	1a9b      	subs	r3, r3, r2
 8000fcc:	009b      	lsls	r3, r3, #2
 8000fce:	5858      	ldr	r0, [r3, r1]
 8000fd0:	1dfb      	adds	r3, r7, #7
 8000fd2:	781a      	ldrb	r2, [r3, #0]
 8000fd4:	490c      	ldr	r1, [pc, #48]	; (8001008 <ledTurnOnAll+0x5c>)
 8000fd6:	0013      	movs	r3, r2
 8000fd8:	00db      	lsls	r3, r3, #3
 8000fda:	1a9b      	subs	r3, r3, r2
 8000fdc:	009b      	lsls	r3, r3, #2
 8000fde:	18cb      	adds	r3, r1, r3
 8000fe0:	3304      	adds	r3, #4
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	b29b      	uxth	r3, r3
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	0019      	movs	r1, r3
 8000fea:	f000 fcc6 	bl	800197a <HAL_GPIO_WritePin>
    for ( i = 0; i < MAXIMUM_LED; i++ )
 8000fee:	1dfb      	adds	r3, r7, #7
 8000ff0:	781a      	ldrb	r2, [r3, #0]
 8000ff2:	1dfb      	adds	r3, r7, #7
 8000ff4:	3201      	adds	r2, #1
 8000ff6:	701a      	strb	r2, [r3, #0]
 8000ff8:	1dfb      	adds	r3, r7, #7
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0df      	beq.n	8000fc0 <ledTurnOnAll+0x14>
    }
}
 8001000:	46c0      	nop			; (mov r8, r8)
 8001002:	46bd      	mov	sp, r7
 8001004:	b002      	add	sp, #8
 8001006:	bd80      	pop	{r7, pc}
 8001008:	08005890 	.word	0x08005890

0800100c <ledTurnOffAll>:
 *Para1 :N/A
 *Return:N/A
 *Note: Turn OFF all LEDs
 ************************************************************************************/
void ledTurnOffAll( void )
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]

    for ( i = 0; i < MAXIMUM_LED; i++ )
 8001018:	1dfb      	adds	r3, r7, #7
 800101a:	2200      	movs	r2, #0
 800101c:	701a      	strb	r2, [r3, #0]
 800101e:	e01b      	b.n	8001058 <ledTurnOffAll+0x4c>
    {
        WRITE_PIN((led[i].port), led[i].pinConfig.Pin, LED_OFF );
 8001020:	1dfb      	adds	r3, r7, #7
 8001022:	781a      	ldrb	r2, [r3, #0]
 8001024:	4910      	ldr	r1, [pc, #64]	; (8001068 <ledTurnOffAll+0x5c>)
 8001026:	0013      	movs	r3, r2
 8001028:	00db      	lsls	r3, r3, #3
 800102a:	1a9b      	subs	r3, r3, r2
 800102c:	009b      	lsls	r3, r3, #2
 800102e:	5858      	ldr	r0, [r3, r1]
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	781a      	ldrb	r2, [r3, #0]
 8001034:	490c      	ldr	r1, [pc, #48]	; (8001068 <ledTurnOffAll+0x5c>)
 8001036:	0013      	movs	r3, r2
 8001038:	00db      	lsls	r3, r3, #3
 800103a:	1a9b      	subs	r3, r3, r2
 800103c:	009b      	lsls	r3, r3, #2
 800103e:	18cb      	adds	r3, r1, r3
 8001040:	3304      	adds	r3, #4
 8001042:	681b      	ldr	r3, [r3, #0]
 8001044:	b29b      	uxth	r3, r3
 8001046:	2200      	movs	r2, #0
 8001048:	0019      	movs	r1, r3
 800104a:	f000 fc96 	bl	800197a <HAL_GPIO_WritePin>
    for ( i = 0; i < MAXIMUM_LED; i++ )
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781a      	ldrb	r2, [r3, #0]
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	3201      	adds	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	d0df      	beq.n	8001020 <ledTurnOffAll+0x14>
    }
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	b002      	add	sp, #8
 8001066:	bd80      	pop	{r7, pc}
 8001068:	08005890 	.word	0x08005890

0800106c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800106e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001070:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001072:	e003      	b.n	800107c <LoopCopyDataInit>

08001074 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001074:	4b0c      	ldr	r3, [pc, #48]	; (80010a8 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001076:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001078:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800107a:	3104      	adds	r1, #4

0800107c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800107c:	480b      	ldr	r0, [pc, #44]	; (80010ac <LoopForever+0xa>)
  ldr r3, =_edata
 800107e:	4b0c      	ldr	r3, [pc, #48]	; (80010b0 <LoopForever+0xe>)
  adds r2, r0, r1
 8001080:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001082:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001084:	d3f6      	bcc.n	8001074 <CopyDataInit>
  ldr r2, =_sbss
 8001086:	4a0b      	ldr	r2, [pc, #44]	; (80010b4 <LoopForever+0x12>)
  b LoopFillZerobss
 8001088:	e002      	b.n	8001090 <LoopFillZerobss>

0800108a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  str  r3, [r2]
 800108c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800108e:	3204      	adds	r2, #4

08001090 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001090:	4b09      	ldr	r3, [pc, #36]	; (80010b8 <LoopForever+0x16>)
  cmp r2, r3
 8001092:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001094:	d3f9      	bcc.n	800108a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001096:	f7ff fbb7 	bl	8000808 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800109a:	f004 faff 	bl	800569c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800109e:	f7ff f9b1 	bl	8000404 <main>

080010a2 <LoopForever>:

LoopForever:
    b LoopForever
 80010a2:	e7fe      	b.n	80010a2 <LoopForever>
  ldr   r0, =_estack
 80010a4:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 80010a8:	080058b4 	.word	0x080058b4
  ldr r0, =_sdata
 80010ac:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80010b0:	20000044 	.word	0x20000044
  ldr r2, =_sbss
 80010b4:	20000044 	.word	0x20000044
  ldr r3, = _ebss
 80010b8:	20001270 	.word	0x20001270

080010bc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010bc:	e7fe      	b.n	80010bc <ADC1_IRQHandler>
	...

080010c0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b082      	sub	sp, #8
 80010c4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010c6:	1dfb      	adds	r3, r7, #7
 80010c8:	2200      	movs	r2, #0
 80010ca:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010cc:	4b0b      	ldr	r3, [pc, #44]	; (80010fc <HAL_Init+0x3c>)
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_Init+0x3c>)
 80010d2:	2180      	movs	r1, #128	; 0x80
 80010d4:	0049      	lsls	r1, r1, #1
 80010d6:	430a      	orrs	r2, r1
 80010d8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010da:	2003      	movs	r0, #3
 80010dc:	f000 f810 	bl	8001100 <HAL_InitTick>
 80010e0:	1e03      	subs	r3, r0, #0
 80010e2:	d003      	beq.n	80010ec <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010e4:	1dfb      	adds	r3, r7, #7
 80010e6:	2201      	movs	r2, #1
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	e001      	b.n	80010f0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010ec:	f7ff facc 	bl	8000688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	781b      	ldrb	r3, [r3, #0]
}
 80010f4:	0018      	movs	r0, r3
 80010f6:	46bd      	mov	sp, r7
 80010f8:	b002      	add	sp, #8
 80010fa:	bd80      	pop	{r7, pc}
 80010fc:	40022000 	.word	0x40022000

08001100 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001100:	b590      	push	{r4, r7, lr}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001108:	230f      	movs	r3, #15
 800110a:	18fb      	adds	r3, r7, r3
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <HAL_InitTick+0x88>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	2b00      	cmp	r3, #0
 8001116:	d02b      	beq.n	8001170 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8001118:	4b1c      	ldr	r3, [pc, #112]	; (800118c <HAL_InitTick+0x8c>)
 800111a:	681c      	ldr	r4, [r3, #0]
 800111c:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <HAL_InitTick+0x88>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	0019      	movs	r1, r3
 8001122:	23fa      	movs	r3, #250	; 0xfa
 8001124:	0098      	lsls	r0, r3, #2
 8001126:	f7fe fff7 	bl	8000118 <__udivsi3>
 800112a:	0003      	movs	r3, r0
 800112c:	0019      	movs	r1, r3
 800112e:	0020      	movs	r0, r4
 8001130:	f7fe fff2 	bl	8000118 <__udivsi3>
 8001134:	0003      	movs	r3, r0
 8001136:	0018      	movs	r0, r3
 8001138:	f000 f947 	bl	80013ca <HAL_SYSTICK_Config>
 800113c:	1e03      	subs	r3, r0, #0
 800113e:	d112      	bne.n	8001166 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d80a      	bhi.n	800115c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	2301      	movs	r3, #1
 800114a:	425b      	negs	r3, r3
 800114c:	2200      	movs	r2, #0
 800114e:	0018      	movs	r0, r3
 8001150:	f000 f906 	bl	8001360 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001154:	4b0e      	ldr	r3, [pc, #56]	; (8001190 <HAL_InitTick+0x90>)
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	e00d      	b.n	8001178 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800115c:	230f      	movs	r3, #15
 800115e:	18fb      	adds	r3, r7, r3
 8001160:	2201      	movs	r2, #1
 8001162:	701a      	strb	r2, [r3, #0]
 8001164:	e008      	b.n	8001178 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001166:	230f      	movs	r3, #15
 8001168:	18fb      	adds	r3, r7, r3
 800116a:	2201      	movs	r2, #1
 800116c:	701a      	strb	r2, [r3, #0]
 800116e:	e003      	b.n	8001178 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001170:	230f      	movs	r3, #15
 8001172:	18fb      	adds	r3, r7, r3
 8001174:	2201      	movs	r2, #1
 8001176:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001178:	230f      	movs	r3, #15
 800117a:	18fb      	adds	r3, r7, r3
 800117c:	781b      	ldrb	r3, [r3, #0]
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	b005      	add	sp, #20
 8001184:	bd90      	pop	{r4, r7, pc}
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	2000003c 	.word	0x2000003c
 800118c:	20000000 	.word	0x20000000
 8001190:	20000038 	.word	0x20000038

08001194 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001198:	4b04      	ldr	r3, [pc, #16]	; (80011ac <HAL_IncTick+0x18>)
 800119a:	681a      	ldr	r2, [r3, #0]
 800119c:	4b04      	ldr	r3, [pc, #16]	; (80011b0 <HAL_IncTick+0x1c>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	18d2      	adds	r2, r2, r3
 80011a2:	4b02      	ldr	r3, [pc, #8]	; (80011ac <HAL_IncTick+0x18>)
 80011a4:	601a      	str	r2, [r3, #0]
}
 80011a6:	46c0      	nop			; (mov r8, r8)
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	2000126c 	.word	0x2000126c
 80011b0:	2000003c 	.word	0x2000003c

080011b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0
  return uwTick;
 80011b8:	4b02      	ldr	r3, [pc, #8]	; (80011c4 <HAL_GetTick+0x10>)
 80011ba:	681b      	ldr	r3, [r3, #0]
}
 80011bc:	0018      	movs	r0, r3
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	46c0      	nop			; (mov r8, r8)
 80011c4:	2000126c 	.word	0x2000126c

080011c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	0002      	movs	r2, r0
 80011d0:	1dfb      	adds	r3, r7, #7
 80011d2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011d4:	1dfb      	adds	r3, r7, #7
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b7f      	cmp	r3, #127	; 0x7f
 80011da:	d809      	bhi.n	80011f0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011dc:	1dfb      	adds	r3, r7, #7
 80011de:	781b      	ldrb	r3, [r3, #0]
 80011e0:	001a      	movs	r2, r3
 80011e2:	231f      	movs	r3, #31
 80011e4:	401a      	ands	r2, r3
 80011e6:	4b04      	ldr	r3, [pc, #16]	; (80011f8 <__NVIC_EnableIRQ+0x30>)
 80011e8:	2101      	movs	r1, #1
 80011ea:	4091      	lsls	r1, r2
 80011ec:	000a      	movs	r2, r1
 80011ee:	601a      	str	r2, [r3, #0]
  }
}
 80011f0:	46c0      	nop			; (mov r8, r8)
 80011f2:	46bd      	mov	sp, r7
 80011f4:	b002      	add	sp, #8
 80011f6:	bd80      	pop	{r7, pc}
 80011f8:	e000e100 	.word	0xe000e100

080011fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b082      	sub	sp, #8
 8001200:	af00      	add	r7, sp, #0
 8001202:	0002      	movs	r2, r0
 8001204:	1dfb      	adds	r3, r7, #7
 8001206:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001208:	1dfb      	adds	r3, r7, #7
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	2b7f      	cmp	r3, #127	; 0x7f
 800120e:	d80e      	bhi.n	800122e <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001210:	1dfb      	adds	r3, r7, #7
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	001a      	movs	r2, r3
 8001216:	231f      	movs	r3, #31
 8001218:	4013      	ands	r3, r2
 800121a:	4907      	ldr	r1, [pc, #28]	; (8001238 <__NVIC_DisableIRQ+0x3c>)
 800121c:	2201      	movs	r2, #1
 800121e:	409a      	lsls	r2, r3
 8001220:	0013      	movs	r3, r2
 8001222:	2280      	movs	r2, #128	; 0x80
 8001224:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001226:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800122a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b002      	add	sp, #8
 8001234:	bd80      	pop	{r7, pc}
 8001236:	46c0      	nop			; (mov r8, r8)
 8001238:	e000e100 	.word	0xe000e100

0800123c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	0002      	movs	r2, r0
 8001244:	6039      	str	r1, [r7, #0]
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800124a:	1dfb      	adds	r3, r7, #7
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	2b7f      	cmp	r3, #127	; 0x7f
 8001250:	d828      	bhi.n	80012a4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001252:	4a2f      	ldr	r2, [pc, #188]	; (8001310 <__NVIC_SetPriority+0xd4>)
 8001254:	1dfb      	adds	r3, r7, #7
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	b25b      	sxtb	r3, r3
 800125a:	089b      	lsrs	r3, r3, #2
 800125c:	33c0      	adds	r3, #192	; 0xc0
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	589b      	ldr	r3, [r3, r2]
 8001262:	1dfa      	adds	r2, r7, #7
 8001264:	7812      	ldrb	r2, [r2, #0]
 8001266:	0011      	movs	r1, r2
 8001268:	2203      	movs	r2, #3
 800126a:	400a      	ands	r2, r1
 800126c:	00d2      	lsls	r2, r2, #3
 800126e:	21ff      	movs	r1, #255	; 0xff
 8001270:	4091      	lsls	r1, r2
 8001272:	000a      	movs	r2, r1
 8001274:	43d2      	mvns	r2, r2
 8001276:	401a      	ands	r2, r3
 8001278:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800127a:	683b      	ldr	r3, [r7, #0]
 800127c:	019b      	lsls	r3, r3, #6
 800127e:	22ff      	movs	r2, #255	; 0xff
 8001280:	401a      	ands	r2, r3
 8001282:	1dfb      	adds	r3, r7, #7
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	0018      	movs	r0, r3
 8001288:	2303      	movs	r3, #3
 800128a:	4003      	ands	r3, r0
 800128c:	00db      	lsls	r3, r3, #3
 800128e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001290:	481f      	ldr	r0, [pc, #124]	; (8001310 <__NVIC_SetPriority+0xd4>)
 8001292:	1dfb      	adds	r3, r7, #7
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	b25b      	sxtb	r3, r3
 8001298:	089b      	lsrs	r3, r3, #2
 800129a:	430a      	orrs	r2, r1
 800129c:	33c0      	adds	r3, #192	; 0xc0
 800129e:	009b      	lsls	r3, r3, #2
 80012a0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012a2:	e031      	b.n	8001308 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012a4:	4a1b      	ldr	r2, [pc, #108]	; (8001314 <__NVIC_SetPriority+0xd8>)
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	0019      	movs	r1, r3
 80012ac:	230f      	movs	r3, #15
 80012ae:	400b      	ands	r3, r1
 80012b0:	3b08      	subs	r3, #8
 80012b2:	089b      	lsrs	r3, r3, #2
 80012b4:	3306      	adds	r3, #6
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	18d3      	adds	r3, r2, r3
 80012ba:	3304      	adds	r3, #4
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	1dfa      	adds	r2, r7, #7
 80012c0:	7812      	ldrb	r2, [r2, #0]
 80012c2:	0011      	movs	r1, r2
 80012c4:	2203      	movs	r2, #3
 80012c6:	400a      	ands	r2, r1
 80012c8:	00d2      	lsls	r2, r2, #3
 80012ca:	21ff      	movs	r1, #255	; 0xff
 80012cc:	4091      	lsls	r1, r2
 80012ce:	000a      	movs	r2, r1
 80012d0:	43d2      	mvns	r2, r2
 80012d2:	401a      	ands	r2, r3
 80012d4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	019b      	lsls	r3, r3, #6
 80012da:	22ff      	movs	r2, #255	; 0xff
 80012dc:	401a      	ands	r2, r3
 80012de:	1dfb      	adds	r3, r7, #7
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	0018      	movs	r0, r3
 80012e4:	2303      	movs	r3, #3
 80012e6:	4003      	ands	r3, r0
 80012e8:	00db      	lsls	r3, r3, #3
 80012ea:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ec:	4809      	ldr	r0, [pc, #36]	; (8001314 <__NVIC_SetPriority+0xd8>)
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	781b      	ldrb	r3, [r3, #0]
 80012f2:	001c      	movs	r4, r3
 80012f4:	230f      	movs	r3, #15
 80012f6:	4023      	ands	r3, r4
 80012f8:	3b08      	subs	r3, #8
 80012fa:	089b      	lsrs	r3, r3, #2
 80012fc:	430a      	orrs	r2, r1
 80012fe:	3306      	adds	r3, #6
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	18c3      	adds	r3, r0, r3
 8001304:	3304      	adds	r3, #4
 8001306:	601a      	str	r2, [r3, #0]
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	b003      	add	sp, #12
 800130e:	bd90      	pop	{r4, r7, pc}
 8001310:	e000e100 	.word	0xe000e100
 8001314:	e000ed00 	.word	0xe000ed00

08001318 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b082      	sub	sp, #8
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	3b01      	subs	r3, #1
 8001324:	4a0c      	ldr	r2, [pc, #48]	; (8001358 <SysTick_Config+0x40>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d901      	bls.n	800132e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800132a:	2301      	movs	r3, #1
 800132c:	e010      	b.n	8001350 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800132e:	4b0b      	ldr	r3, [pc, #44]	; (800135c <SysTick_Config+0x44>)
 8001330:	687a      	ldr	r2, [r7, #4]
 8001332:	3a01      	subs	r2, #1
 8001334:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001336:	2301      	movs	r3, #1
 8001338:	425b      	negs	r3, r3
 800133a:	2103      	movs	r1, #3
 800133c:	0018      	movs	r0, r3
 800133e:	f7ff ff7d 	bl	800123c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <SysTick_Config+0x44>)
 8001344:	2200      	movs	r2, #0
 8001346:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <SysTick_Config+0x44>)
 800134a:	2207      	movs	r2, #7
 800134c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800134e:	2300      	movs	r3, #0
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	b002      	add	sp, #8
 8001356:	bd80      	pop	{r7, pc}
 8001358:	00ffffff 	.word	0x00ffffff
 800135c:	e000e010 	.word	0xe000e010

08001360 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b084      	sub	sp, #16
 8001364:	af00      	add	r7, sp, #0
 8001366:	60b9      	str	r1, [r7, #8]
 8001368:	607a      	str	r2, [r7, #4]
 800136a:	210f      	movs	r1, #15
 800136c:	187b      	adds	r3, r7, r1
 800136e:	1c02      	adds	r2, r0, #0
 8001370:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001372:	68ba      	ldr	r2, [r7, #8]
 8001374:	187b      	adds	r3, r7, r1
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	b25b      	sxtb	r3, r3
 800137a:	0011      	movs	r1, r2
 800137c:	0018      	movs	r0, r3
 800137e:	f7ff ff5d 	bl	800123c <__NVIC_SetPriority>
}
 8001382:	46c0      	nop			; (mov r8, r8)
 8001384:	46bd      	mov	sp, r7
 8001386:	b004      	add	sp, #16
 8001388:	bd80      	pop	{r7, pc}

0800138a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	0002      	movs	r2, r0
 8001392:	1dfb      	adds	r3, r7, #7
 8001394:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001396:	1dfb      	adds	r3, r7, #7
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	b25b      	sxtb	r3, r3
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff ff13 	bl	80011c8 <__NVIC_EnableIRQ>
}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	46bd      	mov	sp, r7
 80013a6:	b002      	add	sp, #8
 80013a8:	bd80      	pop	{r7, pc}

080013aa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013aa:	b580      	push	{r7, lr}
 80013ac:	b082      	sub	sp, #8
 80013ae:	af00      	add	r7, sp, #0
 80013b0:	0002      	movs	r2, r0
 80013b2:	1dfb      	adds	r3, r7, #7
 80013b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80013b6:	1dfb      	adds	r3, r7, #7
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	b25b      	sxtb	r3, r3
 80013bc:	0018      	movs	r0, r3
 80013be:	f7ff ff1d 	bl	80011fc <__NVIC_DisableIRQ>
}
 80013c2:	46c0      	nop			; (mov r8, r8)
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}

080013ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ca:	b580      	push	{r7, lr}
 80013cc:	b082      	sub	sp, #8
 80013ce:	af00      	add	r7, sp, #0
 80013d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	0018      	movs	r0, r3
 80013d6:	f7ff ff9f 	bl	8001318 <SysTick_Config>
 80013da:	0003      	movs	r3, r0
}
 80013dc:	0018      	movs	r0, r3
 80013de:	46bd      	mov	sp, r7
 80013e0:	b002      	add	sp, #8
 80013e2:	bd80      	pop	{r7, pc}

080013e4 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b084      	sub	sp, #16
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013ec:	230f      	movs	r3, #15
 80013ee:	18fb      	adds	r3, r7, r3
 80013f0:	2200      	movs	r2, #0
 80013f2:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	2224      	movs	r2, #36	; 0x24
 80013f8:	2100      	movs	r1, #0
 80013fa:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2224      	movs	r2, #36	; 0x24
 8001400:	5c9b      	ldrb	r3, [r3, r2]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d101      	bne.n	800140a <HAL_DMA_Abort_IT+0x26>
 8001406:	2302      	movs	r3, #2
 8001408:	e05e      	b.n	80014c8 <HAL_DMA_Abort_IT+0xe4>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	2224      	movs	r2, #36	; 0x24
 800140e:	2101      	movs	r1, #1
 8001410:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	2225      	movs	r2, #37	; 0x25
 8001416:	5c9b      	ldrb	r3, [r3, r2]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d007      	beq.n	800142e <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	2204      	movs	r2, #4
 8001422:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001424:	230f      	movs	r3, #15
 8001426:	18fb      	adds	r3, r7, r3
 8001428:	2201      	movs	r2, #1
 800142a:	701a      	strb	r2, [r3, #0]
 800142c:	e049      	b.n	80014c2 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	210e      	movs	r1, #14
 800143a:	438a      	bics	r2, r1
 800143c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	2101      	movs	r1, #1
 800144a:	438a      	bics	r2, r1
 800144c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001452:	681a      	ldr	r2, [r3, #0]
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001458:	491d      	ldr	r1, [pc, #116]	; (80014d0 <HAL_DMA_Abort_IT+0xec>)
 800145a:	400a      	ands	r2, r1
 800145c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 800145e:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <HAL_DMA_Abort_IT+0xf0>)
 8001460:	6859      	ldr	r1, [r3, #4]
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	221c      	movs	r2, #28
 8001468:	4013      	ands	r3, r2
 800146a:	2201      	movs	r2, #1
 800146c:	409a      	lsls	r2, r3
 800146e:	4b19      	ldr	r3, [pc, #100]	; (80014d4 <HAL_DMA_Abort_IT+0xf0>)
 8001470:	430a      	orrs	r2, r1
 8001472:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001478:	687a      	ldr	r2, [r7, #4]
 800147a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800147c:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001482:	2b00      	cmp	r3, #0
 8001484:	d00c      	beq.n	80014a0 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001490:	490f      	ldr	r1, [pc, #60]	; (80014d0 <HAL_DMA_Abort_IT+0xec>)
 8001492:	400a      	ands	r2, r1
 8001494:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149a:	687a      	ldr	r2, [r7, #4]
 800149c:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800149e:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2225      	movs	r2, #37	; 0x25
 80014a4:	2101      	movs	r1, #1
 80014a6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	2224      	movs	r2, #36	; 0x24
 80014ac:	2100      	movs	r1, #0
 80014ae:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d004      	beq.n	80014c2 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80014bc:	687a      	ldr	r2, [r7, #4]
 80014be:	0010      	movs	r0, r2
 80014c0:	4798      	blx	r3
    }
  }
  return status;
 80014c2:	230f      	movs	r3, #15
 80014c4:	18fb      	adds	r3, r7, r3
 80014c6:	781b      	ldrb	r3, [r3, #0]
}
 80014c8:	0018      	movs	r0, r3
 80014ca:	46bd      	mov	sp, r7
 80014cc:	b004      	add	sp, #16
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	fffffeff 	.word	0xfffffeff
 80014d4:	40020000 	.word	0x40020000

080014d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80014e2:	2300      	movs	r3, #0
 80014e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014e6:	e147      	b.n	8001778 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	4091      	lsls	r1, r2
 80014f2:	000a      	movs	r2, r1
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d100      	bne.n	8001500 <HAL_GPIO_Init+0x28>
 80014fe:	e138      	b.n	8001772 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2b02      	cmp	r3, #2
 8001506:	d003      	beq.n	8001510 <HAL_GPIO_Init+0x38>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	2b12      	cmp	r3, #18
 800150e:	d123      	bne.n	8001558 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	08da      	lsrs	r2, r3, #3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	3208      	adds	r2, #8
 8001518:	0092      	lsls	r2, r2, #2
 800151a:	58d3      	ldr	r3, [r2, r3]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	2207      	movs	r2, #7
 8001522:	4013      	ands	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	220f      	movs	r2, #15
 8001528:	409a      	lsls	r2, r3
 800152a:	0013      	movs	r3, r2
 800152c:	43da      	mvns	r2, r3
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001534:	683b      	ldr	r3, [r7, #0]
 8001536:	691a      	ldr	r2, [r3, #16]
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	2107      	movs	r1, #7
 800153c:	400b      	ands	r3, r1
 800153e:	009b      	lsls	r3, r3, #2
 8001540:	409a      	lsls	r2, r3
 8001542:	0013      	movs	r3, r2
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	4313      	orrs	r3, r2
 8001548:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800154a:	697b      	ldr	r3, [r7, #20]
 800154c:	08da      	lsrs	r2, r3, #3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	3208      	adds	r2, #8
 8001552:	0092      	lsls	r2, r2, #2
 8001554:	6939      	ldr	r1, [r7, #16]
 8001556:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	005b      	lsls	r3, r3, #1
 8001562:	2203      	movs	r2, #3
 8001564:	409a      	lsls	r2, r3
 8001566:	0013      	movs	r3, r2
 8001568:	43da      	mvns	r2, r3
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	4013      	ands	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2203      	movs	r2, #3
 8001576:	401a      	ands	r2, r3
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	409a      	lsls	r2, r3
 800157e:	0013      	movs	r3, r2
 8001580:	693a      	ldr	r2, [r7, #16]
 8001582:	4313      	orrs	r3, r2
 8001584:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	693a      	ldr	r2, [r7, #16]
 800158a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685b      	ldr	r3, [r3, #4]
 8001590:	2b01      	cmp	r3, #1
 8001592:	d00b      	beq.n	80015ac <HAL_GPIO_Init+0xd4>
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d007      	beq.n	80015ac <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80015a0:	2b11      	cmp	r3, #17
 80015a2:	d003      	beq.n	80015ac <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	2b12      	cmp	r3, #18
 80015aa:	d130      	bne.n	800160e <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	005b      	lsls	r3, r3, #1
 80015b6:	2203      	movs	r2, #3
 80015b8:	409a      	lsls	r2, r3
 80015ba:	0013      	movs	r3, r2
 80015bc:	43da      	mvns	r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	68da      	ldr	r2, [r3, #12]
 80015c8:	697b      	ldr	r3, [r7, #20]
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	409a      	lsls	r2, r3
 80015ce:	0013      	movs	r3, r2
 80015d0:	693a      	ldr	r2, [r7, #16]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	693a      	ldr	r2, [r7, #16]
 80015da:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80015e2:	2201      	movs	r2, #1
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	409a      	lsls	r2, r3
 80015e8:	0013      	movs	r3, r2
 80015ea:	43da      	mvns	r2, r3
 80015ec:	693b      	ldr	r3, [r7, #16]
 80015ee:	4013      	ands	r3, r2
 80015f0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	685b      	ldr	r3, [r3, #4]
 80015f6:	091b      	lsrs	r3, r3, #4
 80015f8:	2201      	movs	r2, #1
 80015fa:	401a      	ands	r2, r3
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	409a      	lsls	r2, r3
 8001600:	0013      	movs	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	693a      	ldr	r2, [r7, #16]
 800160c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	68db      	ldr	r3, [r3, #12]
 8001612:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001614:	697b      	ldr	r3, [r7, #20]
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	2203      	movs	r2, #3
 800161a:	409a      	lsls	r2, r3
 800161c:	0013      	movs	r3, r2
 800161e:	43da      	mvns	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	2380      	movs	r3, #128	; 0x80
 8001644:	055b      	lsls	r3, r3, #21
 8001646:	4013      	ands	r3, r2
 8001648:	d100      	bne.n	800164c <HAL_GPIO_Init+0x174>
 800164a:	e092      	b.n	8001772 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800164c:	4a50      	ldr	r2, [pc, #320]	; (8001790 <HAL_GPIO_Init+0x2b8>)
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	3318      	adds	r3, #24
 8001654:	009b      	lsls	r3, r3, #2
 8001656:	589b      	ldr	r3, [r3, r2]
 8001658:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2203      	movs	r2, #3
 800165e:	4013      	ands	r3, r2
 8001660:	00db      	lsls	r3, r3, #3
 8001662:	220f      	movs	r2, #15
 8001664:	409a      	lsls	r2, r3
 8001666:	0013      	movs	r3, r2
 8001668:	43da      	mvns	r2, r3
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	4013      	ands	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001670:	687a      	ldr	r2, [r7, #4]
 8001672:	23a0      	movs	r3, #160	; 0xa0
 8001674:	05db      	lsls	r3, r3, #23
 8001676:	429a      	cmp	r2, r3
 8001678:	d013      	beq.n	80016a2 <HAL_GPIO_Init+0x1ca>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	4a45      	ldr	r2, [pc, #276]	; (8001794 <HAL_GPIO_Init+0x2bc>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d00d      	beq.n	800169e <HAL_GPIO_Init+0x1c6>
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4a44      	ldr	r2, [pc, #272]	; (8001798 <HAL_GPIO_Init+0x2c0>)
 8001686:	4293      	cmp	r3, r2
 8001688:	d007      	beq.n	800169a <HAL_GPIO_Init+0x1c2>
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4a43      	ldr	r2, [pc, #268]	; (800179c <HAL_GPIO_Init+0x2c4>)
 800168e:	4293      	cmp	r3, r2
 8001690:	d101      	bne.n	8001696 <HAL_GPIO_Init+0x1be>
 8001692:	2303      	movs	r3, #3
 8001694:	e006      	b.n	80016a4 <HAL_GPIO_Init+0x1cc>
 8001696:	2305      	movs	r3, #5
 8001698:	e004      	b.n	80016a4 <HAL_GPIO_Init+0x1cc>
 800169a:	2302      	movs	r3, #2
 800169c:	e002      	b.n	80016a4 <HAL_GPIO_Init+0x1cc>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <HAL_GPIO_Init+0x1cc>
 80016a2:	2300      	movs	r3, #0
 80016a4:	697a      	ldr	r2, [r7, #20]
 80016a6:	2103      	movs	r1, #3
 80016a8:	400a      	ands	r2, r1
 80016aa:	00d2      	lsls	r2, r2, #3
 80016ac:	4093      	lsls	r3, r2
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80016b4:	4936      	ldr	r1, [pc, #216]	; (8001790 <HAL_GPIO_Init+0x2b8>)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	3318      	adds	r3, #24
 80016bc:	009b      	lsls	r3, r3, #2
 80016be:	693a      	ldr	r2, [r7, #16]
 80016c0:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016c2:	4a33      	ldr	r2, [pc, #204]	; (8001790 <HAL_GPIO_Init+0x2b8>)
 80016c4:	2380      	movs	r3, #128	; 0x80
 80016c6:	58d3      	ldr	r3, [r2, r3]
 80016c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	43da      	mvns	r2, r3
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	4013      	ands	r3, r2
 80016d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	025b      	lsls	r3, r3, #9
 80016dc:	4013      	ands	r3, r2
 80016de:	d003      	beq.n	80016e8 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016e8:	4929      	ldr	r1, [pc, #164]	; (8001790 <HAL_GPIO_Init+0x2b8>)
 80016ea:	2280      	movs	r2, #128	; 0x80
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 80016f0:	4a27      	ldr	r2, [pc, #156]	; (8001790 <HAL_GPIO_Init+0x2b8>)
 80016f2:	2384      	movs	r3, #132	; 0x84
 80016f4:	58d3      	ldr	r3, [r2, r3]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43da      	mvns	r2, r3
 80016fc:	693b      	ldr	r3, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	2380      	movs	r3, #128	; 0x80
 8001708:	029b      	lsls	r3, r3, #10
 800170a:	4013      	ands	r3, r2
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001716:	491e      	ldr	r1, [pc, #120]	; (8001790 <HAL_GPIO_Init+0x2b8>)
 8001718:	2284      	movs	r2, #132	; 0x84
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800171e:	4b1c      	ldr	r3, [pc, #112]	; (8001790 <HAL_GPIO_Init+0x2b8>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	43da      	mvns	r2, r3
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	4013      	ands	r3, r2
 800172c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	685a      	ldr	r2, [r3, #4]
 8001732:	2380      	movs	r3, #128	; 0x80
 8001734:	035b      	lsls	r3, r3, #13
 8001736:	4013      	ands	r3, r2
 8001738:	d003      	beq.n	8001742 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800173a:	693a      	ldr	r2, [r7, #16]
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <HAL_GPIO_Init+0x2b8>)
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001748:	4b11      	ldr	r3, [pc, #68]	; (8001790 <HAL_GPIO_Init+0x2b8>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	43da      	mvns	r2, r3
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	4013      	ands	r3, r2
 8001756:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	039b      	lsls	r3, r3, #14
 8001760:	4013      	ands	r3, r2
 8001762:	d003      	beq.n	800176c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001764:	693a      	ldr	r2, [r7, #16]
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800176c:	4b08      	ldr	r3, [pc, #32]	; (8001790 <HAL_GPIO_Init+0x2b8>)
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001772:	697b      	ldr	r3, [r7, #20]
 8001774:	3301      	adds	r3, #1
 8001776:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	40da      	lsrs	r2, r3
 8001780:	1e13      	subs	r3, r2, #0
 8001782:	d000      	beq.n	8001786 <HAL_GPIO_Init+0x2ae>
 8001784:	e6b0      	b.n	80014e8 <HAL_GPIO_Init+0x10>
  }
}
 8001786:	46c0      	nop			; (mov r8, r8)
 8001788:	46bd      	mov	sp, r7
 800178a:	b006      	add	sp, #24
 800178c:	bd80      	pop	{r7, pc}
 800178e:	46c0      	nop			; (mov r8, r8)
 8001790:	40021800 	.word	0x40021800
 8001794:	50000400 	.word	0x50000400
 8001798:	50000800 	.word	0x50000800
 800179c:	50000c00 	.word	0x50000c00

080017a0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b086      	sub	sp, #24
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	6078      	str	r0, [r7, #4]
 80017a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80017aa:	2300      	movs	r3, #0
 80017ac:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80017ae:	e0b4      	b.n	800191a <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 80017b0:	2201      	movs	r2, #1
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	409a      	lsls	r2, r3
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d100      	bne.n	80017c4 <HAL_GPIO_DeInit+0x24>
 80017c2:	e0a7      	b.n	8001914 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 80017c4:	4a5a      	ldr	r2, [pc, #360]	; (8001930 <HAL_GPIO_DeInit+0x190>)
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	089b      	lsrs	r3, r3, #2
 80017ca:	3318      	adds	r3, #24
 80017cc:	009b      	lsls	r3, r3, #2
 80017ce:	589b      	ldr	r3, [r3, r2]
 80017d0:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 80017d2:	697b      	ldr	r3, [r7, #20]
 80017d4:	2203      	movs	r2, #3
 80017d6:	4013      	ands	r3, r2
 80017d8:	00db      	lsls	r3, r3, #3
 80017da:	220f      	movs	r2, #15
 80017dc:	409a      	lsls	r2, r3
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	4013      	ands	r3, r2
 80017e2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	23a0      	movs	r3, #160	; 0xa0
 80017e8:	05db      	lsls	r3, r3, #23
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d013      	beq.n	8001816 <HAL_GPIO_DeInit+0x76>
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4a50      	ldr	r2, [pc, #320]	; (8001934 <HAL_GPIO_DeInit+0x194>)
 80017f2:	4293      	cmp	r3, r2
 80017f4:	d00d      	beq.n	8001812 <HAL_GPIO_DeInit+0x72>
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4a4f      	ldr	r2, [pc, #316]	; (8001938 <HAL_GPIO_DeInit+0x198>)
 80017fa:	4293      	cmp	r3, r2
 80017fc:	d007      	beq.n	800180e <HAL_GPIO_DeInit+0x6e>
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4a4e      	ldr	r2, [pc, #312]	; (800193c <HAL_GPIO_DeInit+0x19c>)
 8001802:	4293      	cmp	r3, r2
 8001804:	d101      	bne.n	800180a <HAL_GPIO_DeInit+0x6a>
 8001806:	2303      	movs	r3, #3
 8001808:	e006      	b.n	8001818 <HAL_GPIO_DeInit+0x78>
 800180a:	2305      	movs	r3, #5
 800180c:	e004      	b.n	8001818 <HAL_GPIO_DeInit+0x78>
 800180e:	2302      	movs	r3, #2
 8001810:	e002      	b.n	8001818 <HAL_GPIO_DeInit+0x78>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_GPIO_DeInit+0x78>
 8001816:	2300      	movs	r3, #0
 8001818:	697a      	ldr	r2, [r7, #20]
 800181a:	2103      	movs	r1, #3
 800181c:	400a      	ands	r2, r1
 800181e:	00d2      	lsls	r2, r2, #3
 8001820:	4093      	lsls	r3, r2
 8001822:	68fa      	ldr	r2, [r7, #12]
 8001824:	429a      	cmp	r2, r3
 8001826:	d136      	bne.n	8001896 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001828:	4a41      	ldr	r2, [pc, #260]	; (8001930 <HAL_GPIO_DeInit+0x190>)
 800182a:	2380      	movs	r3, #128	; 0x80
 800182c:	58d3      	ldr	r3, [r2, r3]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	43d2      	mvns	r2, r2
 8001832:	493f      	ldr	r1, [pc, #252]	; (8001930 <HAL_GPIO_DeInit+0x190>)
 8001834:	4013      	ands	r3, r2
 8001836:	2280      	movs	r2, #128	; 0x80
 8001838:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 800183a:	4a3d      	ldr	r2, [pc, #244]	; (8001930 <HAL_GPIO_DeInit+0x190>)
 800183c:	2384      	movs	r3, #132	; 0x84
 800183e:	58d3      	ldr	r3, [r2, r3]
 8001840:	693a      	ldr	r2, [r7, #16]
 8001842:	43d2      	mvns	r2, r2
 8001844:	493a      	ldr	r1, [pc, #232]	; (8001930 <HAL_GPIO_DeInit+0x190>)
 8001846:	4013      	ands	r3, r2
 8001848:	2284      	movs	r2, #132	; 0x84
 800184a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 800184c:	4b38      	ldr	r3, [pc, #224]	; (8001930 <HAL_GPIO_DeInit+0x190>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	693b      	ldr	r3, [r7, #16]
 8001852:	43d9      	mvns	r1, r3
 8001854:	4b36      	ldr	r3, [pc, #216]	; (8001930 <HAL_GPIO_DeInit+0x190>)
 8001856:	400a      	ands	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 800185a:	4b35      	ldr	r3, [pc, #212]	; (8001930 <HAL_GPIO_DeInit+0x190>)
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	693b      	ldr	r3, [r7, #16]
 8001860:	43d9      	mvns	r1, r3
 8001862:	4b33      	ldr	r3, [pc, #204]	; (8001930 <HAL_GPIO_DeInit+0x190>)
 8001864:	400a      	ands	r2, r1
 8001866:	605a      	str	r2, [r3, #4]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	2203      	movs	r2, #3
 800186c:	4013      	ands	r3, r2
 800186e:	00db      	lsls	r3, r3, #3
 8001870:	220f      	movs	r2, #15
 8001872:	409a      	lsls	r2, r3
 8001874:	0013      	movs	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8001878:	4a2d      	ldr	r2, [pc, #180]	; (8001930 <HAL_GPIO_DeInit+0x190>)
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	089b      	lsrs	r3, r3, #2
 800187e:	3318      	adds	r3, #24
 8001880:	009b      	lsls	r3, r3, #2
 8001882:	589a      	ldr	r2, [r3, r2]
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	43d9      	mvns	r1, r3
 8001888:	4829      	ldr	r0, [pc, #164]	; (8001930 <HAL_GPIO_DeInit+0x190>)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	089b      	lsrs	r3, r3, #2
 800188e:	400a      	ands	r2, r1
 8001890:	3318      	adds	r3, #24
 8001892:	009b      	lsls	r3, r3, #2
 8001894:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	681a      	ldr	r2, [r3, #0]
 800189a:	697b      	ldr	r3, [r7, #20]
 800189c:	005b      	lsls	r3, r3, #1
 800189e:	2103      	movs	r1, #3
 80018a0:	4099      	lsls	r1, r3
 80018a2:	000b      	movs	r3, r1
 80018a4:	431a      	orrs	r2, r3
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	08da      	lsrs	r2, r3, #3
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	3208      	adds	r2, #8
 80018b2:	0092      	lsls	r2, r2, #2
 80018b4:	58d3      	ldr	r3, [r2, r3]
 80018b6:	697a      	ldr	r2, [r7, #20]
 80018b8:	2107      	movs	r1, #7
 80018ba:	400a      	ands	r2, r1
 80018bc:	0092      	lsls	r2, r2, #2
 80018be:	210f      	movs	r1, #15
 80018c0:	4091      	lsls	r1, r2
 80018c2:	000a      	movs	r2, r1
 80018c4:	43d1      	mvns	r1, r2
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	08d2      	lsrs	r2, r2, #3
 80018ca:	4019      	ands	r1, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	3208      	adds	r2, #8
 80018d0:	0092      	lsls	r2, r2, #2
 80018d2:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	0052      	lsls	r2, r2, #1
 80018dc:	2103      	movs	r1, #3
 80018de:	4091      	lsls	r1, r2
 80018e0:	000a      	movs	r2, r1
 80018e2:	43d2      	mvns	r2, r2
 80018e4:	401a      	ands	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2101      	movs	r1, #1
 80018f0:	697a      	ldr	r2, [r7, #20]
 80018f2:	4091      	lsls	r1, r2
 80018f4:	000a      	movs	r2, r1
 80018f6:	43d2      	mvns	r2, r2
 80018f8:	401a      	ands	r2, r3
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	68db      	ldr	r3, [r3, #12]
 8001902:	697a      	ldr	r2, [r7, #20]
 8001904:	0052      	lsls	r2, r2, #1
 8001906:	2103      	movs	r1, #3
 8001908:	4091      	lsls	r1, r2
 800190a:	000a      	movs	r2, r1
 800190c:	43d2      	mvns	r2, r2
 800190e:	401a      	ands	r2, r3
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	3301      	adds	r3, #1
 8001918:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 800191a:	683a      	ldr	r2, [r7, #0]
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	40da      	lsrs	r2, r3
 8001920:	1e13      	subs	r3, r2, #0
 8001922:	d000      	beq.n	8001926 <HAL_GPIO_DeInit+0x186>
 8001924:	e744      	b.n	80017b0 <HAL_GPIO_DeInit+0x10>
  }
}
 8001926:	46c0      	nop			; (mov r8, r8)
 8001928:	46bd      	mov	sp, r7
 800192a:	b006      	add	sp, #24
 800192c:	bd80      	pop	{r7, pc}
 800192e:	46c0      	nop			; (mov r8, r8)
 8001930:	40021800 	.word	0x40021800
 8001934:	50000400 	.word	0x50000400
 8001938:	50000800 	.word	0x50000800
 800193c:	50000c00 	.word	0x50000c00

08001940 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	000a      	movs	r2, r1
 800194a:	1cbb      	adds	r3, r7, #2
 800194c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	691b      	ldr	r3, [r3, #16]
 8001952:	1cba      	adds	r2, r7, #2
 8001954:	8812      	ldrh	r2, [r2, #0]
 8001956:	4013      	ands	r3, r2
 8001958:	d004      	beq.n	8001964 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800195a:	230f      	movs	r3, #15
 800195c:	18fb      	adds	r3, r7, r3
 800195e:	2201      	movs	r2, #1
 8001960:	701a      	strb	r2, [r3, #0]
 8001962:	e003      	b.n	800196c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001964:	230f      	movs	r3, #15
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800196c:	230f      	movs	r3, #15
 800196e:	18fb      	adds	r3, r7, r3
 8001970:	781b      	ldrb	r3, [r3, #0]
}
 8001972:	0018      	movs	r0, r3
 8001974:	46bd      	mov	sp, r7
 8001976:	b004      	add	sp, #16
 8001978:	bd80      	pop	{r7, pc}

0800197a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800197a:	b580      	push	{r7, lr}
 800197c:	b082      	sub	sp, #8
 800197e:	af00      	add	r7, sp, #0
 8001980:	6078      	str	r0, [r7, #4]
 8001982:	0008      	movs	r0, r1
 8001984:	0011      	movs	r1, r2
 8001986:	1cbb      	adds	r3, r7, #2
 8001988:	1c02      	adds	r2, r0, #0
 800198a:	801a      	strh	r2, [r3, #0]
 800198c:	1c7b      	adds	r3, r7, #1
 800198e:	1c0a      	adds	r2, r1, #0
 8001990:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001992:	1c7b      	adds	r3, r7, #1
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d004      	beq.n	80019a4 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800199a:	1cbb      	adds	r3, r7, #2
 800199c:	881a      	ldrh	r2, [r3, #0]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019a2:	e003      	b.n	80019ac <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019a4:	1cbb      	adds	r3, r7, #2
 80019a6:	881a      	ldrh	r2, [r3, #0]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019ac:	46c0      	nop			; (mov r8, r8)
 80019ae:	46bd      	mov	sp, r7
 80019b0:	b002      	add	sp, #8
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019bc:	4b19      	ldr	r3, [pc, #100]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a19      	ldr	r2, [pc, #100]	; (8001a28 <HAL_PWREx_ControlVoltageScaling+0x74>)
 80019c2:	4013      	ands	r3, r2
 80019c4:	0019      	movs	r1, r3
 80019c6:	4b17      	ldr	r3, [pc, #92]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	430a      	orrs	r2, r1
 80019cc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80019ce:	687a      	ldr	r2, [r7, #4]
 80019d0:	2380      	movs	r3, #128	; 0x80
 80019d2:	009b      	lsls	r3, r3, #2
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d11f      	bne.n	8001a18 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80019d8:	4b14      	ldr	r3, [pc, #80]	; (8001a2c <HAL_PWREx_ControlVoltageScaling+0x78>)
 80019da:	681a      	ldr	r2, [r3, #0]
 80019dc:	0013      	movs	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	189b      	adds	r3, r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4912      	ldr	r1, [pc, #72]	; (8001a30 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80019e6:	0018      	movs	r0, r3
 80019e8:	f7fe fb96 	bl	8000118 <__udivsi3>
 80019ec:	0003      	movs	r3, r0
 80019ee:	3301      	adds	r3, #1
 80019f0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80019f2:	e008      	b.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d003      	beq.n	8001a02 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	3b01      	subs	r3, #1
 80019fe:	60fb      	str	r3, [r7, #12]
 8001a00:	e001      	b.n	8001a06 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	e009      	b.n	8001a1a <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a06:	4b07      	ldr	r3, [pc, #28]	; (8001a24 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001a08:	695a      	ldr	r2, [r3, #20]
 8001a0a:	2380      	movs	r3, #128	; 0x80
 8001a0c:	00db      	lsls	r3, r3, #3
 8001a0e:	401a      	ands	r2, r3
 8001a10:	2380      	movs	r3, #128	; 0x80
 8001a12:	00db      	lsls	r3, r3, #3
 8001a14:	429a      	cmp	r2, r3
 8001a16:	d0ed      	beq.n	80019f4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	0018      	movs	r0, r3
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	b004      	add	sp, #16
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	46c0      	nop			; (mov r8, r8)
 8001a24:	40007000 	.word	0x40007000
 8001a28:	fffff9ff 	.word	0xfffff9ff
 8001a2c:	20000000 	.word	0x20000000
 8001a30:	000f4240 	.word	0x000f4240

08001a34 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001a38:	4b03      	ldr	r3, [pc, #12]	; (8001a48 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001a3a:	689a      	ldr	r2, [r3, #8]
 8001a3c:	23e0      	movs	r3, #224	; 0xe0
 8001a3e:	01db      	lsls	r3, r3, #7
 8001a40:	4013      	ands	r3, r2
}
 8001a42:	0018      	movs	r0, r3
 8001a44:	46bd      	mov	sp, r7
 8001a46:	bd80      	pop	{r7, pc}
 8001a48:	40021000 	.word	0x40021000

08001a4c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b088      	sub	sp, #32
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d101      	bne.n	8001a5e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e2f9      	b.n	8002052 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2201      	movs	r2, #1
 8001a64:	4013      	ands	r3, r2
 8001a66:	d100      	bne.n	8001a6a <HAL_RCC_OscConfig+0x1e>
 8001a68:	e07c      	b.n	8001b64 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a6a:	4bc3      	ldr	r3, [pc, #780]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001a6c:	689b      	ldr	r3, [r3, #8]
 8001a6e:	2238      	movs	r2, #56	; 0x38
 8001a70:	4013      	ands	r3, r2
 8001a72:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a74:	4bc0      	ldr	r3, [pc, #768]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	2203      	movs	r2, #3
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001a7e:	69bb      	ldr	r3, [r7, #24]
 8001a80:	2b10      	cmp	r3, #16
 8001a82:	d102      	bne.n	8001a8a <HAL_RCC_OscConfig+0x3e>
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d002      	beq.n	8001a90 <HAL_RCC_OscConfig+0x44>
 8001a8a:	69bb      	ldr	r3, [r7, #24]
 8001a8c:	2b08      	cmp	r3, #8
 8001a8e:	d10b      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a90:	4bb9      	ldr	r3, [pc, #740]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001a92:	681a      	ldr	r2, [r3, #0]
 8001a94:	2380      	movs	r3, #128	; 0x80
 8001a96:	029b      	lsls	r3, r3, #10
 8001a98:	4013      	ands	r3, r2
 8001a9a:	d062      	beq.n	8001b62 <HAL_RCC_OscConfig+0x116>
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d15e      	bne.n	8001b62 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	e2d4      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	685a      	ldr	r2, [r3, #4]
 8001aac:	2380      	movs	r3, #128	; 0x80
 8001aae:	025b      	lsls	r3, r3, #9
 8001ab0:	429a      	cmp	r2, r3
 8001ab2:	d107      	bne.n	8001ac4 <HAL_RCC_OscConfig+0x78>
 8001ab4:	4bb0      	ldr	r3, [pc, #704]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001ab6:	681a      	ldr	r2, [r3, #0]
 8001ab8:	4baf      	ldr	r3, [pc, #700]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001aba:	2180      	movs	r1, #128	; 0x80
 8001abc:	0249      	lsls	r1, r1, #9
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	601a      	str	r2, [r3, #0]
 8001ac2:	e020      	b.n	8001b06 <HAL_RCC_OscConfig+0xba>
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685a      	ldr	r2, [r3, #4]
 8001ac8:	23a0      	movs	r3, #160	; 0xa0
 8001aca:	02db      	lsls	r3, r3, #11
 8001acc:	429a      	cmp	r2, r3
 8001ace:	d10e      	bne.n	8001aee <HAL_RCC_OscConfig+0xa2>
 8001ad0:	4ba9      	ldr	r3, [pc, #676]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	4ba8      	ldr	r3, [pc, #672]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001ad6:	2180      	movs	r1, #128	; 0x80
 8001ad8:	02c9      	lsls	r1, r1, #11
 8001ada:	430a      	orrs	r2, r1
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	4ba6      	ldr	r3, [pc, #664]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001ae0:	681a      	ldr	r2, [r3, #0]
 8001ae2:	4ba5      	ldr	r3, [pc, #660]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001ae4:	2180      	movs	r1, #128	; 0x80
 8001ae6:	0249      	lsls	r1, r1, #9
 8001ae8:	430a      	orrs	r2, r1
 8001aea:	601a      	str	r2, [r3, #0]
 8001aec:	e00b      	b.n	8001b06 <HAL_RCC_OscConfig+0xba>
 8001aee:	4ba2      	ldr	r3, [pc, #648]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	4ba1      	ldr	r3, [pc, #644]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001af4:	49a1      	ldr	r1, [pc, #644]	; (8001d7c <HAL_RCC_OscConfig+0x330>)
 8001af6:	400a      	ands	r2, r1
 8001af8:	601a      	str	r2, [r3, #0]
 8001afa:	4b9f      	ldr	r3, [pc, #636]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001afc:	681a      	ldr	r2, [r3, #0]
 8001afe:	4b9e      	ldr	r3, [pc, #632]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001b00:	499f      	ldr	r1, [pc, #636]	; (8001d80 <HAL_RCC_OscConfig+0x334>)
 8001b02:	400a      	ands	r2, r1
 8001b04:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d014      	beq.n	8001b38 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b0e:	f7ff fb51 	bl	80011b4 <HAL_GetTick>
 8001b12:	0003      	movs	r3, r0
 8001b14:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b18:	f7ff fb4c 	bl	80011b4 <HAL_GetTick>
 8001b1c:	0002      	movs	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b64      	cmp	r3, #100	; 0x64
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e293      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b2a:	4b93      	ldr	r3, [pc, #588]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	029b      	lsls	r3, r3, #10
 8001b32:	4013      	ands	r3, r2
 8001b34:	d0f0      	beq.n	8001b18 <HAL_RCC_OscConfig+0xcc>
 8001b36:	e015      	b.n	8001b64 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff fb3c 	bl	80011b4 <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b40:	e008      	b.n	8001b54 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b42:	f7ff fb37 	bl	80011b4 <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b64      	cmp	r3, #100	; 0x64
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e27e      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b54:	4b88      	ldr	r3, [pc, #544]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	2380      	movs	r3, #128	; 0x80
 8001b5a:	029b      	lsls	r3, r3, #10
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d1f0      	bne.n	8001b42 <HAL_RCC_OscConfig+0xf6>
 8001b60:	e000      	b.n	8001b64 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b62:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	2202      	movs	r2, #2
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d100      	bne.n	8001b70 <HAL_RCC_OscConfig+0x124>
 8001b6e:	e099      	b.n	8001ca4 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001b70:	4b81      	ldr	r3, [pc, #516]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2238      	movs	r2, #56	; 0x38
 8001b76:	4013      	ands	r3, r2
 8001b78:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001b7a:	4b7f      	ldr	r3, [pc, #508]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2203      	movs	r2, #3
 8001b80:	4013      	ands	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8001b84:	69bb      	ldr	r3, [r7, #24]
 8001b86:	2b10      	cmp	r3, #16
 8001b88:	d102      	bne.n	8001b90 <HAL_RCC_OscConfig+0x144>
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d002      	beq.n	8001b96 <HAL_RCC_OscConfig+0x14a>
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d135      	bne.n	8001c02 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b96:	4b78      	ldr	r3, [pc, #480]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	2380      	movs	r3, #128	; 0x80
 8001b9c:	00db      	lsls	r3, r3, #3
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	d005      	beq.n	8001bae <HAL_RCC_OscConfig+0x162>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	68db      	ldr	r3, [r3, #12]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	e251      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bae:	4b72      	ldr	r3, [pc, #456]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4a74      	ldr	r2, [pc, #464]	; (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	0019      	movs	r1, r3
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	695b      	ldr	r3, [r3, #20]
 8001bbc:	021a      	lsls	r2, r3, #8
 8001bbe:	4b6e      	ldr	r3, [pc, #440]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001bc0:	430a      	orrs	r2, r1
 8001bc2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d112      	bne.n	8001bf0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001bca:	4b6b      	ldr	r3, [pc, #428]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	4a6e      	ldr	r2, [pc, #440]	; (8001d88 <HAL_RCC_OscConfig+0x33c>)
 8001bd0:	4013      	ands	r3, r2
 8001bd2:	0019      	movs	r1, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	691a      	ldr	r2, [r3, #16]
 8001bd8:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001bda:	430a      	orrs	r2, r1
 8001bdc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001bde:	4b66      	ldr	r3, [pc, #408]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	0adb      	lsrs	r3, r3, #11
 8001be4:	2207      	movs	r2, #7
 8001be6:	4013      	ands	r3, r2
 8001be8:	4a68      	ldr	r2, [pc, #416]	; (8001d8c <HAL_RCC_OscConfig+0x340>)
 8001bea:	40da      	lsrs	r2, r3
 8001bec:	4b68      	ldr	r3, [pc, #416]	; (8001d90 <HAL_RCC_OscConfig+0x344>)
 8001bee:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001bf0:	4b68      	ldr	r3, [pc, #416]	; (8001d94 <HAL_RCC_OscConfig+0x348>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	0018      	movs	r0, r3
 8001bf6:	f7ff fa83 	bl	8001100 <HAL_InitTick>
 8001bfa:	1e03      	subs	r3, r0, #0
 8001bfc:	d051      	beq.n	8001ca2 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e227      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d030      	beq.n	8001c6c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001c0a:	4b5b      	ldr	r3, [pc, #364]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4a5e      	ldr	r2, [pc, #376]	; (8001d88 <HAL_RCC_OscConfig+0x33c>)
 8001c10:	4013      	ands	r3, r2
 8001c12:	0019      	movs	r1, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	691a      	ldr	r2, [r3, #16]
 8001c18:	4b57      	ldr	r3, [pc, #348]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001c1a:	430a      	orrs	r2, r1
 8001c1c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001c1e:	4b56      	ldr	r3, [pc, #344]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	4b55      	ldr	r3, [pc, #340]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001c24:	2180      	movs	r1, #128	; 0x80
 8001c26:	0049      	lsls	r1, r1, #1
 8001c28:	430a      	orrs	r2, r1
 8001c2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c2c:	f7ff fac2 	bl	80011b4 <HAL_GetTick>
 8001c30:	0003      	movs	r3, r0
 8001c32:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c34:	e008      	b.n	8001c48 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c36:	f7ff fabd 	bl	80011b4 <HAL_GetTick>
 8001c3a:	0002      	movs	r2, r0
 8001c3c:	693b      	ldr	r3, [r7, #16]
 8001c3e:	1ad3      	subs	r3, r2, r3
 8001c40:	2b02      	cmp	r3, #2
 8001c42:	d901      	bls.n	8001c48 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001c44:	2303      	movs	r3, #3
 8001c46:	e204      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c48:	4b4b      	ldr	r3, [pc, #300]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	2380      	movs	r3, #128	; 0x80
 8001c4e:	00db      	lsls	r3, r3, #3
 8001c50:	4013      	ands	r3, r2
 8001c52:	d0f0      	beq.n	8001c36 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c54:	4b48      	ldr	r3, [pc, #288]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	4a4a      	ldr	r2, [pc, #296]	; (8001d84 <HAL_RCC_OscConfig+0x338>)
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	0019      	movs	r1, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	695b      	ldr	r3, [r3, #20]
 8001c62:	021a      	lsls	r2, r3, #8
 8001c64:	4b44      	ldr	r3, [pc, #272]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001c66:	430a      	orrs	r2, r1
 8001c68:	605a      	str	r2, [r3, #4]
 8001c6a:	e01b      	b.n	8001ca4 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001c6c:	4b42      	ldr	r3, [pc, #264]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	4b41      	ldr	r3, [pc, #260]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001c72:	4949      	ldr	r1, [pc, #292]	; (8001d98 <HAL_RCC_OscConfig+0x34c>)
 8001c74:	400a      	ands	r2, r1
 8001c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff fa9c 	bl	80011b4 <HAL_GetTick>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c80:	e008      	b.n	8001c94 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c82:	f7ff fa97 	bl	80011b4 <HAL_GetTick>
 8001c86:	0002      	movs	r2, r0
 8001c88:	693b      	ldr	r3, [r7, #16]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	2b02      	cmp	r3, #2
 8001c8e:	d901      	bls.n	8001c94 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001c90:	2303      	movs	r3, #3
 8001c92:	e1de      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001c94:	4b38      	ldr	r3, [pc, #224]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001c96:	681a      	ldr	r2, [r3, #0]
 8001c98:	2380      	movs	r3, #128	; 0x80
 8001c9a:	00db      	lsls	r3, r3, #3
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	d1f0      	bne.n	8001c82 <HAL_RCC_OscConfig+0x236>
 8001ca0:	e000      	b.n	8001ca4 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001ca2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	2208      	movs	r2, #8
 8001caa:	4013      	ands	r3, r2
 8001cac:	d047      	beq.n	8001d3e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001cae:	4b32      	ldr	r3, [pc, #200]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001cb0:	689b      	ldr	r3, [r3, #8]
 8001cb2:	2238      	movs	r2, #56	; 0x38
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	2b18      	cmp	r3, #24
 8001cb8:	d10a      	bne.n	8001cd0 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001cba:	4b2f      	ldr	r3, [pc, #188]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d03c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x2f2>
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d138      	bne.n	8001d3e <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e1c0      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	699b      	ldr	r3, [r3, #24]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d019      	beq.n	8001d0c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001cda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001cdc:	4b26      	ldr	r3, [pc, #152]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001cde:	2101      	movs	r1, #1
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ce4:	f7ff fa66 	bl	80011b4 <HAL_GetTick>
 8001ce8:	0003      	movs	r3, r0
 8001cea:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001cec:	e008      	b.n	8001d00 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cee:	f7ff fa61 	bl	80011b4 <HAL_GetTick>
 8001cf2:	0002      	movs	r2, r0
 8001cf4:	693b      	ldr	r3, [r7, #16]
 8001cf6:	1ad3      	subs	r3, r2, r3
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d901      	bls.n	8001d00 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001cfc:	2303      	movs	r3, #3
 8001cfe:	e1a8      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001d00:	4b1d      	ldr	r3, [pc, #116]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d04:	2202      	movs	r2, #2
 8001d06:	4013      	ands	r3, r2
 8001d08:	d0f1      	beq.n	8001cee <HAL_RCC_OscConfig+0x2a2>
 8001d0a:	e018      	b.n	8001d3e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001d0c:	4b1a      	ldr	r3, [pc, #104]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001d0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001d12:	2101      	movs	r1, #1
 8001d14:	438a      	bics	r2, r1
 8001d16:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d18:	f7ff fa4c 	bl	80011b4 <HAL_GetTick>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001d22:	f7ff fa47 	bl	80011b4 <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b02      	cmp	r3, #2
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e18e      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001d34:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001d36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d38:	2202      	movs	r2, #2
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	d1f1      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	2204      	movs	r2, #4
 8001d44:	4013      	ands	r3, r2
 8001d46:	d100      	bne.n	8001d4a <HAL_RCC_OscConfig+0x2fe>
 8001d48:	e0c6      	b.n	8001ed8 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d4a:	231f      	movs	r3, #31
 8001d4c:	18fb      	adds	r3, r7, r3
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001d52:	4b09      	ldr	r3, [pc, #36]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	2238      	movs	r2, #56	; 0x38
 8001d58:	4013      	ands	r3, r2
 8001d5a:	2b20      	cmp	r3, #32
 8001d5c:	d11e      	bne.n	8001d9c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001d5e:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <HAL_RCC_OscConfig+0x32c>)
 8001d60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d62:	2202      	movs	r2, #2
 8001d64:	4013      	ands	r3, r2
 8001d66:	d100      	bne.n	8001d6a <HAL_RCC_OscConfig+0x31e>
 8001d68:	e0b6      	b.n	8001ed8 <HAL_RCC_OscConfig+0x48c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	689b      	ldr	r3, [r3, #8]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d000      	beq.n	8001d74 <HAL_RCC_OscConfig+0x328>
 8001d72:	e0b1      	b.n	8001ed8 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e16c      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	fffeffff 	.word	0xfffeffff
 8001d80:	fffbffff 	.word	0xfffbffff
 8001d84:	ffff80ff 	.word	0xffff80ff
 8001d88:	ffffc7ff 	.word	0xffffc7ff
 8001d8c:	00f42400 	.word	0x00f42400
 8001d90:	20000000 	.word	0x20000000
 8001d94:	20000038 	.word	0x20000038
 8001d98:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d9c:	4baf      	ldr	r3, [pc, #700]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001da0:	2380      	movs	r3, #128	; 0x80
 8001da2:	055b      	lsls	r3, r3, #21
 8001da4:	4013      	ands	r3, r2
 8001da6:	d101      	bne.n	8001dac <HAL_RCC_OscConfig+0x360>
 8001da8:	2301      	movs	r3, #1
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0x362>
 8001dac:	2300      	movs	r3, #0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d011      	beq.n	8001dd6 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001db2:	4baa      	ldr	r3, [pc, #680]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001db4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001db6:	4ba9      	ldr	r3, [pc, #676]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001db8:	2180      	movs	r1, #128	; 0x80
 8001dba:	0549      	lsls	r1, r1, #21
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001dc0:	4ba6      	ldr	r3, [pc, #664]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001dc4:	2380      	movs	r3, #128	; 0x80
 8001dc6:	055b      	lsls	r3, r3, #21
 8001dc8:	4013      	ands	r3, r2
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001dce:	231f      	movs	r3, #31
 8001dd0:	18fb      	adds	r3, r7, r3
 8001dd2:	2201      	movs	r2, #1
 8001dd4:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001dd6:	4ba2      	ldr	r3, [pc, #648]	; (8002060 <HAL_RCC_OscConfig+0x614>)
 8001dd8:	681a      	ldr	r2, [r3, #0]
 8001dda:	2380      	movs	r3, #128	; 0x80
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4013      	ands	r3, r2
 8001de0:	d11a      	bne.n	8001e18 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001de2:	4b9f      	ldr	r3, [pc, #636]	; (8002060 <HAL_RCC_OscConfig+0x614>)
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	4b9e      	ldr	r3, [pc, #632]	; (8002060 <HAL_RCC_OscConfig+0x614>)
 8001de8:	2180      	movs	r1, #128	; 0x80
 8001dea:	0049      	lsls	r1, r1, #1
 8001dec:	430a      	orrs	r2, r1
 8001dee:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001df0:	f7ff f9e0 	bl	80011b4 <HAL_GetTick>
 8001df4:	0003      	movs	r3, r0
 8001df6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001df8:	e008      	b.n	8001e0c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001dfa:	f7ff f9db 	bl	80011b4 <HAL_GetTick>
 8001dfe:	0002      	movs	r2, r0
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	1ad3      	subs	r3, r2, r3
 8001e04:	2b02      	cmp	r3, #2
 8001e06:	d901      	bls.n	8001e0c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001e08:	2303      	movs	r3, #3
 8001e0a:	e122      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001e0c:	4b94      	ldr	r3, [pc, #592]	; (8002060 <HAL_RCC_OscConfig+0x614>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	2380      	movs	r3, #128	; 0x80
 8001e12:	005b      	lsls	r3, r3, #1
 8001e14:	4013      	ands	r3, r2
 8001e16:	d0f0      	beq.n	8001dfa <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	2b01      	cmp	r3, #1
 8001e1e:	d106      	bne.n	8001e2e <HAL_RCC_OscConfig+0x3e2>
 8001e20:	4b8e      	ldr	r3, [pc, #568]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001e22:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e24:	4b8d      	ldr	r3, [pc, #564]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001e26:	2101      	movs	r1, #1
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e2c:	e01c      	b.n	8001e68 <HAL_RCC_OscConfig+0x41c>
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	689b      	ldr	r3, [r3, #8]
 8001e32:	2b05      	cmp	r3, #5
 8001e34:	d10c      	bne.n	8001e50 <HAL_RCC_OscConfig+0x404>
 8001e36:	4b89      	ldr	r3, [pc, #548]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001e38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e3a:	4b88      	ldr	r3, [pc, #544]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001e3c:	2104      	movs	r1, #4
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e42:	4b86      	ldr	r3, [pc, #536]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001e44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e46:	4b85      	ldr	r3, [pc, #532]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001e48:	2101      	movs	r1, #1
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e4e:	e00b      	b.n	8001e68 <HAL_RCC_OscConfig+0x41c>
 8001e50:	4b82      	ldr	r3, [pc, #520]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001e52:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e54:	4b81      	ldr	r3, [pc, #516]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001e56:	2101      	movs	r1, #1
 8001e58:	438a      	bics	r2, r1
 8001e5a:	65da      	str	r2, [r3, #92]	; 0x5c
 8001e5c:	4b7f      	ldr	r3, [pc, #508]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001e5e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001e60:	4b7e      	ldr	r3, [pc, #504]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001e62:	2104      	movs	r1, #4
 8001e64:	438a      	bics	r2, r1
 8001e66:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d014      	beq.n	8001e9a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e70:	f7ff f9a0 	bl	80011b4 <HAL_GetTick>
 8001e74:	0003      	movs	r3, r0
 8001e76:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e78:	e009      	b.n	8001e8e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e7a:	f7ff f99b 	bl	80011b4 <HAL_GetTick>
 8001e7e:	0002      	movs	r2, r0
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	1ad3      	subs	r3, r2, r3
 8001e84:	4a77      	ldr	r2, [pc, #476]	; (8002064 <HAL_RCC_OscConfig+0x618>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d901      	bls.n	8001e8e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	e0e1      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e8e:	4b73      	ldr	r3, [pc, #460]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	2202      	movs	r2, #2
 8001e94:	4013      	ands	r3, r2
 8001e96:	d0f0      	beq.n	8001e7a <HAL_RCC_OscConfig+0x42e>
 8001e98:	e013      	b.n	8001ec2 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9a:	f7ff f98b 	bl	80011b4 <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ea2:	e009      	b.n	8001eb8 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ea4:	f7ff f986 	bl	80011b4 <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	4a6d      	ldr	r2, [pc, #436]	; (8002064 <HAL_RCC_OscConfig+0x618>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e0cc      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001eb8:	4b68      	ldr	r3, [pc, #416]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebc:	2202      	movs	r2, #2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	d1f0      	bne.n	8001ea4 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001ec2:	231f      	movs	r3, #31
 8001ec4:	18fb      	adds	r3, r7, r3
 8001ec6:	781b      	ldrb	r3, [r3, #0]
 8001ec8:	2b01      	cmp	r3, #1
 8001eca:	d105      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001ecc:	4b63      	ldr	r3, [pc, #396]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001ece:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ed0:	4b62      	ldr	r3, [pc, #392]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001ed2:	4965      	ldr	r1, [pc, #404]	; (8002068 <HAL_RCC_OscConfig+0x61c>)
 8001ed4:	400a      	ands	r2, r1
 8001ed6:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	69db      	ldr	r3, [r3, #28]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d100      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x496>
 8001ee0:	e0b6      	b.n	8002050 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001ee2:	4b5e      	ldr	r3, [pc, #376]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	2238      	movs	r2, #56	; 0x38
 8001ee8:	4013      	ands	r3, r2
 8001eea:	2b10      	cmp	r3, #16
 8001eec:	d100      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x4a4>
 8001eee:	e07e      	b.n	8001fee <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	69db      	ldr	r3, [r3, #28]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d153      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef8:	4b58      	ldr	r3, [pc, #352]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4b57      	ldr	r3, [pc, #348]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001efe:	495b      	ldr	r1, [pc, #364]	; (800206c <HAL_RCC_OscConfig+0x620>)
 8001f00:	400a      	ands	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7ff f956 	bl	80011b4 <HAL_GetTick>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7ff f951 	bl	80011b4 <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e098      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f20:	4b4e      	ldr	r3, [pc, #312]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	049b      	lsls	r3, r3, #18
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d1f0      	bne.n	8001f0e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f2c:	4b4b      	ldr	r3, [pc, #300]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001f2e:	68db      	ldr	r3, [r3, #12]
 8001f30:	4a4f      	ldr	r2, [pc, #316]	; (8002070 <HAL_RCC_OscConfig+0x624>)
 8001f32:	4013      	ands	r3, r2
 8001f34:	0019      	movs	r1, r3
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6a1a      	ldr	r2, [r3, #32]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f3e:	431a      	orrs	r2, r3
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f44:	021b      	lsls	r3, r3, #8
 8001f46:	431a      	orrs	r2, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f4c:	431a      	orrs	r2, r3
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	431a      	orrs	r2, r3
 8001f54:	4b41      	ldr	r3, [pc, #260]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001f56:	430a      	orrs	r2, r1
 8001f58:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f5a:	4b40      	ldr	r3, [pc, #256]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	4b3f      	ldr	r3, [pc, #252]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001f60:	2180      	movs	r1, #128	; 0x80
 8001f62:	0449      	lsls	r1, r1, #17
 8001f64:	430a      	orrs	r2, r1
 8001f66:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001f68:	4b3c      	ldr	r3, [pc, #240]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	4b3b      	ldr	r3, [pc, #236]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001f6e:	2180      	movs	r1, #128	; 0x80
 8001f70:	0549      	lsls	r1, r1, #21
 8001f72:	430a      	orrs	r2, r1
 8001f74:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f76:	f7ff f91d 	bl	80011b4 <HAL_GetTick>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f7e:	e008      	b.n	8001f92 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f80:	f7ff f918 	bl	80011b4 <HAL_GetTick>
 8001f84:	0002      	movs	r2, r0
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d901      	bls.n	8001f92 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	e05f      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f92:	4b32      	ldr	r3, [pc, #200]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	2380      	movs	r3, #128	; 0x80
 8001f98:	049b      	lsls	r3, r3, #18
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	d0f0      	beq.n	8001f80 <HAL_RCC_OscConfig+0x534>
 8001f9e:	e057      	b.n	8002050 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fa0:	4b2e      	ldr	r3, [pc, #184]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	4b2d      	ldr	r3, [pc, #180]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001fa6:	4931      	ldr	r1, [pc, #196]	; (800206c <HAL_RCC_OscConfig+0x620>)
 8001fa8:	400a      	ands	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001fac:	4b2b      	ldr	r3, [pc, #172]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001fae:	68da      	ldr	r2, [r3, #12]
 8001fb0:	4b2a      	ldr	r3, [pc, #168]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001fb2:	2103      	movs	r1, #3
 8001fb4:	438a      	bics	r2, r1
 8001fb6:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001fb8:	4b28      	ldr	r3, [pc, #160]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001fba:	68da      	ldr	r2, [r3, #12]
 8001fbc:	4b27      	ldr	r3, [pc, #156]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001fbe:	492d      	ldr	r1, [pc, #180]	; (8002074 <HAL_RCC_OscConfig+0x628>)
 8001fc0:	400a      	ands	r2, r1
 8001fc2:	60da      	str	r2, [r3, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fc4:	f7ff f8f6 	bl	80011b4 <HAL_GetTick>
 8001fc8:	0003      	movs	r3, r0
 8001fca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fcc:	e008      	b.n	8001fe0 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fce:	f7ff f8f1 	bl	80011b4 <HAL_GetTick>
 8001fd2:	0002      	movs	r2, r0
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	1ad3      	subs	r3, r2, r3
 8001fd8:	2b02      	cmp	r3, #2
 8001fda:	d901      	bls.n	8001fe0 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001fdc:	2303      	movs	r3, #3
 8001fde:	e038      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001fe0:	4b1e      	ldr	r3, [pc, #120]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001fe2:	681a      	ldr	r2, [r3, #0]
 8001fe4:	2380      	movs	r3, #128	; 0x80
 8001fe6:	049b      	lsls	r3, r3, #18
 8001fe8:	4013      	ands	r3, r2
 8001fea:	d1f0      	bne.n	8001fce <HAL_RCC_OscConfig+0x582>
 8001fec:	e030      	b.n	8002050 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
 8001ff2:	2b01      	cmp	r3, #1
 8001ff4:	d101      	bne.n	8001ffa <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e02b      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001ffa:	4b18      	ldr	r3, [pc, #96]	; (800205c <HAL_RCC_OscConfig+0x610>)
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2203      	movs	r2, #3
 8002004:	401a      	ands	r2, r3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6a1b      	ldr	r3, [r3, #32]
 800200a:	429a      	cmp	r2, r3
 800200c:	d11e      	bne.n	800204c <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800200e:	697b      	ldr	r3, [r7, #20]
 8002010:	2270      	movs	r2, #112	; 0x70
 8002012:	401a      	ands	r2, r3
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002018:	429a      	cmp	r2, r3
 800201a:	d117      	bne.n	800204c <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	23fe      	movs	r3, #254	; 0xfe
 8002020:	01db      	lsls	r3, r3, #7
 8002022:	401a      	ands	r2, r3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002028:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800202a:	429a      	cmp	r2, r3
 800202c:	d10e      	bne.n	800204c <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	23f8      	movs	r3, #248	; 0xf8
 8002032:	039b      	lsls	r3, r3, #14
 8002034:	401a      	ands	r2, r3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800203a:	429a      	cmp	r2, r3
 800203c:	d106      	bne.n	800204c <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 800203e:	697b      	ldr	r3, [r7, #20]
 8002040:	0f5b      	lsrs	r3, r3, #29
 8002042:	075a      	lsls	r2, r3, #29
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e000      	b.n	8002052 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8002050:	2300      	movs	r3, #0
}
 8002052:	0018      	movs	r0, r3
 8002054:	46bd      	mov	sp, r7
 8002056:	b008      	add	sp, #32
 8002058:	bd80      	pop	{r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	40021000 	.word	0x40021000
 8002060:	40007000 	.word	0x40007000
 8002064:	00001388 	.word	0x00001388
 8002068:	efffffff 	.word	0xefffffff
 800206c:	feffffff 	.word	0xfeffffff
 8002070:	1fc1808c 	.word	0x1fc1808c
 8002074:	effeffff 	.word	0xeffeffff

08002078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d101      	bne.n	800208c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e0e9      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800208c:	4b76      	ldr	r3, [pc, #472]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2207      	movs	r2, #7
 8002092:	4013      	ands	r3, r2
 8002094:	683a      	ldr	r2, [r7, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	d91e      	bls.n	80020d8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800209a:	4b73      	ldr	r3, [pc, #460]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2207      	movs	r2, #7
 80020a0:	4393      	bics	r3, r2
 80020a2:	0019      	movs	r1, r3
 80020a4:	4b70      	ldr	r3, [pc, #448]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	430a      	orrs	r2, r1
 80020aa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80020ac:	f7ff f882 	bl	80011b4 <HAL_GetTick>
 80020b0:	0003      	movs	r3, r0
 80020b2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020b4:	e009      	b.n	80020ca <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b6:	f7ff f87d 	bl	80011b4 <HAL_GetTick>
 80020ba:	0002      	movs	r2, r0
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	4a6a      	ldr	r2, [pc, #424]	; (800226c <HAL_RCC_ClockConfig+0x1f4>)
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e0ca      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80020ca:	4b67      	ldr	r3, [pc, #412]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	2207      	movs	r2, #7
 80020d0:	4013      	ands	r3, r2
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	d1ee      	bne.n	80020b6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2202      	movs	r2, #2
 80020de:	4013      	ands	r3, r2
 80020e0:	d015      	beq.n	800210e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	2204      	movs	r2, #4
 80020e8:	4013      	ands	r3, r2
 80020ea:	d006      	beq.n	80020fa <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80020ec:	4b60      	ldr	r3, [pc, #384]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 80020ee:	689a      	ldr	r2, [r3, #8]
 80020f0:	4b5f      	ldr	r3, [pc, #380]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 80020f2:	21e0      	movs	r1, #224	; 0xe0
 80020f4:	01c9      	lsls	r1, r1, #7
 80020f6:	430a      	orrs	r2, r1
 80020f8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020fa:	4b5d      	ldr	r3, [pc, #372]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	4a5d      	ldr	r2, [pc, #372]	; (8002274 <HAL_RCC_ClockConfig+0x1fc>)
 8002100:	4013      	ands	r3, r2
 8002102:	0019      	movs	r1, r3
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	689a      	ldr	r2, [r3, #8]
 8002108:	4b59      	ldr	r3, [pc, #356]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 800210a:	430a      	orrs	r2, r1
 800210c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2201      	movs	r2, #1
 8002114:	4013      	ands	r3, r2
 8002116:	d057      	beq.n	80021c8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	2b01      	cmp	r3, #1
 800211e:	d107      	bne.n	8002130 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002120:	4b53      	ldr	r3, [pc, #332]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 8002122:	681a      	ldr	r2, [r3, #0]
 8002124:	2380      	movs	r3, #128	; 0x80
 8002126:	029b      	lsls	r3, r3, #10
 8002128:	4013      	ands	r3, r2
 800212a:	d12b      	bne.n	8002184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e097      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	2b02      	cmp	r3, #2
 8002136:	d107      	bne.n	8002148 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002138:	4b4d      	ldr	r3, [pc, #308]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	2380      	movs	r3, #128	; 0x80
 800213e:	049b      	lsls	r3, r3, #18
 8002140:	4013      	ands	r3, r2
 8002142:	d11f      	bne.n	8002184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002144:	2301      	movs	r3, #1
 8002146:	e08b      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2b00      	cmp	r3, #0
 800214e:	d107      	bne.n	8002160 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002150:	4b47      	ldr	r3, [pc, #284]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 8002152:	681a      	ldr	r2, [r3, #0]
 8002154:	2380      	movs	r3, #128	; 0x80
 8002156:	00db      	lsls	r3, r3, #3
 8002158:	4013      	ands	r3, r2
 800215a:	d113      	bne.n	8002184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800215c:	2301      	movs	r3, #1
 800215e:	e07f      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	2b03      	cmp	r3, #3
 8002166:	d106      	bne.n	8002176 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002168:	4b41      	ldr	r3, [pc, #260]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 800216a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800216c:	2202      	movs	r2, #2
 800216e:	4013      	ands	r3, r2
 8002170:	d108      	bne.n	8002184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e074      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002176:	4b3e      	ldr	r3, [pc, #248]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 8002178:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800217a:	2202      	movs	r2, #2
 800217c:	4013      	ands	r3, r2
 800217e:	d101      	bne.n	8002184 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e06d      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002184:	4b3a      	ldr	r3, [pc, #232]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 8002186:	689b      	ldr	r3, [r3, #8]
 8002188:	2207      	movs	r2, #7
 800218a:	4393      	bics	r3, r2
 800218c:	0019      	movs	r1, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	4b37      	ldr	r3, [pc, #220]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 8002194:	430a      	orrs	r2, r1
 8002196:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002198:	f7ff f80c 	bl	80011b4 <HAL_GetTick>
 800219c:	0003      	movs	r3, r0
 800219e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021a0:	e009      	b.n	80021b6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a2:	f7ff f807 	bl	80011b4 <HAL_GetTick>
 80021a6:	0002      	movs	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	4a2f      	ldr	r2, [pc, #188]	; (800226c <HAL_RCC_ClockConfig+0x1f4>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e054      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021b6:	4b2e      	ldr	r3, [pc, #184]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 80021b8:	689b      	ldr	r3, [r3, #8]
 80021ba:	2238      	movs	r2, #56	; 0x38
 80021bc:	401a      	ands	r2, r3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	00db      	lsls	r3, r3, #3
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d1ec      	bne.n	80021a2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80021c8:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	2207      	movs	r2, #7
 80021ce:	4013      	ands	r3, r2
 80021d0:	683a      	ldr	r2, [r7, #0]
 80021d2:	429a      	cmp	r2, r3
 80021d4:	d21e      	bcs.n	8002214 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	2207      	movs	r2, #7
 80021dc:	4393      	bics	r3, r2
 80021de:	0019      	movs	r1, r3
 80021e0:	4b21      	ldr	r3, [pc, #132]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 80021e2:	683a      	ldr	r2, [r7, #0]
 80021e4:	430a      	orrs	r2, r1
 80021e6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80021e8:	f7fe ffe4 	bl	80011b4 <HAL_GetTick>
 80021ec:	0003      	movs	r3, r0
 80021ee:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80021f0:	e009      	b.n	8002206 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021f2:	f7fe ffdf 	bl	80011b4 <HAL_GetTick>
 80021f6:	0002      	movs	r2, r0
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	4a1b      	ldr	r2, [pc, #108]	; (800226c <HAL_RCC_ClockConfig+0x1f4>)
 80021fe:	4293      	cmp	r3, r2
 8002200:	d901      	bls.n	8002206 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002202:	2303      	movs	r3, #3
 8002204:	e02c      	b.n	8002260 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002206:	4b18      	ldr	r3, [pc, #96]	; (8002268 <HAL_RCC_ClockConfig+0x1f0>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	2207      	movs	r2, #7
 800220c:	4013      	ands	r3, r2
 800220e:	683a      	ldr	r2, [r7, #0]
 8002210:	429a      	cmp	r2, r3
 8002212:	d1ee      	bne.n	80021f2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2204      	movs	r2, #4
 800221a:	4013      	ands	r3, r2
 800221c:	d009      	beq.n	8002232 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800221e:	4b14      	ldr	r3, [pc, #80]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	4a15      	ldr	r2, [pc, #84]	; (8002278 <HAL_RCC_ClockConfig+0x200>)
 8002224:	4013      	ands	r3, r2
 8002226:	0019      	movs	r1, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	4b10      	ldr	r3, [pc, #64]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 800222e:	430a      	orrs	r2, r1
 8002230:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002232:	f000 f829 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002236:	0001      	movs	r1, r0
 8002238:	4b0d      	ldr	r3, [pc, #52]	; (8002270 <HAL_RCC_ClockConfig+0x1f8>)
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	0a1b      	lsrs	r3, r3, #8
 800223e:	220f      	movs	r2, #15
 8002240:	401a      	ands	r2, r3
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <HAL_RCC_ClockConfig+0x204>)
 8002244:	0092      	lsls	r2, r2, #2
 8002246:	58d3      	ldr	r3, [r2, r3]
 8002248:	221f      	movs	r2, #31
 800224a:	4013      	ands	r3, r2
 800224c:	000a      	movs	r2, r1
 800224e:	40da      	lsrs	r2, r3
 8002250:	4b0b      	ldr	r3, [pc, #44]	; (8002280 <HAL_RCC_ClockConfig+0x208>)
 8002252:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002254:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_RCC_ClockConfig+0x20c>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	0018      	movs	r0, r3
 800225a:	f7fe ff51 	bl	8001100 <HAL_InitTick>
 800225e:	0003      	movs	r3, r0
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b004      	add	sp, #16
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40022000 	.word	0x40022000
 800226c:	00001388 	.word	0x00001388
 8002270:	40021000 	.word	0x40021000
 8002274:	fffff0ff 	.word	0xfffff0ff
 8002278:	ffff8fff 	.word	0xffff8fff
 800227c:	080057a8 	.word	0x080057a8
 8002280:	20000000 	.word	0x20000000
 8002284:	20000038 	.word	0x20000038

08002288 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b086      	sub	sp, #24
 800228c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800228e:	4b3c      	ldr	r3, [pc, #240]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002290:	689b      	ldr	r3, [r3, #8]
 8002292:	2238      	movs	r2, #56	; 0x38
 8002294:	4013      	ands	r3, r2
 8002296:	d10f      	bne.n	80022b8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002298:	4b39      	ldr	r3, [pc, #228]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	0adb      	lsrs	r3, r3, #11
 800229e:	2207      	movs	r2, #7
 80022a0:	4013      	ands	r3, r2
 80022a2:	2201      	movs	r2, #1
 80022a4:	409a      	lsls	r2, r3
 80022a6:	0013      	movs	r3, r2
 80022a8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80022aa:	6839      	ldr	r1, [r7, #0]
 80022ac:	4835      	ldr	r0, [pc, #212]	; (8002384 <HAL_RCC_GetSysClockFreq+0xfc>)
 80022ae:	f7fd ff33 	bl	8000118 <__udivsi3>
 80022b2:	0003      	movs	r3, r0
 80022b4:	613b      	str	r3, [r7, #16]
 80022b6:	e05d      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80022b8:	4b31      	ldr	r3, [pc, #196]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	2238      	movs	r2, #56	; 0x38
 80022be:	4013      	ands	r3, r2
 80022c0:	2b08      	cmp	r3, #8
 80022c2:	d102      	bne.n	80022ca <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022c4:	4b30      	ldr	r3, [pc, #192]	; (8002388 <HAL_RCC_GetSysClockFreq+0x100>)
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	e054      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80022ca:	4b2d      	ldr	r3, [pc, #180]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022cc:	689b      	ldr	r3, [r3, #8]
 80022ce:	2238      	movs	r2, #56	; 0x38
 80022d0:	4013      	ands	r3, r2
 80022d2:	2b10      	cmp	r3, #16
 80022d4:	d138      	bne.n	8002348 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80022d6:	4b2a      	ldr	r3, [pc, #168]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022d8:	68db      	ldr	r3, [r3, #12]
 80022da:	2203      	movs	r2, #3
 80022dc:	4013      	ands	r3, r2
 80022de:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022e0:	4b27      	ldr	r3, [pc, #156]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 80022e2:	68db      	ldr	r3, [r3, #12]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	2207      	movs	r2, #7
 80022e8:	4013      	ands	r3, r2
 80022ea:	3301      	adds	r3, #1
 80022ec:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2b03      	cmp	r3, #3
 80022f2:	d10d      	bne.n	8002310 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	4824      	ldr	r0, [pc, #144]	; (8002388 <HAL_RCC_GetSysClockFreq+0x100>)
 80022f8:	f7fd ff0e 	bl	8000118 <__udivsi3>
 80022fc:	0003      	movs	r3, r0
 80022fe:	0019      	movs	r1, r3
 8002300:	4b1f      	ldr	r3, [pc, #124]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	0a1b      	lsrs	r3, r3, #8
 8002306:	227f      	movs	r2, #127	; 0x7f
 8002308:	4013      	ands	r3, r2
 800230a:	434b      	muls	r3, r1
 800230c:	617b      	str	r3, [r7, #20]
        break;
 800230e:	e00d      	b.n	800232c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002310:	68b9      	ldr	r1, [r7, #8]
 8002312:	481c      	ldr	r0, [pc, #112]	; (8002384 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002314:	f7fd ff00 	bl	8000118 <__udivsi3>
 8002318:	0003      	movs	r3, r0
 800231a:	0019      	movs	r1, r3
 800231c:	4b18      	ldr	r3, [pc, #96]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	0a1b      	lsrs	r3, r3, #8
 8002322:	227f      	movs	r2, #127	; 0x7f
 8002324:	4013      	ands	r3, r2
 8002326:	434b      	muls	r3, r1
 8002328:	617b      	str	r3, [r7, #20]
        break;
 800232a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800232c:	4b14      	ldr	r3, [pc, #80]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	0f5b      	lsrs	r3, r3, #29
 8002332:	2207      	movs	r2, #7
 8002334:	4013      	ands	r3, r2
 8002336:	3301      	adds	r3, #1
 8002338:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	6978      	ldr	r0, [r7, #20]
 800233e:	f7fd feeb 	bl	8000118 <__udivsi3>
 8002342:	0003      	movs	r3, r0
 8002344:	613b      	str	r3, [r7, #16]
 8002346:	e015      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002348:	4b0d      	ldr	r3, [pc, #52]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	2238      	movs	r2, #56	; 0x38
 800234e:	4013      	ands	r3, r2
 8002350:	2b20      	cmp	r3, #32
 8002352:	d103      	bne.n	800235c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	021b      	lsls	r3, r3, #8
 8002358:	613b      	str	r3, [r7, #16]
 800235a:	e00b      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800235c:	4b08      	ldr	r3, [pc, #32]	; (8002380 <HAL_RCC_GetSysClockFreq+0xf8>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	2238      	movs	r2, #56	; 0x38
 8002362:	4013      	ands	r3, r2
 8002364:	2b18      	cmp	r3, #24
 8002366:	d103      	bne.n	8002370 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002368:	23fa      	movs	r3, #250	; 0xfa
 800236a:	01db      	lsls	r3, r3, #7
 800236c:	613b      	str	r3, [r7, #16]
 800236e:	e001      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002370:	2300      	movs	r3, #0
 8002372:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002374:	693b      	ldr	r3, [r7, #16]
}
 8002376:	0018      	movs	r0, r3
 8002378:	46bd      	mov	sp, r7
 800237a:	b006      	add	sp, #24
 800237c:	bd80      	pop	{r7, pc}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	40021000 	.word	0x40021000
 8002384:	00f42400 	.word	0x00f42400
 8002388:	007a1200 	.word	0x007a1200

0800238c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002390:	4b02      	ldr	r3, [pc, #8]	; (800239c <HAL_RCC_GetHCLKFreq+0x10>)
 8002392:	681b      	ldr	r3, [r3, #0]
}
 8002394:	0018      	movs	r0, r3
 8002396:	46bd      	mov	sp, r7
 8002398:	bd80      	pop	{r7, pc}
 800239a:	46c0      	nop			; (mov r8, r8)
 800239c:	20000000 	.word	0x20000000

080023a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023a0:	b5b0      	push	{r4, r5, r7, lr}
 80023a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80023a4:	f7ff fff2 	bl	800238c <HAL_RCC_GetHCLKFreq>
 80023a8:	0004      	movs	r4, r0
 80023aa:	f7ff fb43 	bl	8001a34 <LL_RCC_GetAPB1Prescaler>
 80023ae:	0003      	movs	r3, r0
 80023b0:	0b1a      	lsrs	r2, r3, #12
 80023b2:	4b05      	ldr	r3, [pc, #20]	; (80023c8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023b4:	0092      	lsls	r2, r2, #2
 80023b6:	58d3      	ldr	r3, [r2, r3]
 80023b8:	221f      	movs	r2, #31
 80023ba:	4013      	ands	r3, r2
 80023bc:	40dc      	lsrs	r4, r3
 80023be:	0023      	movs	r3, r4
}
 80023c0:	0018      	movs	r0, r3
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bdb0      	pop	{r4, r5, r7, pc}
 80023c6:	46c0      	nop			; (mov r8, r8)
 80023c8:	080057e8 	.word	0x080057e8

080023cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80023d4:	2313      	movs	r3, #19
 80023d6:	18fb      	adds	r3, r7, r3
 80023d8:	2200      	movs	r2, #0
 80023da:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023dc:	2312      	movs	r3, #18
 80023de:	18fb      	adds	r3, r7, r3
 80023e0:	2200      	movs	r2, #0
 80023e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	2380      	movs	r3, #128	; 0x80
 80023ea:	029b      	lsls	r3, r3, #10
 80023ec:	4013      	ands	r3, r2
 80023ee:	d100      	bne.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80023f0:	e0a4      	b.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023f2:	2311      	movs	r3, #17
 80023f4:	18fb      	adds	r3, r7, r3
 80023f6:	2200      	movs	r2, #0
 80023f8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80023fa:	4b87      	ldr	r3, [pc, #540]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80023fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023fe:	2380      	movs	r3, #128	; 0x80
 8002400:	055b      	lsls	r3, r3, #21
 8002402:	4013      	ands	r3, r2
 8002404:	d111      	bne.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002406:	4b84      	ldr	r3, [pc, #528]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002408:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800240a:	4b83      	ldr	r3, [pc, #524]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800240c:	2180      	movs	r1, #128	; 0x80
 800240e:	0549      	lsls	r1, r1, #21
 8002410:	430a      	orrs	r2, r1
 8002412:	63da      	str	r2, [r3, #60]	; 0x3c
 8002414:	4b80      	ldr	r3, [pc, #512]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002416:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002418:	2380      	movs	r3, #128	; 0x80
 800241a:	055b      	lsls	r3, r3, #21
 800241c:	4013      	ands	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]
 8002420:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002422:	2311      	movs	r3, #17
 8002424:	18fb      	adds	r3, r7, r3
 8002426:	2201      	movs	r2, #1
 8002428:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800242a:	4b7c      	ldr	r3, [pc, #496]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	4b7b      	ldr	r3, [pc, #492]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002430:	2180      	movs	r1, #128	; 0x80
 8002432:	0049      	lsls	r1, r1, #1
 8002434:	430a      	orrs	r2, r1
 8002436:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002438:	f7fe febc 	bl	80011b4 <HAL_GetTick>
 800243c:	0003      	movs	r3, r0
 800243e:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002440:	e00b      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002442:	f7fe feb7 	bl	80011b4 <HAL_GetTick>
 8002446:	0002      	movs	r2, r0
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d904      	bls.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002450:	2313      	movs	r3, #19
 8002452:	18fb      	adds	r3, r7, r3
 8002454:	2203      	movs	r2, #3
 8002456:	701a      	strb	r2, [r3, #0]
        break;
 8002458:	e005      	b.n	8002466 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800245a:	4b70      	ldr	r3, [pc, #448]	; (800261c <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800245c:	681a      	ldr	r2, [r3, #0]
 800245e:	2380      	movs	r3, #128	; 0x80
 8002460:	005b      	lsls	r3, r3, #1
 8002462:	4013      	ands	r3, r2
 8002464:	d0ed      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8002466:	2313      	movs	r3, #19
 8002468:	18fb      	adds	r3, r7, r3
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d154      	bne.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002470:	4b69      	ldr	r3, [pc, #420]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002472:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002474:	23c0      	movs	r3, #192	; 0xc0
 8002476:	009b      	lsls	r3, r3, #2
 8002478:	4013      	ands	r3, r2
 800247a:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d019      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	699b      	ldr	r3, [r3, #24]
 8002486:	697a      	ldr	r2, [r7, #20]
 8002488:	429a      	cmp	r2, r3
 800248a:	d014      	beq.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800248c:	4b62      	ldr	r3, [pc, #392]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800248e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002490:	4a63      	ldr	r2, [pc, #396]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002492:	4013      	ands	r3, r2
 8002494:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002496:	4b60      	ldr	r3, [pc, #384]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002498:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800249a:	4b5f      	ldr	r3, [pc, #380]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800249c:	2180      	movs	r1, #128	; 0x80
 800249e:	0249      	lsls	r1, r1, #9
 80024a0:	430a      	orrs	r2, r1
 80024a2:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 80024a4:	4b5c      	ldr	r3, [pc, #368]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80024a8:	4b5b      	ldr	r3, [pc, #364]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024aa:	495e      	ldr	r1, [pc, #376]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024ac:	400a      	ands	r2, r1
 80024ae:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80024b0:	4b59      	ldr	r3, [pc, #356]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80024b6:	697b      	ldr	r3, [r7, #20]
 80024b8:	2201      	movs	r2, #1
 80024ba:	4013      	ands	r3, r2
 80024bc:	d016      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024be:	f7fe fe79 	bl	80011b4 <HAL_GetTick>
 80024c2:	0003      	movs	r3, r0
 80024c4:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024c6:	e00c      	b.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024c8:	f7fe fe74 	bl	80011b4 <HAL_GetTick>
 80024cc:	0002      	movs	r2, r0
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	1ad3      	subs	r3, r2, r3
 80024d2:	4a55      	ldr	r2, [pc, #340]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 80024d4:	4293      	cmp	r3, r2
 80024d6:	d904      	bls.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80024d8:	2313      	movs	r3, #19
 80024da:	18fb      	adds	r3, r7, r3
 80024dc:	2203      	movs	r2, #3
 80024de:	701a      	strb	r2, [r3, #0]
            break;
 80024e0:	e004      	b.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024e2:	4b4d      	ldr	r3, [pc, #308]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e6:	2202      	movs	r2, #2
 80024e8:	4013      	ands	r3, r2
 80024ea:	d0ed      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80024ec:	2313      	movs	r3, #19
 80024ee:	18fb      	adds	r3, r7, r3
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d10a      	bne.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024f6:	4b48      	ldr	r3, [pc, #288]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024fa:	4a49      	ldr	r2, [pc, #292]	; (8002620 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80024fc:	4013      	ands	r3, r2
 80024fe:	0019      	movs	r1, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	699a      	ldr	r2, [r3, #24]
 8002504:	4b44      	ldr	r3, [pc, #272]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002506:	430a      	orrs	r2, r1
 8002508:	65da      	str	r2, [r3, #92]	; 0x5c
 800250a:	e00c      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800250c:	2312      	movs	r3, #18
 800250e:	18fb      	adds	r3, r7, r3
 8002510:	2213      	movs	r2, #19
 8002512:	18ba      	adds	r2, r7, r2
 8002514:	7812      	ldrb	r2, [r2, #0]
 8002516:	701a      	strb	r2, [r3, #0]
 8002518:	e005      	b.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800251a:	2312      	movs	r3, #18
 800251c:	18fb      	adds	r3, r7, r3
 800251e:	2213      	movs	r2, #19
 8002520:	18ba      	adds	r2, r7, r2
 8002522:	7812      	ldrb	r2, [r2, #0]
 8002524:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002526:	2311      	movs	r3, #17
 8002528:	18fb      	adds	r3, r7, r3
 800252a:	781b      	ldrb	r3, [r3, #0]
 800252c:	2b01      	cmp	r3, #1
 800252e:	d105      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002530:	4b39      	ldr	r3, [pc, #228]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002532:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002534:	4b38      	ldr	r3, [pc, #224]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002536:	493d      	ldr	r1, [pc, #244]	; (800262c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002538:	400a      	ands	r2, r1
 800253a:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	2201      	movs	r2, #1
 8002542:	4013      	ands	r3, r2
 8002544:	d009      	beq.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002546:	4b34      	ldr	r3, [pc, #208]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800254a:	2203      	movs	r2, #3
 800254c:	4393      	bics	r3, r2
 800254e:	0019      	movs	r1, r3
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	685a      	ldr	r2, [r3, #4]
 8002554:	4b30      	ldr	r3, [pc, #192]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002556:	430a      	orrs	r2, r1
 8002558:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2202      	movs	r2, #2
 8002560:	4013      	ands	r3, r2
 8002562:	d009      	beq.n	8002578 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002564:	4b2c      	ldr	r3, [pc, #176]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002568:	220c      	movs	r2, #12
 800256a:	4393      	bics	r3, r2
 800256c:	0019      	movs	r1, r3
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	689a      	ldr	r2, [r3, #8]
 8002572:	4b29      	ldr	r3, [pc, #164]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002574:	430a      	orrs	r2, r1
 8002576:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	2240      	movs	r2, #64	; 0x40
 800257e:	4013      	ands	r3, r2
 8002580:	d009      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002582:	4b25      	ldr	r3, [pc, #148]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002586:	4a2a      	ldr	r2, [pc, #168]	; (8002630 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002588:	4013      	ands	r3, r2
 800258a:	0019      	movs	r1, r3
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68da      	ldr	r2, [r3, #12]
 8002590:	4b21      	ldr	r3, [pc, #132]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002592:	430a      	orrs	r2, r1
 8002594:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	01db      	lsls	r3, r3, #7
 800259e:	4013      	ands	r3, r2
 80025a0:	d015      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025a2:	4b1d      	ldr	r3, [pc, #116]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025a6:	009b      	lsls	r3, r3, #2
 80025a8:	0899      	lsrs	r1, r3, #2
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	695a      	ldr	r2, [r3, #20]
 80025ae:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025b0:	430a      	orrs	r2, r1
 80025b2:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	695a      	ldr	r2, [r3, #20]
 80025b8:	2380      	movs	r3, #128	; 0x80
 80025ba:	05db      	lsls	r3, r3, #23
 80025bc:	429a      	cmp	r2, r3
 80025be:	d106      	bne.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025c2:	68da      	ldr	r2, [r3, #12]
 80025c4:	4b14      	ldr	r3, [pc, #80]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025c6:	2180      	movs	r1, #128	; 0x80
 80025c8:	0249      	lsls	r1, r1, #9
 80025ca:	430a      	orrs	r2, r1
 80025cc:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	2380      	movs	r3, #128	; 0x80
 80025d4:	011b      	lsls	r3, r3, #4
 80025d6:	4013      	ands	r3, r2
 80025d8:	d016      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025de:	4a15      	ldr	r2, [pc, #84]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025e0:	4013      	ands	r3, r2
 80025e2:	0019      	movs	r1, r3
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	691a      	ldr	r2, [r3, #16]
 80025e8:	4b0b      	ldr	r3, [pc, #44]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025ea:	430a      	orrs	r2, r1
 80025ec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	691a      	ldr	r2, [r3, #16]
 80025f2:	2380      	movs	r3, #128	; 0x80
 80025f4:	01db      	lsls	r3, r3, #7
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d106      	bne.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80025fa:	4b07      	ldr	r3, [pc, #28]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025fc:	68da      	ldr	r2, [r3, #12]
 80025fe:	4b06      	ldr	r3, [pc, #24]	; (8002618 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002600:	2180      	movs	r1, #128	; 0x80
 8002602:	0249      	lsls	r1, r1, #9
 8002604:	430a      	orrs	r2, r1
 8002606:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8002608:	2312      	movs	r3, #18
 800260a:	18fb      	adds	r3, r7, r3
 800260c:	781b      	ldrb	r3, [r3, #0]
}
 800260e:	0018      	movs	r0, r3
 8002610:	46bd      	mov	sp, r7
 8002612:	b006      	add	sp, #24
 8002614:	bd80      	pop	{r7, pc}
 8002616:	46c0      	nop			; (mov r8, r8)
 8002618:	40021000 	.word	0x40021000
 800261c:	40007000 	.word	0x40007000
 8002620:	fffffcff 	.word	0xfffffcff
 8002624:	fffeffff 	.word	0xfffeffff
 8002628:	00001388 	.word	0x00001388
 800262c:	efffffff 	.word	0xefffffff
 8002630:	ffffcfff 	.word	0xffffcfff
 8002634:	ffff3fff 	.word	0xffff3fff

08002638 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b082      	sub	sp, #8
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	2b00      	cmp	r3, #0
 8002644:	d101      	bne.n	800264a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	e046      	b.n	80026d8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2280      	movs	r2, #128	; 0x80
 800264e:	589b      	ldr	r3, [r3, r2]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d107      	bne.n	8002664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	227c      	movs	r2, #124	; 0x7c
 8002658:	2100      	movs	r1, #0
 800265a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	0018      	movs	r0, r3
 8002660:	f7fe f83c 	bl	80006dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2280      	movs	r2, #128	; 0x80
 8002668:	2124      	movs	r1, #36	; 0x24
 800266a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2101      	movs	r1, #1
 8002678:	438a      	bics	r2, r1
 800267a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	0018      	movs	r0, r3
 8002680:	f000 fa90 	bl	8002ba4 <UART_SetConfig>
 8002684:	0003      	movs	r3, r0
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e024      	b.n	80026d8 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	0018      	movs	r0, r3
 800269a:	f000 ff0b 	bl	80034b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	685a      	ldr	r2, [r3, #4]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	490d      	ldr	r1, [pc, #52]	; (80026e0 <HAL_UART_Init+0xa8>)
 80026aa:	400a      	ands	r2, r1
 80026ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	689a      	ldr	r2, [r3, #8]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	212a      	movs	r1, #42	; 0x2a
 80026ba:	438a      	bics	r2, r1
 80026bc:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2101      	movs	r1, #1
 80026ca:	430a      	orrs	r2, r1
 80026cc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	0018      	movs	r0, r3
 80026d2:	f000 ffa3 	bl	800361c <UART_CheckIdleState>
 80026d6:	0003      	movs	r3, r0
}
 80026d8:	0018      	movs	r0, r3
 80026da:	46bd      	mov	sp, r7
 80026dc:	b002      	add	sp, #8
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	ffffb7ff 	.word	0xffffb7ff

080026e4 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80026f2:	2301      	movs	r3, #1
 80026f4:	e02c      	b.n	8002750 <HAL_UART_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2280      	movs	r2, #128	; 0x80
 80026fa:	2124      	movs	r1, #36	; 0x24
 80026fc:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	681a      	ldr	r2, [r3, #0]
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2101      	movs	r1, #1
 800270a:	438a      	bics	r2, r1
 800270c:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2200      	movs	r2, #0
 8002714:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	2200      	movs	r2, #0
 800271c:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	2200      	movs	r2, #0
 8002724:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	0018      	movs	r0, r3
 800272a:	f7fe f829 	bl	8000780 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2288      	movs	r2, #136	; 0x88
 8002732:	2100      	movs	r1, #0
 8002734:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2280      	movs	r2, #128	; 0x80
 800273a:	2100      	movs	r1, #0
 800273c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	2284      	movs	r2, #132	; 0x84
 8002742:	2100      	movs	r1, #0
 8002744:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	227c      	movs	r2, #124	; 0x7c
 800274a:	2100      	movs	r1, #0
 800274c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800274e:	2300      	movs	r3, #0
}
 8002750:	0018      	movs	r0, r3
 8002752:	46bd      	mov	sp, r7
 8002754:	b002      	add	sp, #8
 8002756:	bd80      	pop	{r7, pc}

08002758 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	60b9      	str	r1, [r7, #8]
 8002762:	1dbb      	adds	r3, r7, #6
 8002764:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2280      	movs	r2, #128	; 0x80
 800276a:	589b      	ldr	r3, [r3, r2]
 800276c:	2b20      	cmp	r3, #32
 800276e:	d000      	beq.n	8002772 <HAL_UART_Transmit_IT+0x1a>
 8002770:	e07f      	b.n	8002872 <HAL_UART_Transmit_IT+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_UART_Transmit_IT+0x28>
 8002778:	1dbb      	adds	r3, r7, #6
 800277a:	881b      	ldrh	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8002780:	2301      	movs	r3, #1
 8002782:	e077      	b.n	8002874 <HAL_UART_Transmit_IT+0x11c>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	689a      	ldr	r2, [r3, #8]
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	015b      	lsls	r3, r3, #5
 800278c:	429a      	cmp	r2, r3
 800278e:	d109      	bne.n	80027a4 <HAL_UART_Transmit_IT+0x4c>
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b00      	cmp	r3, #0
 8002796:	d105      	bne.n	80027a4 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002798:	68bb      	ldr	r3, [r7, #8]
 800279a:	2201      	movs	r2, #1
 800279c:	4013      	ands	r3, r2
 800279e:	d001      	beq.n	80027a4 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80027a0:	2301      	movs	r3, #1
 80027a2:	e067      	b.n	8002874 <HAL_UART_Transmit_IT+0x11c>
      }
    }

    __HAL_LOCK(huart);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	227c      	movs	r2, #124	; 0x7c
 80027a8:	5c9b      	ldrb	r3, [r3, r2]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <HAL_UART_Transmit_IT+0x5a>
 80027ae:	2302      	movs	r3, #2
 80027b0:	e060      	b.n	8002874 <HAL_UART_Transmit_IT+0x11c>
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	227c      	movs	r2, #124	; 0x7c
 80027b6:	2101      	movs	r1, #1
 80027b8:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	1dba      	adds	r2, r7, #6
 80027c4:	2154      	movs	r1, #84	; 0x54
 80027c6:	8812      	ldrh	r2, [r2, #0]
 80027c8:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	1dba      	adds	r2, r7, #6
 80027ce:	2156      	movs	r1, #86	; 0x56
 80027d0:	8812      	ldrh	r2, [r2, #0]
 80027d2:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	2200      	movs	r2, #0
 80027d8:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2288      	movs	r2, #136	; 0x88
 80027de:	2100      	movs	r1, #0
 80027e0:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2280      	movs	r2, #128	; 0x80
 80027e6:	2121      	movs	r1, #33	; 0x21
 80027e8:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80027ee:	2380      	movs	r3, #128	; 0x80
 80027f0:	059b      	lsls	r3, r3, #22
 80027f2:	429a      	cmp	r2, r3
 80027f4:	d11e      	bne.n	8002834 <HAL_UART_Transmit_IT+0xdc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	2380      	movs	r3, #128	; 0x80
 80027fc:	015b      	lsls	r3, r3, #5
 80027fe:	429a      	cmp	r2, r3
 8002800:	d107      	bne.n	8002812 <HAL_UART_Transmit_IT+0xba>
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	691b      	ldr	r3, [r3, #16]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d103      	bne.n	8002812 <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a1b      	ldr	r2, [pc, #108]	; (800287c <HAL_UART_Transmit_IT+0x124>)
 800280e:	671a      	str	r2, [r3, #112]	; 0x70
 8002810:	e002      	b.n	8002818 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	4a1a      	ldr	r2, [pc, #104]	; (8002880 <HAL_UART_Transmit_IT+0x128>)
 8002816:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	227c      	movs	r2, #124	; 0x7c
 800281c:	2100      	movs	r1, #0
 800281e:	5499      	strb	r1, [r3, r2]

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	689a      	ldr	r2, [r3, #8]
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2180      	movs	r1, #128	; 0x80
 800282c:	0409      	lsls	r1, r1, #16
 800282e:	430a      	orrs	r2, r1
 8002830:	609a      	str	r2, [r3, #8]
 8002832:	e01c      	b.n	800286e <HAL_UART_Transmit_IT+0x116>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689a      	ldr	r2, [r3, #8]
 8002838:	2380      	movs	r3, #128	; 0x80
 800283a:	015b      	lsls	r3, r3, #5
 800283c:	429a      	cmp	r2, r3
 800283e:	d107      	bne.n	8002850 <HAL_UART_Transmit_IT+0xf8>
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d103      	bne.n	8002850 <HAL_UART_Transmit_IT+0xf8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <HAL_UART_Transmit_IT+0x12c>)
 800284c:	671a      	str	r2, [r3, #112]	; 0x70
 800284e:	e002      	b.n	8002856 <HAL_UART_Transmit_IT+0xfe>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	4a0d      	ldr	r2, [pc, #52]	; (8002888 <HAL_UART_Transmit_IT+0x130>)
 8002854:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	227c      	movs	r2, #124	; 0x7c
 800285a:	2100      	movs	r1, #0
 800285c:	5499      	strb	r1, [r3, r2]

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	681a      	ldr	r2, [r3, #0]
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2180      	movs	r1, #128	; 0x80
 800286a:	430a      	orrs	r2, r1
 800286c:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 800286e:	2300      	movs	r3, #0
 8002870:	e000      	b.n	8002874 <HAL_UART_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002872:	2302      	movs	r3, #2
  }
}
 8002874:	0018      	movs	r0, r3
 8002876:	46bd      	mov	sp, r7
 8002878:	b004      	add	sp, #16
 800287a:	bd80      	pop	{r7, pc}
 800287c:	08003951 	.word	0x08003951
 8002880:	080038a9 	.word	0x080038a9
 8002884:	0800382f 	.word	0x0800382f
 8002888:	080037bf 	.word	0x080037bf

0800288c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b088      	sub	sp, #32
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	69db      	ldr	r3, [r3, #28]
 800289a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	220f      	movs	r2, #15
 80028b0:	4013      	ands	r3, r2
 80028b2:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d117      	bne.n	80028ea <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80028ba:	69fb      	ldr	r3, [r7, #28]
 80028bc:	2220      	movs	r2, #32
 80028be:	4013      	ands	r3, r2
 80028c0:	d013      	beq.n	80028ea <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80028c2:	69bb      	ldr	r3, [r7, #24]
 80028c4:	2220      	movs	r2, #32
 80028c6:	4013      	ands	r3, r2
 80028c8:	d104      	bne.n	80028d4 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80028ca:	697a      	ldr	r2, [r7, #20]
 80028cc:	2380      	movs	r3, #128	; 0x80
 80028ce:	055b      	lsls	r3, r3, #21
 80028d0:	4013      	ands	r3, r2
 80028d2:	d00a      	beq.n	80028ea <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d100      	bne.n	80028de <HAL_UART_IRQHandler+0x52>
 80028dc:	e127      	b.n	8002b2e <HAL_UART_IRQHandler+0x2a2>
      {
        huart->RxISR(huart);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	0010      	movs	r0, r2
 80028e6:	4798      	blx	r3
      }
      return;
 80028e8:	e121      	b.n	8002b2e <HAL_UART_IRQHandler+0x2a2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d100      	bne.n	80028f2 <HAL_UART_IRQHandler+0x66>
 80028f0:	e0c8      	b.n	8002a84 <HAL_UART_IRQHandler+0x1f8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	4a92      	ldr	r2, [pc, #584]	; (8002b40 <HAL_UART_IRQHandler+0x2b4>)
 80028f6:	4013      	ands	r3, r2
 80028f8:	d105      	bne.n	8002906 <HAL_UART_IRQHandler+0x7a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 80028fa:	69ba      	ldr	r2, [r7, #24]
 80028fc:	2390      	movs	r3, #144	; 0x90
 80028fe:	005b      	lsls	r3, r3, #1
 8002900:	4013      	ands	r3, r2
 8002902:	d100      	bne.n	8002906 <HAL_UART_IRQHandler+0x7a>
 8002904:	e0be      	b.n	8002a84 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	2201      	movs	r2, #1
 800290a:	4013      	ands	r3, r2
 800290c:	d010      	beq.n	8002930 <HAL_UART_IRQHandler+0xa4>
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	2380      	movs	r3, #128	; 0x80
 8002912:	005b      	lsls	r3, r3, #1
 8002914:	4013      	ands	r3, r2
 8002916:	d00b      	beq.n	8002930 <HAL_UART_IRQHandler+0xa4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2201      	movs	r2, #1
 800291e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2288      	movs	r2, #136	; 0x88
 8002924:	589b      	ldr	r3, [r3, r2]
 8002926:	2201      	movs	r2, #1
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2188      	movs	r1, #136	; 0x88
 800292e:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002930:	69fb      	ldr	r3, [r7, #28]
 8002932:	2202      	movs	r2, #2
 8002934:	4013      	ands	r3, r2
 8002936:	d00f      	beq.n	8002958 <HAL_UART_IRQHandler+0xcc>
 8002938:	697b      	ldr	r3, [r7, #20]
 800293a:	2201      	movs	r2, #1
 800293c:	4013      	ands	r3, r2
 800293e:	d00b      	beq.n	8002958 <HAL_UART_IRQHandler+0xcc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	2202      	movs	r2, #2
 8002946:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2288      	movs	r2, #136	; 0x88
 800294c:	589b      	ldr	r3, [r3, r2]
 800294e:	2204      	movs	r2, #4
 8002950:	431a      	orrs	r2, r3
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2188      	movs	r1, #136	; 0x88
 8002956:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002958:	69fb      	ldr	r3, [r7, #28]
 800295a:	2204      	movs	r2, #4
 800295c:	4013      	ands	r3, r2
 800295e:	d00f      	beq.n	8002980 <HAL_UART_IRQHandler+0xf4>
 8002960:	697b      	ldr	r3, [r7, #20]
 8002962:	2201      	movs	r2, #1
 8002964:	4013      	ands	r3, r2
 8002966:	d00b      	beq.n	8002980 <HAL_UART_IRQHandler+0xf4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	2204      	movs	r2, #4
 800296e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2288      	movs	r2, #136	; 0x88
 8002974:	589b      	ldr	r3, [r3, r2]
 8002976:	2202      	movs	r2, #2
 8002978:	431a      	orrs	r2, r3
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2188      	movs	r1, #136	; 0x88
 800297e:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002980:	69fb      	ldr	r3, [r7, #28]
 8002982:	2208      	movs	r2, #8
 8002984:	4013      	ands	r3, r2
 8002986:	d013      	beq.n	80029b0 <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002988:	69bb      	ldr	r3, [r7, #24]
 800298a:	2220      	movs	r2, #32
 800298c:	4013      	ands	r3, r2
 800298e:	d103      	bne.n	8002998 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	4a6b      	ldr	r2, [pc, #428]	; (8002b40 <HAL_UART_IRQHandler+0x2b4>)
 8002994:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002996:	d00b      	beq.n	80029b0 <HAL_UART_IRQHandler+0x124>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2208      	movs	r2, #8
 800299e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	2288      	movs	r2, #136	; 0x88
 80029a4:	589b      	ldr	r3, [r3, r2]
 80029a6:	2208      	movs	r2, #8
 80029a8:	431a      	orrs	r2, r3
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	2188      	movs	r1, #136	; 0x88
 80029ae:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2288      	movs	r2, #136	; 0x88
 80029b4:	589b      	ldr	r3, [r3, r2]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d100      	bne.n	80029bc <HAL_UART_IRQHandler+0x130>
 80029ba:	e0ba      	b.n	8002b32 <HAL_UART_IRQHandler+0x2a6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	2220      	movs	r2, #32
 80029c0:	4013      	ands	r3, r2
 80029c2:	d011      	beq.n	80029e8 <HAL_UART_IRQHandler+0x15c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2220      	movs	r2, #32
 80029c8:	4013      	ands	r3, r2
 80029ca:	d104      	bne.n	80029d6 <HAL_UART_IRQHandler+0x14a>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	2380      	movs	r3, #128	; 0x80
 80029d0:	055b      	lsls	r3, r3, #21
 80029d2:	4013      	ands	r3, r2
 80029d4:	d008      	beq.n	80029e8 <HAL_UART_IRQHandler+0x15c>
      {
        if (huart->RxISR != NULL)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d004      	beq.n	80029e8 <HAL_UART_IRQHandler+0x15c>
        {
          huart->RxISR(huart);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	0010      	movs	r0, r2
 80029e6:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2288      	movs	r2, #136	; 0x88
 80029ec:	589b      	ldr	r3, [r3, r2]
 80029ee:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	2240      	movs	r2, #64	; 0x40
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b40      	cmp	r3, #64	; 0x40
 80029fc:	d003      	beq.n	8002a06 <HAL_UART_IRQHandler+0x17a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2208      	movs	r2, #8
 8002a02:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a04:	d033      	beq.n	8002a6e <HAL_UART_IRQHandler+0x1e2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	0018      	movs	r0, r3
 8002a0a:	f000 fe9d 	bl	8003748 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689b      	ldr	r3, [r3, #8]
 8002a14:	2240      	movs	r2, #64	; 0x40
 8002a16:	4013      	ands	r3, r2
 8002a18:	2b40      	cmp	r3, #64	; 0x40
 8002a1a:	d123      	bne.n	8002a64 <HAL_UART_IRQHandler+0x1d8>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	689a      	ldr	r2, [r3, #8]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2140      	movs	r1, #64	; 0x40
 8002a28:	438a      	bics	r2, r1
 8002a2a:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d012      	beq.n	8002a5a <HAL_UART_IRQHandler+0x1ce>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a38:	4a42      	ldr	r2, [pc, #264]	; (8002b44 <HAL_UART_IRQHandler+0x2b8>)
 8002a3a:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a40:	0018      	movs	r0, r3
 8002a42:	f7fe fccf 	bl	80013e4 <HAL_DMA_Abort_IT>
 8002a46:	1e03      	subs	r3, r0, #0
 8002a48:	d01a      	beq.n	8002a80 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a54:	0018      	movs	r0, r3
 8002a56:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a58:	e012      	b.n	8002a80 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f000 f87b 	bl	8002b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a62:	e00d      	b.n	8002a80 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 f876 	bl	8002b58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6c:	e008      	b.n	8002a80 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	0018      	movs	r0, r3
 8002a72:	f000 f871 	bl	8002b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2288      	movs	r2, #136	; 0x88
 8002a7a:	2100      	movs	r1, #0
 8002a7c:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002a7e:	e058      	b.n	8002b32 <HAL_UART_IRQHandler+0x2a6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a80:	46c0      	nop			; (mov r8, r8)
    return;
 8002a82:	e056      	b.n	8002b32 <HAL_UART_IRQHandler+0x2a6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002a84:	69fa      	ldr	r2, [r7, #28]
 8002a86:	2380      	movs	r3, #128	; 0x80
 8002a88:	035b      	lsls	r3, r3, #13
 8002a8a:	4013      	ands	r3, r2
 8002a8c:	d00e      	beq.n	8002aac <HAL_UART_IRQHandler+0x220>
 8002a8e:	697a      	ldr	r2, [r7, #20]
 8002a90:	2380      	movs	r3, #128	; 0x80
 8002a92:	03db      	lsls	r3, r3, #15
 8002a94:	4013      	ands	r3, r2
 8002a96:	d009      	beq.n	8002aac <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2280      	movs	r2, #128	; 0x80
 8002a9e:	0352      	lsls	r2, r2, #13
 8002aa0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	0018      	movs	r0, r3
 8002aa6:	f000 ffc6 	bl	8003a36 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002aaa:	e045      	b.n	8002b38 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	2280      	movs	r2, #128	; 0x80
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	d012      	beq.n	8002ada <HAL_UART_IRQHandler+0x24e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2280      	movs	r2, #128	; 0x80
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d104      	bne.n	8002ac6 <HAL_UART_IRQHandler+0x23a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002abc:	697a      	ldr	r2, [r7, #20]
 8002abe:	2380      	movs	r3, #128	; 0x80
 8002ac0:	041b      	lsls	r3, r3, #16
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	d009      	beq.n	8002ada <HAL_UART_IRQHandler+0x24e>
  {
    if (huart->TxISR != NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d033      	beq.n	8002b36 <HAL_UART_IRQHandler+0x2aa>
    {
      huart->TxISR(huart);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	0010      	movs	r0, r2
 8002ad6:	4798      	blx	r3
    }
    return;
 8002ad8:	e02d      	b.n	8002b36 <HAL_UART_IRQHandler+0x2aa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	2240      	movs	r2, #64	; 0x40
 8002ade:	4013      	ands	r3, r2
 8002ae0:	d008      	beq.n	8002af4 <HAL_UART_IRQHandler+0x268>
 8002ae2:	69bb      	ldr	r3, [r7, #24]
 8002ae4:	2240      	movs	r2, #64	; 0x40
 8002ae6:	4013      	ands	r3, r2
 8002ae8:	d004      	beq.n	8002af4 <HAL_UART_IRQHandler+0x268>
  {
    UART_EndTransmit_IT(huart);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	0018      	movs	r0, r3
 8002aee:	f000 ff87 	bl	8003a00 <UART_EndTransmit_IT>
    return;
 8002af2:	e021      	b.n	8002b38 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002af4:	69fa      	ldr	r2, [r7, #28]
 8002af6:	2380      	movs	r3, #128	; 0x80
 8002af8:	041b      	lsls	r3, r3, #16
 8002afa:	4013      	ands	r3, r2
 8002afc:	d009      	beq.n	8002b12 <HAL_UART_IRQHandler+0x286>
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	2380      	movs	r3, #128	; 0x80
 8002b02:	05db      	lsls	r3, r3, #23
 8002b04:	4013      	ands	r3, r2
 8002b06:	d004      	beq.n	8002b12 <HAL_UART_IRQHandler+0x286>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	0018      	movs	r0, r3
 8002b0c:	f000 ffa3 	bl	8003a56 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b10:	e012      	b.n	8002b38 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002b12:	69fa      	ldr	r2, [r7, #28]
 8002b14:	2380      	movs	r3, #128	; 0x80
 8002b16:	045b      	lsls	r3, r3, #17
 8002b18:	4013      	ands	r3, r2
 8002b1a:	d00d      	beq.n	8002b38 <HAL_UART_IRQHandler+0x2ac>
 8002b1c:	69bb      	ldr	r3, [r7, #24]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	da0a      	bge.n	8002b38 <HAL_UART_IRQHandler+0x2ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	0018      	movs	r0, r3
 8002b26:	f000 ff8e 	bl	8003a46 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002b2a:	46c0      	nop			; (mov r8, r8)
 8002b2c:	e004      	b.n	8002b38 <HAL_UART_IRQHandler+0x2ac>
      return;
 8002b2e:	46c0      	nop			; (mov r8, r8)
 8002b30:	e002      	b.n	8002b38 <HAL_UART_IRQHandler+0x2ac>
    return;
 8002b32:	46c0      	nop			; (mov r8, r8)
 8002b34:	e000      	b.n	8002b38 <HAL_UART_IRQHandler+0x2ac>
    return;
 8002b36:	46c0      	nop			; (mov r8, r8)
  }
}
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	b008      	add	sp, #32
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	46c0      	nop			; (mov r8, r8)
 8002b40:	10000001 	.word	0x10000001
 8002b44:	08003791 	.word	0x08003791

08002b48 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b082      	sub	sp, #8
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002b50:	46c0      	nop			; (mov r8, r8)
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b002      	add	sp, #8
 8002b56:	bd80      	pop	{r7, pc}

08002b58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	b082      	sub	sp, #8
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002b60:	46c0      	nop			; (mov r8, r8)
 8002b62:	46bd      	mov	sp, r7
 8002b64:	b002      	add	sp, #8
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2280      	movs	r2, #128	; 0x80
 8002b74:	589b      	ldr	r3, [r3, r2]
 8002b76:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2284      	movs	r2, #132	; 0x84
 8002b7c:	589b      	ldr	r3, [r3, r2]
 8002b7e:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	68bb      	ldr	r3, [r7, #8]
 8002b84:	4313      	orrs	r3, r2
}
 8002b86:	0018      	movs	r0, r3
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	b004      	add	sp, #16
 8002b8c:	bd80      	pop	{r7, pc}

08002b8e <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8002b8e:	b580      	push	{r7, lr}
 8002b90:	b082      	sub	sp, #8
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2288      	movs	r2, #136	; 0x88
 8002b9a:	589b      	ldr	r3, [r3, r2]
}
 8002b9c:	0018      	movs	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	b002      	add	sp, #8
 8002ba2:	bd80      	pop	{r7, pc}

08002ba4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002ba4:	b580      	push	{r7, lr}
 8002ba6:	b088      	sub	sp, #32
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002bb0:	231e      	movs	r3, #30
 8002bb2:	18fb      	adds	r3, r7, r3
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	431a      	orrs	r2, r3
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	431a      	orrs	r2, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	69db      	ldr	r3, [r3, #28]
 8002bd0:	4313      	orrs	r3, r2
 8002bd2:	61bb      	str	r3, [r7, #24]
  tmpreg |= (uint32_t)huart->FifoMode;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4aba      	ldr	r2, [pc, #744]	; (8002ed0 <UART_SetConfig+0x32c>)
 8002be6:	4013      	ands	r3, r2
 8002be8:	0019      	movs	r1, r3
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	69ba      	ldr	r2, [r7, #24]
 8002bf0:	430a      	orrs	r2, r1
 8002bf2:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	4ab6      	ldr	r2, [pc, #728]	; (8002ed4 <UART_SetConfig+0x330>)
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	0019      	movs	r1, r3
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68da      	ldr	r2, [r3, #12]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	61bb      	str	r3, [r7, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6a1b      	ldr	r3, [r3, #32]
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	4aad      	ldr	r2, [pc, #692]	; (8002ed8 <UART_SetConfig+0x334>)
 8002c24:	4013      	ands	r3, r2
 8002c26:	0019      	movs	r1, r3
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	430a      	orrs	r2, r1
 8002c30:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c38:	220f      	movs	r2, #15
 8002c3a:	4393      	bics	r3, r2
 8002c3c:	0019      	movs	r1, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4aa3      	ldr	r2, [pc, #652]	; (8002edc <UART_SetConfig+0x338>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d125      	bne.n	8002ca0 <UART_SetConfig+0xfc>
 8002c54:	4ba2      	ldr	r3, [pc, #648]	; (8002ee0 <UART_SetConfig+0x33c>)
 8002c56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c58:	2203      	movs	r2, #3
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b01      	cmp	r3, #1
 8002c5e:	d00f      	beq.n	8002c80 <UART_SetConfig+0xdc>
 8002c60:	d304      	bcc.n	8002c6c <UART_SetConfig+0xc8>
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d007      	beq.n	8002c76 <UART_SetConfig+0xd2>
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d00f      	beq.n	8002c8a <UART_SetConfig+0xe6>
 8002c6a:	e013      	b.n	8002c94 <UART_SetConfig+0xf0>
 8002c6c:	231f      	movs	r3, #31
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	2200      	movs	r2, #0
 8002c72:	701a      	strb	r2, [r3, #0]
 8002c74:	e05a      	b.n	8002d2c <UART_SetConfig+0x188>
 8002c76:	231f      	movs	r3, #31
 8002c78:	18fb      	adds	r3, r7, r3
 8002c7a:	2202      	movs	r2, #2
 8002c7c:	701a      	strb	r2, [r3, #0]
 8002c7e:	e055      	b.n	8002d2c <UART_SetConfig+0x188>
 8002c80:	231f      	movs	r3, #31
 8002c82:	18fb      	adds	r3, r7, r3
 8002c84:	2204      	movs	r2, #4
 8002c86:	701a      	strb	r2, [r3, #0]
 8002c88:	e050      	b.n	8002d2c <UART_SetConfig+0x188>
 8002c8a:	231f      	movs	r3, #31
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	2208      	movs	r2, #8
 8002c90:	701a      	strb	r2, [r3, #0]
 8002c92:	e04b      	b.n	8002d2c <UART_SetConfig+0x188>
 8002c94:	231f      	movs	r3, #31
 8002c96:	18fb      	adds	r3, r7, r3
 8002c98:	2210      	movs	r2, #16
 8002c9a:	701a      	strb	r2, [r3, #0]
 8002c9c:	46c0      	nop			; (mov r8, r8)
 8002c9e:	e045      	b.n	8002d2c <UART_SetConfig+0x188>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a8f      	ldr	r2, [pc, #572]	; (8002ee4 <UART_SetConfig+0x340>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d128      	bne.n	8002cfc <UART_SetConfig+0x158>
 8002caa:	4b8d      	ldr	r3, [pc, #564]	; (8002ee0 <UART_SetConfig+0x33c>)
 8002cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cae:	220c      	movs	r2, #12
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d012      	beq.n	8002cdc <UART_SetConfig+0x138>
 8002cb6:	d802      	bhi.n	8002cbe <UART_SetConfig+0x11a>
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <UART_SetConfig+0x124>
 8002cbc:	e018      	b.n	8002cf0 <UART_SetConfig+0x14c>
 8002cbe:	2b08      	cmp	r3, #8
 8002cc0:	d007      	beq.n	8002cd2 <UART_SetConfig+0x12e>
 8002cc2:	2b0c      	cmp	r3, #12
 8002cc4:	d00f      	beq.n	8002ce6 <UART_SetConfig+0x142>
 8002cc6:	e013      	b.n	8002cf0 <UART_SetConfig+0x14c>
 8002cc8:	231f      	movs	r3, #31
 8002cca:	18fb      	adds	r3, r7, r3
 8002ccc:	2200      	movs	r2, #0
 8002cce:	701a      	strb	r2, [r3, #0]
 8002cd0:	e02c      	b.n	8002d2c <UART_SetConfig+0x188>
 8002cd2:	231f      	movs	r3, #31
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	2202      	movs	r2, #2
 8002cd8:	701a      	strb	r2, [r3, #0]
 8002cda:	e027      	b.n	8002d2c <UART_SetConfig+0x188>
 8002cdc:	231f      	movs	r3, #31
 8002cde:	18fb      	adds	r3, r7, r3
 8002ce0:	2204      	movs	r2, #4
 8002ce2:	701a      	strb	r2, [r3, #0]
 8002ce4:	e022      	b.n	8002d2c <UART_SetConfig+0x188>
 8002ce6:	231f      	movs	r3, #31
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	2208      	movs	r2, #8
 8002cec:	701a      	strb	r2, [r3, #0]
 8002cee:	e01d      	b.n	8002d2c <UART_SetConfig+0x188>
 8002cf0:	231f      	movs	r3, #31
 8002cf2:	18fb      	adds	r3, r7, r3
 8002cf4:	2210      	movs	r2, #16
 8002cf6:	701a      	strb	r2, [r3, #0]
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	e017      	b.n	8002d2c <UART_SetConfig+0x188>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a79      	ldr	r2, [pc, #484]	; (8002ee8 <UART_SetConfig+0x344>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d104      	bne.n	8002d10 <UART_SetConfig+0x16c>
 8002d06:	231f      	movs	r3, #31
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	e00d      	b.n	8002d2c <UART_SetConfig+0x188>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4a75      	ldr	r2, [pc, #468]	; (8002eec <UART_SetConfig+0x348>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d104      	bne.n	8002d24 <UART_SetConfig+0x180>
 8002d1a:	231f      	movs	r3, #31
 8002d1c:	18fb      	adds	r3, r7, r3
 8002d1e:	2200      	movs	r2, #0
 8002d20:	701a      	strb	r2, [r3, #0]
 8002d22:	e003      	b.n	8002d2c <UART_SetConfig+0x188>
 8002d24:	231f      	movs	r3, #31
 8002d26:	18fb      	adds	r3, r7, r3
 8002d28:	2210      	movs	r2, #16
 8002d2a:	701a      	strb	r2, [r3, #0]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	69da      	ldr	r2, [r3, #28]
 8002d30:	2380      	movs	r3, #128	; 0x80
 8002d32:	021b      	lsls	r3, r3, #8
 8002d34:	429a      	cmp	r2, r3
 8002d36:	d000      	beq.n	8002d3a <UART_SetConfig+0x196>
 8002d38:	e1de      	b.n	80030f8 <UART_SetConfig+0x554>
  {
    switch (clocksource)
 8002d3a:	231f      	movs	r3, #31
 8002d3c:	18fb      	adds	r3, r7, r3
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	2b02      	cmp	r3, #2
 8002d42:	d100      	bne.n	8002d46 <UART_SetConfig+0x1a2>
 8002d44:	e06c      	b.n	8002e20 <UART_SetConfig+0x27c>
 8002d46:	dc02      	bgt.n	8002d4e <UART_SetConfig+0x1aa>
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d007      	beq.n	8002d5c <UART_SetConfig+0x1b8>
 8002d4c:	e1ab      	b.n	80030a6 <UART_SetConfig+0x502>
 8002d4e:	2b04      	cmp	r3, #4
 8002d50:	d100      	bne.n	8002d54 <UART_SetConfig+0x1b0>
 8002d52:	e0e5      	b.n	8002f20 <UART_SetConfig+0x37c>
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	d100      	bne.n	8002d5a <UART_SetConfig+0x1b6>
 8002d58:	e144      	b.n	8002fe4 <UART_SetConfig+0x440>
 8002d5a:	e1a4      	b.n	80030a6 <UART_SetConfig+0x502>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d5c:	f7ff fb20 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 8002d60:	0003      	movs	r3, r0
 8002d62:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d044      	beq.n	8002df6 <UART_SetConfig+0x252>
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d70:	2b01      	cmp	r3, #1
 8002d72:	d03e      	beq.n	8002df2 <UART_SetConfig+0x24e>
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d038      	beq.n	8002dee <UART_SetConfig+0x24a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d80:	2b03      	cmp	r3, #3
 8002d82:	d032      	beq.n	8002dea <UART_SetConfig+0x246>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	2b04      	cmp	r3, #4
 8002d8a:	d02c      	beq.n	8002de6 <UART_SetConfig+0x242>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	2b05      	cmp	r3, #5
 8002d92:	d026      	beq.n	8002de2 <UART_SetConfig+0x23e>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d98:	2b06      	cmp	r3, #6
 8002d9a:	d020      	beq.n	8002dde <UART_SetConfig+0x23a>
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da0:	2b07      	cmp	r3, #7
 8002da2:	d01a      	beq.n	8002dda <UART_SetConfig+0x236>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da8:	2b08      	cmp	r3, #8
 8002daa:	d014      	beq.n	8002dd6 <UART_SetConfig+0x232>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	2b09      	cmp	r3, #9
 8002db2:	d00e      	beq.n	8002dd2 <UART_SetConfig+0x22e>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db8:	2b0a      	cmp	r3, #10
 8002dba:	d008      	beq.n	8002dce <UART_SetConfig+0x22a>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2b0b      	cmp	r3, #11
 8002dc2:	d102      	bne.n	8002dca <UART_SetConfig+0x226>
 8002dc4:	2380      	movs	r3, #128	; 0x80
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	e016      	b.n	8002df8 <UART_SetConfig+0x254>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e014      	b.n	8002df8 <UART_SetConfig+0x254>
 8002dce:	2380      	movs	r3, #128	; 0x80
 8002dd0:	e012      	b.n	8002df8 <UART_SetConfig+0x254>
 8002dd2:	2340      	movs	r3, #64	; 0x40
 8002dd4:	e010      	b.n	8002df8 <UART_SetConfig+0x254>
 8002dd6:	2320      	movs	r3, #32
 8002dd8:	e00e      	b.n	8002df8 <UART_SetConfig+0x254>
 8002dda:	2310      	movs	r3, #16
 8002ddc:	e00c      	b.n	8002df8 <UART_SetConfig+0x254>
 8002dde:	230c      	movs	r3, #12
 8002de0:	e00a      	b.n	8002df8 <UART_SetConfig+0x254>
 8002de2:	230a      	movs	r3, #10
 8002de4:	e008      	b.n	8002df8 <UART_SetConfig+0x254>
 8002de6:	2308      	movs	r3, #8
 8002de8:	e006      	b.n	8002df8 <UART_SetConfig+0x254>
 8002dea:	2306      	movs	r3, #6
 8002dec:	e004      	b.n	8002df8 <UART_SetConfig+0x254>
 8002dee:	2304      	movs	r3, #4
 8002df0:	e002      	b.n	8002df8 <UART_SetConfig+0x254>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e000      	b.n	8002df8 <UART_SetConfig+0x254>
 8002df6:	2301      	movs	r3, #1
 8002df8:	0019      	movs	r1, r3
 8002dfa:	68f8      	ldr	r0, [r7, #12]
 8002dfc:	f7fd f98c 	bl	8000118 <__udivsi3>
 8002e00:	0003      	movs	r3, r0
 8002e02:	005a      	lsls	r2, r3, #1
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	18d2      	adds	r2, r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	0019      	movs	r1, r3
 8002e12:	0010      	movs	r0, r2
 8002e14:	f7fd f980 	bl	8000118 <__udivsi3>
 8002e18:	0003      	movs	r3, r0
 8002e1a:	b29b      	uxth	r3, r3
 8002e1c:	617b      	str	r3, [r7, #20]
        break;
 8002e1e:	e147      	b.n	80030b0 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d043      	beq.n	8002eb0 <UART_SetConfig+0x30c>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2c:	2b01      	cmp	r3, #1
 8002e2e:	d03d      	beq.n	8002eac <UART_SetConfig+0x308>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d037      	beq.n	8002ea8 <UART_SetConfig+0x304>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3c:	2b03      	cmp	r3, #3
 8002e3e:	d031      	beq.n	8002ea4 <UART_SetConfig+0x300>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e44:	2b04      	cmp	r3, #4
 8002e46:	d02b      	beq.n	8002ea0 <UART_SetConfig+0x2fc>
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4c:	2b05      	cmp	r3, #5
 8002e4e:	d025      	beq.n	8002e9c <UART_SetConfig+0x2f8>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e54:	2b06      	cmp	r3, #6
 8002e56:	d01f      	beq.n	8002e98 <UART_SetConfig+0x2f4>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	2b07      	cmp	r3, #7
 8002e5e:	d019      	beq.n	8002e94 <UART_SetConfig+0x2f0>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e64:	2b08      	cmp	r3, #8
 8002e66:	d013      	beq.n	8002e90 <UART_SetConfig+0x2ec>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e6c:	2b09      	cmp	r3, #9
 8002e6e:	d00d      	beq.n	8002e8c <UART_SetConfig+0x2e8>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e74:	2b0a      	cmp	r3, #10
 8002e76:	d007      	beq.n	8002e88 <UART_SetConfig+0x2e4>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2b0b      	cmp	r3, #11
 8002e7e:	d101      	bne.n	8002e84 <UART_SetConfig+0x2e0>
 8002e80:	4b1b      	ldr	r3, [pc, #108]	; (8002ef0 <UART_SetConfig+0x34c>)
 8002e82:	e016      	b.n	8002eb2 <UART_SetConfig+0x30e>
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <UART_SetConfig+0x350>)
 8002e86:	e014      	b.n	8002eb2 <UART_SetConfig+0x30e>
 8002e88:	4b1b      	ldr	r3, [pc, #108]	; (8002ef8 <UART_SetConfig+0x354>)
 8002e8a:	e012      	b.n	8002eb2 <UART_SetConfig+0x30e>
 8002e8c:	4b1b      	ldr	r3, [pc, #108]	; (8002efc <UART_SetConfig+0x358>)
 8002e8e:	e010      	b.n	8002eb2 <UART_SetConfig+0x30e>
 8002e90:	4b1b      	ldr	r3, [pc, #108]	; (8002f00 <UART_SetConfig+0x35c>)
 8002e92:	e00e      	b.n	8002eb2 <UART_SetConfig+0x30e>
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <UART_SetConfig+0x360>)
 8002e96:	e00c      	b.n	8002eb2 <UART_SetConfig+0x30e>
 8002e98:	4b1b      	ldr	r3, [pc, #108]	; (8002f08 <UART_SetConfig+0x364>)
 8002e9a:	e00a      	b.n	8002eb2 <UART_SetConfig+0x30e>
 8002e9c:	4b1b      	ldr	r3, [pc, #108]	; (8002f0c <UART_SetConfig+0x368>)
 8002e9e:	e008      	b.n	8002eb2 <UART_SetConfig+0x30e>
 8002ea0:	4b1b      	ldr	r3, [pc, #108]	; (8002f10 <UART_SetConfig+0x36c>)
 8002ea2:	e006      	b.n	8002eb2 <UART_SetConfig+0x30e>
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	; (8002f14 <UART_SetConfig+0x370>)
 8002ea6:	e004      	b.n	8002eb2 <UART_SetConfig+0x30e>
 8002ea8:	4b1b      	ldr	r3, [pc, #108]	; (8002f18 <UART_SetConfig+0x374>)
 8002eaa:	e002      	b.n	8002eb2 <UART_SetConfig+0x30e>
 8002eac:	4b1b      	ldr	r3, [pc, #108]	; (8002f1c <UART_SetConfig+0x378>)
 8002eae:	e000      	b.n	8002eb2 <UART_SetConfig+0x30e>
 8002eb0:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <UART_SetConfig+0x350>)
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	6852      	ldr	r2, [r2, #4]
 8002eb6:	0852      	lsrs	r2, r2, #1
 8002eb8:	189a      	adds	r2, r3, r2
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	0019      	movs	r1, r3
 8002ec0:	0010      	movs	r0, r2
 8002ec2:	f7fd f929 	bl	8000118 <__udivsi3>
 8002ec6:	0003      	movs	r3, r0
 8002ec8:	b29b      	uxth	r3, r3
 8002eca:	617b      	str	r3, [r7, #20]
        break;
 8002ecc:	e0f0      	b.n	80030b0 <UART_SetConfig+0x50c>
 8002ece:	46c0      	nop			; (mov r8, r8)
 8002ed0:	cfff69f3 	.word	0xcfff69f3
 8002ed4:	ffffcfff 	.word	0xffffcfff
 8002ed8:	11fff4ff 	.word	0x11fff4ff
 8002edc:	40013800 	.word	0x40013800
 8002ee0:	40021000 	.word	0x40021000
 8002ee4:	40004400 	.word	0x40004400
 8002ee8:	40004800 	.word	0x40004800
 8002eec:	40004c00 	.word	0x40004c00
 8002ef0:	0001e848 	.word	0x0001e848
 8002ef4:	01e84800 	.word	0x01e84800
 8002ef8:	0003d090 	.word	0x0003d090
 8002efc:	0007a120 	.word	0x0007a120
 8002f00:	000f4240 	.word	0x000f4240
 8002f04:	001e8480 	.word	0x001e8480
 8002f08:	0028b0aa 	.word	0x0028b0aa
 8002f0c:	0030d400 	.word	0x0030d400
 8002f10:	003d0900 	.word	0x003d0900
 8002f14:	00516154 	.word	0x00516154
 8002f18:	007a1200 	.word	0x007a1200
 8002f1c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f20:	f7ff f9b2 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8002f24:	0003      	movs	r3, r0
 8002f26:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d044      	beq.n	8002fba <UART_SetConfig+0x416>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d03e      	beq.n	8002fb6 <UART_SetConfig+0x412>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d038      	beq.n	8002fb2 <UART_SetConfig+0x40e>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f44:	2b03      	cmp	r3, #3
 8002f46:	d032      	beq.n	8002fae <UART_SetConfig+0x40a>
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	2b04      	cmp	r3, #4
 8002f4e:	d02c      	beq.n	8002faa <UART_SetConfig+0x406>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f54:	2b05      	cmp	r3, #5
 8002f56:	d026      	beq.n	8002fa6 <UART_SetConfig+0x402>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f5c:	2b06      	cmp	r3, #6
 8002f5e:	d020      	beq.n	8002fa2 <UART_SetConfig+0x3fe>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f64:	2b07      	cmp	r3, #7
 8002f66:	d01a      	beq.n	8002f9e <UART_SetConfig+0x3fa>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f6c:	2b08      	cmp	r3, #8
 8002f6e:	d014      	beq.n	8002f9a <UART_SetConfig+0x3f6>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f74:	2b09      	cmp	r3, #9
 8002f76:	d00e      	beq.n	8002f96 <UART_SetConfig+0x3f2>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	2b0a      	cmp	r3, #10
 8002f7e:	d008      	beq.n	8002f92 <UART_SetConfig+0x3ee>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f84:	2b0b      	cmp	r3, #11
 8002f86:	d102      	bne.n	8002f8e <UART_SetConfig+0x3ea>
 8002f88:	2380      	movs	r3, #128	; 0x80
 8002f8a:	005b      	lsls	r3, r3, #1
 8002f8c:	e016      	b.n	8002fbc <UART_SetConfig+0x418>
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e014      	b.n	8002fbc <UART_SetConfig+0x418>
 8002f92:	2380      	movs	r3, #128	; 0x80
 8002f94:	e012      	b.n	8002fbc <UART_SetConfig+0x418>
 8002f96:	2340      	movs	r3, #64	; 0x40
 8002f98:	e010      	b.n	8002fbc <UART_SetConfig+0x418>
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	e00e      	b.n	8002fbc <UART_SetConfig+0x418>
 8002f9e:	2310      	movs	r3, #16
 8002fa0:	e00c      	b.n	8002fbc <UART_SetConfig+0x418>
 8002fa2:	230c      	movs	r3, #12
 8002fa4:	e00a      	b.n	8002fbc <UART_SetConfig+0x418>
 8002fa6:	230a      	movs	r3, #10
 8002fa8:	e008      	b.n	8002fbc <UART_SetConfig+0x418>
 8002faa:	2308      	movs	r3, #8
 8002fac:	e006      	b.n	8002fbc <UART_SetConfig+0x418>
 8002fae:	2306      	movs	r3, #6
 8002fb0:	e004      	b.n	8002fbc <UART_SetConfig+0x418>
 8002fb2:	2304      	movs	r3, #4
 8002fb4:	e002      	b.n	8002fbc <UART_SetConfig+0x418>
 8002fb6:	2302      	movs	r3, #2
 8002fb8:	e000      	b.n	8002fbc <UART_SetConfig+0x418>
 8002fba:	2301      	movs	r3, #1
 8002fbc:	0019      	movs	r1, r3
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f7fd f8aa 	bl	8000118 <__udivsi3>
 8002fc4:	0003      	movs	r3, r0
 8002fc6:	005a      	lsls	r2, r3, #1
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	085b      	lsrs	r3, r3, #1
 8002fce:	18d2      	adds	r2, r2, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	0019      	movs	r1, r3
 8002fd6:	0010      	movs	r0, r2
 8002fd8:	f7fd f89e 	bl	8000118 <__udivsi3>
 8002fdc:	0003      	movs	r3, r0
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	617b      	str	r3, [r7, #20]
        break;
 8002fe2:	e065      	b.n	80030b0 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d04c      	beq.n	8003086 <UART_SetConfig+0x4e2>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff0:	2b01      	cmp	r3, #1
 8002ff2:	d045      	beq.n	8003080 <UART_SetConfig+0x4dc>
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff8:	2b02      	cmp	r3, #2
 8002ffa:	d03e      	beq.n	800307a <UART_SetConfig+0x4d6>
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003000:	2b03      	cmp	r3, #3
 8003002:	d038      	beq.n	8003076 <UART_SetConfig+0x4d2>
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003008:	2b04      	cmp	r3, #4
 800300a:	d031      	beq.n	8003070 <UART_SetConfig+0x4cc>
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003010:	2b05      	cmp	r3, #5
 8003012:	d02b      	beq.n	800306c <UART_SetConfig+0x4c8>
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003018:	2b06      	cmp	r3, #6
 800301a:	d025      	beq.n	8003068 <UART_SetConfig+0x4c4>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003020:	2b07      	cmp	r3, #7
 8003022:	d01e      	beq.n	8003062 <UART_SetConfig+0x4be>
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003028:	2b08      	cmp	r3, #8
 800302a:	d017      	beq.n	800305c <UART_SetConfig+0x4b8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003030:	2b09      	cmp	r3, #9
 8003032:	d010      	beq.n	8003056 <UART_SetConfig+0x4b2>
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003038:	2b0a      	cmp	r3, #10
 800303a:	d009      	beq.n	8003050 <UART_SetConfig+0x4ac>
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003040:	2b0b      	cmp	r3, #11
 8003042:	d102      	bne.n	800304a <UART_SetConfig+0x4a6>
 8003044:	2380      	movs	r3, #128	; 0x80
 8003046:	005b      	lsls	r3, r3, #1
 8003048:	e01f      	b.n	800308a <UART_SetConfig+0x4e6>
 800304a:	2380      	movs	r3, #128	; 0x80
 800304c:	025b      	lsls	r3, r3, #9
 800304e:	e01c      	b.n	800308a <UART_SetConfig+0x4e6>
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	009b      	lsls	r3, r3, #2
 8003054:	e019      	b.n	800308a <UART_SetConfig+0x4e6>
 8003056:	2380      	movs	r3, #128	; 0x80
 8003058:	00db      	lsls	r3, r3, #3
 800305a:	e016      	b.n	800308a <UART_SetConfig+0x4e6>
 800305c:	2380      	movs	r3, #128	; 0x80
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	e013      	b.n	800308a <UART_SetConfig+0x4e6>
 8003062:	2380      	movs	r3, #128	; 0x80
 8003064:	015b      	lsls	r3, r3, #5
 8003066:	e010      	b.n	800308a <UART_SetConfig+0x4e6>
 8003068:	4bb9      	ldr	r3, [pc, #740]	; (8003350 <UART_SetConfig+0x7ac>)
 800306a:	e00e      	b.n	800308a <UART_SetConfig+0x4e6>
 800306c:	4bb9      	ldr	r3, [pc, #740]	; (8003354 <UART_SetConfig+0x7b0>)
 800306e:	e00c      	b.n	800308a <UART_SetConfig+0x4e6>
 8003070:	2380      	movs	r3, #128	; 0x80
 8003072:	019b      	lsls	r3, r3, #6
 8003074:	e009      	b.n	800308a <UART_SetConfig+0x4e6>
 8003076:	4bb8      	ldr	r3, [pc, #736]	; (8003358 <UART_SetConfig+0x7b4>)
 8003078:	e007      	b.n	800308a <UART_SetConfig+0x4e6>
 800307a:	2380      	movs	r3, #128	; 0x80
 800307c:	01db      	lsls	r3, r3, #7
 800307e:	e004      	b.n	800308a <UART_SetConfig+0x4e6>
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	e001      	b.n	800308a <UART_SetConfig+0x4e6>
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	025b      	lsls	r3, r3, #9
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	6852      	ldr	r2, [r2, #4]
 800308e:	0852      	lsrs	r2, r2, #1
 8003090:	189a      	adds	r2, r3, r2
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	0019      	movs	r1, r3
 8003098:	0010      	movs	r0, r2
 800309a:	f7fd f83d 	bl	8000118 <__udivsi3>
 800309e:	0003      	movs	r3, r0
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	617b      	str	r3, [r7, #20]
        break;
 80030a4:	e004      	b.n	80030b0 <UART_SetConfig+0x50c>
      default:
        ret = HAL_ERROR;
 80030a6:	231e      	movs	r3, #30
 80030a8:	18fb      	adds	r3, r7, r3
 80030aa:	2201      	movs	r2, #1
 80030ac:	701a      	strb	r2, [r3, #0]
        break;
 80030ae:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030b0:	697b      	ldr	r3, [r7, #20]
 80030b2:	2b0f      	cmp	r3, #15
 80030b4:	d91b      	bls.n	80030ee <UART_SetConfig+0x54a>
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	4aa8      	ldr	r2, [pc, #672]	; (800335c <UART_SetConfig+0x7b8>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d817      	bhi.n	80030ee <UART_SetConfig+0x54a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030be:	697b      	ldr	r3, [r7, #20]
 80030c0:	b29a      	uxth	r2, r3
 80030c2:	200a      	movs	r0, #10
 80030c4:	183b      	adds	r3, r7, r0
 80030c6:	210f      	movs	r1, #15
 80030c8:	438a      	bics	r2, r1
 80030ca:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	085b      	lsrs	r3, r3, #1
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2207      	movs	r2, #7
 80030d4:	4013      	ands	r3, r2
 80030d6:	b299      	uxth	r1, r3
 80030d8:	183b      	adds	r3, r7, r0
 80030da:	183a      	adds	r2, r7, r0
 80030dc:	8812      	ldrh	r2, [r2, #0]
 80030de:	430a      	orrs	r2, r1
 80030e0:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	183a      	adds	r2, r7, r0
 80030e8:	8812      	ldrh	r2, [r2, #0]
 80030ea:	60da      	str	r2, [r3, #12]
 80030ec:	e1c5      	b.n	800347a <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 80030ee:	231e      	movs	r3, #30
 80030f0:	18fb      	adds	r3, r7, r3
 80030f2:	2201      	movs	r2, #1
 80030f4:	701a      	strb	r2, [r3, #0]
 80030f6:	e1c0      	b.n	800347a <UART_SetConfig+0x8d6>
    }
  }
  else
  {
    switch (clocksource)
 80030f8:	231f      	movs	r3, #31
 80030fa:	18fb      	adds	r3, r7, r3
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d100      	bne.n	8003104 <UART_SetConfig+0x560>
 8003102:	e06c      	b.n	80031de <UART_SetConfig+0x63a>
 8003104:	dc02      	bgt.n	800310c <UART_SetConfig+0x568>
 8003106:	2b00      	cmp	r3, #0
 8003108:	d007      	beq.n	800311a <UART_SetConfig+0x576>
 800310a:	e1a1      	b.n	8003450 <UART_SetConfig+0x8ac>
 800310c:	2b04      	cmp	r3, #4
 800310e:	d100      	bne.n	8003112 <UART_SetConfig+0x56e>
 8003110:	e0bc      	b.n	800328c <UART_SetConfig+0x6e8>
 8003112:	2b08      	cmp	r3, #8
 8003114:	d100      	bne.n	8003118 <UART_SetConfig+0x574>
 8003116:	e13b      	b.n	8003390 <UART_SetConfig+0x7ec>
 8003118:	e19a      	b.n	8003450 <UART_SetConfig+0x8ac>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800311a:	f7ff f941 	bl	80023a0 <HAL_RCC_GetPCLK1Freq>
 800311e:	0003      	movs	r3, r0
 8003120:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003126:	2b00      	cmp	r3, #0
 8003128:	d044      	beq.n	80031b4 <UART_SetConfig+0x610>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800312e:	2b01      	cmp	r3, #1
 8003130:	d03e      	beq.n	80031b0 <UART_SetConfig+0x60c>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003136:	2b02      	cmp	r3, #2
 8003138:	d038      	beq.n	80031ac <UART_SetConfig+0x608>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313e:	2b03      	cmp	r3, #3
 8003140:	d032      	beq.n	80031a8 <UART_SetConfig+0x604>
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003146:	2b04      	cmp	r3, #4
 8003148:	d02c      	beq.n	80031a4 <UART_SetConfig+0x600>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314e:	2b05      	cmp	r3, #5
 8003150:	d026      	beq.n	80031a0 <UART_SetConfig+0x5fc>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003156:	2b06      	cmp	r3, #6
 8003158:	d020      	beq.n	800319c <UART_SetConfig+0x5f8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	2b07      	cmp	r3, #7
 8003160:	d01a      	beq.n	8003198 <UART_SetConfig+0x5f4>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003166:	2b08      	cmp	r3, #8
 8003168:	d014      	beq.n	8003194 <UART_SetConfig+0x5f0>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316e:	2b09      	cmp	r3, #9
 8003170:	d00e      	beq.n	8003190 <UART_SetConfig+0x5ec>
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003176:	2b0a      	cmp	r3, #10
 8003178:	d008      	beq.n	800318c <UART_SetConfig+0x5e8>
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800317e:	2b0b      	cmp	r3, #11
 8003180:	d102      	bne.n	8003188 <UART_SetConfig+0x5e4>
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	e016      	b.n	80031b6 <UART_SetConfig+0x612>
 8003188:	2301      	movs	r3, #1
 800318a:	e014      	b.n	80031b6 <UART_SetConfig+0x612>
 800318c:	2380      	movs	r3, #128	; 0x80
 800318e:	e012      	b.n	80031b6 <UART_SetConfig+0x612>
 8003190:	2340      	movs	r3, #64	; 0x40
 8003192:	e010      	b.n	80031b6 <UART_SetConfig+0x612>
 8003194:	2320      	movs	r3, #32
 8003196:	e00e      	b.n	80031b6 <UART_SetConfig+0x612>
 8003198:	2310      	movs	r3, #16
 800319a:	e00c      	b.n	80031b6 <UART_SetConfig+0x612>
 800319c:	230c      	movs	r3, #12
 800319e:	e00a      	b.n	80031b6 <UART_SetConfig+0x612>
 80031a0:	230a      	movs	r3, #10
 80031a2:	e008      	b.n	80031b6 <UART_SetConfig+0x612>
 80031a4:	2308      	movs	r3, #8
 80031a6:	e006      	b.n	80031b6 <UART_SetConfig+0x612>
 80031a8:	2306      	movs	r3, #6
 80031aa:	e004      	b.n	80031b6 <UART_SetConfig+0x612>
 80031ac:	2304      	movs	r3, #4
 80031ae:	e002      	b.n	80031b6 <UART_SetConfig+0x612>
 80031b0:	2302      	movs	r3, #2
 80031b2:	e000      	b.n	80031b6 <UART_SetConfig+0x612>
 80031b4:	2301      	movs	r3, #1
 80031b6:	0019      	movs	r1, r3
 80031b8:	68f8      	ldr	r0, [r7, #12]
 80031ba:	f7fc ffad 	bl	8000118 <__udivsi3>
 80031be:	0003      	movs	r3, r0
 80031c0:	001a      	movs	r2, r3
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	085b      	lsrs	r3, r3, #1
 80031c8:	18d2      	adds	r2, r2, r3
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	0019      	movs	r1, r3
 80031d0:	0010      	movs	r0, r2
 80031d2:	f7fc ffa1 	bl	8000118 <__udivsi3>
 80031d6:	0003      	movs	r3, r0
 80031d8:	b29b      	uxth	r3, r3
 80031da:	617b      	str	r3, [r7, #20]
        break;
 80031dc:	e13d      	b.n	800345a <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d043      	beq.n	800326e <UART_SetConfig+0x6ca>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d03d      	beq.n	800326a <UART_SetConfig+0x6c6>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	2b02      	cmp	r3, #2
 80031f4:	d037      	beq.n	8003266 <UART_SetConfig+0x6c2>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fa:	2b03      	cmp	r3, #3
 80031fc:	d031      	beq.n	8003262 <UART_SetConfig+0x6be>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003202:	2b04      	cmp	r3, #4
 8003204:	d02b      	beq.n	800325e <UART_SetConfig+0x6ba>
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	2b05      	cmp	r3, #5
 800320c:	d025      	beq.n	800325a <UART_SetConfig+0x6b6>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003212:	2b06      	cmp	r3, #6
 8003214:	d01f      	beq.n	8003256 <UART_SetConfig+0x6b2>
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	2b07      	cmp	r3, #7
 800321c:	d019      	beq.n	8003252 <UART_SetConfig+0x6ae>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003222:	2b08      	cmp	r3, #8
 8003224:	d013      	beq.n	800324e <UART_SetConfig+0x6aa>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800322a:	2b09      	cmp	r3, #9
 800322c:	d00d      	beq.n	800324a <UART_SetConfig+0x6a6>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	2b0a      	cmp	r3, #10
 8003234:	d007      	beq.n	8003246 <UART_SetConfig+0x6a2>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323a:	2b0b      	cmp	r3, #11
 800323c:	d101      	bne.n	8003242 <UART_SetConfig+0x69e>
 800323e:	4b48      	ldr	r3, [pc, #288]	; (8003360 <UART_SetConfig+0x7bc>)
 8003240:	e016      	b.n	8003270 <UART_SetConfig+0x6cc>
 8003242:	4b48      	ldr	r3, [pc, #288]	; (8003364 <UART_SetConfig+0x7c0>)
 8003244:	e014      	b.n	8003270 <UART_SetConfig+0x6cc>
 8003246:	4b48      	ldr	r3, [pc, #288]	; (8003368 <UART_SetConfig+0x7c4>)
 8003248:	e012      	b.n	8003270 <UART_SetConfig+0x6cc>
 800324a:	4b48      	ldr	r3, [pc, #288]	; (800336c <UART_SetConfig+0x7c8>)
 800324c:	e010      	b.n	8003270 <UART_SetConfig+0x6cc>
 800324e:	4b48      	ldr	r3, [pc, #288]	; (8003370 <UART_SetConfig+0x7cc>)
 8003250:	e00e      	b.n	8003270 <UART_SetConfig+0x6cc>
 8003252:	4b48      	ldr	r3, [pc, #288]	; (8003374 <UART_SetConfig+0x7d0>)
 8003254:	e00c      	b.n	8003270 <UART_SetConfig+0x6cc>
 8003256:	4b48      	ldr	r3, [pc, #288]	; (8003378 <UART_SetConfig+0x7d4>)
 8003258:	e00a      	b.n	8003270 <UART_SetConfig+0x6cc>
 800325a:	4b48      	ldr	r3, [pc, #288]	; (800337c <UART_SetConfig+0x7d8>)
 800325c:	e008      	b.n	8003270 <UART_SetConfig+0x6cc>
 800325e:	4b48      	ldr	r3, [pc, #288]	; (8003380 <UART_SetConfig+0x7dc>)
 8003260:	e006      	b.n	8003270 <UART_SetConfig+0x6cc>
 8003262:	4b48      	ldr	r3, [pc, #288]	; (8003384 <UART_SetConfig+0x7e0>)
 8003264:	e004      	b.n	8003270 <UART_SetConfig+0x6cc>
 8003266:	4b48      	ldr	r3, [pc, #288]	; (8003388 <UART_SetConfig+0x7e4>)
 8003268:	e002      	b.n	8003270 <UART_SetConfig+0x6cc>
 800326a:	4b48      	ldr	r3, [pc, #288]	; (800338c <UART_SetConfig+0x7e8>)
 800326c:	e000      	b.n	8003270 <UART_SetConfig+0x6cc>
 800326e:	4b3d      	ldr	r3, [pc, #244]	; (8003364 <UART_SetConfig+0x7c0>)
 8003270:	687a      	ldr	r2, [r7, #4]
 8003272:	6852      	ldr	r2, [r2, #4]
 8003274:	0852      	lsrs	r2, r2, #1
 8003276:	189a      	adds	r2, r3, r2
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	0019      	movs	r1, r3
 800327e:	0010      	movs	r0, r2
 8003280:	f7fc ff4a 	bl	8000118 <__udivsi3>
 8003284:	0003      	movs	r3, r0
 8003286:	b29b      	uxth	r3, r3
 8003288:	617b      	str	r3, [r7, #20]
        break;
 800328a:	e0e6      	b.n	800345a <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800328c:	f7fe fffc 	bl	8002288 <HAL_RCC_GetSysClockFreq>
 8003290:	0003      	movs	r3, r0
 8003292:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003298:	2b00      	cmp	r3, #0
 800329a:	d044      	beq.n	8003326 <UART_SetConfig+0x782>
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a0:	2b01      	cmp	r3, #1
 80032a2:	d03e      	beq.n	8003322 <UART_SetConfig+0x77e>
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d038      	beq.n	800331e <UART_SetConfig+0x77a>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d032      	beq.n	800331a <UART_SetConfig+0x776>
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b8:	2b04      	cmp	r3, #4
 80032ba:	d02c      	beq.n	8003316 <UART_SetConfig+0x772>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c0:	2b05      	cmp	r3, #5
 80032c2:	d026      	beq.n	8003312 <UART_SetConfig+0x76e>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c8:	2b06      	cmp	r3, #6
 80032ca:	d020      	beq.n	800330e <UART_SetConfig+0x76a>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d0:	2b07      	cmp	r3, #7
 80032d2:	d01a      	beq.n	800330a <UART_SetConfig+0x766>
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	2b08      	cmp	r3, #8
 80032da:	d014      	beq.n	8003306 <UART_SetConfig+0x762>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e0:	2b09      	cmp	r3, #9
 80032e2:	d00e      	beq.n	8003302 <UART_SetConfig+0x75e>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032e8:	2b0a      	cmp	r3, #10
 80032ea:	d008      	beq.n	80032fe <UART_SetConfig+0x75a>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	2b0b      	cmp	r3, #11
 80032f2:	d102      	bne.n	80032fa <UART_SetConfig+0x756>
 80032f4:	2380      	movs	r3, #128	; 0x80
 80032f6:	005b      	lsls	r3, r3, #1
 80032f8:	e016      	b.n	8003328 <UART_SetConfig+0x784>
 80032fa:	2301      	movs	r3, #1
 80032fc:	e014      	b.n	8003328 <UART_SetConfig+0x784>
 80032fe:	2380      	movs	r3, #128	; 0x80
 8003300:	e012      	b.n	8003328 <UART_SetConfig+0x784>
 8003302:	2340      	movs	r3, #64	; 0x40
 8003304:	e010      	b.n	8003328 <UART_SetConfig+0x784>
 8003306:	2320      	movs	r3, #32
 8003308:	e00e      	b.n	8003328 <UART_SetConfig+0x784>
 800330a:	2310      	movs	r3, #16
 800330c:	e00c      	b.n	8003328 <UART_SetConfig+0x784>
 800330e:	230c      	movs	r3, #12
 8003310:	e00a      	b.n	8003328 <UART_SetConfig+0x784>
 8003312:	230a      	movs	r3, #10
 8003314:	e008      	b.n	8003328 <UART_SetConfig+0x784>
 8003316:	2308      	movs	r3, #8
 8003318:	e006      	b.n	8003328 <UART_SetConfig+0x784>
 800331a:	2306      	movs	r3, #6
 800331c:	e004      	b.n	8003328 <UART_SetConfig+0x784>
 800331e:	2304      	movs	r3, #4
 8003320:	e002      	b.n	8003328 <UART_SetConfig+0x784>
 8003322:	2302      	movs	r3, #2
 8003324:	e000      	b.n	8003328 <UART_SetConfig+0x784>
 8003326:	2301      	movs	r3, #1
 8003328:	0019      	movs	r1, r3
 800332a:	68f8      	ldr	r0, [r7, #12]
 800332c:	f7fc fef4 	bl	8000118 <__udivsi3>
 8003330:	0003      	movs	r3, r0
 8003332:	001a      	movs	r2, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	685b      	ldr	r3, [r3, #4]
 8003338:	085b      	lsrs	r3, r3, #1
 800333a:	18d2      	adds	r2, r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	0019      	movs	r1, r3
 8003342:	0010      	movs	r0, r2
 8003344:	f7fc fee8 	bl	8000118 <__udivsi3>
 8003348:	0003      	movs	r3, r0
 800334a:	b29b      	uxth	r3, r3
 800334c:	617b      	str	r3, [r7, #20]
        break;
 800334e:	e084      	b.n	800345a <UART_SetConfig+0x8b6>
 8003350:	00001554 	.word	0x00001554
 8003354:	00001998 	.word	0x00001998
 8003358:	00002aaa 	.word	0x00002aaa
 800335c:	0000ffff 	.word	0x0000ffff
 8003360:	0000f424 	.word	0x0000f424
 8003364:	00f42400 	.word	0x00f42400
 8003368:	0001e848 	.word	0x0001e848
 800336c:	0003d090 	.word	0x0003d090
 8003370:	0007a120 	.word	0x0007a120
 8003374:	000f4240 	.word	0x000f4240
 8003378:	00145855 	.word	0x00145855
 800337c:	00186a00 	.word	0x00186a00
 8003380:	001e8480 	.word	0x001e8480
 8003384:	0028b0aa 	.word	0x0028b0aa
 8003388:	003d0900 	.word	0x003d0900
 800338c:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003394:	2b00      	cmp	r3, #0
 8003396:	d04b      	beq.n	8003430 <UART_SetConfig+0x88c>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339c:	2b01      	cmp	r3, #1
 800339e:	d044      	beq.n	800342a <UART_SetConfig+0x886>
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	2b02      	cmp	r3, #2
 80033a6:	d03d      	beq.n	8003424 <UART_SetConfig+0x880>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ac:	2b03      	cmp	r3, #3
 80033ae:	d037      	beq.n	8003420 <UART_SetConfig+0x87c>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	2b04      	cmp	r3, #4
 80033b6:	d030      	beq.n	800341a <UART_SetConfig+0x876>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033bc:	2b05      	cmp	r3, #5
 80033be:	d02a      	beq.n	8003416 <UART_SetConfig+0x872>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c4:	2b06      	cmp	r3, #6
 80033c6:	d024      	beq.n	8003412 <UART_SetConfig+0x86e>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033cc:	2b07      	cmp	r3, #7
 80033ce:	d01d      	beq.n	800340c <UART_SetConfig+0x868>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d4:	2b08      	cmp	r3, #8
 80033d6:	d016      	beq.n	8003406 <UART_SetConfig+0x862>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033dc:	2b09      	cmp	r3, #9
 80033de:	d00f      	beq.n	8003400 <UART_SetConfig+0x85c>
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e4:	2b0a      	cmp	r3, #10
 80033e6:	d008      	beq.n	80033fa <UART_SetConfig+0x856>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ec:	2b0b      	cmp	r3, #11
 80033ee:	d101      	bne.n	80033f4 <UART_SetConfig+0x850>
 80033f0:	2380      	movs	r3, #128	; 0x80
 80033f2:	e01f      	b.n	8003434 <UART_SetConfig+0x890>
 80033f4:	2380      	movs	r3, #128	; 0x80
 80033f6:	021b      	lsls	r3, r3, #8
 80033f8:	e01c      	b.n	8003434 <UART_SetConfig+0x890>
 80033fa:	2380      	movs	r3, #128	; 0x80
 80033fc:	005b      	lsls	r3, r3, #1
 80033fe:	e019      	b.n	8003434 <UART_SetConfig+0x890>
 8003400:	2380      	movs	r3, #128	; 0x80
 8003402:	009b      	lsls	r3, r3, #2
 8003404:	e016      	b.n	8003434 <UART_SetConfig+0x890>
 8003406:	2380      	movs	r3, #128	; 0x80
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	e013      	b.n	8003434 <UART_SetConfig+0x890>
 800340c:	2380      	movs	r3, #128	; 0x80
 800340e:	011b      	lsls	r3, r3, #4
 8003410:	e010      	b.n	8003434 <UART_SetConfig+0x890>
 8003412:	4b24      	ldr	r3, [pc, #144]	; (80034a4 <UART_SetConfig+0x900>)
 8003414:	e00e      	b.n	8003434 <UART_SetConfig+0x890>
 8003416:	4b24      	ldr	r3, [pc, #144]	; (80034a8 <UART_SetConfig+0x904>)
 8003418:	e00c      	b.n	8003434 <UART_SetConfig+0x890>
 800341a:	2380      	movs	r3, #128	; 0x80
 800341c:	015b      	lsls	r3, r3, #5
 800341e:	e009      	b.n	8003434 <UART_SetConfig+0x890>
 8003420:	4b22      	ldr	r3, [pc, #136]	; (80034ac <UART_SetConfig+0x908>)
 8003422:	e007      	b.n	8003434 <UART_SetConfig+0x890>
 8003424:	2380      	movs	r3, #128	; 0x80
 8003426:	019b      	lsls	r3, r3, #6
 8003428:	e004      	b.n	8003434 <UART_SetConfig+0x890>
 800342a:	2380      	movs	r3, #128	; 0x80
 800342c:	01db      	lsls	r3, r3, #7
 800342e:	e001      	b.n	8003434 <UART_SetConfig+0x890>
 8003430:	2380      	movs	r3, #128	; 0x80
 8003432:	021b      	lsls	r3, r3, #8
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6852      	ldr	r2, [r2, #4]
 8003438:	0852      	lsrs	r2, r2, #1
 800343a:	189a      	adds	r2, r3, r2
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	0019      	movs	r1, r3
 8003442:	0010      	movs	r0, r2
 8003444:	f7fc fe68 	bl	8000118 <__udivsi3>
 8003448:	0003      	movs	r3, r0
 800344a:	b29b      	uxth	r3, r3
 800344c:	617b      	str	r3, [r7, #20]
        break;
 800344e:	e004      	b.n	800345a <UART_SetConfig+0x8b6>
      default:
        ret = HAL_ERROR;
 8003450:	231e      	movs	r3, #30
 8003452:	18fb      	adds	r3, r7, r3
 8003454:	2201      	movs	r2, #1
 8003456:	701a      	strb	r2, [r3, #0]
        break;
 8003458:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800345a:	697b      	ldr	r3, [r7, #20]
 800345c:	2b0f      	cmp	r3, #15
 800345e:	d908      	bls.n	8003472 <UART_SetConfig+0x8ce>
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	4a13      	ldr	r2, [pc, #76]	; (80034b0 <UART_SetConfig+0x90c>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d804      	bhi.n	8003472 <UART_SetConfig+0x8ce>
    {
      huart->Instance->BRR = usartdiv;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	697a      	ldr	r2, [r7, #20]
 800346e:	60da      	str	r2, [r3, #12]
 8003470:	e003      	b.n	800347a <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 8003472:	231e      	movs	r3, #30
 8003474:	18fb      	adds	r3, r7, r3
 8003476:	2201      	movs	r2, #1
 8003478:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	226a      	movs	r2, #106	; 0x6a
 800347e:	2101      	movs	r1, #1
 8003480:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2268      	movs	r2, #104	; 0x68
 8003486:	2101      	movs	r1, #1
 8003488:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 8003496:	231e      	movs	r3, #30
 8003498:	18fb      	adds	r3, r7, r3
 800349a:	781b      	ldrb	r3, [r3, #0]
}
 800349c:	0018      	movs	r0, r3
 800349e:	46bd      	mov	sp, r7
 80034a0:	b008      	add	sp, #32
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	00000aaa 	.word	0x00000aaa
 80034a8:	00000ccc 	.word	0x00000ccc
 80034ac:	00001555 	.word	0x00001555
 80034b0:	0000ffff 	.word	0x0000ffff

080034b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034c0:	2201      	movs	r2, #1
 80034c2:	4013      	ands	r3, r2
 80034c4:	d00b      	beq.n	80034de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	4a4a      	ldr	r2, [pc, #296]	; (80035f8 <UART_AdvFeatureConfig+0x144>)
 80034ce:	4013      	ands	r3, r2
 80034d0:	0019      	movs	r1, r3
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	430a      	orrs	r2, r1
 80034dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e2:	2202      	movs	r2, #2
 80034e4:	4013      	ands	r3, r2
 80034e6:	d00b      	beq.n	8003500 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	4a43      	ldr	r2, [pc, #268]	; (80035fc <UART_AdvFeatureConfig+0x148>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	0019      	movs	r1, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	430a      	orrs	r2, r1
 80034fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003504:	2204      	movs	r2, #4
 8003506:	4013      	ands	r3, r2
 8003508:	d00b      	beq.n	8003522 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	685b      	ldr	r3, [r3, #4]
 8003510:	4a3b      	ldr	r2, [pc, #236]	; (8003600 <UART_AdvFeatureConfig+0x14c>)
 8003512:	4013      	ands	r3, r2
 8003514:	0019      	movs	r1, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003526:	2208      	movs	r2, #8
 8003528:	4013      	ands	r3, r2
 800352a:	d00b      	beq.n	8003544 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	4a34      	ldr	r2, [pc, #208]	; (8003604 <UART_AdvFeatureConfig+0x150>)
 8003534:	4013      	ands	r3, r2
 8003536:	0019      	movs	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003548:	2210      	movs	r2, #16
 800354a:	4013      	ands	r3, r2
 800354c:	d00b      	beq.n	8003566 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	689b      	ldr	r3, [r3, #8]
 8003554:	4a2c      	ldr	r2, [pc, #176]	; (8003608 <UART_AdvFeatureConfig+0x154>)
 8003556:	4013      	ands	r3, r2
 8003558:	0019      	movs	r1, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800356a:	2220      	movs	r2, #32
 800356c:	4013      	ands	r3, r2
 800356e:	d00b      	beq.n	8003588 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	4a25      	ldr	r2, [pc, #148]	; (800360c <UART_AdvFeatureConfig+0x158>)
 8003578:	4013      	ands	r3, r2
 800357a:	0019      	movs	r1, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	2240      	movs	r2, #64	; 0x40
 800358e:	4013      	ands	r3, r2
 8003590:	d01d      	beq.n	80035ce <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	685b      	ldr	r3, [r3, #4]
 8003598:	4a1d      	ldr	r2, [pc, #116]	; (8003610 <UART_AdvFeatureConfig+0x15c>)
 800359a:	4013      	ands	r3, r2
 800359c:	0019      	movs	r1, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035ae:	2380      	movs	r3, #128	; 0x80
 80035b0:	035b      	lsls	r3, r3, #13
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d10b      	bne.n	80035ce <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	4a15      	ldr	r2, [pc, #84]	; (8003614 <UART_AdvFeatureConfig+0x160>)
 80035be:	4013      	ands	r3, r2
 80035c0:	0019      	movs	r1, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	430a      	orrs	r2, r1
 80035cc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d2:	2280      	movs	r2, #128	; 0x80
 80035d4:	4013      	ands	r3, r2
 80035d6:	d00b      	beq.n	80035f0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	4a0e      	ldr	r2, [pc, #56]	; (8003618 <UART_AdvFeatureConfig+0x164>)
 80035e0:	4013      	ands	r3, r2
 80035e2:	0019      	movs	r1, r3
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	430a      	orrs	r2, r1
 80035ee:	605a      	str	r2, [r3, #4]
  }
}
 80035f0:	46c0      	nop			; (mov r8, r8)
 80035f2:	46bd      	mov	sp, r7
 80035f4:	b002      	add	sp, #8
 80035f6:	bd80      	pop	{r7, pc}
 80035f8:	fffdffff 	.word	0xfffdffff
 80035fc:	fffeffff 	.word	0xfffeffff
 8003600:	fffbffff 	.word	0xfffbffff
 8003604:	ffff7fff 	.word	0xffff7fff
 8003608:	ffffefff 	.word	0xffffefff
 800360c:	ffffdfff 	.word	0xffffdfff
 8003610:	ffefffff 	.word	0xffefffff
 8003614:	ff9fffff 	.word	0xff9fffff
 8003618:	fff7ffff 	.word	0xfff7ffff

0800361c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af02      	add	r7, sp, #8
 8003622:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2288      	movs	r2, #136	; 0x88
 8003628:	2100      	movs	r1, #0
 800362a:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800362c:	f7fd fdc2 	bl	80011b4 <HAL_GetTick>
 8003630:	0003      	movs	r3, r0
 8003632:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	2208      	movs	r2, #8
 800363c:	4013      	ands	r3, r2
 800363e:	2b08      	cmp	r3, #8
 8003640:	d10d      	bne.n	800365e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003642:	68fa      	ldr	r2, [r7, #12]
 8003644:	2380      	movs	r3, #128	; 0x80
 8003646:	0399      	lsls	r1, r3, #14
 8003648:	6878      	ldr	r0, [r7, #4]
 800364a:	4b18      	ldr	r3, [pc, #96]	; (80036ac <UART_CheckIdleState+0x90>)
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	0013      	movs	r3, r2
 8003650:	2200      	movs	r2, #0
 8003652:	f000 f82d 	bl	80036b0 <UART_WaitOnFlagUntilTimeout>
 8003656:	1e03      	subs	r3, r0, #0
 8003658:	d001      	beq.n	800365e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800365a:	2303      	movs	r3, #3
 800365c:	e021      	b.n	80036a2 <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2204      	movs	r2, #4
 8003666:	4013      	ands	r3, r2
 8003668:	2b04      	cmp	r3, #4
 800366a:	d10d      	bne.n	8003688 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800366c:	68fa      	ldr	r2, [r7, #12]
 800366e:	2380      	movs	r3, #128	; 0x80
 8003670:	03d9      	lsls	r1, r3, #15
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	4b0d      	ldr	r3, [pc, #52]	; (80036ac <UART_CheckIdleState+0x90>)
 8003676:	9300      	str	r3, [sp, #0]
 8003678:	0013      	movs	r3, r2
 800367a:	2200      	movs	r2, #0
 800367c:	f000 f818 	bl	80036b0 <UART_WaitOnFlagUntilTimeout>
 8003680:	1e03      	subs	r3, r0, #0
 8003682:	d001      	beq.n	8003688 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e00c      	b.n	80036a2 <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2280      	movs	r2, #128	; 0x80
 800368c:	2120      	movs	r1, #32
 800368e:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2284      	movs	r2, #132	; 0x84
 8003694:	2120      	movs	r1, #32
 8003696:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	227c      	movs	r2, #124	; 0x7c
 800369c:	2100      	movs	r1, #0
 800369e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036a0:	2300      	movs	r3, #0
}
 80036a2:	0018      	movs	r0, r3
 80036a4:	46bd      	mov	sp, r7
 80036a6:	b004      	add	sp, #16
 80036a8:	bd80      	pop	{r7, pc}
 80036aa:	46c0      	nop			; (mov r8, r8)
 80036ac:	01ffffff 	.word	0x01ffffff

080036b0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b084      	sub	sp, #16
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	603b      	str	r3, [r7, #0]
 80036bc:	1dfb      	adds	r3, r7, #7
 80036be:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036c0:	e02b      	b.n	800371a <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036c2:	69bb      	ldr	r3, [r7, #24]
 80036c4:	3301      	adds	r3, #1
 80036c6:	d028      	beq.n	800371a <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036c8:	f7fd fd74 	bl	80011b4 <HAL_GetTick>
 80036cc:	0002      	movs	r2, r0
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	1ad3      	subs	r3, r2, r3
 80036d2:	69ba      	ldr	r2, [r7, #24]
 80036d4:	429a      	cmp	r2, r3
 80036d6:	d302      	bcc.n	80036de <UART_WaitOnFlagUntilTimeout+0x2e>
 80036d8:	69bb      	ldr	r3, [r7, #24]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d11d      	bne.n	800371a <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4916      	ldr	r1, [pc, #88]	; (8003744 <UART_WaitOnFlagUntilTimeout+0x94>)
 80036ea:	400a      	ands	r2, r1
 80036ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689a      	ldr	r2, [r3, #8]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2101      	movs	r1, #1
 80036fa:	438a      	bics	r2, r1
 80036fc:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2280      	movs	r2, #128	; 0x80
 8003702:	2120      	movs	r1, #32
 8003704:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	2284      	movs	r2, #132	; 0x84
 800370a:	2120      	movs	r1, #32
 800370c:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	227c      	movs	r2, #124	; 0x7c
 8003712:	2100      	movs	r1, #0
 8003714:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003716:	2303      	movs	r3, #3
 8003718:	e00f      	b.n	800373a <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69db      	ldr	r3, [r3, #28]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	4013      	ands	r3, r2
 8003724:	68ba      	ldr	r2, [r7, #8]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	425a      	negs	r2, r3
 800372a:	4153      	adcs	r3, r2
 800372c:	b2db      	uxtb	r3, r3
 800372e:	001a      	movs	r2, r3
 8003730:	1dfb      	adds	r3, r7, #7
 8003732:	781b      	ldrb	r3, [r3, #0]
 8003734:	429a      	cmp	r2, r3
 8003736:	d0c4      	beq.n	80036c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b004      	add	sp, #16
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	fffffe5f 	.word	0xfffffe5f

08003748 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	490b      	ldr	r1, [pc, #44]	; (8003788 <UART_EndRxTransfer+0x40>)
 800375c:	400a      	ands	r2, r1
 800375e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	689a      	ldr	r2, [r3, #8]
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	4908      	ldr	r1, [pc, #32]	; (800378c <UART_EndRxTransfer+0x44>)
 800376c:	400a      	ands	r2, r1
 800376e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2284      	movs	r2, #132	; 0x84
 8003774:	2120      	movs	r1, #32
 8003776:	5099      	str	r1, [r3, r2]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	66da      	str	r2, [r3, #108]	; 0x6c
}
 800377e:	46c0      	nop			; (mov r8, r8)
 8003780:	46bd      	mov	sp, r7
 8003782:	b002      	add	sp, #8
 8003784:	bd80      	pop	{r7, pc}
 8003786:	46c0      	nop			; (mov r8, r8)
 8003788:	fffffedf 	.word	0xfffffedf
 800378c:	effffffe 	.word	0xeffffffe

08003790 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	225e      	movs	r2, #94	; 0x5e
 80037a2:	2100      	movs	r1, #0
 80037a4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	2256      	movs	r2, #86	; 0x56
 80037aa:	2100      	movs	r1, #0
 80037ac:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	0018      	movs	r0, r3
 80037b2:	f7ff f9d1 	bl	8002b58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80037b6:	46c0      	nop			; (mov r8, r8)
 80037b8:	46bd      	mov	sp, r7
 80037ba:	b004      	add	sp, #16
 80037bc:	bd80      	pop	{r7, pc}

080037be <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80037be:	b580      	push	{r7, lr}
 80037c0:	b082      	sub	sp, #8
 80037c2:	af00      	add	r7, sp, #0
 80037c4:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2280      	movs	r2, #128	; 0x80
 80037ca:	589b      	ldr	r3, [r3, r2]
 80037cc:	2b21      	cmp	r3, #33	; 0x21
 80037ce:	d12a      	bne.n	8003826 <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2256      	movs	r2, #86	; 0x56
 80037d4:	5a9b      	ldrh	r3, [r3, r2]
 80037d6:	b29b      	uxth	r3, r3
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d110      	bne.n	80037fe <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	681a      	ldr	r2, [r3, #0]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2180      	movs	r1, #128	; 0x80
 80037e8:	438a      	bics	r2, r1
 80037ea:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	681a      	ldr	r2, [r3, #0]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	2140      	movs	r1, #64	; 0x40
 80037f8:	430a      	orrs	r2, r1
 80037fa:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80037fc:	e013      	b.n	8003826 <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003802:	781a      	ldrb	r2, [r3, #0]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800380e:	1c5a      	adds	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2256      	movs	r2, #86	; 0x56
 8003818:	5a9b      	ldrh	r3, [r3, r2]
 800381a:	b29b      	uxth	r3, r3
 800381c:	3b01      	subs	r3, #1
 800381e:	b299      	uxth	r1, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2256      	movs	r2, #86	; 0x56
 8003824:	5299      	strh	r1, [r3, r2]
}
 8003826:	46c0      	nop			; (mov r8, r8)
 8003828:	46bd      	mov	sp, r7
 800382a:	b002      	add	sp, #8
 800382c:	bd80      	pop	{r7, pc}

0800382e <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800382e:	b580      	push	{r7, lr}
 8003830:	b084      	sub	sp, #16
 8003832:	af00      	add	r7, sp, #0
 8003834:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2280      	movs	r2, #128	; 0x80
 800383a:	589b      	ldr	r3, [r3, r2]
 800383c:	2b21      	cmp	r3, #33	; 0x21
 800383e:	d12f      	bne.n	80038a0 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2256      	movs	r2, #86	; 0x56
 8003844:	5a9b      	ldrh	r3, [r3, r2]
 8003846:	b29b      	uxth	r3, r3
 8003848:	2b00      	cmp	r3, #0
 800384a:	d110      	bne.n	800386e <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	681a      	ldr	r2, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2180      	movs	r1, #128	; 0x80
 8003858:	438a      	bics	r2, r1
 800385a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	2140      	movs	r1, #64	; 0x40
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800386c:	e018      	b.n	80038a0 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003872:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	881b      	ldrh	r3, [r3, #0]
 8003878:	001a      	movs	r2, r3
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	05d2      	lsls	r2, r2, #23
 8003880:	0dd2      	lsrs	r2, r2, #23
 8003882:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003888:	1c9a      	adds	r2, r3, #2
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2256      	movs	r2, #86	; 0x56
 8003892:	5a9b      	ldrh	r3, [r3, r2]
 8003894:	b29b      	uxth	r3, r3
 8003896:	3b01      	subs	r3, #1
 8003898:	b299      	uxth	r1, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2256      	movs	r2, #86	; 0x56
 800389e:	5299      	strh	r1, [r3, r2]
}
 80038a0:	46c0      	nop			; (mov r8, r8)
 80038a2:	46bd      	mov	sp, r7
 80038a4:	b004      	add	sp, #16
 80038a6:	bd80      	pop	{r7, pc}

080038a8 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2280      	movs	r2, #128	; 0x80
 80038b4:	589b      	ldr	r3, [r3, r2]
 80038b6:	2b21      	cmp	r3, #33	; 0x21
 80038b8:	d143      	bne.n	8003942 <UART_TxISR_8BIT_FIFOEN+0x9a>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80038ba:	230e      	movs	r3, #14
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	216a      	movs	r1, #106	; 0x6a
 80038c2:	5a52      	ldrh	r2, [r2, r1]
 80038c4:	801a      	strh	r2, [r3, #0]
 80038c6:	e037      	b.n	8003938 <UART_TxISR_8BIT_FIFOEN+0x90>
    {
      if (huart->TxXferCount == 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2256      	movs	r2, #86	; 0x56
 80038cc:	5a9b      	ldrh	r3, [r3, r2]
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d111      	bne.n	80038f8 <UART_TxISR_8BIT_FIFOEN+0x50>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	689a      	ldr	r2, [r3, #8]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	491b      	ldr	r1, [pc, #108]	; (800394c <UART_TxISR_8BIT_FIFOEN+0xa4>)
 80038e0:	400a      	ands	r2, r1
 80038e2:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	681a      	ldr	r2, [r3, #0]
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2140      	movs	r1, #64	; 0x40
 80038f0:	430a      	orrs	r2, r1
 80038f2:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80038f4:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80038f6:	e024      	b.n	8003942 <UART_TxISR_8BIT_FIFOEN+0x9a>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	69db      	ldr	r3, [r3, #28]
 80038fe:	2280      	movs	r2, #128	; 0x80
 8003900:	4013      	ands	r3, r2
 8003902:	d013      	beq.n	800392c <UART_TxISR_8BIT_FIFOEN+0x84>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003908:	781a      	ldrb	r2, [r3, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003914:	1c5a      	adds	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2256      	movs	r2, #86	; 0x56
 800391e:	5a9b      	ldrh	r3, [r3, r2]
 8003920:	b29b      	uxth	r3, r3
 8003922:	3b01      	subs	r3, #1
 8003924:	b299      	uxth	r1, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2256      	movs	r2, #86	; 0x56
 800392a:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800392c:	210e      	movs	r1, #14
 800392e:	187b      	adds	r3, r7, r1
 8003930:	881a      	ldrh	r2, [r3, #0]
 8003932:	187b      	adds	r3, r7, r1
 8003934:	3a01      	subs	r2, #1
 8003936:	801a      	strh	r2, [r3, #0]
 8003938:	230e      	movs	r3, #14
 800393a:	18fb      	adds	r3, r7, r3
 800393c:	881b      	ldrh	r3, [r3, #0]
 800393e:	2b00      	cmp	r3, #0
 8003940:	d1c2      	bne.n	80038c8 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 8003942:	46c0      	nop			; (mov r8, r8)
 8003944:	46bd      	mov	sp, r7
 8003946:	b004      	add	sp, #16
 8003948:	bd80      	pop	{r7, pc}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	ff7fffff 	.word	0xff7fffff

08003950 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2280      	movs	r2, #128	; 0x80
 800395c:	589b      	ldr	r3, [r3, r2]
 800395e:	2b21      	cmp	r3, #33	; 0x21
 8003960:	d148      	bne.n	80039f4 <UART_TxISR_16BIT_FIFOEN+0xa4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003962:	230e      	movs	r3, #14
 8003964:	18fb      	adds	r3, r7, r3
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	216a      	movs	r1, #106	; 0x6a
 800396a:	5a52      	ldrh	r2, [r2, r1]
 800396c:	801a      	strh	r2, [r3, #0]
 800396e:	e03c      	b.n	80039ea <UART_TxISR_16BIT_FIFOEN+0x9a>
    {
      if (huart->TxXferCount == 0U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2256      	movs	r2, #86	; 0x56
 8003974:	5a9b      	ldrh	r3, [r3, r2]
 8003976:	b29b      	uxth	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d111      	bne.n	80039a0 <UART_TxISR_16BIT_FIFOEN+0x50>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689a      	ldr	r2, [r3, #8]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	491d      	ldr	r1, [pc, #116]	; (80039fc <UART_TxISR_16BIT_FIFOEN+0xac>)
 8003988:	400a      	ands	r2, r1
 800398a:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	681a      	ldr	r2, [r3, #0]
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	2140      	movs	r1, #64	; 0x40
 8003998:	430a      	orrs	r2, r1
 800399a:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800399c:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800399e:	e029      	b.n	80039f4 <UART_TxISR_16BIT_FIFOEN+0xa4>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	69db      	ldr	r3, [r3, #28]
 80039a6:	2280      	movs	r2, #128	; 0x80
 80039a8:	4013      	ands	r3, r2
 80039aa:	d018      	beq.n	80039de <UART_TxISR_16BIT_FIFOEN+0x8e>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039b0:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80039b2:	68bb      	ldr	r3, [r7, #8]
 80039b4:	881b      	ldrh	r3, [r3, #0]
 80039b6:	001a      	movs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	05d2      	lsls	r2, r2, #23
 80039be:	0dd2      	lsrs	r2, r2, #23
 80039c0:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039c6:	1c9a      	adds	r2, r3, #2
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2256      	movs	r2, #86	; 0x56
 80039d0:	5a9b      	ldrh	r3, [r3, r2]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b299      	uxth	r1, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2256      	movs	r2, #86	; 0x56
 80039dc:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80039de:	210e      	movs	r1, #14
 80039e0:	187b      	adds	r3, r7, r1
 80039e2:	881a      	ldrh	r2, [r3, #0]
 80039e4:	187b      	adds	r3, r7, r1
 80039e6:	3a01      	subs	r2, #1
 80039e8:	801a      	strh	r2, [r3, #0]
 80039ea:	230e      	movs	r3, #14
 80039ec:	18fb      	adds	r3, r7, r3
 80039ee:	881b      	ldrh	r3, [r3, #0]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1bd      	bne.n	8003970 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80039f4:	46c0      	nop			; (mov r8, r8)
 80039f6:	46bd      	mov	sp, r7
 80039f8:	b004      	add	sp, #16
 80039fa:	bd80      	pop	{r7, pc}
 80039fc:	ff7fffff 	.word	0xff7fffff

08003a00 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b082      	sub	sp, #8
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	2140      	movs	r1, #64	; 0x40
 8003a14:	438a      	bics	r2, r1
 8003a16:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2280      	movs	r2, #128	; 0x80
 8003a1c:	2120      	movs	r1, #32
 8003a1e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	0018      	movs	r0, r3
 8003a2a:	f7ff f88d 	bl	8002b48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a2e:	46c0      	nop			; (mov r8, r8)
 8003a30:	46bd      	mov	sp, r7
 8003a32:	b002      	add	sp, #8
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b082      	sub	sp, #8
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003a3e:	46c0      	nop			; (mov r8, r8)
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b002      	add	sp, #8
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003a4e:	46c0      	nop			; (mov r8, r8)
 8003a50:	46bd      	mov	sp, r7
 8003a52:	b002      	add	sp, #8
 8003a54:	bd80      	pop	{r7, pc}

08003a56 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8003a56:	b580      	push	{r7, lr}
 8003a58:	b082      	sub	sp, #8
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003a5e:	46c0      	nop			; (mov r8, r8)
 8003a60:	46bd      	mov	sp, r7
 8003a62:	b002      	add	sp, #8
 8003a64:	bd80      	pop	{r7, pc}
	...

08003a68 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	227c      	movs	r2, #124	; 0x7c
 8003a74:	5c9b      	ldrb	r3, [r3, r2]
 8003a76:	2b01      	cmp	r3, #1
 8003a78:	d101      	bne.n	8003a7e <HAL_UARTEx_DisableFifoMode+0x16>
 8003a7a:	2302      	movs	r3, #2
 8003a7c:	e027      	b.n	8003ace <HAL_UARTEx_DisableFifoMode+0x66>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	227c      	movs	r2, #124	; 0x7c
 8003a82:	2101      	movs	r1, #1
 8003a84:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2280      	movs	r2, #128	; 0x80
 8003a8a:	2124      	movs	r1, #36	; 0x24
 8003a8c:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	2101      	movs	r1, #1
 8003aa2:	438a      	bics	r2, r1
 8003aa4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	4a0b      	ldr	r2, [pc, #44]	; (8003ad8 <HAL_UARTEx_DisableFifoMode+0x70>)
 8003aaa:	4013      	ands	r3, r2
 8003aac:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	68fa      	ldr	r2, [r7, #12]
 8003aba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2280      	movs	r2, #128	; 0x80
 8003ac0:	2120      	movs	r1, #32
 8003ac2:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	227c      	movs	r2, #124	; 0x7c
 8003ac8:	2100      	movs	r1, #0
 8003aca:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	0018      	movs	r0, r3
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	b004      	add	sp, #16
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	dfffffff 	.word	0xdfffffff

08003adc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	227c      	movs	r2, #124	; 0x7c
 8003aea:	5c9b      	ldrb	r3, [r3, r2]
 8003aec:	2b01      	cmp	r3, #1
 8003aee:	d101      	bne.n	8003af4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003af0:	2302      	movs	r3, #2
 8003af2:	e02e      	b.n	8003b52 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	227c      	movs	r2, #124	; 0x7c
 8003af8:	2101      	movs	r1, #1
 8003afa:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2280      	movs	r2, #128	; 0x80
 8003b00:	2124      	movs	r1, #36	; 0x24
 8003b02:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	2101      	movs	r1, #1
 8003b18:	438a      	bics	r2, r1
 8003b1a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	689b      	ldr	r3, [r3, #8]
 8003b22:	00db      	lsls	r3, r3, #3
 8003b24:	08d9      	lsrs	r1, r3, #3
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	430a      	orrs	r2, r1
 8003b2e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	0018      	movs	r0, r3
 8003b34:	f000 f854 	bl	8003be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2280      	movs	r2, #128	; 0x80
 8003b44:	2120      	movs	r1, #32
 8003b46:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	227c      	movs	r2, #124	; 0x7c
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003b50:	2300      	movs	r3, #0
}
 8003b52:	0018      	movs	r0, r3
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b004      	add	sp, #16
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	227c      	movs	r2, #124	; 0x7c
 8003b6a:	5c9b      	ldrb	r3, [r3, r2]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d101      	bne.n	8003b74 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003b70:	2302      	movs	r3, #2
 8003b72:	e02f      	b.n	8003bd4 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	227c      	movs	r2, #124	; 0x7c
 8003b78:	2101      	movs	r1, #1
 8003b7a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2280      	movs	r2, #128	; 0x80
 8003b80:	2124      	movs	r1, #36	; 0x24
 8003b82:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	681a      	ldr	r2, [r3, #0]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2101      	movs	r1, #1
 8003b98:	438a      	bics	r2, r1
 8003b9a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	4a0e      	ldr	r2, [pc, #56]	; (8003bdc <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8003ba4:	4013      	ands	r3, r2
 8003ba6:	0019      	movs	r1, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	683a      	ldr	r2, [r7, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	0018      	movs	r0, r3
 8003bb6:	f000 f813 	bl	8003be0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68fa      	ldr	r2, [r7, #12]
 8003bc0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2280      	movs	r2, #128	; 0x80
 8003bc6:	2120      	movs	r1, #32
 8003bc8:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	227c      	movs	r2, #124	; 0x7c
 8003bce:	2100      	movs	r1, #0
 8003bd0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	0018      	movs	r0, r3
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	b004      	add	sp, #16
 8003bda:	bd80      	pop	{r7, pc}
 8003bdc:	f1ffffff 	.word	0xf1ffffff

08003be0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be2:	b089      	sub	sp, #36	; 0x24
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003be8:	2314      	movs	r3, #20
 8003bea:	18fb      	adds	r3, r7, r3
 8003bec:	4a2f      	ldr	r2, [pc, #188]	; (8003cac <UARTEx_SetNbDataToProcess+0xcc>)
 8003bee:	ca03      	ldmia	r2!, {r0, r1}
 8003bf0:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8003bf2:	230c      	movs	r3, #12
 8003bf4:	18fb      	adds	r3, r7, r3
 8003bf6:	4a2e      	ldr	r2, [pc, #184]	; (8003cb0 <UARTEx_SetNbDataToProcess+0xd0>)
 8003bf8:	ca03      	ldmia	r2!, {r0, r1}
 8003bfa:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d108      	bne.n	8003c16 <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	226a      	movs	r2, #106	; 0x6a
 8003c08:	2101      	movs	r1, #1
 8003c0a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2268      	movs	r2, #104	; 0x68
 8003c10:	2101      	movs	r1, #1
 8003c12:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003c14:	e046      	b.n	8003ca4 <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003c16:	261f      	movs	r6, #31
 8003c18:	19bb      	adds	r3, r7, r6
 8003c1a:	2208      	movs	r2, #8
 8003c1c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003c1e:	201e      	movs	r0, #30
 8003c20:	183b      	adds	r3, r7, r0
 8003c22:	2208      	movs	r2, #8
 8003c24:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	689b      	ldr	r3, [r3, #8]
 8003c2c:	0e5b      	lsrs	r3, r3, #25
 8003c2e:	b2da      	uxtb	r2, r3
 8003c30:	241d      	movs	r4, #29
 8003c32:	193b      	adds	r3, r7, r4
 8003c34:	2107      	movs	r1, #7
 8003c36:	400a      	ands	r2, r1
 8003c38:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	0f5b      	lsrs	r3, r3, #29
 8003c42:	b2da      	uxtb	r2, r3
 8003c44:	251c      	movs	r5, #28
 8003c46:	197b      	adds	r3, r7, r5
 8003c48:	2107      	movs	r1, #7
 8003c4a:	400a      	ands	r2, r1
 8003c4c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003c4e:	183b      	adds	r3, r7, r0
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	197a      	adds	r2, r7, r5
 8003c54:	7812      	ldrb	r2, [r2, #0]
 8003c56:	2114      	movs	r1, #20
 8003c58:	1879      	adds	r1, r7, r1
 8003c5a:	5c8a      	ldrb	r2, [r1, r2]
 8003c5c:	435a      	muls	r2, r3
 8003c5e:	0010      	movs	r0, r2
 8003c60:	197b      	adds	r3, r7, r5
 8003c62:	781b      	ldrb	r3, [r3, #0]
 8003c64:	250c      	movs	r5, #12
 8003c66:	197a      	adds	r2, r7, r5
 8003c68:	5cd3      	ldrb	r3, [r2, r3]
 8003c6a:	0019      	movs	r1, r3
 8003c6c:	f7fc fade 	bl	800022c <__divsi3>
 8003c70:	0003      	movs	r3, r0
 8003c72:	b299      	uxth	r1, r3
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	226a      	movs	r2, #106	; 0x6a
 8003c78:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003c7a:	19bb      	adds	r3, r7, r6
 8003c7c:	781b      	ldrb	r3, [r3, #0]
 8003c7e:	193a      	adds	r2, r7, r4
 8003c80:	7812      	ldrb	r2, [r2, #0]
 8003c82:	2114      	movs	r1, #20
 8003c84:	1879      	adds	r1, r7, r1
 8003c86:	5c8a      	ldrb	r2, [r1, r2]
 8003c88:	435a      	muls	r2, r3
 8003c8a:	0010      	movs	r0, r2
 8003c8c:	193b      	adds	r3, r7, r4
 8003c8e:	781b      	ldrb	r3, [r3, #0]
 8003c90:	197a      	adds	r2, r7, r5
 8003c92:	5cd3      	ldrb	r3, [r2, r3]
 8003c94:	0019      	movs	r1, r3
 8003c96:	f7fc fac9 	bl	800022c <__divsi3>
 8003c9a:	0003      	movs	r3, r0
 8003c9c:	b299      	uxth	r1, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	2268      	movs	r2, #104	; 0x68
 8003ca2:	5299      	strh	r1, [r3, r2]
}
 8003ca4:	46c0      	nop			; (mov r8, r8)
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	b009      	add	sp, #36	; 0x24
 8003caa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cac:	08005790 	.word	0x08005790
 8003cb0:	08005798 	.word	0x08005798

08003cb4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b084      	sub	sp, #16
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	0002      	movs	r2, r0
 8003cbc:	1dbb      	adds	r3, r7, #6
 8003cbe:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8003cc4:	1dbb      	adds	r3, r7, #6
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	5e9b      	ldrsh	r3, [r3, r2]
 8003cca:	2b84      	cmp	r3, #132	; 0x84
 8003ccc:	d006      	beq.n	8003cdc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8003cce:	1dbb      	adds	r3, r7, #6
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	5e9a      	ldrsh	r2, [r3, r2]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	18d3      	adds	r3, r2, r3
 8003cd8:	3303      	adds	r3, #3
 8003cda:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
}
 8003cde:	0018      	movs	r0, r3
 8003ce0:	46bd      	mov	sp, r7
 8003ce2:	b004      	add	sp, #16
 8003ce4:	bd80      	pop	{r7, pc}

08003ce6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003ce6:	b580      	push	{r7, lr}
 8003ce8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003cea:	f000 fdbf 	bl	800486c <vTaskStartScheduler>
  
  return osOK;
 8003cee:	2300      	movs	r3, #0
}
 8003cf0:	0018      	movs	r0, r3
 8003cf2:	46bd      	mov	sp, r7
 8003cf4:	bd80      	pop	{r7, pc}

08003cf6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003cf6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003cf8:	b087      	sub	sp, #28
 8003cfa:	af02      	add	r7, sp, #8
 8003cfc:	6078      	str	r0, [r7, #4]
 8003cfe:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685c      	ldr	r4, [r3, #4]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003d0c:	b29e      	uxth	r6, r3
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2208      	movs	r2, #8
 8003d12:	5e9b      	ldrsh	r3, [r3, r2]
 8003d14:	0018      	movs	r0, r3
 8003d16:	f7ff ffcd 	bl	8003cb4 <makeFreeRtosPriority>
 8003d1a:	0001      	movs	r1, r0
 8003d1c:	683a      	ldr	r2, [r7, #0]
 8003d1e:	230c      	movs	r3, #12
 8003d20:	18fb      	adds	r3, r7, r3
 8003d22:	9301      	str	r3, [sp, #4]
 8003d24:	9100      	str	r1, [sp, #0]
 8003d26:	0013      	movs	r3, r2
 8003d28:	0032      	movs	r2, r6
 8003d2a:	0029      	movs	r1, r5
 8003d2c:	0020      	movs	r0, r4
 8003d2e:	f000 fc50 	bl	80045d2 <xTaskCreate>
 8003d32:	0003      	movs	r3, r0
 8003d34:	2b01      	cmp	r3, #1
 8003d36:	d001      	beq.n	8003d3c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	e000      	b.n	8003d3e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
}
 8003d3e:	0018      	movs	r0, r3
 8003d40:	46bd      	mov	sp, r7
 8003d42:	b005      	add	sp, #20
 8003d44:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d46 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b084      	sub	sp, #16
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d001      	beq.n	8003d5c <osDelay+0x16>
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	e000      	b.n	8003d5e <osDelay+0x18>
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	0018      	movs	r0, r3
 8003d60:	f000 fd5e 	bl	8004820 <vTaskDelay>
  
  return osOK;
 8003d64:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8003d66:	0018      	movs	r0, r3
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	b004      	add	sp, #16
 8003d6c:	bd80      	pop	{r7, pc}

08003d6e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003d6e:	b580      	push	{r7, lr}
 8003d70:	b082      	sub	sp, #8
 8003d72:	af00      	add	r7, sp, #0
 8003d74:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	3308      	adds	r3, #8
 8003d7a:	001a      	movs	r2, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2201      	movs	r2, #1
 8003d84:	4252      	negs	r2, r2
 8003d86:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	3308      	adds	r3, #8
 8003d8c:	001a      	movs	r2, r3
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	3308      	adds	r3, #8
 8003d96:	001a      	movs	r2, r3
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003da2:	46c0      	nop			; (mov r8, r8)
 8003da4:	46bd      	mov	sp, r7
 8003da6:	b002      	add	sp, #8
 8003da8:	bd80      	pop	{r7, pc}

08003daa <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003db8:	46c0      	nop			; (mov r8, r8)
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	b002      	add	sp, #8
 8003dbe:	bd80      	pop	{r7, pc}

08003dc0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b084      	sub	sp, #16
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	689a      	ldr	r2, [r3, #8]
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	683a      	ldr	r2, [r7, #0]
 8003de4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	683a      	ldr	r2, [r7, #0]
 8003dea:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	601a      	str	r2, [r3, #0]
}
 8003dfc:	46c0      	nop			; (mov r8, r8)
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	b004      	add	sp, #16
 8003e02:	bd80      	pop	{r7, pc}

08003e04 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b084      	sub	sp, #16
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
 8003e0c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	3301      	adds	r3, #1
 8003e18:	d103      	bne.n	8003e22 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	691b      	ldr	r3, [r3, #16]
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	e00c      	b.n	8003e3c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	3308      	adds	r3, #8
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	e002      	b.n	8003e30 <vListInsert+0x2c>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	60fb      	str	r3, [r7, #12]
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	68ba      	ldr	r2, [r7, #8]
 8003e38:	429a      	cmp	r2, r3
 8003e3a:	d2f6      	bcs.n	8003e2a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	685a      	ldr	r2, [r3, #4]
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	685b      	ldr	r3, [r3, #4]
 8003e48:	683a      	ldr	r2, [r7, #0]
 8003e4a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	68fa      	ldr	r2, [r7, #12]
 8003e50:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003e58:	683b      	ldr	r3, [r7, #0]
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	1c5a      	adds	r2, r3, #1
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	601a      	str	r2, [r3, #0]
}
 8003e68:	46c0      	nop			; (mov r8, r8)
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	b004      	add	sp, #16
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	691b      	ldr	r3, [r3, #16]
 8003e7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6892      	ldr	r2, [r2, #8]
 8003e86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	689b      	ldr	r3, [r3, #8]
 8003e8c:	687a      	ldr	r2, [r7, #4]
 8003e8e:	6852      	ldr	r2, [r2, #4]
 8003e90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	687a      	ldr	r2, [r7, #4]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d103      	bne.n	8003ea4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	689a      	ldr	r2, [r3, #8]
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	1e5a      	subs	r2, r3, #1
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
}
 8003eb8:	0018      	movs	r0, r3
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	b004      	add	sp, #16
 8003ebe:	bd80      	pop	{r7, pc}

08003ec0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b084      	sub	sp, #16
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
 8003ec8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <xQueueGenericReset+0x18>
 8003ed4:	b672      	cpsid	i
 8003ed6:	e7fe      	b.n	8003ed6 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003ed8:	f001 f9a2 	bl	8005220 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681a      	ldr	r2, [r3, #0]
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee8:	434b      	muls	r3, r1
 8003eea:	18d2      	adds	r2, r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	1e59      	subs	r1, r3, #1
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f0c:	434b      	muls	r3, r1
 8003f0e:	18d2      	adds	r2, r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2244      	movs	r2, #68	; 0x44
 8003f18:	21ff      	movs	r1, #255	; 0xff
 8003f1a:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2245      	movs	r2, #69	; 0x45
 8003f20:	21ff      	movs	r1, #255	; 0xff
 8003f22:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10d      	bne.n	8003f46 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d013      	beq.n	8003f5a <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	3310      	adds	r3, #16
 8003f36:	0018      	movs	r0, r3
 8003f38:	f000 fe8a 	bl	8004c50 <xTaskRemoveFromEventList>
 8003f3c:	1e03      	subs	r3, r0, #0
 8003f3e:	d00c      	beq.n	8003f5a <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003f40:	f001 f95e 	bl	8005200 <vPortYield>
 8003f44:	e009      	b.n	8003f5a <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	3310      	adds	r3, #16
 8003f4a:	0018      	movs	r0, r3
 8003f4c:	f7ff ff0f 	bl	8003d6e <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	3324      	adds	r3, #36	; 0x24
 8003f54:	0018      	movs	r0, r3
 8003f56:	f7ff ff0a 	bl	8003d6e <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003f5a:	f001 f973 	bl	8005244 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003f5e:	2301      	movs	r3, #1
}
 8003f60:	0018      	movs	r0, r3
 8003f62:	46bd      	mov	sp, r7
 8003f64:	b004      	add	sp, #16
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f68:	b590      	push	{r4, r7, lr}
 8003f6a:	b08b      	sub	sp, #44	; 0x2c
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	1dfb      	adds	r3, r7, #7
 8003f74:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <xQueueGenericCreate+0x18>
 8003f7c:	b672      	cpsid	i
 8003f7e:	e7fe      	b.n	8003f7e <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d102      	bne.n	8003f8c <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003f86:	2300      	movs	r3, #0
 8003f88:	61fb      	str	r3, [r7, #28]
 8003f8a:	e003      	b.n	8003f94 <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	68ba      	ldr	r2, [r7, #8]
 8003f90:	4353      	muls	r3, r2
 8003f92:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003f94:	69fb      	ldr	r3, [r7, #28]
 8003f96:	3348      	adds	r3, #72	; 0x48
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f001 f9d9 	bl	8005350 <pvPortMalloc>
 8003f9e:	0003      	movs	r3, r0
 8003fa0:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d00c      	beq.n	8003fc2 <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	3348      	adds	r3, #72	; 0x48
 8003fac:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fae:	1dfb      	adds	r3, r7, #7
 8003fb0:	781c      	ldrb	r4, [r3, #0]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	68b9      	ldr	r1, [r7, #8]
 8003fb6:	68f8      	ldr	r0, [r7, #12]
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	9300      	str	r3, [sp, #0]
 8003fbc:	0023      	movs	r3, r4
 8003fbe:	f000 f805 	bl	8003fcc <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003fc2:	69bb      	ldr	r3, [r7, #24]
	}
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	b009      	add	sp, #36	; 0x24
 8003fca:	bd90      	pop	{r4, r7, pc}

08003fcc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	60f8      	str	r0, [r7, #12]
 8003fd4:	60b9      	str	r1, [r7, #8]
 8003fd6:	607a      	str	r2, [r7, #4]
 8003fd8:	001a      	movs	r2, r3
 8003fda:	1cfb      	adds	r3, r7, #3
 8003fdc:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d103      	bne.n	8003fec <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	69ba      	ldr	r2, [r7, #24]
 8003fe8:	601a      	str	r2, [r3, #0]
 8003fea:	e002      	b.n	8003ff2 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003fec:	69bb      	ldr	r3, [r7, #24]
 8003fee:	687a      	ldr	r2, [r7, #4]
 8003ff0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	68fa      	ldr	r2, [r7, #12]
 8003ff6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	68ba      	ldr	r2, [r7, #8]
 8003ffc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	2101      	movs	r1, #1
 8004002:	0018      	movs	r0, r3
 8004004:	f7ff ff5c 	bl	8003ec0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004008:	46c0      	nop			; (mov r8, r8)
 800400a:	46bd      	mov	sp, r7
 800400c:	b004      	add	sp, #16
 800400e:	bd80      	pop	{r7, pc}

08004010 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004010:	b580      	push	{r7, lr}
 8004012:	b082      	sub	sp, #8
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d00e      	beq.n	800403c <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004030:	6878      	ldr	r0, [r7, #4]
 8004032:	2300      	movs	r3, #0
 8004034:	2200      	movs	r2, #0
 8004036:	2100      	movs	r1, #0
 8004038:	f000 f820 	bl	800407c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800403c:	46c0      	nop			; (mov r8, r8)
 800403e:	46bd      	mov	sp, r7
 8004040:	b002      	add	sp, #8
 8004042:	bd80      	pop	{r7, pc}

08004044 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	0002      	movs	r2, r0
 800404c:	1dfb      	adds	r3, r7, #7
 800404e:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004050:	2301      	movs	r3, #1
 8004052:	617b      	str	r3, [r7, #20]
 8004054:	2300      	movs	r3, #0
 8004056:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004058:	1dfb      	adds	r3, r7, #7
 800405a:	781a      	ldrb	r2, [r3, #0]
 800405c:	6939      	ldr	r1, [r7, #16]
 800405e:	697b      	ldr	r3, [r7, #20]
 8004060:	0018      	movs	r0, r3
 8004062:	f7ff ff81 	bl	8003f68 <xQueueGenericCreate>
 8004066:	0003      	movs	r3, r0
 8004068:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	0018      	movs	r0, r3
 800406e:	f7ff ffcf 	bl	8004010 <prvInitialiseMutex>

		return pxNewQueue;
 8004072:	68fb      	ldr	r3, [r7, #12]
	}
 8004074:	0018      	movs	r0, r3
 8004076:	46bd      	mov	sp, r7
 8004078:	b006      	add	sp, #24
 800407a:	bd80      	pop	{r7, pc}

0800407c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800407c:	b580      	push	{r7, lr}
 800407e:	b08a      	sub	sp, #40	; 0x28
 8004080:	af00      	add	r7, sp, #0
 8004082:	60f8      	str	r0, [r7, #12]
 8004084:	60b9      	str	r1, [r7, #8]
 8004086:	607a      	str	r2, [r7, #4]
 8004088:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800408a:	2300      	movs	r3, #0
 800408c:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d101      	bne.n	800409c <xQueueGenericSend+0x20>
 8004098:	b672      	cpsid	i
 800409a:	e7fe      	b.n	800409a <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800409c:	68bb      	ldr	r3, [r7, #8]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d103      	bne.n	80040aa <xQueueGenericSend+0x2e>
 80040a2:	6a3b      	ldr	r3, [r7, #32]
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d101      	bne.n	80040ae <xQueueGenericSend+0x32>
 80040aa:	2301      	movs	r3, #1
 80040ac:	e000      	b.n	80040b0 <xQueueGenericSend+0x34>
 80040ae:	2300      	movs	r3, #0
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <xQueueGenericSend+0x3c>
 80040b4:	b672      	cpsid	i
 80040b6:	e7fe      	b.n	80040b6 <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d103      	bne.n	80040c6 <xQueueGenericSend+0x4a>
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <xQueueGenericSend+0x4e>
 80040c6:	2301      	movs	r3, #1
 80040c8:	e000      	b.n	80040cc <xQueueGenericSend+0x50>
 80040ca:	2300      	movs	r3, #0
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d101      	bne.n	80040d4 <xQueueGenericSend+0x58>
 80040d0:	b672      	cpsid	i
 80040d2:	e7fe      	b.n	80040d2 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80040d4:	f000 ff3e 	bl	8004f54 <xTaskGetSchedulerState>
 80040d8:	1e03      	subs	r3, r0, #0
 80040da:	d102      	bne.n	80040e2 <xQueueGenericSend+0x66>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <xQueueGenericSend+0x6a>
 80040e2:	2301      	movs	r3, #1
 80040e4:	e000      	b.n	80040e8 <xQueueGenericSend+0x6c>
 80040e6:	2300      	movs	r3, #0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <xQueueGenericSend+0x74>
 80040ec:	b672      	cpsid	i
 80040ee:	e7fe      	b.n	80040ee <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040f0:	f001 f896 	bl	8005220 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80040f4:	6a3b      	ldr	r3, [r7, #32]
 80040f6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040f8:	6a3b      	ldr	r3, [r7, #32]
 80040fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040fc:	429a      	cmp	r2, r3
 80040fe:	d302      	bcc.n	8004106 <xQueueGenericSend+0x8a>
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	2b02      	cmp	r3, #2
 8004104:	d11e      	bne.n	8004144 <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004106:	683a      	ldr	r2, [r7, #0]
 8004108:	68b9      	ldr	r1, [r7, #8]
 800410a:	6a3b      	ldr	r3, [r7, #32]
 800410c:	0018      	movs	r0, r3
 800410e:	f000 f943 	bl	8004398 <prvCopyDataToQueue>
 8004112:	0003      	movs	r3, r0
 8004114:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004116:	6a3b      	ldr	r3, [r7, #32]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	2b00      	cmp	r3, #0
 800411c:	d009      	beq.n	8004132 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800411e:	6a3b      	ldr	r3, [r7, #32]
 8004120:	3324      	adds	r3, #36	; 0x24
 8004122:	0018      	movs	r0, r3
 8004124:	f000 fd94 	bl	8004c50 <xTaskRemoveFromEventList>
 8004128:	1e03      	subs	r3, r0, #0
 800412a:	d007      	beq.n	800413c <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800412c:	f001 f868 	bl	8005200 <vPortYield>
 8004130:	e004      	b.n	800413c <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004132:	69fb      	ldr	r3, [r7, #28]
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004138:	f001 f862 	bl	8005200 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800413c:	f001 f882 	bl	8005244 <vPortExitCritical>
				return pdPASS;
 8004140:	2301      	movs	r3, #1
 8004142:	e05b      	b.n	80041fc <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d103      	bne.n	8004152 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800414a:	f001 f87b 	bl	8005244 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800414e:	2300      	movs	r3, #0
 8004150:	e054      	b.n	80041fc <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	2b00      	cmp	r3, #0
 8004156:	d106      	bne.n	8004166 <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004158:	2314      	movs	r3, #20
 800415a:	18fb      	adds	r3, r7, r3
 800415c:	0018      	movs	r0, r3
 800415e:	f000 fdd3 	bl	8004d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004162:	2301      	movs	r3, #1
 8004164:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004166:	f001 f86d 	bl	8005244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800416a:	f000 fbb5 	bl	80048d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800416e:	f001 f857 	bl	8005220 <vPortEnterCritical>
 8004172:	6a3b      	ldr	r3, [r7, #32]
 8004174:	2244      	movs	r2, #68	; 0x44
 8004176:	5c9b      	ldrb	r3, [r3, r2]
 8004178:	b25b      	sxtb	r3, r3
 800417a:	3301      	adds	r3, #1
 800417c:	d103      	bne.n	8004186 <xQueueGenericSend+0x10a>
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	2244      	movs	r2, #68	; 0x44
 8004182:	2100      	movs	r1, #0
 8004184:	5499      	strb	r1, [r3, r2]
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	2245      	movs	r2, #69	; 0x45
 800418a:	5c9b      	ldrb	r3, [r3, r2]
 800418c:	b25b      	sxtb	r3, r3
 800418e:	3301      	adds	r3, #1
 8004190:	d103      	bne.n	800419a <xQueueGenericSend+0x11e>
 8004192:	6a3b      	ldr	r3, [r7, #32]
 8004194:	2245      	movs	r2, #69	; 0x45
 8004196:	2100      	movs	r1, #0
 8004198:	5499      	strb	r1, [r3, r2]
 800419a:	f001 f853 	bl	8005244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800419e:	1d3a      	adds	r2, r7, #4
 80041a0:	2314      	movs	r3, #20
 80041a2:	18fb      	adds	r3, r7, r3
 80041a4:	0011      	movs	r1, r2
 80041a6:	0018      	movs	r0, r3
 80041a8:	f000 fdc2 	bl	8004d30 <xTaskCheckForTimeOut>
 80041ac:	1e03      	subs	r3, r0, #0
 80041ae:	d11e      	bne.n	80041ee <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	0018      	movs	r0, r3
 80041b4:	f000 f9f5 	bl	80045a2 <prvIsQueueFull>
 80041b8:	1e03      	subs	r3, r0, #0
 80041ba:	d011      	beq.n	80041e0 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80041bc:	6a3b      	ldr	r3, [r7, #32]
 80041be:	3310      	adds	r3, #16
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	0011      	movs	r1, r2
 80041c4:	0018      	movs	r0, r3
 80041c6:	f000 fd25 	bl	8004c14 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	0018      	movs	r0, r3
 80041ce:	f000 f974 	bl	80044ba <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80041d2:	f000 fb8d 	bl	80048f0 <xTaskResumeAll>
 80041d6:	1e03      	subs	r3, r0, #0
 80041d8:	d18a      	bne.n	80040f0 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 80041da:	f001 f811 	bl	8005200 <vPortYield>
 80041de:	e787      	b.n	80040f0 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80041e0:	6a3b      	ldr	r3, [r7, #32]
 80041e2:	0018      	movs	r0, r3
 80041e4:	f000 f969 	bl	80044ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041e8:	f000 fb82 	bl	80048f0 <xTaskResumeAll>
 80041ec:	e780      	b.n	80040f0 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80041ee:	6a3b      	ldr	r3, [r7, #32]
 80041f0:	0018      	movs	r0, r3
 80041f2:	f000 f962 	bl	80044ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041f6:	f000 fb7b 	bl	80048f0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80041fa:	2300      	movs	r3, #0
		}
	}
}
 80041fc:	0018      	movs	r0, r3
 80041fe:	46bd      	mov	sp, r7
 8004200:	b00a      	add	sp, #40	; 0x28
 8004202:	bd80      	pop	{r7, pc}

08004204 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004210:	2300      	movs	r3, #0
 8004212:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004218:	6a3b      	ldr	r3, [r7, #32]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d101      	bne.n	8004222 <xQueueReceive+0x1e>
 800421e:	b672      	cpsid	i
 8004220:	e7fe      	b.n	8004220 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d103      	bne.n	8004230 <xQueueReceive+0x2c>
 8004228:	6a3b      	ldr	r3, [r7, #32]
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	2b00      	cmp	r3, #0
 800422e:	d101      	bne.n	8004234 <xQueueReceive+0x30>
 8004230:	2301      	movs	r3, #1
 8004232:	e000      	b.n	8004236 <xQueueReceive+0x32>
 8004234:	2300      	movs	r3, #0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d101      	bne.n	800423e <xQueueReceive+0x3a>
 800423a:	b672      	cpsid	i
 800423c:	e7fe      	b.n	800423c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800423e:	f000 fe89 	bl	8004f54 <xTaskGetSchedulerState>
 8004242:	1e03      	subs	r3, r0, #0
 8004244:	d102      	bne.n	800424c <xQueueReceive+0x48>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <xQueueReceive+0x4c>
 800424c:	2301      	movs	r3, #1
 800424e:	e000      	b.n	8004252 <xQueueReceive+0x4e>
 8004250:	2300      	movs	r3, #0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <xQueueReceive+0x56>
 8004256:	b672      	cpsid	i
 8004258:	e7fe      	b.n	8004258 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 800425a:	f000 ffe1 	bl	8005220 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800425e:	6a3b      	ldr	r3, [r7, #32]
 8004260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004262:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004264:	69fb      	ldr	r3, [r7, #28]
 8004266:	2b00      	cmp	r3, #0
 8004268:	d01a      	beq.n	80042a0 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800426a:	68ba      	ldr	r2, [r7, #8]
 800426c:	6a3b      	ldr	r3, [r7, #32]
 800426e:	0011      	movs	r1, r2
 8004270:	0018      	movs	r0, r3
 8004272:	f000 f8fc 	bl	800446e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004276:	69fb      	ldr	r3, [r7, #28]
 8004278:	1e5a      	subs	r2, r3, #1
 800427a:	6a3b      	ldr	r3, [r7, #32]
 800427c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800427e:	6a3b      	ldr	r3, [r7, #32]
 8004280:	691b      	ldr	r3, [r3, #16]
 8004282:	2b00      	cmp	r3, #0
 8004284:	d008      	beq.n	8004298 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004286:	6a3b      	ldr	r3, [r7, #32]
 8004288:	3310      	adds	r3, #16
 800428a:	0018      	movs	r0, r3
 800428c:	f000 fce0 	bl	8004c50 <xTaskRemoveFromEventList>
 8004290:	1e03      	subs	r3, r0, #0
 8004292:	d001      	beq.n	8004298 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004294:	f000 ffb4 	bl	8005200 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004298:	f000 ffd4 	bl	8005244 <vPortExitCritical>
				return pdPASS;
 800429c:	2301      	movs	r3, #1
 800429e:	e062      	b.n	8004366 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80042a6:	f000 ffcd 	bl	8005244 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80042aa:	2300      	movs	r3, #0
 80042ac:	e05b      	b.n	8004366 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80042ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d106      	bne.n	80042c2 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80042b4:	2314      	movs	r3, #20
 80042b6:	18fb      	adds	r3, r7, r3
 80042b8:	0018      	movs	r0, r3
 80042ba:	f000 fd25 	bl	8004d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80042be:	2301      	movs	r3, #1
 80042c0:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80042c2:	f000 ffbf 	bl	8005244 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80042c6:	f000 fb07 	bl	80048d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80042ca:	f000 ffa9 	bl	8005220 <vPortEnterCritical>
 80042ce:	6a3b      	ldr	r3, [r7, #32]
 80042d0:	2244      	movs	r2, #68	; 0x44
 80042d2:	5c9b      	ldrb	r3, [r3, r2]
 80042d4:	b25b      	sxtb	r3, r3
 80042d6:	3301      	adds	r3, #1
 80042d8:	d103      	bne.n	80042e2 <xQueueReceive+0xde>
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	2244      	movs	r2, #68	; 0x44
 80042de:	2100      	movs	r1, #0
 80042e0:	5499      	strb	r1, [r3, r2]
 80042e2:	6a3b      	ldr	r3, [r7, #32]
 80042e4:	2245      	movs	r2, #69	; 0x45
 80042e6:	5c9b      	ldrb	r3, [r3, r2]
 80042e8:	b25b      	sxtb	r3, r3
 80042ea:	3301      	adds	r3, #1
 80042ec:	d103      	bne.n	80042f6 <xQueueReceive+0xf2>
 80042ee:	6a3b      	ldr	r3, [r7, #32]
 80042f0:	2245      	movs	r2, #69	; 0x45
 80042f2:	2100      	movs	r1, #0
 80042f4:	5499      	strb	r1, [r3, r2]
 80042f6:	f000 ffa5 	bl	8005244 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80042fa:	1d3a      	adds	r2, r7, #4
 80042fc:	2314      	movs	r3, #20
 80042fe:	18fb      	adds	r3, r7, r3
 8004300:	0011      	movs	r1, r2
 8004302:	0018      	movs	r0, r3
 8004304:	f000 fd14 	bl	8004d30 <xTaskCheckForTimeOut>
 8004308:	1e03      	subs	r3, r0, #0
 800430a:	d11e      	bne.n	800434a <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800430c:	6a3b      	ldr	r3, [r7, #32]
 800430e:	0018      	movs	r0, r3
 8004310:	f000 f931 	bl	8004576 <prvIsQueueEmpty>
 8004314:	1e03      	subs	r3, r0, #0
 8004316:	d011      	beq.n	800433c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004318:	6a3b      	ldr	r3, [r7, #32]
 800431a:	3324      	adds	r3, #36	; 0x24
 800431c:	687a      	ldr	r2, [r7, #4]
 800431e:	0011      	movs	r1, r2
 8004320:	0018      	movs	r0, r3
 8004322:	f000 fc77 	bl	8004c14 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	0018      	movs	r0, r3
 800432a:	f000 f8c6 	bl	80044ba <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800432e:	f000 fadf 	bl	80048f0 <xTaskResumeAll>
 8004332:	1e03      	subs	r3, r0, #0
 8004334:	d191      	bne.n	800425a <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8004336:	f000 ff63 	bl	8005200 <vPortYield>
 800433a:	e78e      	b.n	800425a <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800433c:	6a3b      	ldr	r3, [r7, #32]
 800433e:	0018      	movs	r0, r3
 8004340:	f000 f8bb 	bl	80044ba <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004344:	f000 fad4 	bl	80048f0 <xTaskResumeAll>
 8004348:	e787      	b.n	800425a <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800434a:	6a3b      	ldr	r3, [r7, #32]
 800434c:	0018      	movs	r0, r3
 800434e:	f000 f8b4 	bl	80044ba <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004352:	f000 facd 	bl	80048f0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004356:	6a3b      	ldr	r3, [r7, #32]
 8004358:	0018      	movs	r0, r3
 800435a:	f000 f90c 	bl	8004576 <prvIsQueueEmpty>
 800435e:	1e03      	subs	r3, r0, #0
 8004360:	d100      	bne.n	8004364 <xQueueReceive+0x160>
 8004362:	e77a      	b.n	800425a <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004364:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8004366:	0018      	movs	r0, r3
 8004368:	46bd      	mov	sp, r7
 800436a:	b00a      	add	sp, #40	; 0x28
 800436c:	bd80      	pop	{r7, pc}

0800436e <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 800436e:	b580      	push	{r7, lr}
 8004370:	b084      	sub	sp, #16
 8004372:	af00      	add	r7, sp, #0
 8004374:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d101      	bne.n	8004380 <uxQueueMessagesWaiting+0x12>
 800437c:	b672      	cpsid	i
 800437e:	e7fe      	b.n	800437e <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 8004380:	f000 ff4e 	bl	8005220 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004388:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 800438a:	f000 ff5b 	bl	8005244 <vPortExitCritical>

	return uxReturn;
 800438e:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8004390:	0018      	movs	r0, r3
 8004392:	46bd      	mov	sp, r7
 8004394:	b004      	add	sp, #16
 8004396:	bd80      	pop	{r7, pc}

08004398 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004398:	b580      	push	{r7, lr}
 800439a:	b086      	sub	sp, #24
 800439c:	af00      	add	r7, sp, #0
 800439e:	60f8      	str	r0, [r7, #12]
 80043a0:	60b9      	str	r1, [r7, #8]
 80043a2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043ac:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d10e      	bne.n	80043d4 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d14e      	bne.n	800445c <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	685b      	ldr	r3, [r3, #4]
 80043c2:	0018      	movs	r0, r3
 80043c4:	f000 fde2 	bl	8004f8c <xTaskPriorityDisinherit>
 80043c8:	0003      	movs	r3, r0
 80043ca:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	2200      	movs	r2, #0
 80043d0:	605a      	str	r2, [r3, #4]
 80043d2:	e043      	b.n	800445c <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d119      	bne.n	800440e <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6898      	ldr	r0, [r3, #8]
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	0019      	movs	r1, r3
 80043e6:	f001 f97d 	bl	80056e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689a      	ldr	r2, [r3, #8]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	18d2      	adds	r2, r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	689a      	ldr	r2, [r3, #8]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	429a      	cmp	r2, r3
 8004402:	d32b      	bcc.n	800445c <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	609a      	str	r2, [r3, #8]
 800440c:	e026      	b.n	800445c <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	68d8      	ldr	r0, [r3, #12]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004416:	68bb      	ldr	r3, [r7, #8]
 8004418:	0019      	movs	r1, r3
 800441a:	f001 f963 	bl	80056e4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	68da      	ldr	r2, [r3, #12]
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	425b      	negs	r3, r3
 8004428:	18d2      	adds	r2, r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	68da      	ldr	r2, [r3, #12]
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	429a      	cmp	r2, r3
 8004438:	d207      	bcs.n	800444a <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	685a      	ldr	r2, [r3, #4]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004442:	425b      	negs	r3, r3
 8004444:	18d2      	adds	r2, r2, r3
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2b02      	cmp	r3, #2
 800444e:	d105      	bne.n	800445c <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d002      	beq.n	800445c <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004456:	693b      	ldr	r3, [r7, #16]
 8004458:	3b01      	subs	r3, #1
 800445a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800445c:	693b      	ldr	r3, [r7, #16]
 800445e:	1c5a      	adds	r2, r3, #1
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004464:	697b      	ldr	r3, [r7, #20]
}
 8004466:	0018      	movs	r0, r3
 8004468:	46bd      	mov	sp, r7
 800446a:	b006      	add	sp, #24
 800446c:	bd80      	pop	{r7, pc}

0800446e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b082      	sub	sp, #8
 8004472:	af00      	add	r7, sp, #0
 8004474:	6078      	str	r0, [r7, #4]
 8004476:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800447c:	2b00      	cmp	r3, #0
 800447e:	d018      	beq.n	80044b2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	68da      	ldr	r2, [r3, #12]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	18d2      	adds	r2, r2, r3
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68da      	ldr	r2, [r3, #12]
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	429a      	cmp	r2, r3
 8004498:	d303      	bcc.n	80044a2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68d9      	ldr	r1, [r3, #12]
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	0018      	movs	r0, r3
 80044ae:	f001 f919 	bl	80056e4 <memcpy>
	}
}
 80044b2:	46c0      	nop			; (mov r8, r8)
 80044b4:	46bd      	mov	sp, r7
 80044b6:	b002      	add	sp, #8
 80044b8:	bd80      	pop	{r7, pc}

080044ba <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80044c2:	f000 fead 	bl	8005220 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80044c6:	230f      	movs	r3, #15
 80044c8:	18fb      	adds	r3, r7, r3
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	2145      	movs	r1, #69	; 0x45
 80044ce:	5c52      	ldrb	r2, [r2, r1]
 80044d0:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044d2:	e013      	b.n	80044fc <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d016      	beq.n	800450a <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	3324      	adds	r3, #36	; 0x24
 80044e0:	0018      	movs	r0, r3
 80044e2:	f000 fbb5 	bl	8004c50 <xTaskRemoveFromEventList>
 80044e6:	1e03      	subs	r3, r0, #0
 80044e8:	d001      	beq.n	80044ee <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80044ea:	f000 fc71 	bl	8004dd0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80044ee:	210f      	movs	r1, #15
 80044f0:	187b      	adds	r3, r7, r1
 80044f2:	781b      	ldrb	r3, [r3, #0]
 80044f4:	3b01      	subs	r3, #1
 80044f6:	b2da      	uxtb	r2, r3
 80044f8:	187b      	adds	r3, r7, r1
 80044fa:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80044fc:	230f      	movs	r3, #15
 80044fe:	18fb      	adds	r3, r7, r3
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	b25b      	sxtb	r3, r3
 8004504:	2b00      	cmp	r3, #0
 8004506:	dce5      	bgt.n	80044d4 <prvUnlockQueue+0x1a>
 8004508:	e000      	b.n	800450c <prvUnlockQueue+0x52>
					break;
 800450a:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2245      	movs	r2, #69	; 0x45
 8004510:	21ff      	movs	r1, #255	; 0xff
 8004512:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004514:	f000 fe96 	bl	8005244 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004518:	f000 fe82 	bl	8005220 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800451c:	230e      	movs	r3, #14
 800451e:	18fb      	adds	r3, r7, r3
 8004520:	687a      	ldr	r2, [r7, #4]
 8004522:	2144      	movs	r1, #68	; 0x44
 8004524:	5c52      	ldrb	r2, [r2, r1]
 8004526:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004528:	e013      	b.n	8004552 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d016      	beq.n	8004560 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	3310      	adds	r3, #16
 8004536:	0018      	movs	r0, r3
 8004538:	f000 fb8a 	bl	8004c50 <xTaskRemoveFromEventList>
 800453c:	1e03      	subs	r3, r0, #0
 800453e:	d001      	beq.n	8004544 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004540:	f000 fc46 	bl	8004dd0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004544:	210e      	movs	r1, #14
 8004546:	187b      	adds	r3, r7, r1
 8004548:	781b      	ldrb	r3, [r3, #0]
 800454a:	3b01      	subs	r3, #1
 800454c:	b2da      	uxtb	r2, r3
 800454e:	187b      	adds	r3, r7, r1
 8004550:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004552:	230e      	movs	r3, #14
 8004554:	18fb      	adds	r3, r7, r3
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	b25b      	sxtb	r3, r3
 800455a:	2b00      	cmp	r3, #0
 800455c:	dce5      	bgt.n	800452a <prvUnlockQueue+0x70>
 800455e:	e000      	b.n	8004562 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004560:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2244      	movs	r2, #68	; 0x44
 8004566:	21ff      	movs	r1, #255	; 0xff
 8004568:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800456a:	f000 fe6b 	bl	8005244 <vPortExitCritical>
}
 800456e:	46c0      	nop			; (mov r8, r8)
 8004570:	46bd      	mov	sp, r7
 8004572:	b004      	add	sp, #16
 8004574:	bd80      	pop	{r7, pc}

08004576 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004576:	b580      	push	{r7, lr}
 8004578:	b084      	sub	sp, #16
 800457a:	af00      	add	r7, sp, #0
 800457c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800457e:	f000 fe4f 	bl	8005220 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004586:	2b00      	cmp	r3, #0
 8004588:	d102      	bne.n	8004590 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800458a:	2301      	movs	r3, #1
 800458c:	60fb      	str	r3, [r7, #12]
 800458e:	e001      	b.n	8004594 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004590:	2300      	movs	r3, #0
 8004592:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004594:	f000 fe56 	bl	8005244 <vPortExitCritical>

	return xReturn;
 8004598:	68fb      	ldr	r3, [r7, #12]
}
 800459a:	0018      	movs	r0, r3
 800459c:	46bd      	mov	sp, r7
 800459e:	b004      	add	sp, #16
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045a2:	b580      	push	{r7, lr}
 80045a4:	b084      	sub	sp, #16
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045aa:	f000 fe39 	bl	8005220 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d102      	bne.n	80045c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80045ba:	2301      	movs	r3, #1
 80045bc:	60fb      	str	r3, [r7, #12]
 80045be:	e001      	b.n	80045c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80045c0:	2300      	movs	r3, #0
 80045c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045c4:	f000 fe3e 	bl	8005244 <vPortExitCritical>

	return xReturn;
 80045c8:	68fb      	ldr	r3, [r7, #12]
}
 80045ca:	0018      	movs	r0, r3
 80045cc:	46bd      	mov	sp, r7
 80045ce:	b004      	add	sp, #16
 80045d0:	bd80      	pop	{r7, pc}

080045d2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80045d2:	b590      	push	{r4, r7, lr}
 80045d4:	b08d      	sub	sp, #52	; 0x34
 80045d6:	af04      	add	r7, sp, #16
 80045d8:	60f8      	str	r0, [r7, #12]
 80045da:	60b9      	str	r1, [r7, #8]
 80045dc:	603b      	str	r3, [r7, #0]
 80045de:	1dbb      	adds	r3, r7, #6
 80045e0:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80045e2:	1dbb      	adds	r3, r7, #6
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	009b      	lsls	r3, r3, #2
 80045e8:	0018      	movs	r0, r3
 80045ea:	f000 feb1 	bl	8005350 <pvPortMalloc>
 80045ee:	0003      	movs	r3, r0
 80045f0:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80045f2:	697b      	ldr	r3, [r7, #20]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d010      	beq.n	800461a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80045f8:	2054      	movs	r0, #84	; 0x54
 80045fa:	f000 fea9 	bl	8005350 <pvPortMalloc>
 80045fe:	0003      	movs	r3, r0
 8004600:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	2b00      	cmp	r3, #0
 8004606:	d003      	beq.n	8004610 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	631a      	str	r2, [r3, #48]	; 0x30
 800460e:	e006      	b.n	800461e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	0018      	movs	r0, r3
 8004614:	f000 ff42 	bl	800549c <vPortFree>
 8004618:	e001      	b.n	800461e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800461e:	69fb      	ldr	r3, [r7, #28]
 8004620:	2b00      	cmp	r3, #0
 8004622:	d016      	beq.n	8004652 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004624:	1dbb      	adds	r3, r7, #6
 8004626:	881a      	ldrh	r2, [r3, #0]
 8004628:	683c      	ldr	r4, [r7, #0]
 800462a:	68b9      	ldr	r1, [r7, #8]
 800462c:	68f8      	ldr	r0, [r7, #12]
 800462e:	2300      	movs	r3, #0
 8004630:	9303      	str	r3, [sp, #12]
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	9302      	str	r3, [sp, #8]
 8004636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004638:	9301      	str	r3, [sp, #4]
 800463a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	0023      	movs	r3, r4
 8004640:	f000 f810 	bl	8004664 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004644:	69fb      	ldr	r3, [r7, #28]
 8004646:	0018      	movs	r0, r3
 8004648:	f000 f886 	bl	8004758 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800464c:	2301      	movs	r3, #1
 800464e:	61bb      	str	r3, [r7, #24]
 8004650:	e002      	b.n	8004658 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004652:	2301      	movs	r3, #1
 8004654:	425b      	negs	r3, r3
 8004656:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004658:	69bb      	ldr	r3, [r7, #24]
	}
 800465a:	0018      	movs	r0, r3
 800465c:	46bd      	mov	sp, r7
 800465e:	b009      	add	sp, #36	; 0x24
 8004660:	bd90      	pop	{r4, r7, pc}
	...

08004664 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	60f8      	str	r0, [r7, #12]
 800466c:	60b9      	str	r1, [r7, #8]
 800466e:	607a      	str	r2, [r7, #4]
 8004670:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 8004672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004674:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4936      	ldr	r1, [pc, #216]	; (8004754 <prvInitialiseNewTask+0xf0>)
 800467a:	468c      	mov	ip, r1
 800467c:	4463      	add	r3, ip
 800467e:	009b      	lsls	r3, r3, #2
 8004680:	18d3      	adds	r3, r2, r3
 8004682:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	2207      	movs	r2, #7
 8004688:	4393      	bics	r3, r2
 800468a:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800468c:	693b      	ldr	r3, [r7, #16]
 800468e:	2207      	movs	r2, #7
 8004690:	4013      	ands	r3, r2
 8004692:	d001      	beq.n	8004698 <prvInitialiseNewTask+0x34>
 8004694:	b672      	cpsid	i
 8004696:	e7fe      	b.n	8004696 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004698:	2300      	movs	r3, #0
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	e013      	b.n	80046c6 <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800469e:	68ba      	ldr	r2, [r7, #8]
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	18d3      	adds	r3, r2, r3
 80046a4:	7818      	ldrb	r0, [r3, #0]
 80046a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046a8:	2134      	movs	r1, #52	; 0x34
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	18d3      	adds	r3, r2, r3
 80046ae:	185b      	adds	r3, r3, r1
 80046b0:	1c02      	adds	r2, r0, #0
 80046b2:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80046b4:	68ba      	ldr	r2, [r7, #8]
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	18d3      	adds	r3, r2, r3
 80046ba:	781b      	ldrb	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d006      	beq.n	80046ce <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	3301      	adds	r3, #1
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	2b0f      	cmp	r3, #15
 80046ca:	d9e8      	bls.n	800469e <prvInitialiseNewTask+0x3a>
 80046cc:	e000      	b.n	80046d0 <prvInitialiseNewTask+0x6c>
		{
			break;
 80046ce:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046d2:	2243      	movs	r2, #67	; 0x43
 80046d4:	2100      	movs	r1, #0
 80046d6:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046d8:	6a3b      	ldr	r3, [r7, #32]
 80046da:	2b06      	cmp	r3, #6
 80046dc:	d901      	bls.n	80046e2 <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046de:	2306      	movs	r3, #6
 80046e0:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e4:	6a3a      	ldr	r2, [r7, #32]
 80046e6:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ea:	6a3a      	ldr	r2, [r7, #32]
 80046ec:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80046ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f0:	2200      	movs	r2, #0
 80046f2:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f6:	3304      	adds	r3, #4
 80046f8:	0018      	movs	r0, r3
 80046fa:	f7ff fb56 	bl	8003daa <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004700:	3318      	adds	r3, #24
 8004702:	0018      	movs	r0, r3
 8004704:	f7ff fb51 	bl	8003daa <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800470a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800470c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800470e:	6a3b      	ldr	r3, [r7, #32]
 8004710:	2207      	movs	r2, #7
 8004712:	1ad2      	subs	r2, r2, r3
 8004714:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004716:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800471a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800471c:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800471e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004720:	2200      	movs	r2, #0
 8004722:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004726:	2250      	movs	r2, #80	; 0x50
 8004728:	2100      	movs	r1, #0
 800472a:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800472c:	683a      	ldr	r2, [r7, #0]
 800472e:	68f9      	ldr	r1, [r7, #12]
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	0018      	movs	r0, r3
 8004734:	f000 fcda 	bl	80050ec <pxPortInitialiseStack>
 8004738:	0002      	movs	r2, r0
 800473a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800473c:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004748:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800474a:	46c0      	nop			; (mov r8, r8)
 800474c:	46bd      	mov	sp, r7
 800474e:	b006      	add	sp, #24
 8004750:	bd80      	pop	{r7, pc}
 8004752:	46c0      	nop			; (mov r8, r8)
 8004754:	3fffffff 	.word	0x3fffffff

08004758 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b082      	sub	sp, #8
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004760:	f000 fd5e 	bl	8005220 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004764:	4b28      	ldr	r3, [pc, #160]	; (8004808 <prvAddNewTaskToReadyList+0xb0>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	1c5a      	adds	r2, r3, #1
 800476a:	4b27      	ldr	r3, [pc, #156]	; (8004808 <prvAddNewTaskToReadyList+0xb0>)
 800476c:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800476e:	4b27      	ldr	r3, [pc, #156]	; (800480c <prvAddNewTaskToReadyList+0xb4>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d109      	bne.n	800478a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004776:	4b25      	ldr	r3, [pc, #148]	; (800480c <prvAddNewTaskToReadyList+0xb4>)
 8004778:	687a      	ldr	r2, [r7, #4]
 800477a:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800477c:	4b22      	ldr	r3, [pc, #136]	; (8004808 <prvAddNewTaskToReadyList+0xb0>)
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	2b01      	cmp	r3, #1
 8004782:	d110      	bne.n	80047a6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004784:	f000 fb3e 	bl	8004e04 <prvInitialiseTaskLists>
 8004788:	e00d      	b.n	80047a6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800478a:	4b21      	ldr	r3, [pc, #132]	; (8004810 <prvAddNewTaskToReadyList+0xb8>)
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d109      	bne.n	80047a6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004792:	4b1e      	ldr	r3, [pc, #120]	; (800480c <prvAddNewTaskToReadyList+0xb4>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	429a      	cmp	r2, r3
 800479e:	d802      	bhi.n	80047a6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80047a0:	4b1a      	ldr	r3, [pc, #104]	; (800480c <prvAddNewTaskToReadyList+0xb4>)
 80047a2:	687a      	ldr	r2, [r7, #4]
 80047a4:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80047a6:	4b1b      	ldr	r3, [pc, #108]	; (8004814 <prvAddNewTaskToReadyList+0xbc>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	1c5a      	adds	r2, r3, #1
 80047ac:	4b19      	ldr	r3, [pc, #100]	; (8004814 <prvAddNewTaskToReadyList+0xbc>)
 80047ae:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047b4:	4b18      	ldr	r3, [pc, #96]	; (8004818 <prvAddNewTaskToReadyList+0xc0>)
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d903      	bls.n	80047c4 <prvAddNewTaskToReadyList+0x6c>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c0:	4b15      	ldr	r3, [pc, #84]	; (8004818 <prvAddNewTaskToReadyList+0xc0>)
 80047c2:	601a      	str	r2, [r3, #0]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c8:	0013      	movs	r3, r2
 80047ca:	009b      	lsls	r3, r3, #2
 80047cc:	189b      	adds	r3, r3, r2
 80047ce:	009b      	lsls	r3, r3, #2
 80047d0:	4a12      	ldr	r2, [pc, #72]	; (800481c <prvAddNewTaskToReadyList+0xc4>)
 80047d2:	189a      	adds	r2, r3, r2
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3304      	adds	r3, #4
 80047d8:	0019      	movs	r1, r3
 80047da:	0010      	movs	r0, r2
 80047dc:	f7ff faf0 	bl	8003dc0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047e0:	f000 fd30 	bl	8005244 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047e4:	4b0a      	ldr	r3, [pc, #40]	; (8004810 <prvAddNewTaskToReadyList+0xb8>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d008      	beq.n	80047fe <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047ec:	4b07      	ldr	r3, [pc, #28]	; (800480c <prvAddNewTaskToReadyList+0xb4>)
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d201      	bcs.n	80047fe <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80047fa:	f000 fd01 	bl	8005200 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80047fe:	46c0      	nop			; (mov r8, r8)
 8004800:	46bd      	mov	sp, r7
 8004802:	b002      	add	sp, #8
 8004804:	bd80      	pop	{r7, pc}
 8004806:	46c0      	nop			; (mov r8, r8)
 8004808:	20000170 	.word	0x20000170
 800480c:	20000070 	.word	0x20000070
 8004810:	2000017c 	.word	0x2000017c
 8004814:	2000018c 	.word	0x2000018c
 8004818:	20000178 	.word	0x20000178
 800481c:	20000074 	.word	0x20000074

08004820 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004820:	b580      	push	{r7, lr}
 8004822:	b084      	sub	sp, #16
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004828:	2300      	movs	r3, #0
 800482a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d010      	beq.n	8004854 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004832:	4b0d      	ldr	r3, [pc, #52]	; (8004868 <vTaskDelay+0x48>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <vTaskDelay+0x1e>
 800483a:	b672      	cpsid	i
 800483c:	e7fe      	b.n	800483c <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800483e:	f000 f84b 	bl	80048d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2100      	movs	r1, #0
 8004846:	0018      	movs	r0, r3
 8004848:	f000 fbfc 	bl	8005044 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800484c:	f000 f850 	bl	80048f0 <xTaskResumeAll>
 8004850:	0003      	movs	r3, r0
 8004852:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d101      	bne.n	800485e <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800485a:	f000 fcd1 	bl	8005200 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800485e:	46c0      	nop			; (mov r8, r8)
 8004860:	46bd      	mov	sp, r7
 8004862:	b004      	add	sp, #16
 8004864:	bd80      	pop	{r7, pc}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	20000198 	.word	0x20000198

0800486c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800486c:	b580      	push	{r7, lr}
 800486e:	b084      	sub	sp, #16
 8004870:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8004872:	4913      	ldr	r1, [pc, #76]	; (80048c0 <vTaskStartScheduler+0x54>)
 8004874:	4813      	ldr	r0, [pc, #76]	; (80048c4 <vTaskStartScheduler+0x58>)
 8004876:	4b14      	ldr	r3, [pc, #80]	; (80048c8 <vTaskStartScheduler+0x5c>)
 8004878:	9301      	str	r3, [sp, #4]
 800487a:	2300      	movs	r3, #0
 800487c:	9300      	str	r3, [sp, #0]
 800487e:	2300      	movs	r3, #0
 8004880:	2280      	movs	r2, #128	; 0x80
 8004882:	f7ff fea6 	bl	80045d2 <xTaskCreate>
 8004886:	0003      	movs	r3, r0
 8004888:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2b01      	cmp	r3, #1
 800488e:	d10d      	bne.n	80048ac <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8004890:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004892:	4b0e      	ldr	r3, [pc, #56]	; (80048cc <vTaskStartScheduler+0x60>)
 8004894:	2201      	movs	r2, #1
 8004896:	4252      	negs	r2, r2
 8004898:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800489a:	4b0d      	ldr	r3, [pc, #52]	; (80048d0 <vTaskStartScheduler+0x64>)
 800489c:	2201      	movs	r2, #1
 800489e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80048a0:	4b0c      	ldr	r3, [pc, #48]	; (80048d4 <vTaskStartScheduler+0x68>)
 80048a2:	2200      	movs	r2, #0
 80048a4:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80048a6:	f000 fc87 	bl	80051b8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80048aa:	e004      	b.n	80048b6 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	3301      	adds	r3, #1
 80048b0:	d101      	bne.n	80048b6 <vTaskStartScheduler+0x4a>
 80048b2:	b672      	cpsid	i
 80048b4:	e7fe      	b.n	80048b4 <vTaskStartScheduler+0x48>
}
 80048b6:	46c0      	nop			; (mov r8, r8)
 80048b8:	46bd      	mov	sp, r7
 80048ba:	b002      	add	sp, #8
 80048bc:	bd80      	pop	{r7, pc}
 80048be:	46c0      	nop			; (mov r8, r8)
 80048c0:	080057a0 	.word	0x080057a0
 80048c4:	08004de5 	.word	0x08004de5
 80048c8:	20000194 	.word	0x20000194
 80048cc:	20000190 	.word	0x20000190
 80048d0:	2000017c 	.word	0x2000017c
 80048d4:	20000174 	.word	0x20000174

080048d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80048dc:	4b03      	ldr	r3, [pc, #12]	; (80048ec <vTaskSuspendAll+0x14>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	1c5a      	adds	r2, r3, #1
 80048e2:	4b02      	ldr	r3, [pc, #8]	; (80048ec <vTaskSuspendAll+0x14>)
 80048e4:	601a      	str	r2, [r3, #0]
}
 80048e6:	46c0      	nop			; (mov r8, r8)
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20000198 	.word	0x20000198

080048f0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80048f6:	2300      	movs	r3, #0
 80048f8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80048fe:	4b3a      	ldr	r3, [pc, #232]	; (80049e8 <xTaskResumeAll+0xf8>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d101      	bne.n	800490a <xTaskResumeAll+0x1a>
 8004906:	b672      	cpsid	i
 8004908:	e7fe      	b.n	8004908 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800490a:	f000 fc89 	bl	8005220 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800490e:	4b36      	ldr	r3, [pc, #216]	; (80049e8 <xTaskResumeAll+0xf8>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	1e5a      	subs	r2, r3, #1
 8004914:	4b34      	ldr	r3, [pc, #208]	; (80049e8 <xTaskResumeAll+0xf8>)
 8004916:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004918:	4b33      	ldr	r3, [pc, #204]	; (80049e8 <xTaskResumeAll+0xf8>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d15b      	bne.n	80049d8 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004920:	4b32      	ldr	r3, [pc, #200]	; (80049ec <xTaskResumeAll+0xfc>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d057      	beq.n	80049d8 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004928:	e02f      	b.n	800498a <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800492a:	4b31      	ldr	r3, [pc, #196]	; (80049f0 <xTaskResumeAll+0x100>)
 800492c:	68db      	ldr	r3, [r3, #12]
 800492e:	68db      	ldr	r3, [r3, #12]
 8004930:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	3318      	adds	r3, #24
 8004936:	0018      	movs	r0, r3
 8004938:	f7ff fa9a 	bl	8003e70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	3304      	adds	r3, #4
 8004940:	0018      	movs	r0, r3
 8004942:	f7ff fa95 	bl	8003e70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800494a:	4b2a      	ldr	r3, [pc, #168]	; (80049f4 <xTaskResumeAll+0x104>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	429a      	cmp	r2, r3
 8004950:	d903      	bls.n	800495a <xTaskResumeAll+0x6a>
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004956:	4b27      	ldr	r3, [pc, #156]	; (80049f4 <xTaskResumeAll+0x104>)
 8004958:	601a      	str	r2, [r3, #0]
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800495e:	0013      	movs	r3, r2
 8004960:	009b      	lsls	r3, r3, #2
 8004962:	189b      	adds	r3, r3, r2
 8004964:	009b      	lsls	r3, r3, #2
 8004966:	4a24      	ldr	r2, [pc, #144]	; (80049f8 <xTaskResumeAll+0x108>)
 8004968:	189a      	adds	r2, r3, r2
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	3304      	adds	r3, #4
 800496e:	0019      	movs	r1, r3
 8004970:	0010      	movs	r0, r2
 8004972:	f7ff fa25 	bl	8003dc0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800497a:	4b20      	ldr	r3, [pc, #128]	; (80049fc <xTaskResumeAll+0x10c>)
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	429a      	cmp	r2, r3
 8004982:	d302      	bcc.n	800498a <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8004984:	4b1e      	ldr	r3, [pc, #120]	; (8004a00 <xTaskResumeAll+0x110>)
 8004986:	2201      	movs	r2, #1
 8004988:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800498a:	4b19      	ldr	r3, [pc, #100]	; (80049f0 <xTaskResumeAll+0x100>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1cb      	bne.n	800492a <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2b00      	cmp	r3, #0
 8004996:	d001      	beq.n	800499c <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004998:	f000 fab8 	bl	8004f0c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800499c:	4b19      	ldr	r3, [pc, #100]	; (8004a04 <xTaskResumeAll+0x114>)
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00f      	beq.n	80049c8 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80049a8:	f000 f82e 	bl	8004a08 <xTaskIncrementTick>
 80049ac:	1e03      	subs	r3, r0, #0
 80049ae:	d002      	beq.n	80049b6 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80049b0:	4b13      	ldr	r3, [pc, #76]	; (8004a00 <xTaskResumeAll+0x110>)
 80049b2:	2201      	movs	r2, #1
 80049b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	3b01      	subs	r3, #1
 80049ba:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d1f2      	bne.n	80049a8 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80049c2:	4b10      	ldr	r3, [pc, #64]	; (8004a04 <xTaskResumeAll+0x114>)
 80049c4:	2200      	movs	r2, #0
 80049c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80049c8:	4b0d      	ldr	r3, [pc, #52]	; (8004a00 <xTaskResumeAll+0x110>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d003      	beq.n	80049d8 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80049d0:	2301      	movs	r3, #1
 80049d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80049d4:	f000 fc14 	bl	8005200 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80049d8:	f000 fc34 	bl	8005244 <vPortExitCritical>

	return xAlreadyYielded;
 80049dc:	68bb      	ldr	r3, [r7, #8]
}
 80049de:	0018      	movs	r0, r3
 80049e0:	46bd      	mov	sp, r7
 80049e2:	b004      	add	sp, #16
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	46c0      	nop			; (mov r8, r8)
 80049e8:	20000198 	.word	0x20000198
 80049ec:	20000170 	.word	0x20000170
 80049f0:	20000130 	.word	0x20000130
 80049f4:	20000178 	.word	0x20000178
 80049f8:	20000074 	.word	0x20000074
 80049fc:	20000070 	.word	0x20000070
 8004a00:	20000184 	.word	0x20000184
 8004a04:	20000180 	.word	0x20000180

08004a08 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a12:	4b4c      	ldr	r3, [pc, #304]	; (8004b44 <xTaskIncrementTick+0x13c>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d000      	beq.n	8004a1c <xTaskIncrementTick+0x14>
 8004a1a:	e083      	b.n	8004b24 <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004a1c:	4b4a      	ldr	r3, [pc, #296]	; (8004b48 <xTaskIncrementTick+0x140>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	3301      	adds	r3, #1
 8004a22:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004a24:	4b48      	ldr	r3, [pc, #288]	; (8004b48 <xTaskIncrementTick+0x140>)
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004a2a:	693b      	ldr	r3, [r7, #16]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d117      	bne.n	8004a60 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004a30:	4b46      	ldr	r3, [pc, #280]	; (8004b4c <xTaskIncrementTick+0x144>)
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <xTaskIncrementTick+0x36>
 8004a3a:	b672      	cpsid	i
 8004a3c:	e7fe      	b.n	8004a3c <xTaskIncrementTick+0x34>
 8004a3e:	4b43      	ldr	r3, [pc, #268]	; (8004b4c <xTaskIncrementTick+0x144>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]
 8004a44:	4b42      	ldr	r3, [pc, #264]	; (8004b50 <xTaskIncrementTick+0x148>)
 8004a46:	681a      	ldr	r2, [r3, #0]
 8004a48:	4b40      	ldr	r3, [pc, #256]	; (8004b4c <xTaskIncrementTick+0x144>)
 8004a4a:	601a      	str	r2, [r3, #0]
 8004a4c:	4b40      	ldr	r3, [pc, #256]	; (8004b50 <xTaskIncrementTick+0x148>)
 8004a4e:	68fa      	ldr	r2, [r7, #12]
 8004a50:	601a      	str	r2, [r3, #0]
 8004a52:	4b40      	ldr	r3, [pc, #256]	; (8004b54 <xTaskIncrementTick+0x14c>)
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	1c5a      	adds	r2, r3, #1
 8004a58:	4b3e      	ldr	r3, [pc, #248]	; (8004b54 <xTaskIncrementTick+0x14c>)
 8004a5a:	601a      	str	r2, [r3, #0]
 8004a5c:	f000 fa56 	bl	8004f0c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004a60:	4b3d      	ldr	r3, [pc, #244]	; (8004b58 <xTaskIncrementTick+0x150>)
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	429a      	cmp	r2, r3
 8004a68:	d34e      	bcc.n	8004b08 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a6a:	4b38      	ldr	r3, [pc, #224]	; (8004b4c <xTaskIncrementTick+0x144>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d101      	bne.n	8004a78 <xTaskIncrementTick+0x70>
 8004a74:	2301      	movs	r3, #1
 8004a76:	e000      	b.n	8004a7a <xTaskIncrementTick+0x72>
 8004a78:	2300      	movs	r3, #0
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d004      	beq.n	8004a88 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004a7e:	4b36      	ldr	r3, [pc, #216]	; (8004b58 <xTaskIncrementTick+0x150>)
 8004a80:	2201      	movs	r2, #1
 8004a82:	4252      	negs	r2, r2
 8004a84:	601a      	str	r2, [r3, #0]
					break;
 8004a86:	e03f      	b.n	8004b08 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004a88:	4b30      	ldr	r3, [pc, #192]	; (8004b4c <xTaskIncrementTick+0x144>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	68db      	ldr	r3, [r3, #12]
 8004a8e:	68db      	ldr	r3, [r3, #12]
 8004a90:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004a98:	693a      	ldr	r2, [r7, #16]
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d203      	bcs.n	8004aa8 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004aa0:	4b2d      	ldr	r3, [pc, #180]	; (8004b58 <xTaskIncrementTick+0x150>)
 8004aa2:	687a      	ldr	r2, [r7, #4]
 8004aa4:	601a      	str	r2, [r3, #0]
						break;
 8004aa6:	e02f      	b.n	8004b08 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004aa8:	68bb      	ldr	r3, [r7, #8]
 8004aaa:	3304      	adds	r3, #4
 8004aac:	0018      	movs	r0, r3
 8004aae:	f7ff f9df 	bl	8003e70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004ab2:	68bb      	ldr	r3, [r7, #8]
 8004ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d004      	beq.n	8004ac4 <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	3318      	adds	r3, #24
 8004abe:	0018      	movs	r0, r3
 8004ac0:	f7ff f9d6 	bl	8003e70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ac8:	4b24      	ldr	r3, [pc, #144]	; (8004b5c <xTaskIncrementTick+0x154>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d903      	bls.n	8004ad8 <xTaskIncrementTick+0xd0>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ad4:	4b21      	ldr	r3, [pc, #132]	; (8004b5c <xTaskIncrementTick+0x154>)
 8004ad6:	601a      	str	r2, [r3, #0]
 8004ad8:	68bb      	ldr	r3, [r7, #8]
 8004ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004adc:	0013      	movs	r3, r2
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	189b      	adds	r3, r3, r2
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4a1e      	ldr	r2, [pc, #120]	; (8004b60 <xTaskIncrementTick+0x158>)
 8004ae6:	189a      	adds	r2, r3, r2
 8004ae8:	68bb      	ldr	r3, [r7, #8]
 8004aea:	3304      	adds	r3, #4
 8004aec:	0019      	movs	r1, r3
 8004aee:	0010      	movs	r0, r2
 8004af0:	f7ff f966 	bl	8003dc0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004af4:	68bb      	ldr	r3, [r7, #8]
 8004af6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004af8:	4b1a      	ldr	r3, [pc, #104]	; (8004b64 <xTaskIncrementTick+0x15c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d3b3      	bcc.n	8004a6a <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 8004b02:	2301      	movs	r3, #1
 8004b04:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b06:	e7b0      	b.n	8004a6a <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004b08:	4b16      	ldr	r3, [pc, #88]	; (8004b64 <xTaskIncrementTick+0x15c>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b0e:	4914      	ldr	r1, [pc, #80]	; (8004b60 <xTaskIncrementTick+0x158>)
 8004b10:	0013      	movs	r3, r2
 8004b12:	009b      	lsls	r3, r3, #2
 8004b14:	189b      	adds	r3, r3, r2
 8004b16:	009b      	lsls	r3, r3, #2
 8004b18:	585b      	ldr	r3, [r3, r1]
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d907      	bls.n	8004b2e <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004b1e:	2301      	movs	r3, #1
 8004b20:	617b      	str	r3, [r7, #20]
 8004b22:	e004      	b.n	8004b2e <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004b24:	4b10      	ldr	r3, [pc, #64]	; (8004b68 <xTaskIncrementTick+0x160>)
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	4b0f      	ldr	r3, [pc, #60]	; (8004b68 <xTaskIncrementTick+0x160>)
 8004b2c:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004b2e:	4b0f      	ldr	r3, [pc, #60]	; (8004b6c <xTaskIncrementTick+0x164>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 8004b36:	2301      	movs	r3, #1
 8004b38:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004b3a:	697b      	ldr	r3, [r7, #20]
}
 8004b3c:	0018      	movs	r0, r3
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	b006      	add	sp, #24
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000198 	.word	0x20000198
 8004b48:	20000174 	.word	0x20000174
 8004b4c:	20000128 	.word	0x20000128
 8004b50:	2000012c 	.word	0x2000012c
 8004b54:	20000188 	.word	0x20000188
 8004b58:	20000190 	.word	0x20000190
 8004b5c:	20000178 	.word	0x20000178
 8004b60:	20000074 	.word	0x20000074
 8004b64:	20000070 	.word	0x20000070
 8004b68:	20000180 	.word	0x20000180
 8004b6c:	20000184 	.word	0x20000184

08004b70 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b082      	sub	sp, #8
 8004b74:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004b76:	4b22      	ldr	r3, [pc, #136]	; (8004c00 <vTaskSwitchContext+0x90>)
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d003      	beq.n	8004b86 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004b7e:	4b21      	ldr	r3, [pc, #132]	; (8004c04 <vTaskSwitchContext+0x94>)
 8004b80:	2201      	movs	r2, #1
 8004b82:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004b84:	e037      	b.n	8004bf6 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8004b86:	4b1f      	ldr	r3, [pc, #124]	; (8004c04 <vTaskSwitchContext+0x94>)
 8004b88:	2200      	movs	r2, #0
 8004b8a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8004b8c:	4b1e      	ldr	r3, [pc, #120]	; (8004c08 <vTaskSwitchContext+0x98>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	607b      	str	r3, [r7, #4]
 8004b92:	e007      	b.n	8004ba4 <vTaskSwitchContext+0x34>
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d101      	bne.n	8004b9e <vTaskSwitchContext+0x2e>
 8004b9a:	b672      	cpsid	i
 8004b9c:	e7fe      	b.n	8004b9c <vTaskSwitchContext+0x2c>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	3b01      	subs	r3, #1
 8004ba2:	607b      	str	r3, [r7, #4]
 8004ba4:	4919      	ldr	r1, [pc, #100]	; (8004c0c <vTaskSwitchContext+0x9c>)
 8004ba6:	687a      	ldr	r2, [r7, #4]
 8004ba8:	0013      	movs	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	189b      	adds	r3, r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	585b      	ldr	r3, [r3, r1]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0ee      	beq.n	8004b94 <vTaskSwitchContext+0x24>
 8004bb6:	687a      	ldr	r2, [r7, #4]
 8004bb8:	0013      	movs	r3, r2
 8004bba:	009b      	lsls	r3, r3, #2
 8004bbc:	189b      	adds	r3, r3, r2
 8004bbe:	009b      	lsls	r3, r3, #2
 8004bc0:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <vTaskSwitchContext+0x9c>)
 8004bc2:	189b      	adds	r3, r3, r2
 8004bc4:	603b      	str	r3, [r7, #0]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	685a      	ldr	r2, [r3, #4]
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	605a      	str	r2, [r3, #4]
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	685a      	ldr	r2, [r3, #4]
 8004bd4:	683b      	ldr	r3, [r7, #0]
 8004bd6:	3308      	adds	r3, #8
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d104      	bne.n	8004be6 <vTaskSwitchContext+0x76>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	685a      	ldr	r2, [r3, #4]
 8004be2:	683b      	ldr	r3, [r7, #0]
 8004be4:	605a      	str	r2, [r3, #4]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	68da      	ldr	r2, [r3, #12]
 8004bec:	4b08      	ldr	r3, [pc, #32]	; (8004c10 <vTaskSwitchContext+0xa0>)
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	4b05      	ldr	r3, [pc, #20]	; (8004c08 <vTaskSwitchContext+0x98>)
 8004bf2:	687a      	ldr	r2, [r7, #4]
 8004bf4:	601a      	str	r2, [r3, #0]
}
 8004bf6:	46c0      	nop			; (mov r8, r8)
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	b002      	add	sp, #8
 8004bfc:	bd80      	pop	{r7, pc}
 8004bfe:	46c0      	nop			; (mov r8, r8)
 8004c00:	20000198 	.word	0x20000198
 8004c04:	20000184 	.word	0x20000184
 8004c08:	20000178 	.word	0x20000178
 8004c0c:	20000074 	.word	0x20000074
 8004c10:	20000070 	.word	0x20000070

08004c14 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <vTaskPlaceOnEventList+0x14>
 8004c24:	b672      	cpsid	i
 8004c26:	e7fe      	b.n	8004c26 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004c28:	4b08      	ldr	r3, [pc, #32]	; (8004c4c <vTaskPlaceOnEventList+0x38>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3318      	adds	r3, #24
 8004c2e:	001a      	movs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	0011      	movs	r1, r2
 8004c34:	0018      	movs	r0, r3
 8004c36:	f7ff f8e5 	bl	8003e04 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c3a:	683b      	ldr	r3, [r7, #0]
 8004c3c:	2101      	movs	r1, #1
 8004c3e:	0018      	movs	r0, r3
 8004c40:	f000 fa00 	bl	8005044 <prvAddCurrentTaskToDelayedList>
}
 8004c44:	46c0      	nop			; (mov r8, r8)
 8004c46:	46bd      	mov	sp, r7
 8004c48:	b002      	add	sp, #8
 8004c4a:	bd80      	pop	{r7, pc}
 8004c4c:	20000070 	.word	0x20000070

08004c50 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	68db      	ldr	r3, [r3, #12]
 8004c5c:	68db      	ldr	r3, [r3, #12]
 8004c5e:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d101      	bne.n	8004c6a <xTaskRemoveFromEventList+0x1a>
 8004c66:	b672      	cpsid	i
 8004c68:	e7fe      	b.n	8004c68 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	3318      	adds	r3, #24
 8004c6e:	0018      	movs	r0, r3
 8004c70:	f7ff f8fe 	bl	8003e70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c74:	4b1e      	ldr	r3, [pc, #120]	; (8004cf0 <xTaskRemoveFromEventList+0xa0>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	d11d      	bne.n	8004cb8 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	3304      	adds	r3, #4
 8004c80:	0018      	movs	r0, r3
 8004c82:	f7ff f8f5 	bl	8003e70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c8a:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <xTaskRemoveFromEventList+0xa4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	429a      	cmp	r2, r3
 8004c90:	d903      	bls.n	8004c9a <xTaskRemoveFromEventList+0x4a>
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c96:	4b17      	ldr	r3, [pc, #92]	; (8004cf4 <xTaskRemoveFromEventList+0xa4>)
 8004c98:	601a      	str	r2, [r3, #0]
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c9e:	0013      	movs	r3, r2
 8004ca0:	009b      	lsls	r3, r3, #2
 8004ca2:	189b      	adds	r3, r3, r2
 8004ca4:	009b      	lsls	r3, r3, #2
 8004ca6:	4a14      	ldr	r2, [pc, #80]	; (8004cf8 <xTaskRemoveFromEventList+0xa8>)
 8004ca8:	189a      	adds	r2, r3, r2
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	3304      	adds	r3, #4
 8004cae:	0019      	movs	r1, r3
 8004cb0:	0010      	movs	r0, r2
 8004cb2:	f7ff f885 	bl	8003dc0 <vListInsertEnd>
 8004cb6:	e007      	b.n	8004cc8 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	3318      	adds	r3, #24
 8004cbc:	001a      	movs	r2, r3
 8004cbe:	4b0f      	ldr	r3, [pc, #60]	; (8004cfc <xTaskRemoveFromEventList+0xac>)
 8004cc0:	0011      	movs	r1, r2
 8004cc2:	0018      	movs	r0, r3
 8004cc4:	f7ff f87c 	bl	8003dc0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <xTaskRemoveFromEventList+0xb0>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d905      	bls.n	8004ce2 <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004cda:	4b0a      	ldr	r3, [pc, #40]	; (8004d04 <xTaskRemoveFromEventList+0xb4>)
 8004cdc:	2201      	movs	r2, #1
 8004cde:	601a      	str	r2, [r3, #0]
 8004ce0:	e001      	b.n	8004ce6 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8004ce6:	68fb      	ldr	r3, [r7, #12]
}
 8004ce8:	0018      	movs	r0, r3
 8004cea:	46bd      	mov	sp, r7
 8004cec:	b004      	add	sp, #16
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	20000198 	.word	0x20000198
 8004cf4:	20000178 	.word	0x20000178
 8004cf8:	20000074 	.word	0x20000074
 8004cfc:	20000130 	.word	0x20000130
 8004d00:	20000070 	.word	0x20000070
 8004d04:	20000184 	.word	0x20000184

08004d08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004d08:	b580      	push	{r7, lr}
 8004d0a:	b082      	sub	sp, #8
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004d10:	4b05      	ldr	r3, [pc, #20]	; (8004d28 <vTaskInternalSetTimeOutState+0x20>)
 8004d12:	681a      	ldr	r2, [r3, #0]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004d18:	4b04      	ldr	r3, [pc, #16]	; (8004d2c <vTaskInternalSetTimeOutState+0x24>)
 8004d1a:	681a      	ldr	r2, [r3, #0]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	605a      	str	r2, [r3, #4]
}
 8004d20:	46c0      	nop			; (mov r8, r8)
 8004d22:	46bd      	mov	sp, r7
 8004d24:	b002      	add	sp, #8
 8004d26:	bd80      	pop	{r7, pc}
 8004d28:	20000188 	.word	0x20000188
 8004d2c:	20000174 	.word	0x20000174

08004d30 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b086      	sub	sp, #24
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <xTaskCheckForTimeOut+0x14>
 8004d40:	b672      	cpsid	i
 8004d42:	e7fe      	b.n	8004d42 <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d101      	bne.n	8004d4e <xTaskCheckForTimeOut+0x1e>
 8004d4a:	b672      	cpsid	i
 8004d4c:	e7fe      	b.n	8004d4c <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004d4e:	f000 fa67 	bl	8005220 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d52:	4b1d      	ldr	r3, [pc, #116]	; (8004dc8 <xTaskCheckForTimeOut+0x98>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	693a      	ldr	r2, [r7, #16]
 8004d5e:	1ad3      	subs	r3, r2, r3
 8004d60:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3301      	adds	r3, #1
 8004d68:	d102      	bne.n	8004d70 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	617b      	str	r3, [r7, #20]
 8004d6e:	e024      	b.n	8004dba <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	4b15      	ldr	r3, [pc, #84]	; (8004dcc <xTaskCheckForTimeOut+0x9c>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	429a      	cmp	r2, r3
 8004d7a:	d007      	beq.n	8004d8c <xTaskCheckForTimeOut+0x5c>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	685b      	ldr	r3, [r3, #4]
 8004d80:	693a      	ldr	r2, [r7, #16]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d302      	bcc.n	8004d8c <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d86:	2301      	movs	r3, #1
 8004d88:	617b      	str	r3, [r7, #20]
 8004d8a:	e016      	b.n	8004dba <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d8c:	683b      	ldr	r3, [r7, #0]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	429a      	cmp	r2, r3
 8004d94:	d20c      	bcs.n	8004db0 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	1ad2      	subs	r2, r2, r3
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	0018      	movs	r0, r3
 8004da6:	f7ff ffaf 	bl	8004d08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004daa:	2300      	movs	r3, #0
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	e004      	b.n	8004dba <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004db6:	2301      	movs	r3, #1
 8004db8:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8004dba:	f000 fa43 	bl	8005244 <vPortExitCritical>

	return xReturn;
 8004dbe:	697b      	ldr	r3, [r7, #20]
}
 8004dc0:	0018      	movs	r0, r3
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	b006      	add	sp, #24
 8004dc6:	bd80      	pop	{r7, pc}
 8004dc8:	20000174 	.word	0x20000174
 8004dcc:	20000188 	.word	0x20000188

08004dd0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004dd4:	4b02      	ldr	r3, [pc, #8]	; (8004de0 <vTaskMissedYield+0x10>)
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	601a      	str	r2, [r3, #0]
}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	46bd      	mov	sp, r7
 8004dde:	bd80      	pop	{r7, pc}
 8004de0:	20000184 	.word	0x20000184

08004de4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dec:	f000 f84e 	bl	8004e8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004df0:	4b03      	ldr	r3, [pc, #12]	; (8004e00 <prvIdleTask+0x1c>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	d9f9      	bls.n	8004dec <prvIdleTask+0x8>
			{
				taskYIELD();
 8004df8:	f000 fa02 	bl	8005200 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004dfc:	e7f6      	b.n	8004dec <prvIdleTask+0x8>
 8004dfe:	46c0      	nop			; (mov r8, r8)
 8004e00:	20000074 	.word	0x20000074

08004e04 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e0a:	2300      	movs	r3, #0
 8004e0c:	607b      	str	r3, [r7, #4]
 8004e0e:	e00c      	b.n	8004e2a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004e10:	687a      	ldr	r2, [r7, #4]
 8004e12:	0013      	movs	r3, r2
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	189b      	adds	r3, r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4a14      	ldr	r2, [pc, #80]	; (8004e6c <prvInitialiseTaskLists+0x68>)
 8004e1c:	189b      	adds	r3, r3, r2
 8004e1e:	0018      	movs	r0, r3
 8004e20:	f7fe ffa5 	bl	8003d6e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	3301      	adds	r3, #1
 8004e28:	607b      	str	r3, [r7, #4]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2b06      	cmp	r3, #6
 8004e2e:	d9ef      	bls.n	8004e10 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e30:	4b0f      	ldr	r3, [pc, #60]	; (8004e70 <prvInitialiseTaskLists+0x6c>)
 8004e32:	0018      	movs	r0, r3
 8004e34:	f7fe ff9b 	bl	8003d6e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e38:	4b0e      	ldr	r3, [pc, #56]	; (8004e74 <prvInitialiseTaskLists+0x70>)
 8004e3a:	0018      	movs	r0, r3
 8004e3c:	f7fe ff97 	bl	8003d6e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e40:	4b0d      	ldr	r3, [pc, #52]	; (8004e78 <prvInitialiseTaskLists+0x74>)
 8004e42:	0018      	movs	r0, r3
 8004e44:	f7fe ff93 	bl	8003d6e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <prvInitialiseTaskLists+0x78>)
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	f7fe ff8f 	bl	8003d6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e50:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <prvInitialiseTaskLists+0x7c>)
 8004e52:	0018      	movs	r0, r3
 8004e54:	f7fe ff8b 	bl	8003d6e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e58:	4b0a      	ldr	r3, [pc, #40]	; (8004e84 <prvInitialiseTaskLists+0x80>)
 8004e5a:	4a05      	ldr	r2, [pc, #20]	; (8004e70 <prvInitialiseTaskLists+0x6c>)
 8004e5c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e5e:	4b0a      	ldr	r3, [pc, #40]	; (8004e88 <prvInitialiseTaskLists+0x84>)
 8004e60:	4a04      	ldr	r2, [pc, #16]	; (8004e74 <prvInitialiseTaskLists+0x70>)
 8004e62:	601a      	str	r2, [r3, #0]
}
 8004e64:	46c0      	nop			; (mov r8, r8)
 8004e66:	46bd      	mov	sp, r7
 8004e68:	b002      	add	sp, #8
 8004e6a:	bd80      	pop	{r7, pc}
 8004e6c:	20000074 	.word	0x20000074
 8004e70:	20000100 	.word	0x20000100
 8004e74:	20000114 	.word	0x20000114
 8004e78:	20000130 	.word	0x20000130
 8004e7c:	20000144 	.word	0x20000144
 8004e80:	2000015c 	.word	0x2000015c
 8004e84:	20000128 	.word	0x20000128
 8004e88:	2000012c 	.word	0x2000012c

08004e8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e92:	e01a      	b.n	8004eca <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004e94:	f000 f9c4 	bl	8005220 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004e98:	4b10      	ldr	r3, [pc, #64]	; (8004edc <prvCheckTasksWaitingTermination+0x50>)
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	0018      	movs	r0, r3
 8004ea6:	f7fe ffe3 	bl	8003e70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004eaa:	4b0d      	ldr	r3, [pc, #52]	; (8004ee0 <prvCheckTasksWaitingTermination+0x54>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	1e5a      	subs	r2, r3, #1
 8004eb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ee0 <prvCheckTasksWaitingTermination+0x54>)
 8004eb2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004eb4:	4b0b      	ldr	r3, [pc, #44]	; (8004ee4 <prvCheckTasksWaitingTermination+0x58>)
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	1e5a      	subs	r2, r3, #1
 8004eba:	4b0a      	ldr	r3, [pc, #40]	; (8004ee4 <prvCheckTasksWaitingTermination+0x58>)
 8004ebc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004ebe:	f000 f9c1 	bl	8005244 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	f000 f80f 	bl	8004ee8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004eca:	4b06      	ldr	r3, [pc, #24]	; (8004ee4 <prvCheckTasksWaitingTermination+0x58>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e0      	bne.n	8004e94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004ed2:	46c0      	nop			; (mov r8, r8)
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	b002      	add	sp, #8
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	46c0      	nop			; (mov r8, r8)
 8004edc:	20000144 	.word	0x20000144
 8004ee0:	20000170 	.word	0x20000170
 8004ee4:	20000158 	.word	0x20000158

08004ee8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f000 fad1 	bl	800549c <vPortFree>
			vPortFree( pxTCB );
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	0018      	movs	r0, r3
 8004efe:	f000 facd 	bl	800549c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f02:	46c0      	nop			; (mov r8, r8)
 8004f04:	46bd      	mov	sp, r7
 8004f06:	b002      	add	sp, #8
 8004f08:	bd80      	pop	{r7, pc}
	...

08004f0c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f0c:	b580      	push	{r7, lr}
 8004f0e:	b082      	sub	sp, #8
 8004f10:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f12:	4b0e      	ldr	r3, [pc, #56]	; (8004f4c <prvResetNextTaskUnblockTime+0x40>)
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <prvResetNextTaskUnblockTime+0x14>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <prvResetNextTaskUnblockTime+0x16>
 8004f20:	2300      	movs	r3, #0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d004      	beq.n	8004f30 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f26:	4b0a      	ldr	r3, [pc, #40]	; (8004f50 <prvResetNextTaskUnblockTime+0x44>)
 8004f28:	2201      	movs	r2, #1
 8004f2a:	4252      	negs	r2, r2
 8004f2c:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004f2e:	e008      	b.n	8004f42 <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004f30:	4b06      	ldr	r3, [pc, #24]	; (8004f4c <prvResetNextTaskUnblockTime+0x40>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	68db      	ldr	r3, [r3, #12]
 8004f36:	68db      	ldr	r3, [r3, #12]
 8004f38:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	4b04      	ldr	r3, [pc, #16]	; (8004f50 <prvResetNextTaskUnblockTime+0x44>)
 8004f40:	601a      	str	r2, [r3, #0]
}
 8004f42:	46c0      	nop			; (mov r8, r8)
 8004f44:	46bd      	mov	sp, r7
 8004f46:	b002      	add	sp, #8
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	20000128 	.word	0x20000128
 8004f50:	20000190 	.word	0x20000190

08004f54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b082      	sub	sp, #8
 8004f58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004f5a:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <xTaskGetSchedulerState+0x30>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d102      	bne.n	8004f68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004f62:	2301      	movs	r3, #1
 8004f64:	607b      	str	r3, [r7, #4]
 8004f66:	e008      	b.n	8004f7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004f68:	4b07      	ldr	r3, [pc, #28]	; (8004f88 <xTaskGetSchedulerState+0x34>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d102      	bne.n	8004f76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004f70:	2302      	movs	r3, #2
 8004f72:	607b      	str	r3, [r7, #4]
 8004f74:	e001      	b.n	8004f7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004f76:	2300      	movs	r3, #0
 8004f78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004f7a:	687b      	ldr	r3, [r7, #4]
	}
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b002      	add	sp, #8
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	2000017c 	.word	0x2000017c
 8004f88:	20000198 	.word	0x20000198

08004f8c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b084      	sub	sp, #16
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d044      	beq.n	800502c <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004fa2:	4b25      	ldr	r3, [pc, #148]	; (8005038 <xTaskPriorityDisinherit+0xac>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68ba      	ldr	r2, [r7, #8]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d001      	beq.n	8004fb0 <xTaskPriorityDisinherit+0x24>
 8004fac:	b672      	cpsid	i
 8004fae:	e7fe      	b.n	8004fae <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d101      	bne.n	8004fbc <xTaskPriorityDisinherit+0x30>
 8004fb8:	b672      	cpsid	i
 8004fba:	e7fe      	b.n	8004fba <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc0:	1e5a      	subs	r2, r3, #1
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fce:	429a      	cmp	r2, r3
 8004fd0:	d02c      	beq.n	800502c <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004fd2:	68bb      	ldr	r3, [r7, #8]
 8004fd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d128      	bne.n	800502c <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	3304      	adds	r3, #4
 8004fde:	0018      	movs	r0, r3
 8004fe0:	f7fe ff46 	bl	8003e70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004fe8:	68bb      	ldr	r3, [r7, #8]
 8004fea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fec:	68bb      	ldr	r3, [r7, #8]
 8004fee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff0:	2207      	movs	r2, #7
 8004ff2:	1ad2      	subs	r2, r2, r3
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ffc:	4b0f      	ldr	r3, [pc, #60]	; (800503c <xTaskPriorityDisinherit+0xb0>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	429a      	cmp	r2, r3
 8005002:	d903      	bls.n	800500c <xTaskPriorityDisinherit+0x80>
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005008:	4b0c      	ldr	r3, [pc, #48]	; (800503c <xTaskPriorityDisinherit+0xb0>)
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005010:	0013      	movs	r3, r2
 8005012:	009b      	lsls	r3, r3, #2
 8005014:	189b      	adds	r3, r3, r2
 8005016:	009b      	lsls	r3, r3, #2
 8005018:	4a09      	ldr	r2, [pc, #36]	; (8005040 <xTaskPriorityDisinherit+0xb4>)
 800501a:	189a      	adds	r2, r3, r2
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	3304      	adds	r3, #4
 8005020:	0019      	movs	r1, r3
 8005022:	0010      	movs	r0, r2
 8005024:	f7fe fecc 	bl	8003dc0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005028:	2301      	movs	r3, #1
 800502a:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800502c:	68fb      	ldr	r3, [r7, #12]
	}
 800502e:	0018      	movs	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	b004      	add	sp, #16
 8005034:	bd80      	pop	{r7, pc}
 8005036:	46c0      	nop			; (mov r8, r8)
 8005038:	20000070 	.word	0x20000070
 800503c:	20000178 	.word	0x20000178
 8005040:	20000074 	.word	0x20000074

08005044 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800504e:	4b21      	ldr	r3, [pc, #132]	; (80050d4 <prvAddCurrentTaskToDelayedList+0x90>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005054:	4b20      	ldr	r3, [pc, #128]	; (80050d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	3304      	adds	r3, #4
 800505a:	0018      	movs	r0, r3
 800505c:	f7fe ff08 	bl	8003e70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3301      	adds	r3, #1
 8005064:	d10b      	bne.n	800507e <prvAddCurrentTaskToDelayedList+0x3a>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d008      	beq.n	800507e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800506c:	4b1a      	ldr	r3, [pc, #104]	; (80050d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	1d1a      	adds	r2, r3, #4
 8005072:	4b1a      	ldr	r3, [pc, #104]	; (80050dc <prvAddCurrentTaskToDelayedList+0x98>)
 8005074:	0011      	movs	r1, r2
 8005076:	0018      	movs	r0, r3
 8005078:	f7fe fea2 	bl	8003dc0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800507c:	e026      	b.n	80050cc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800507e:	68fa      	ldr	r2, [r7, #12]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	18d3      	adds	r3, r2, r3
 8005084:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005086:	4b14      	ldr	r3, [pc, #80]	; (80050d8 <prvAddCurrentTaskToDelayedList+0x94>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	429a      	cmp	r2, r3
 8005094:	d209      	bcs.n	80050aa <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005096:	4b12      	ldr	r3, [pc, #72]	; (80050e0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005098:	681a      	ldr	r2, [r3, #0]
 800509a:	4b0f      	ldr	r3, [pc, #60]	; (80050d8 <prvAddCurrentTaskToDelayedList+0x94>)
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	3304      	adds	r3, #4
 80050a0:	0019      	movs	r1, r3
 80050a2:	0010      	movs	r0, r2
 80050a4:	f7fe feae 	bl	8003e04 <vListInsert>
}
 80050a8:	e010      	b.n	80050cc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80050aa:	4b0e      	ldr	r3, [pc, #56]	; (80050e4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80050ac:	681a      	ldr	r2, [r3, #0]
 80050ae:	4b0a      	ldr	r3, [pc, #40]	; (80050d8 <prvAddCurrentTaskToDelayedList+0x94>)
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	3304      	adds	r3, #4
 80050b4:	0019      	movs	r1, r3
 80050b6:	0010      	movs	r0, r2
 80050b8:	f7fe fea4 	bl	8003e04 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80050bc:	4b0a      	ldr	r3, [pc, #40]	; (80050e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68ba      	ldr	r2, [r7, #8]
 80050c2:	429a      	cmp	r2, r3
 80050c4:	d202      	bcs.n	80050cc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80050c6:	4b08      	ldr	r3, [pc, #32]	; (80050e8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80050c8:	68ba      	ldr	r2, [r7, #8]
 80050ca:	601a      	str	r2, [r3, #0]
}
 80050cc:	46c0      	nop			; (mov r8, r8)
 80050ce:	46bd      	mov	sp, r7
 80050d0:	b004      	add	sp, #16
 80050d2:	bd80      	pop	{r7, pc}
 80050d4:	20000174 	.word	0x20000174
 80050d8:	20000070 	.word	0x20000070
 80050dc:	2000015c 	.word	0x2000015c
 80050e0:	2000012c 	.word	0x2000012c
 80050e4:	20000128 	.word	0x20000128
 80050e8:	20000190 	.word	0x20000190

080050ec <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	60f8      	str	r0, [r7, #12]
 80050f4:	60b9      	str	r1, [r7, #8]
 80050f6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	3b04      	subs	r3, #4
 80050fc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2280      	movs	r2, #128	; 0x80
 8005102:	0452      	lsls	r2, r2, #17
 8005104:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3b04      	subs	r3, #4
 800510a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800510c:	68ba      	ldr	r2, [r7, #8]
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	3b04      	subs	r3, #4
 8005116:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005118:	4a08      	ldr	r2, [pc, #32]	; (800513c <pxPortInitialiseStack+0x50>)
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	3b14      	subs	r3, #20
 8005122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005124:	687a      	ldr	r2, [r7, #4]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3b20      	subs	r3, #32
 800512e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005130:	68fb      	ldr	r3, [r7, #12]
}
 8005132:	0018      	movs	r0, r3
 8005134:	46bd      	mov	sp, r7
 8005136:	b004      	add	sp, #16
 8005138:	bd80      	pop	{r7, pc}
 800513a:	46c0      	nop			; (mov r8, r8)
 800513c:	08005141 	.word	0x08005141

08005140 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b082      	sub	sp, #8
 8005144:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005146:	2300      	movs	r3, #0
 8005148:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800514a:	4b07      	ldr	r3, [pc, #28]	; (8005168 <prvTaskExitError+0x28>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	3301      	adds	r3, #1
 8005150:	d001      	beq.n	8005156 <prvTaskExitError+0x16>
 8005152:	b672      	cpsid	i
 8005154:	e7fe      	b.n	8005154 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005156:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005158:	46c0      	nop			; (mov r8, r8)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2b00      	cmp	r3, #0
 800515e:	d0fc      	beq.n	800515a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005160:	46c0      	nop			; (mov r8, r8)
 8005162:	46bd      	mov	sp, r7
 8005164:	b002      	add	sp, #8
 8005166:	bd80      	pop	{r7, pc}
 8005168:	20000040 	.word	0x20000040

0800516c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005170:	46c0      	nop			; (mov r8, r8)
 8005172:	46bd      	mov	sp, r7
 8005174:	bd80      	pop	{r7, pc}
	...

08005180 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005180:	4a0b      	ldr	r2, [pc, #44]	; (80051b0 <pxCurrentTCBConst2>)
 8005182:	6813      	ldr	r3, [r2, #0]
 8005184:	6818      	ldr	r0, [r3, #0]
 8005186:	3020      	adds	r0, #32
 8005188:	f380 8809 	msr	PSP, r0
 800518c:	2002      	movs	r0, #2
 800518e:	f380 8814 	msr	CONTROL, r0
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005198:	46ae      	mov	lr, r5
 800519a:	bc08      	pop	{r3}
 800519c:	bc04      	pop	{r2}
 800519e:	b662      	cpsie	i
 80051a0:	4718      	bx	r3
 80051a2:	46c0      	nop			; (mov r8, r8)
 80051a4:	46c0      	nop			; (mov r8, r8)
 80051a6:	46c0      	nop			; (mov r8, r8)
 80051a8:	46c0      	nop			; (mov r8, r8)
 80051aa:	46c0      	nop			; (mov r8, r8)
 80051ac:	46c0      	nop			; (mov r8, r8)
 80051ae:	46c0      	nop			; (mov r8, r8)

080051b0 <pxCurrentTCBConst2>:
 80051b0:	20000070 	.word	0x20000070
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 80051b4:	46c0      	nop			; (mov r8, r8)
 80051b6:	46c0      	nop			; (mov r8, r8)

080051b8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 80051bc:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <xPortStartScheduler+0x40>)
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	4b0d      	ldr	r3, [pc, #52]	; (80051f8 <xPortStartScheduler+0x40>)
 80051c2:	21ff      	movs	r1, #255	; 0xff
 80051c4:	0409      	lsls	r1, r1, #16
 80051c6:	430a      	orrs	r2, r1
 80051c8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 80051ca:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <xPortStartScheduler+0x40>)
 80051cc:	681a      	ldr	r2, [r3, #0]
 80051ce:	4b0a      	ldr	r3, [pc, #40]	; (80051f8 <xPortStartScheduler+0x40>)
 80051d0:	21ff      	movs	r1, #255	; 0xff
 80051d2:	0609      	lsls	r1, r1, #24
 80051d4:	430a      	orrs	r2, r1
 80051d6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 80051d8:	f000 f898 	bl	800530c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80051dc:	4b07      	ldr	r3, [pc, #28]	; (80051fc <xPortStartScheduler+0x44>)
 80051de:	2200      	movs	r2, #0
 80051e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 80051e2:	f7ff ffcd 	bl	8005180 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80051e6:	f7ff fcc3 	bl	8004b70 <vTaskSwitchContext>
	prvTaskExitError();
 80051ea:	f7ff ffa9 	bl	8005140 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	0018      	movs	r0, r3
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	46c0      	nop			; (mov r8, r8)
 80051f8:	e000ed20 	.word	0xe000ed20
 80051fc:	20000040 	.word	0x20000040

08005200 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005204:	4b05      	ldr	r3, [pc, #20]	; (800521c <vPortYield+0x1c>)
 8005206:	2280      	movs	r2, #128	; 0x80
 8005208:	0552      	lsls	r2, r2, #21
 800520a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800520c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005210:	f3bf 8f6f 	isb	sy
}
 8005214:	46c0      	nop			; (mov r8, r8)
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	e000ed04 	.word	0xe000ed04

08005220 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005220:	b580      	push	{r7, lr}
 8005222:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005224:	b672      	cpsid	i
    uxCriticalNesting++;
 8005226:	4b06      	ldr	r3, [pc, #24]	; (8005240 <vPortEnterCritical+0x20>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	4b04      	ldr	r3, [pc, #16]	; (8005240 <vPortEnterCritical+0x20>)
 800522e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005230:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005234:	f3bf 8f6f 	isb	sy
}
 8005238:	46c0      	nop			; (mov r8, r8)
 800523a:	46bd      	mov	sp, r7
 800523c:	bd80      	pop	{r7, pc}
 800523e:	46c0      	nop			; (mov r8, r8)
 8005240:	20000040 	.word	0x20000040

08005244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005244:	b580      	push	{r7, lr}
 8005246:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005248:	4b09      	ldr	r3, [pc, #36]	; (8005270 <vPortExitCritical+0x2c>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d101      	bne.n	8005254 <vPortExitCritical+0x10>
 8005250:	b672      	cpsid	i
 8005252:	e7fe      	b.n	8005252 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005254:	4b06      	ldr	r3, [pc, #24]	; (8005270 <vPortExitCritical+0x2c>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	1e5a      	subs	r2, r3, #1
 800525a:	4b05      	ldr	r3, [pc, #20]	; (8005270 <vPortExitCritical+0x2c>)
 800525c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 800525e:	4b04      	ldr	r3, [pc, #16]	; (8005270 <vPortExitCritical+0x2c>)
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	2b00      	cmp	r3, #0
 8005264:	d100      	bne.n	8005268 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005266:	b662      	cpsie	i
    }
}
 8005268:	46c0      	nop			; (mov r8, r8)
 800526a:	46bd      	mov	sp, r7
 800526c:	bd80      	pop	{r7, pc}
 800526e:	46c0      	nop			; (mov r8, r8)
 8005270:	20000040 	.word	0x20000040

08005274 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005274:	f3ef 8010 	mrs	r0, PRIMASK
 8005278:	b672      	cpsid	i
 800527a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 800527c:	46c0      	nop			; (mov r8, r8)
 800527e:	0018      	movs	r0, r3

08005280 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005280:	f380 8810 	msr	PRIMASK, r0
 8005284:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005286:	46c0      	nop			; (mov r8, r8)
	...

08005290 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005290:	f3ef 8009 	mrs	r0, PSP
 8005294:	4b0e      	ldr	r3, [pc, #56]	; (80052d0 <pxCurrentTCBConst>)
 8005296:	681a      	ldr	r2, [r3, #0]
 8005298:	3820      	subs	r0, #32
 800529a:	6010      	str	r0, [r2, #0]
 800529c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800529e:	4644      	mov	r4, r8
 80052a0:	464d      	mov	r5, r9
 80052a2:	4656      	mov	r6, sl
 80052a4:	465f      	mov	r7, fp
 80052a6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 80052a8:	b508      	push	{r3, lr}
 80052aa:	b672      	cpsid	i
 80052ac:	f7ff fc60 	bl	8004b70 <vTaskSwitchContext>
 80052b0:	b662      	cpsie	i
 80052b2:	bc0c      	pop	{r2, r3}
 80052b4:	6811      	ldr	r1, [r2, #0]
 80052b6:	6808      	ldr	r0, [r1, #0]
 80052b8:	3010      	adds	r0, #16
 80052ba:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80052bc:	46a0      	mov	r8, r4
 80052be:	46a9      	mov	r9, r5
 80052c0:	46b2      	mov	sl, r6
 80052c2:	46bb      	mov	fp, r7
 80052c4:	f380 8809 	msr	PSP, r0
 80052c8:	3820      	subs	r0, #32
 80052ca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 80052cc:	4718      	bx	r3
 80052ce:	46c0      	nop			; (mov r8, r8)

080052d0 <pxCurrentTCBConst>:
 80052d0:	20000070 	.word	0x20000070
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 80052d4:	46c0      	nop			; (mov r8, r8)
 80052d6:	46c0      	nop			; (mov r8, r8)

080052d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b082      	sub	sp, #8
 80052dc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 80052de:	f7ff ffc9 	bl	8005274 <ulSetInterruptMaskFromISR>
 80052e2:	0003      	movs	r3, r0
 80052e4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80052e6:	f7ff fb8f 	bl	8004a08 <xTaskIncrementTick>
 80052ea:	1e03      	subs	r3, r0, #0
 80052ec:	d003      	beq.n	80052f6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 80052ee:	4b06      	ldr	r3, [pc, #24]	; (8005308 <xPortSysTickHandler+0x30>)
 80052f0:	2280      	movs	r2, #128	; 0x80
 80052f2:	0552      	lsls	r2, r2, #21
 80052f4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	0018      	movs	r0, r3
 80052fa:	f7ff ffc1 	bl	8005280 <vClearInterruptMaskFromISR>
}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	46bd      	mov	sp, r7
 8005302:	b002      	add	sp, #8
 8005304:	bd80      	pop	{r7, pc}
 8005306:	46c0      	nop			; (mov r8, r8)
 8005308:	e000ed04 	.word	0xe000ed04

0800530c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005310:	4b0b      	ldr	r3, [pc, #44]	; (8005340 <prvSetupTimerInterrupt+0x34>)
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <prvSetupTimerInterrupt+0x38>)
 8005318:	2200      	movs	r2, #0
 800531a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800531c:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <prvSetupTimerInterrupt+0x3c>)
 800531e:	681a      	ldr	r2, [r3, #0]
 8005320:	23fa      	movs	r3, #250	; 0xfa
 8005322:	0099      	lsls	r1, r3, #2
 8005324:	0010      	movs	r0, r2
 8005326:	f7fa fef7 	bl	8000118 <__udivsi3>
 800532a:	0003      	movs	r3, r0
 800532c:	001a      	movs	r2, r3
 800532e:	4b07      	ldr	r3, [pc, #28]	; (800534c <prvSetupTimerInterrupt+0x40>)
 8005330:	3a01      	subs	r2, #1
 8005332:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005334:	4b02      	ldr	r3, [pc, #8]	; (8005340 <prvSetupTimerInterrupt+0x34>)
 8005336:	2207      	movs	r2, #7
 8005338:	601a      	str	r2, [r3, #0]
}
 800533a:	46c0      	nop			; (mov r8, r8)
 800533c:	46bd      	mov	sp, r7
 800533e:	bd80      	pop	{r7, pc}
 8005340:	e000e010 	.word	0xe000e010
 8005344:	e000e018 	.word	0xe000e018
 8005348:	20000000 	.word	0x20000000
 800534c:	e000e014 	.word	0xe000e014

08005350 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005350:	b580      	push	{r7, lr}
 8005352:	b086      	sub	sp, #24
 8005354:	af00      	add	r7, sp, #0
 8005356:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005358:	2300      	movs	r3, #0
 800535a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800535c:	f7ff fabc 	bl	80048d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005360:	4b49      	ldr	r3, [pc, #292]	; (8005488 <pvPortMalloc+0x138>)
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005368:	f000 f8e0 	bl	800552c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800536c:	4b47      	ldr	r3, [pc, #284]	; (800548c <pvPortMalloc+0x13c>)
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	687a      	ldr	r2, [r7, #4]
 8005372:	4013      	ands	r3, r2
 8005374:	d000      	beq.n	8005378 <pvPortMalloc+0x28>
 8005376:	e079      	b.n	800546c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d012      	beq.n	80053a4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800537e:	2208      	movs	r2, #8
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	189b      	adds	r3, r3, r2
 8005384:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2207      	movs	r2, #7
 800538a:	4013      	ands	r3, r2
 800538c:	d00a      	beq.n	80053a4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2207      	movs	r2, #7
 8005392:	4393      	bics	r3, r2
 8005394:	3308      	adds	r3, #8
 8005396:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2207      	movs	r2, #7
 800539c:	4013      	ands	r3, r2
 800539e:	d001      	beq.n	80053a4 <pvPortMalloc+0x54>
 80053a0:	b672      	cpsid	i
 80053a2:	e7fe      	b.n	80053a2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d060      	beq.n	800546c <pvPortMalloc+0x11c>
 80053aa:	4b39      	ldr	r3, [pc, #228]	; (8005490 <pvPortMalloc+0x140>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	687a      	ldr	r2, [r7, #4]
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d85b      	bhi.n	800546c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80053b4:	4b37      	ldr	r3, [pc, #220]	; (8005494 <pvPortMalloc+0x144>)
 80053b6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 80053b8:	4b36      	ldr	r3, [pc, #216]	; (8005494 <pvPortMalloc+0x144>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053be:	e004      	b.n	80053ca <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	685b      	ldr	r3, [r3, #4]
 80053ce:	687a      	ldr	r2, [r7, #4]
 80053d0:	429a      	cmp	r2, r3
 80053d2:	d903      	bls.n	80053dc <pvPortMalloc+0x8c>
 80053d4:	697b      	ldr	r3, [r7, #20]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d1f1      	bne.n	80053c0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80053dc:	4b2a      	ldr	r3, [pc, #168]	; (8005488 <pvPortMalloc+0x138>)
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	697a      	ldr	r2, [r7, #20]
 80053e2:	429a      	cmp	r2, r3
 80053e4:	d042      	beq.n	800546c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	2208      	movs	r2, #8
 80053ec:	189b      	adds	r3, r3, r2
 80053ee:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80053f0:	697b      	ldr	r3, [r7, #20]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80053f8:	697b      	ldr	r3, [r7, #20]
 80053fa:	685a      	ldr	r2, [r3, #4]
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	1ad2      	subs	r2, r2, r3
 8005400:	2308      	movs	r3, #8
 8005402:	005b      	lsls	r3, r3, #1
 8005404:	429a      	cmp	r2, r3
 8005406:	d916      	bls.n	8005436 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005408:	697a      	ldr	r2, [r7, #20]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	18d3      	adds	r3, r2, r3
 800540e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	2207      	movs	r2, #7
 8005414:	4013      	ands	r3, r2
 8005416:	d001      	beq.n	800541c <pvPortMalloc+0xcc>
 8005418:	b672      	cpsid	i
 800541a:	e7fe      	b.n	800541a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	685a      	ldr	r2, [r3, #4]
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	1ad2      	subs	r2, r2, r3
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	687a      	ldr	r2, [r7, #4]
 800542c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	0018      	movs	r0, r3
 8005432:	f000 f8db 	bl	80055ec <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005436:	4b16      	ldr	r3, [pc, #88]	; (8005490 <pvPortMalloc+0x140>)
 8005438:	681a      	ldr	r2, [r3, #0]
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	685b      	ldr	r3, [r3, #4]
 800543e:	1ad2      	subs	r2, r2, r3
 8005440:	4b13      	ldr	r3, [pc, #76]	; (8005490 <pvPortMalloc+0x140>)
 8005442:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005444:	4b12      	ldr	r3, [pc, #72]	; (8005490 <pvPortMalloc+0x140>)
 8005446:	681a      	ldr	r2, [r3, #0]
 8005448:	4b13      	ldr	r3, [pc, #76]	; (8005498 <pvPortMalloc+0x148>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	429a      	cmp	r2, r3
 800544e:	d203      	bcs.n	8005458 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005450:	4b0f      	ldr	r3, [pc, #60]	; (8005490 <pvPortMalloc+0x140>)
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	4b10      	ldr	r3, [pc, #64]	; (8005498 <pvPortMalloc+0x148>)
 8005456:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	4b0b      	ldr	r3, [pc, #44]	; (800548c <pvPortMalloc+0x13c>)
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	431a      	orrs	r2, r3
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005466:	697b      	ldr	r3, [r7, #20]
 8005468:	2200      	movs	r2, #0
 800546a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800546c:	f7ff fa40 	bl	80048f0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2207      	movs	r2, #7
 8005474:	4013      	ands	r3, r2
 8005476:	d001      	beq.n	800547c <pvPortMalloc+0x12c>
 8005478:	b672      	cpsid	i
 800547a:	e7fe      	b.n	800547a <pvPortMalloc+0x12a>
	return pvReturn;
 800547c:	68fb      	ldr	r3, [r7, #12]
}
 800547e:	0018      	movs	r0, r3
 8005480:	46bd      	mov	sp, r7
 8005482:	b006      	add	sp, #24
 8005484:	bd80      	pop	{r7, pc}
 8005486:	46c0      	nop			; (mov r8, r8)
 8005488:	200011a4 	.word	0x200011a4
 800548c:	200011b0 	.word	0x200011b0
 8005490:	200011a8 	.word	0x200011a8
 8005494:	2000119c 	.word	0x2000119c
 8005498:	200011ac 	.word	0x200011ac

0800549c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b084      	sub	sp, #16
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d035      	beq.n	800551a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80054ae:	2308      	movs	r3, #8
 80054b0:	425b      	negs	r3, r3
 80054b2:	68fa      	ldr	r2, [r7, #12]
 80054b4:	18d3      	adds	r3, r2, r3
 80054b6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80054bc:	68bb      	ldr	r3, [r7, #8]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	4b18      	ldr	r3, [pc, #96]	; (8005524 <vPortFree+0x88>)
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4013      	ands	r3, r2
 80054c6:	d101      	bne.n	80054cc <vPortFree+0x30>
 80054c8:	b672      	cpsid	i
 80054ca:	e7fe      	b.n	80054ca <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80054cc:	68bb      	ldr	r3, [r7, #8]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <vPortFree+0x3c>
 80054d4:	b672      	cpsid	i
 80054d6:	e7fe      	b.n	80054d6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	685a      	ldr	r2, [r3, #4]
 80054dc:	4b11      	ldr	r3, [pc, #68]	; (8005524 <vPortFree+0x88>)
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	4013      	ands	r3, r2
 80054e2:	d01a      	beq.n	800551a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d116      	bne.n	800551a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	685a      	ldr	r2, [r3, #4]
 80054f0:	4b0c      	ldr	r3, [pc, #48]	; (8005524 <vPortFree+0x88>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	43db      	mvns	r3, r3
 80054f6:	401a      	ands	r2, r3
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80054fc:	f7ff f9ec 	bl	80048d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	685a      	ldr	r2, [r3, #4]
 8005504:	4b08      	ldr	r3, [pc, #32]	; (8005528 <vPortFree+0x8c>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	18d2      	adds	r2, r2, r3
 800550a:	4b07      	ldr	r3, [pc, #28]	; (8005528 <vPortFree+0x8c>)
 800550c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	0018      	movs	r0, r3
 8005512:	f000 f86b 	bl	80055ec <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005516:	f7ff f9eb 	bl	80048f0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800551a:	46c0      	nop			; (mov r8, r8)
 800551c:	46bd      	mov	sp, r7
 800551e:	b004      	add	sp, #16
 8005520:	bd80      	pop	{r7, pc}
 8005522:	46c0      	nop			; (mov r8, r8)
 8005524:	200011b0 	.word	0x200011b0
 8005528:	200011a8 	.word	0x200011a8

0800552c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b084      	sub	sp, #16
 8005530:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005532:	2380      	movs	r3, #128	; 0x80
 8005534:	015b      	lsls	r3, r3, #5
 8005536:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005538:	4b26      	ldr	r3, [pc, #152]	; (80055d4 <prvHeapInit+0xa8>)
 800553a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	2207      	movs	r2, #7
 8005540:	4013      	ands	r3, r2
 8005542:	d00c      	beq.n	800555e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	3307      	adds	r3, #7
 8005548:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2207      	movs	r2, #7
 800554e:	4393      	bics	r3, r2
 8005550:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005552:	68ba      	ldr	r2, [r7, #8]
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	1ad2      	subs	r2, r2, r3
 8005558:	4b1e      	ldr	r3, [pc, #120]	; (80055d4 <prvHeapInit+0xa8>)
 800555a:	18d3      	adds	r3, r2, r3
 800555c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005562:	4b1d      	ldr	r3, [pc, #116]	; (80055d8 <prvHeapInit+0xac>)
 8005564:	687a      	ldr	r2, [r7, #4]
 8005566:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005568:	4b1b      	ldr	r3, [pc, #108]	; (80055d8 <prvHeapInit+0xac>)
 800556a:	2200      	movs	r2, #0
 800556c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	68ba      	ldr	r2, [r7, #8]
 8005572:	18d3      	adds	r3, r2, r3
 8005574:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005576:	2208      	movs	r2, #8
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	1a9b      	subs	r3, r3, r2
 800557c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2207      	movs	r2, #7
 8005582:	4393      	bics	r3, r2
 8005584:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005586:	68fa      	ldr	r2, [r7, #12]
 8005588:	4b14      	ldr	r3, [pc, #80]	; (80055dc <prvHeapInit+0xb0>)
 800558a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800558c:	4b13      	ldr	r3, [pc, #76]	; (80055dc <prvHeapInit+0xb0>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	2200      	movs	r2, #0
 8005592:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005594:	4b11      	ldr	r3, [pc, #68]	; (80055dc <prvHeapInit+0xb0>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	2200      	movs	r2, #0
 800559a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	68fa      	ldr	r2, [r7, #12]
 80055a4:	1ad2      	subs	r2, r2, r3
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80055aa:	4b0c      	ldr	r3, [pc, #48]	; (80055dc <prvHeapInit+0xb0>)
 80055ac:	681a      	ldr	r2, [r3, #0]
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	685a      	ldr	r2, [r3, #4]
 80055b6:	4b0a      	ldr	r3, [pc, #40]	; (80055e0 <prvHeapInit+0xb4>)
 80055b8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	685a      	ldr	r2, [r3, #4]
 80055be:	4b09      	ldr	r3, [pc, #36]	; (80055e4 <prvHeapInit+0xb8>)
 80055c0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80055c2:	4b09      	ldr	r3, [pc, #36]	; (80055e8 <prvHeapInit+0xbc>)
 80055c4:	2280      	movs	r2, #128	; 0x80
 80055c6:	0612      	lsls	r2, r2, #24
 80055c8:	601a      	str	r2, [r3, #0]
}
 80055ca:	46c0      	nop			; (mov r8, r8)
 80055cc:	46bd      	mov	sp, r7
 80055ce:	b004      	add	sp, #16
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	46c0      	nop			; (mov r8, r8)
 80055d4:	2000019c 	.word	0x2000019c
 80055d8:	2000119c 	.word	0x2000119c
 80055dc:	200011a4 	.word	0x200011a4
 80055e0:	200011ac 	.word	0x200011ac
 80055e4:	200011a8 	.word	0x200011a8
 80055e8:	200011b0 	.word	0x200011b0

080055ec <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80055f4:	4b27      	ldr	r3, [pc, #156]	; (8005694 <prvInsertBlockIntoFreeList+0xa8>)
 80055f6:	60fb      	str	r3, [r7, #12]
 80055f8:	e002      	b.n	8005600 <prvInsertBlockIntoFreeList+0x14>
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	687a      	ldr	r2, [r7, #4]
 8005606:	429a      	cmp	r2, r3
 8005608:	d8f7      	bhi.n	80055fa <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	685b      	ldr	r3, [r3, #4]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	18d3      	adds	r3, r2, r3
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	429a      	cmp	r2, r3
 800561a:	d108      	bne.n	800562e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	685b      	ldr	r3, [r3, #4]
 8005624:	18d2      	adds	r2, r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	18d2      	adds	r2, r2, r3
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	429a      	cmp	r2, r3
 8005640:	d118      	bne.n	8005674 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <prvInsertBlockIntoFreeList+0xac>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	429a      	cmp	r2, r3
 800564c:	d00d      	beq.n	800566a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	685b      	ldr	r3, [r3, #4]
 8005658:	18d2      	adds	r2, r2, r3
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	601a      	str	r2, [r3, #0]
 8005668:	e008      	b.n	800567c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800566a:	4b0b      	ldr	r3, [pc, #44]	; (8005698 <prvInsertBlockIntoFreeList+0xac>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	e003      	b.n	800567c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800567c:	68fa      	ldr	r2, [r7, #12]
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	429a      	cmp	r2, r3
 8005682:	d002      	beq.n	800568a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	687a      	ldr	r2, [r7, #4]
 8005688:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800568a:	46c0      	nop			; (mov r8, r8)
 800568c:	46bd      	mov	sp, r7
 800568e:	b004      	add	sp, #16
 8005690:	bd80      	pop	{r7, pc}
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	2000119c 	.word	0x2000119c
 8005698:	200011a4 	.word	0x200011a4

0800569c <__libc_init_array>:
 800569c:	b570      	push	{r4, r5, r6, lr}
 800569e:	2600      	movs	r6, #0
 80056a0:	4d0c      	ldr	r5, [pc, #48]	; (80056d4 <__libc_init_array+0x38>)
 80056a2:	4c0d      	ldr	r4, [pc, #52]	; (80056d8 <__libc_init_array+0x3c>)
 80056a4:	1b64      	subs	r4, r4, r5
 80056a6:	10a4      	asrs	r4, r4, #2
 80056a8:	42a6      	cmp	r6, r4
 80056aa:	d109      	bne.n	80056c0 <__libc_init_array+0x24>
 80056ac:	2600      	movs	r6, #0
 80056ae:	f000 f82b 	bl	8005708 <_init>
 80056b2:	4d0a      	ldr	r5, [pc, #40]	; (80056dc <__libc_init_array+0x40>)
 80056b4:	4c0a      	ldr	r4, [pc, #40]	; (80056e0 <__libc_init_array+0x44>)
 80056b6:	1b64      	subs	r4, r4, r5
 80056b8:	10a4      	asrs	r4, r4, #2
 80056ba:	42a6      	cmp	r6, r4
 80056bc:	d105      	bne.n	80056ca <__libc_init_array+0x2e>
 80056be:	bd70      	pop	{r4, r5, r6, pc}
 80056c0:	00b3      	lsls	r3, r6, #2
 80056c2:	58eb      	ldr	r3, [r5, r3]
 80056c4:	4798      	blx	r3
 80056c6:	3601      	adds	r6, #1
 80056c8:	e7ee      	b.n	80056a8 <__libc_init_array+0xc>
 80056ca:	00b3      	lsls	r3, r6, #2
 80056cc:	58eb      	ldr	r3, [r5, r3]
 80056ce:	4798      	blx	r3
 80056d0:	3601      	adds	r6, #1
 80056d2:	e7f2      	b.n	80056ba <__libc_init_array+0x1e>
 80056d4:	080058ac 	.word	0x080058ac
 80056d8:	080058ac 	.word	0x080058ac
 80056dc:	080058ac 	.word	0x080058ac
 80056e0:	080058b0 	.word	0x080058b0

080056e4 <memcpy>:
 80056e4:	2300      	movs	r3, #0
 80056e6:	b510      	push	{r4, lr}
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d100      	bne.n	80056ee <memcpy+0xa>
 80056ec:	bd10      	pop	{r4, pc}
 80056ee:	5ccc      	ldrb	r4, [r1, r3]
 80056f0:	54c4      	strb	r4, [r0, r3]
 80056f2:	3301      	adds	r3, #1
 80056f4:	e7f8      	b.n	80056e8 <memcpy+0x4>

080056f6 <memset>:
 80056f6:	0003      	movs	r3, r0
 80056f8:	1812      	adds	r2, r2, r0
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d100      	bne.n	8005700 <memset+0xa>
 80056fe:	4770      	bx	lr
 8005700:	7019      	strb	r1, [r3, #0]
 8005702:	3301      	adds	r3, #1
 8005704:	e7f9      	b.n	80056fa <memset+0x4>
	...

08005708 <_init>:
 8005708:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800570a:	46c0      	nop			; (mov r8, r8)
 800570c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800570e:	bc08      	pop	{r3}
 8005710:	469e      	mov	lr, r3
 8005712:	4770      	bx	lr

08005714 <_fini>:
 8005714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005716:	46c0      	nop			; (mov r8, r8)
 8005718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800571a:	bc08      	pop	{r3}
 800571c:	469e      	mov	lr, r3
 800571e:	4770      	bx	lr
