
NucleoG0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006320  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  080063e0  080063e0  000163e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006550  08006550  00020044  2**0
                  CONTENTS
  4 .ARM          00000000  08006550  08006550  00020044  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006550  08006550  00020044  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006550  08006550  00016550  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006554  08006554  00016554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000044  20000000  08006558  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013ac  20000044  0800659c  00020044  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200013f0  0800659c  000213f0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012ac5  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002f82  00000000  00000000  00032b31  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001070  00000000  00000000  00035ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ee8  00000000  00000000  00036b28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00003b33  00000000  00000000  00037a10  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000f5ba  00000000  00000000  0003b543  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008859e  00000000  00000000  0004aafd  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d309b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038f0  00000000  00000000  000d3118  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000044 	.word	0x20000044
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080063c8 	.word	0x080063c8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000048 	.word	0x20000048
 8000104:	080063c8 	.word	0x080063c8

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040a:	f000 ff49 	bl	80012a0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040e:	f000 f81f 	bl	8000450 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000412:	f000 f927 	bl	8000664 <MX_GPIO_Init>
  MX_DMA_Init();
 8000416:	f000 f907 	bl	8000628 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800041a:	f000 f8b7 	bl	800058c <MX_USART2_UART_Init>
  MX_SPI1_Init();
 800041e:	f000 f877 	bl	8000510 <MX_SPI1_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000422:	1d3b      	adds	r3, r7, #4
 8000424:	4a08      	ldr	r2, [pc, #32]	; (8000448 <main+0x44>)
 8000426:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000428:	c313      	stmia	r3!, {r0, r1, r4}
 800042a:	ca03      	ldmia	r2!, {r0, r1}
 800042c:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 800042e:	1d3b      	adds	r3, r7, #4
 8000430:	2100      	movs	r1, #0
 8000432:	0018      	movs	r0, r3
 8000434:	f004 fac3 	bl	80049be <osThreadCreate>
 8000438:	0002      	movs	r2, r0
 800043a:	4b04      	ldr	r3, [pc, #16]	; (800044c <main+0x48>)
 800043c:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  application();
 800043e:	f000 faf9 	bl	8000a34 <application>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000442:	f004 fab4 	bl	80049ae <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000446:	e7fe      	b.n	8000446 <main+0x42>
 8000448:	080063ec 	.word	0x080063ec
 800044c:	200011b4 	.word	0x200011b4

08000450 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000450:	b590      	push	{r4, r7, lr}
 8000452:	b099      	sub	sp, #100	; 0x64
 8000454:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000456:	242c      	movs	r4, #44	; 0x2c
 8000458:	193b      	adds	r3, r7, r4
 800045a:	0018      	movs	r0, r3
 800045c:	2334      	movs	r3, #52	; 0x34
 800045e:	001a      	movs	r2, r3
 8000460:	2100      	movs	r1, #0
 8000462:	f005 ffa8 	bl	80063b6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000466:	231c      	movs	r3, #28
 8000468:	18fb      	adds	r3, r7, r3
 800046a:	0018      	movs	r0, r3
 800046c:	2310      	movs	r3, #16
 800046e:	001a      	movs	r2, r3
 8000470:	2100      	movs	r1, #0
 8000472:	f005 ffa0 	bl	80063b6 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000476:	003b      	movs	r3, r7
 8000478:	0018      	movs	r0, r3
 800047a:	231c      	movs	r3, #28
 800047c:	001a      	movs	r2, r3
 800047e:	2100      	movs	r1, #0
 8000480:	f005 ff99 	bl	80063b6 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000484:	2380      	movs	r3, #128	; 0x80
 8000486:	009b      	lsls	r3, r3, #2
 8000488:	0018      	movs	r0, r3
 800048a:	f001 fcf3 	bl	8001e74 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800048e:	193b      	adds	r3, r7, r4
 8000490:	2202      	movs	r2, #2
 8000492:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2280      	movs	r2, #128	; 0x80
 8000498:	0052      	lsls	r2, r2, #1
 800049a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800049c:	193b      	adds	r3, r7, r4
 800049e:	2200      	movs	r2, #0
 80004a0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004a2:	193b      	adds	r3, r7, r4
 80004a4:	2240      	movs	r2, #64	; 0x40
 80004a6:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a8:	193b      	adds	r3, r7, r4
 80004aa:	2200      	movs	r2, #0
 80004ac:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	0018      	movs	r0, r3
 80004b2:	f001 fd2b 	bl	8001f0c <HAL_RCC_OscConfig>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004ba:	f000 f951 	bl	8000760 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004be:	211c      	movs	r1, #28
 80004c0:	187b      	adds	r3, r7, r1
 80004c2:	2207      	movs	r2, #7
 80004c4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004c6:	187b      	adds	r3, r7, r1
 80004c8:	2200      	movs	r2, #0
 80004ca:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004cc:	187b      	adds	r3, r7, r1
 80004ce:	2200      	movs	r2, #0
 80004d0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004d2:	187b      	adds	r3, r7, r1
 80004d4:	2200      	movs	r2, #0
 80004d6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2100      	movs	r1, #0
 80004dc:	0018      	movs	r0, r3
 80004de:	f002 f82b 	bl	8002538 <HAL_RCC_ClockConfig>
 80004e2:	1e03      	subs	r3, r0, #0
 80004e4:	d001      	beq.n	80004ea <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004e6:	f000 f93b 	bl	8000760 <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004ea:	003b      	movs	r3, r7
 80004ec:	2202      	movs	r2, #2
 80004ee:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004f0:	003b      	movs	r3, r7
 80004f2:	2200      	movs	r2, #0
 80004f4:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004f6:	003b      	movs	r3, r7
 80004f8:	0018      	movs	r0, r3
 80004fa:	f002 f9c7 	bl	800288c <HAL_RCCEx_PeriphCLKConfig>
 80004fe:	1e03      	subs	r3, r0, #0
 8000500:	d001      	beq.n	8000506 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000502:	f000 f92d 	bl	8000760 <Error_Handler>
  }
}
 8000506:	46c0      	nop			; (mov r8, r8)
 8000508:	46bd      	mov	sp, r7
 800050a:	b019      	add	sp, #100	; 0x64
 800050c:	bd90      	pop	{r4, r7, pc}
	...

08000510 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000514:	4b1b      	ldr	r3, [pc, #108]	; (8000584 <MX_SPI1_Init+0x74>)
 8000516:	4a1c      	ldr	r2, [pc, #112]	; (8000588 <MX_SPI1_Init+0x78>)
 8000518:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800051a:	4b1a      	ldr	r3, [pc, #104]	; (8000584 <MX_SPI1_Init+0x74>)
 800051c:	2282      	movs	r2, #130	; 0x82
 800051e:	0052      	lsls	r2, r2, #1
 8000520:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000522:	4b18      	ldr	r3, [pc, #96]	; (8000584 <MX_SPI1_Init+0x74>)
 8000524:	2200      	movs	r2, #0
 8000526:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000528:	4b16      	ldr	r3, [pc, #88]	; (8000584 <MX_SPI1_Init+0x74>)
 800052a:	22e0      	movs	r2, #224	; 0xe0
 800052c:	00d2      	lsls	r2, r2, #3
 800052e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000530:	4b14      	ldr	r3, [pc, #80]	; (8000584 <MX_SPI1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000536:	4b13      	ldr	r3, [pc, #76]	; (8000584 <MX_SPI1_Init+0x74>)
 8000538:	2200      	movs	r2, #0
 800053a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <MX_SPI1_Init+0x74>)
 800053e:	2280      	movs	r2, #128	; 0x80
 8000540:	02d2      	lsls	r2, r2, #11
 8000542:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <MX_SPI1_Init+0x74>)
 8000546:	2210      	movs	r2, #16
 8000548:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 800054a:	4b0e      	ldr	r3, [pc, #56]	; (8000584 <MX_SPI1_Init+0x74>)
 800054c:	2280      	movs	r2, #128	; 0x80
 800054e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000550:	4b0c      	ldr	r3, [pc, #48]	; (8000584 <MX_SPI1_Init+0x74>)
 8000552:	2200      	movs	r2, #0
 8000554:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000556:	4b0b      	ldr	r3, [pc, #44]	; (8000584 <MX_SPI1_Init+0x74>)
 8000558:	2200      	movs	r2, #0
 800055a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800055c:	4b09      	ldr	r3, [pc, #36]	; (8000584 <MX_SPI1_Init+0x74>)
 800055e:	2207      	movs	r2, #7
 8000560:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000562:	4b08      	ldr	r3, [pc, #32]	; (8000584 <MX_SPI1_Init+0x74>)
 8000564:	2200      	movs	r2, #0
 8000566:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000568:	4b06      	ldr	r3, [pc, #24]	; (8000584 <MX_SPI1_Init+0x74>)
 800056a:	2208      	movs	r2, #8
 800056c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800056e:	4b05      	ldr	r3, [pc, #20]	; (8000584 <MX_SPI1_Init+0x74>)
 8000570:	0018      	movs	r0, r3
 8000572:	f002 fac1 	bl	8002af8 <HAL_SPI_Init>
 8000576:	1e03      	subs	r3, r0, #0
 8000578:	d001      	beq.n	800057e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800057a:	f000 f8f1 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800057e:	46c0      	nop			; (mov r8, r8)
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	200011b8 	.word	0x200011b8
 8000588:	40013000 	.word	0x40013000

0800058c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000590:	4b23      	ldr	r3, [pc, #140]	; (8000620 <MX_USART2_UART_Init+0x94>)
 8000592:	4a24      	ldr	r2, [pc, #144]	; (8000624 <MX_USART2_UART_Init+0x98>)
 8000594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000596:	4b22      	ldr	r3, [pc, #136]	; (8000620 <MX_USART2_UART_Init+0x94>)
 8000598:	22e1      	movs	r2, #225	; 0xe1
 800059a:	0252      	lsls	r2, r2, #9
 800059c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800059e:	4b20      	ldr	r3, [pc, #128]	; (8000620 <MX_USART2_UART_Init+0x94>)
 80005a0:	2200      	movs	r2, #0
 80005a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005a4:	4b1e      	ldr	r3, [pc, #120]	; (8000620 <MX_USART2_UART_Init+0x94>)
 80005a6:	2200      	movs	r2, #0
 80005a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005aa:	4b1d      	ldr	r3, [pc, #116]	; (8000620 <MX_USART2_UART_Init+0x94>)
 80005ac:	2200      	movs	r2, #0
 80005ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005b0:	4b1b      	ldr	r3, [pc, #108]	; (8000620 <MX_USART2_UART_Init+0x94>)
 80005b2:	220c      	movs	r2, #12
 80005b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005b6:	4b1a      	ldr	r3, [pc, #104]	; (8000620 <MX_USART2_UART_Init+0x94>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005bc:	4b18      	ldr	r3, [pc, #96]	; (8000620 <MX_USART2_UART_Init+0x94>)
 80005be:	2200      	movs	r2, #0
 80005c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80005c2:	4b17      	ldr	r3, [pc, #92]	; (8000620 <MX_USART2_UART_Init+0x94>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80005c8:	4b15      	ldr	r3, [pc, #84]	; (8000620 <MX_USART2_UART_Init+0x94>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80005ce:	4b14      	ldr	r3, [pc, #80]	; (8000620 <MX_USART2_UART_Init+0x94>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80005d4:	4b12      	ldr	r3, [pc, #72]	; (8000620 <MX_USART2_UART_Init+0x94>)
 80005d6:	0018      	movs	r0, r3
 80005d8:	f002 fe92 	bl	8003300 <HAL_UART_Init>
 80005dc:	1e03      	subs	r3, r0, #0
 80005de:	d001      	beq.n	80005e4 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80005e0:	f000 f8be 	bl	8000760 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005e4:	4b0e      	ldr	r3, [pc, #56]	; (8000620 <MX_USART2_UART_Init+0x94>)
 80005e6:	2100      	movs	r1, #0
 80005e8:	0018      	movs	r0, r3
 80005ea:	f004 f8db 	bl	80047a4 <HAL_UARTEx_SetTxFifoThreshold>
 80005ee:	1e03      	subs	r3, r0, #0
 80005f0:	d001      	beq.n	80005f6 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80005f2:	f000 f8b5 	bl	8000760 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80005f6:	4b0a      	ldr	r3, [pc, #40]	; (8000620 <MX_USART2_UART_Init+0x94>)
 80005f8:	2100      	movs	r1, #0
 80005fa:	0018      	movs	r0, r3
 80005fc:	f004 f912 	bl	8004824 <HAL_UARTEx_SetRxFifoThreshold>
 8000600:	1e03      	subs	r3, r0, #0
 8000602:	d001      	beq.n	8000608 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000604:	f000 f8ac 	bl	8000760 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000608:	4b05      	ldr	r3, [pc, #20]	; (8000620 <MX_USART2_UART_Init+0x94>)
 800060a:	0018      	movs	r0, r3
 800060c:	f004 f890 	bl	8004730 <HAL_UARTEx_DisableFifoMode>
 8000610:	1e03      	subs	r3, r0, #0
 8000612:	d001      	beq.n	8000618 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000614:	f000 f8a4 	bl	8000760 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000618:	46c0      	nop			; (mov r8, r8)
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	2000121c 	.word	0x2000121c
 8000624:	40004400 	.word	0x40004400

08000628 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800062e:	4b0c      	ldr	r3, [pc, #48]	; (8000660 <MX_DMA_Init+0x38>)
 8000630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000632:	4b0b      	ldr	r3, [pc, #44]	; (8000660 <MX_DMA_Init+0x38>)
 8000634:	2101      	movs	r1, #1
 8000636:	430a      	orrs	r2, r1
 8000638:	639a      	str	r2, [r3, #56]	; 0x38
 800063a:	4b09      	ldr	r3, [pc, #36]	; (8000660 <MX_DMA_Init+0x38>)
 800063c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800063e:	2201      	movs	r2, #1
 8000640:	4013      	ands	r3, r2
 8000642:	607b      	str	r3, [r7, #4]
 8000644:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 3, 0);
 8000646:	2200      	movs	r2, #0
 8000648:	2103      	movs	r1, #3
 800064a:	2009      	movs	r0, #9
 800064c:	f000 ff78 	bl	8001540 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000650:	2009      	movs	r0, #9
 8000652:	f000 ff8a 	bl	800156a <HAL_NVIC_EnableIRQ>

}
 8000656:	46c0      	nop			; (mov r8, r8)
 8000658:	46bd      	mov	sp, r7
 800065a:	b002      	add	sp, #8
 800065c:	bd80      	pop	{r7, pc}
 800065e:	46c0      	nop			; (mov r8, r8)
 8000660:	40021000 	.word	0x40021000

08000664 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000664:	b590      	push	{r4, r7, lr}
 8000666:	b089      	sub	sp, #36	; 0x24
 8000668:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066a:	240c      	movs	r4, #12
 800066c:	193b      	adds	r3, r7, r4
 800066e:	0018      	movs	r0, r3
 8000670:	2314      	movs	r3, #20
 8000672:	001a      	movs	r2, r3
 8000674:	2100      	movs	r1, #0
 8000676:	f005 fe9e 	bl	80063b6 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067a:	4b31      	ldr	r3, [pc, #196]	; (8000740 <MX_GPIO_Init+0xdc>)
 800067c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800067e:	4b30      	ldr	r3, [pc, #192]	; (8000740 <MX_GPIO_Init+0xdc>)
 8000680:	2104      	movs	r1, #4
 8000682:	430a      	orrs	r2, r1
 8000684:	635a      	str	r2, [r3, #52]	; 0x34
 8000686:	4b2e      	ldr	r3, [pc, #184]	; (8000740 <MX_GPIO_Init+0xdc>)
 8000688:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800068a:	2204      	movs	r2, #4
 800068c:	4013      	ands	r3, r2
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000692:	4b2b      	ldr	r3, [pc, #172]	; (8000740 <MX_GPIO_Init+0xdc>)
 8000694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000696:	4b2a      	ldr	r3, [pc, #168]	; (8000740 <MX_GPIO_Init+0xdc>)
 8000698:	2120      	movs	r1, #32
 800069a:	430a      	orrs	r2, r1
 800069c:	635a      	str	r2, [r3, #52]	; 0x34
 800069e:	4b28      	ldr	r3, [pc, #160]	; (8000740 <MX_GPIO_Init+0xdc>)
 80006a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006a2:	2220      	movs	r2, #32
 80006a4:	4013      	ands	r3, r2
 80006a6:	607b      	str	r3, [r7, #4]
 80006a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006aa:	4b25      	ldr	r3, [pc, #148]	; (8000740 <MX_GPIO_Init+0xdc>)
 80006ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ae:	4b24      	ldr	r3, [pc, #144]	; (8000740 <MX_GPIO_Init+0xdc>)
 80006b0:	2101      	movs	r1, #1
 80006b2:	430a      	orrs	r2, r1
 80006b4:	635a      	str	r2, [r3, #52]	; 0x34
 80006b6:	4b22      	ldr	r3, [pc, #136]	; (8000740 <MX_GPIO_Init+0xdc>)
 80006b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006ba:	2201      	movs	r2, #1
 80006bc:	4013      	ands	r3, r2
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80006c2:	23a0      	movs	r3, #160	; 0xa0
 80006c4:	05db      	lsls	r3, r3, #23
 80006c6:	2200      	movs	r2, #0
 80006c8:	2120      	movs	r1, #32
 80006ca:	0018      	movs	r0, r3
 80006cc:	f001 fbb4 	bl	8001e38 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2280      	movs	r2, #128	; 0x80
 80006d4:	0192      	lsls	r2, r2, #6
 80006d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006d8:	193b      	adds	r3, r7, r4
 80006da:	2200      	movs	r2, #0
 80006dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006de:	193b      	adds	r3, r7, r4
 80006e0:	2200      	movs	r2, #0
 80006e2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006e4:	193b      	adds	r3, r7, r4
 80006e6:	4a17      	ldr	r2, [pc, #92]	; (8000744 <MX_GPIO_Init+0xe0>)
 80006e8:	0019      	movs	r1, r3
 80006ea:	0010      	movs	r0, r2
 80006ec:	f001 f970 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006f0:	193b      	adds	r3, r7, r4
 80006f2:	2201      	movs	r2, #1
 80006f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	4a13      	ldr	r2, [pc, #76]	; (8000748 <MX_GPIO_Init+0xe4>)
 80006fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80006fc:	193b      	adds	r3, r7, r4
 80006fe:	2201      	movs	r2, #1
 8000700:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000702:	193a      	adds	r2, r7, r4
 8000704:	23a0      	movs	r3, #160	; 0xa0
 8000706:	05db      	lsls	r3, r3, #23
 8000708:	0011      	movs	r1, r2
 800070a:	0018      	movs	r0, r3
 800070c:	f001 f960 	bl	80019d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000710:	0021      	movs	r1, r4
 8000712:	187b      	adds	r3, r7, r1
 8000714:	2220      	movs	r2, #32
 8000716:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	187b      	adds	r3, r7, r1
 800071a:	2201      	movs	r2, #1
 800071c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	187b      	adds	r3, r7, r1
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000724:	187b      	adds	r3, r7, r1
 8000726:	2200      	movs	r2, #0
 8000728:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	187a      	adds	r2, r7, r1
 800072c:	23a0      	movs	r3, #160	; 0xa0
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	0011      	movs	r1, r2
 8000732:	0018      	movs	r0, r3
 8000734:	f001 f94c 	bl	80019d0 <HAL_GPIO_Init>

}
 8000738:	46c0      	nop			; (mov r8, r8)
 800073a:	46bd      	mov	sp, r7
 800073c:	b009      	add	sp, #36	; 0x24
 800073e:	bd90      	pop	{r4, r7, pc}
 8000740:	40021000 	.word	0x40021000
 8000744:	50000800 	.word	0x50000800
 8000748:	10110000 	.word	0x10110000

0800074c <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
//		osDelay(500);
//		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
		osDelay(500);
 8000754:	23fa      	movs	r3, #250	; 0xfa
 8000756:	005b      	lsls	r3, r3, #1
 8000758:	0018      	movs	r0, r3
 800075a:	f004 f958 	bl	8004a0e <osDelay>
 800075e:	e7f9      	b.n	8000754 <StartDefaultTask+0x8>

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000764:	46c0      	nop			; (mov r8, r8)
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	4b12      	ldr	r3, [pc, #72]	; (80007bc <HAL_MspInit+0x50>)
 8000774:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <HAL_MspInit+0x50>)
 8000778:	2101      	movs	r1, #1
 800077a:	430a      	orrs	r2, r1
 800077c:	641a      	str	r2, [r3, #64]	; 0x40
 800077e:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <HAL_MspInit+0x50>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	2201      	movs	r2, #1
 8000784:	4013      	ands	r3, r2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078a:	4b0c      	ldr	r3, [pc, #48]	; (80007bc <HAL_MspInit+0x50>)
 800078c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800078e:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <HAL_MspInit+0x50>)
 8000790:	2180      	movs	r1, #128	; 0x80
 8000792:	0549      	lsls	r1, r1, #21
 8000794:	430a      	orrs	r2, r1
 8000796:	63da      	str	r2, [r3, #60]	; 0x3c
 8000798:	4b08      	ldr	r3, [pc, #32]	; (80007bc <HAL_MspInit+0x50>)
 800079a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800079c:	2380      	movs	r3, #128	; 0x80
 800079e:	055b      	lsls	r3, r3, #21
 80007a0:	4013      	ands	r3, r2
 80007a2:	603b      	str	r3, [r7, #0]
 80007a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80007a6:	2302      	movs	r3, #2
 80007a8:	425b      	negs	r3, r3
 80007aa:	2200      	movs	r2, #0
 80007ac:	2103      	movs	r1, #3
 80007ae:	0018      	movs	r0, r3
 80007b0:	f000 fec6 	bl	8001540 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b4:	46c0      	nop			; (mov r8, r8)
 80007b6:	46bd      	mov	sp, r7
 80007b8:	b002      	add	sp, #8
 80007ba:	bd80      	pop	{r7, pc}
 80007bc:	40021000 	.word	0x40021000

080007c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b08a      	sub	sp, #40	; 0x28
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c8:	2314      	movs	r3, #20
 80007ca:	18fb      	adds	r3, r7, r3
 80007cc:	0018      	movs	r0, r3
 80007ce:	2314      	movs	r3, #20
 80007d0:	001a      	movs	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	f005 fdef 	bl	80063b6 <memset>
  if(hspi->Instance==SPI1)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a34      	ldr	r2, [pc, #208]	; (80008b0 <HAL_SPI_MspInit+0xf0>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d161      	bne.n	80008a6 <HAL_SPI_MspInit+0xe6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80007e2:	4b34      	ldr	r3, [pc, #208]	; (80008b4 <HAL_SPI_MspInit+0xf4>)
 80007e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007e6:	4b33      	ldr	r3, [pc, #204]	; (80008b4 <HAL_SPI_MspInit+0xf4>)
 80007e8:	2180      	movs	r1, #128	; 0x80
 80007ea:	0149      	lsls	r1, r1, #5
 80007ec:	430a      	orrs	r2, r1
 80007ee:	641a      	str	r2, [r3, #64]	; 0x40
 80007f0:	4b30      	ldr	r3, [pc, #192]	; (80008b4 <HAL_SPI_MspInit+0xf4>)
 80007f2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80007f4:	2380      	movs	r3, #128	; 0x80
 80007f6:	015b      	lsls	r3, r3, #5
 80007f8:	4013      	ands	r3, r2
 80007fa:	613b      	str	r3, [r7, #16]
 80007fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007fe:	4b2d      	ldr	r3, [pc, #180]	; (80008b4 <HAL_SPI_MspInit+0xf4>)
 8000800:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000802:	4b2c      	ldr	r3, [pc, #176]	; (80008b4 <HAL_SPI_MspInit+0xf4>)
 8000804:	2101      	movs	r1, #1
 8000806:	430a      	orrs	r2, r1
 8000808:	635a      	str	r2, [r3, #52]	; 0x34
 800080a:	4b2a      	ldr	r3, [pc, #168]	; (80008b4 <HAL_SPI_MspInit+0xf4>)
 800080c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800080e:	2201      	movs	r2, #1
 8000810:	4013      	ands	r3, r2
 8000812:	60fb      	str	r3, [r7, #12]
 8000814:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> SPI1_SCK
    PA4     ------> SPI1_NSS
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 8000816:	2114      	movs	r1, #20
 8000818:	187b      	adds	r3, r7, r1
 800081a:	22d2      	movs	r2, #210	; 0xd2
 800081c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2202      	movs	r2, #2
 8000822:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2200      	movs	r2, #0
 8000828:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2200      	movs	r2, #0
 800082e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2200      	movs	r2, #0
 8000834:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	187a      	adds	r2, r7, r1
 8000838:	23a0      	movs	r3, #160	; 0xa0
 800083a:	05db      	lsls	r3, r3, #23
 800083c:	0011      	movs	r1, r2
 800083e:	0018      	movs	r0, r3
 8000840:	f001 f8c6 	bl	80019d0 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA1_Channel1;
 8000844:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <HAL_SPI_MspInit+0xf8>)
 8000846:	4a1d      	ldr	r2, [pc, #116]	; (80008bc <HAL_SPI_MspInit+0xfc>)
 8000848:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Request = DMA_REQUEST_SPI1_TX;
 800084a:	4b1b      	ldr	r3, [pc, #108]	; (80008b8 <HAL_SPI_MspInit+0xf8>)
 800084c:	2211      	movs	r2, #17
 800084e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000850:	4b19      	ldr	r3, [pc, #100]	; (80008b8 <HAL_SPI_MspInit+0xf8>)
 8000852:	2210      	movs	r2, #16
 8000854:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000856:	4b18      	ldr	r3, [pc, #96]	; (80008b8 <HAL_SPI_MspInit+0xf8>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800085c:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <HAL_SPI_MspInit+0xf8>)
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_SPI_MspInit+0xf8>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000868:	4b13      	ldr	r3, [pc, #76]	; (80008b8 <HAL_SPI_MspInit+0xf8>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_SPI_MspInit+0xf8>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000874:	4b10      	ldr	r3, [pc, #64]	; (80008b8 <HAL_SPI_MspInit+0xf8>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_SPI_MspInit+0xf8>)
 800087c:	0018      	movs	r0, r3
 800087e:	f000 fea1 	bl	80015c4 <HAL_DMA_Init>
 8000882:	1e03      	subs	r3, r0, #0
 8000884:	d001      	beq.n	800088a <HAL_SPI_MspInit+0xca>
    {
      Error_Handler();
 8000886:	f7ff ff6b 	bl	8000760 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi1_tx);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a0a      	ldr	r2, [pc, #40]	; (80008b8 <HAL_SPI_MspInit+0xf8>)
 800088e:	655a      	str	r2, [r3, #84]	; 0x54
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <HAL_SPI_MspInit+0xf8>)
 8000892:	687a      	ldr	r2, [r7, #4]
 8000894:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 3, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2103      	movs	r1, #3
 800089a:	2019      	movs	r0, #25
 800089c:	f000 fe50 	bl	8001540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80008a0:	2019      	movs	r0, #25
 80008a2:	f000 fe62 	bl	800156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	46bd      	mov	sp, r7
 80008aa:	b00a      	add	sp, #40	; 0x28
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	46c0      	nop			; (mov r8, r8)
 80008b0:	40013000 	.word	0x40013000
 80008b4:	40021000 	.word	0x40021000
 80008b8:	200012a8 	.word	0x200012a8
 80008bc:	40020008 	.word	0x40020008

080008c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b08a      	sub	sp, #40	; 0x28
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c8:	2314      	movs	r3, #20
 80008ca:	18fb      	adds	r3, r7, r3
 80008cc:	0018      	movs	r0, r3
 80008ce:	2314      	movs	r3, #20
 80008d0:	001a      	movs	r2, r3
 80008d2:	2100      	movs	r1, #0
 80008d4:	f005 fd6f 	bl	80063b6 <memset>
  if(huart->Instance==USART2)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a1f      	ldr	r2, [pc, #124]	; (800095c <HAL_UART_MspInit+0x9c>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	d138      	bne.n	8000954 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008e2:	4b1f      	ldr	r3, [pc, #124]	; (8000960 <HAL_UART_MspInit+0xa0>)
 80008e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008e6:	4b1e      	ldr	r3, [pc, #120]	; (8000960 <HAL_UART_MspInit+0xa0>)
 80008e8:	2180      	movs	r1, #128	; 0x80
 80008ea:	0289      	lsls	r1, r1, #10
 80008ec:	430a      	orrs	r2, r1
 80008ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80008f0:	4b1b      	ldr	r3, [pc, #108]	; (8000960 <HAL_UART_MspInit+0xa0>)
 80008f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008f4:	2380      	movs	r3, #128	; 0x80
 80008f6:	029b      	lsls	r3, r3, #10
 80008f8:	4013      	ands	r3, r2
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fe:	4b18      	ldr	r3, [pc, #96]	; (8000960 <HAL_UART_MspInit+0xa0>)
 8000900:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000902:	4b17      	ldr	r3, [pc, #92]	; (8000960 <HAL_UART_MspInit+0xa0>)
 8000904:	2101      	movs	r1, #1
 8000906:	430a      	orrs	r2, r1
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
 800090a:	4b15      	ldr	r3, [pc, #84]	; (8000960 <HAL_UART_MspInit+0xa0>)
 800090c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800090e:	2201      	movs	r2, #1
 8000910:	4013      	ands	r3, r2
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000916:	2114      	movs	r1, #20
 8000918:	187b      	adds	r3, r7, r1
 800091a:	220c      	movs	r2, #12
 800091c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800091e:	187b      	adds	r3, r7, r1
 8000920:	2202      	movs	r2, #2
 8000922:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	187b      	adds	r3, r7, r1
 8000926:	2200      	movs	r2, #0
 8000928:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2200      	movs	r2, #0
 800092e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2201      	movs	r2, #1
 8000934:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000936:	187a      	adds	r2, r7, r1
 8000938:	23a0      	movs	r3, #160	; 0xa0
 800093a:	05db      	lsls	r3, r3, #23
 800093c:	0011      	movs	r1, r2
 800093e:	0018      	movs	r0, r3
 8000940:	f001 f846 	bl	80019d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000944:	2200      	movs	r2, #0
 8000946:	2103      	movs	r1, #3
 8000948:	201c      	movs	r0, #28
 800094a:	f000 fdf9 	bl	8001540 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800094e:	201c      	movs	r0, #28
 8000950:	f000 fe0b 	bl	800156a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b00a      	add	sp, #40	; 0x28
 800095a:	bd80      	pop	{r7, pc}
 800095c:	40004400 	.word	0x40004400
 8000960:	40021000 	.word	0x40021000

08000964 <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	4a0a      	ldr	r2, [pc, #40]	; (800099c <HAL_UART_MspDeInit+0x38>)
 8000972:	4293      	cmp	r3, r2
 8000974:	d10e      	bne.n	8000994 <HAL_UART_MspDeInit+0x30>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8000976:	4b0a      	ldr	r3, [pc, #40]	; (80009a0 <HAL_UART_MspDeInit+0x3c>)
 8000978:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800097a:	4b09      	ldr	r3, [pc, #36]	; (80009a0 <HAL_UART_MspDeInit+0x3c>)
 800097c:	4909      	ldr	r1, [pc, #36]	; (80009a4 <HAL_UART_MspDeInit+0x40>)
 800097e:	400a      	ands	r2, r1
 8000980:	63da      	str	r2, [r3, #60]	; 0x3c
  
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8000982:	23a0      	movs	r3, #160	; 0xa0
 8000984:	05db      	lsls	r3, r3, #23
 8000986:	210c      	movs	r1, #12
 8000988:	0018      	movs	r0, r3
 800098a:	f001 f985 	bl	8001c98 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 800098e:	201c      	movs	r0, #28
 8000990:	f000 fdfb 	bl	800158a <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b002      	add	sp, #8
 800099a:	bd80      	pop	{r7, pc}
 800099c:	40004400 	.word	0x40004400
 80009a0:	40021000 	.word	0x40021000
 80009a4:	fffdffff 	.word	0xfffdffff

080009a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009ac:	46c0      	nop			; (mov r8, r8)
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009b2:	b580      	push	{r7, lr}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <HardFault_Handler+0x4>

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 fcda 	bl	8001374 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80009c0:	f005 f92c 	bl	8005c1c <xTaskGetSchedulerState>
 80009c4:	0003      	movs	r3, r0
 80009c6:	2b01      	cmp	r3, #1
 80009c8:	d001      	beq.n	80009ce <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80009ca:	f005 fae5 	bl	8005f98 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	46bd      	mov	sp, r7
 80009d2:	bd80      	pop	{r7, pc}

080009d4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80009d8:	4b03      	ldr	r3, [pc, #12]	; (80009e8 <DMA1_Channel1_IRQHandler+0x14>)
 80009da:	0018      	movs	r0, r3
 80009dc:	f000 fef6 	bl	80017cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009e0:	46c0      	nop			; (mov r8, r8)
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			; (mov r8, r8)
 80009e8:	200012a8 	.word	0x200012a8

080009ec <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80009f0:	4b03      	ldr	r3, [pc, #12]	; (8000a00 <SPI1_IRQHandler+0x14>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f002 f9ac 	bl	8002d50 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80009f8:	46c0      	nop			; (mov r8, r8)
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	200011b8 	.word	0x200011b8

08000a04 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a08:	4b03      	ldr	r3, [pc, #12]	; (8000a18 <USART2_IRQHandler+0x14>)
 8000a0a:	0018      	movs	r0, r3
 8000a0c:	f002 fda2 	bl	8003554 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a10:	46c0      	nop			; (mov r8, r8)
 8000a12:	46bd      	mov	sp, r7
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	46c0      	nop			; (mov r8, r8)
 8000a18:	2000121c 	.word	0x2000121c

08000a1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a20:	4b03      	ldr	r3, [pc, #12]	; (8000a30 <SystemInit+0x14>)
 8000a22:	2280      	movs	r2, #128	; 0x80
 8000a24:	0512      	lsls	r2, r2, #20
 8000a26:	609a      	str	r2, [r3, #8]
#endif
}
 8000a28:	46c0      	nop			; (mov r8, r8)
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	46c0      	nop			; (mov r8, r8)
 8000a30:	e000ed00 	.word	0xe000ed00

08000a34 <application>:

TaskHandle_t xHandle = NULL;


void application(void)
{
 8000a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a36:	b085      	sub	sp, #20
 8000a38:	af02      	add	r7, sp, #8
    volatile uint8_t i = 0;
 8000a3a:	1dfb      	adds	r3, r7, #7
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	701a      	strb	r2, [r3, #0]
    volatile uint8_t TaskStatus = 0;
 8000a40:	1dbb      	adds	r3, r7, #6
 8000a42:	2200      	movs	r2, #0
 8000a44:	701a      	strb	r2, [r3, #0]

    for( i = 0; i< MAXMUM_TASK; i++)
 8000a46:	1dfb      	adds	r3, r7, #7
 8000a48:	2200      	movs	r2, #0
 8000a4a:	701a      	strb	r2, [r3, #0]
 8000a4c:	e05e      	b.n	8000b0c <application+0xd8>
    {
        if( pdPASS !=  xTaskCreate(sysTask[i].vTaskfunPtr, sysTask[i].vTaskName, sysTask[i].stacksize, sysTask[i].VTaskparaeter, sysTask[i].VtaskPriority, sysTask[i].pxCreatedTask) )
 8000a4e:	1dfb      	adds	r3, r7, #7
 8000a50:	781b      	ldrb	r3, [r3, #0]
 8000a52:	b2db      	uxtb	r3, r3
 8000a54:	0019      	movs	r1, r3
 8000a56:	4a3f      	ldr	r2, [pc, #252]	; (8000b54 <application+0x120>)
 8000a58:	000b      	movs	r3, r1
 8000a5a:	00db      	lsls	r3, r3, #3
 8000a5c:	185b      	adds	r3, r3, r1
 8000a5e:	009b      	lsls	r3, r3, #2
 8000a60:	589c      	ldr	r4, [r3, r2]
 8000a62:	1dfb      	adds	r3, r7, #7
 8000a64:	781b      	ldrb	r3, [r3, #0]
 8000a66:	b2db      	uxtb	r3, r3
 8000a68:	001a      	movs	r2, r3
 8000a6a:	0013      	movs	r3, r2
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	189b      	adds	r3, r3, r2
 8000a70:	009b      	lsls	r3, r3, #2
 8000a72:	4a38      	ldr	r2, [pc, #224]	; (8000b54 <application+0x120>)
 8000a74:	189b      	adds	r3, r3, r2
 8000a76:	1d1d      	adds	r5, r3, #4
 8000a78:	1dfb      	adds	r3, r7, #7
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	0019      	movs	r1, r3
 8000a80:	4a34      	ldr	r2, [pc, #208]	; (8000b54 <application+0x120>)
 8000a82:	000b      	movs	r3, r1
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	185b      	adds	r3, r3, r1
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	18d3      	adds	r3, r2, r3
 8000a8c:	3314      	adds	r3, #20
 8000a8e:	881e      	ldrh	r6, [r3, #0]
 8000a90:	1dfb      	adds	r3, r7, #7
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	b2db      	uxtb	r3, r3
 8000a96:	0019      	movs	r1, r3
 8000a98:	4a2e      	ldr	r2, [pc, #184]	; (8000b54 <application+0x120>)
 8000a9a:	000b      	movs	r3, r1
 8000a9c:	00db      	lsls	r3, r3, #3
 8000a9e:	185b      	adds	r3, r3, r1
 8000aa0:	009b      	lsls	r3, r3, #2
 8000aa2:	18d3      	adds	r3, r2, r3
 8000aa4:	3318      	adds	r3, #24
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	469c      	mov	ip, r3
 8000aaa:	1dfb      	adds	r3, r7, #7
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	b2db      	uxtb	r3, r3
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	4a28      	ldr	r2, [pc, #160]	; (8000b54 <application+0x120>)
 8000ab4:	000b      	movs	r3, r1
 8000ab6:	00db      	lsls	r3, r3, #3
 8000ab8:	185b      	adds	r3, r3, r1
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	18d3      	adds	r3, r2, r3
 8000abe:	331c      	adds	r3, #28
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	1dfb      	adds	r3, r7, #7
 8000ac4:	781b      	ldrb	r3, [r3, #0]
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	0018      	movs	r0, r3
 8000aca:	4922      	ldr	r1, [pc, #136]	; (8000b54 <application+0x120>)
 8000acc:	0003      	movs	r3, r0
 8000ace:	00db      	lsls	r3, r3, #3
 8000ad0:	181b      	adds	r3, r3, r0
 8000ad2:	009b      	lsls	r3, r3, #2
 8000ad4:	18cb      	adds	r3, r1, r3
 8000ad6:	3320      	adds	r3, #32
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	9301      	str	r3, [sp, #4]
 8000adc:	9200      	str	r2, [sp, #0]
 8000ade:	4663      	mov	r3, ip
 8000ae0:	0032      	movs	r2, r6
 8000ae2:	0029      	movs	r1, r5
 8000ae4:	0020      	movs	r0, r4
 8000ae6:	f004 fbd8 	bl	800529a <xTaskCreate>
 8000aea:	0003      	movs	r3, r0
 8000aec:	2b01      	cmp	r3, #1
 8000aee:	d006      	beq.n	8000afe <application+0xca>
        {
            TaskStatus++;
 8000af0:	1dbb      	adds	r3, r7, #6
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	3301      	adds	r3, #1
 8000af8:	b2da      	uxtb	r2, r3
 8000afa:	1dbb      	adds	r3, r7, #6
 8000afc:	701a      	strb	r2, [r3, #0]
    for( i = 0; i< MAXMUM_TASK; i++)
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b2db      	uxtb	r3, r3
 8000b04:	3301      	adds	r3, #1
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	1dfb      	adds	r3, r7, #7
 8000b0a:	701a      	strb	r2, [r3, #0]
 8000b0c:	1dfb      	adds	r3, r7, #7
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	b2db      	uxtb	r3, r3
 8000b12:	2b02      	cmp	r3, #2
 8000b14:	d99b      	bls.n	8000a4e <application+0x1a>
        }
    }

    if( 0 != TaskStatus )       //!< If any of the task not created successfully, freeze here !
 8000b16:	1dbb      	adds	r3, r7, #6
 8000b18:	781b      	ldrb	r3, [r3, #0]
 8000b1a:	b2db      	uxtb	r3, r3
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d000      	beq.n	8000b22 <application+0xee>
    {
        while(1);
 8000b20:	e7fe      	b.n	8000b20 <application+0xec>
    }

    gKeyDetectQ = xQueueCreate( 3, sizeof(buttonReadStatus_t));    //!< 3 number of keys can stored inside.
 8000b22:	2200      	movs	r2, #0
 8000b24:	2114      	movs	r1, #20
 8000b26:	2003      	movs	r0, #3
 8000b28:	f004 f882 	bl	8004c30 <xQueueGenericCreate>
 8000b2c:	0002      	movs	r2, r0
 8000b2e:	4b0a      	ldr	r3, [pc, #40]	; (8000b58 <application+0x124>)
 8000b30:	601a      	str	r2, [r3, #0]
    if( NULL == gKeyDetectQ )
 8000b32:	4b09      	ldr	r3, [pc, #36]	; (8000b58 <application+0x124>)
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d100      	bne.n	8000b3c <application+0x108>
    {
        while(1);
 8000b3a:	e7fe      	b.n	8000b3a <application+0x106>
    }

    xMutexDebugUart = xSemaphoreCreateMutex();
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	f004 f8e5 	bl	8004d0c <xQueueCreateMutex>
 8000b42:	0002      	movs	r2, r0
 8000b44:	4b05      	ldr	r3, [pc, #20]	; (8000b5c <application+0x128>)
 8000b46:	601a      	str	r2, [r3, #0]
        // TURN ON ERROR LED;
    }


    /* Start scheduler */
    osKernelStart();
 8000b48:	f003 ff31 	bl	80049ae <osKernelStart>
}
 8000b4c:	46c0      	nop			; (mov r8, r8)
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	b003      	add	sp, #12
 8000b52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b54:	080064c8 	.word	0x080064c8
 8000b58:	20001304 	.word	0x20001304
 8000b5c:	20000060 	.word	0x20000060

08000b60 <buttonTask>:
 *Para1:- argument
 *Return:-N/A
 *Details:-  Main task body for button..
 **********************************************************************************/
void buttonTask(void const * argument)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
#ifdef MATRIX_KEYBOARD
    	keypadRead();
#endif

#ifdef EXTERNAL_CHIP_READ
    	externalchipkeyRead();
 8000b68:	f000 f804 	bl	8000b74 <externalchipkeyRead>
#endif


        vTaskDelay(KEY_POLLING_INTERVEL);
 8000b6c:	200a      	movs	r0, #10
 8000b6e:	f004 fcbb 	bl	80054e8 <vTaskDelay>
    	externalchipkeyRead();
 8000b72:	e7f9      	b.n	8000b68 <buttonTask+0x8>

08000b74 <externalchipkeyRead>:
 *Return:-N/A
 *Details:-  Read the Initialize the External GPIO expander Chip.
 *NOTE : THIS INITIALIZATION BLOCK MAY BE NEED CHANGE FOR DIFFERENT PLATFORM/DRIVER
 **********************************************************************************/
void externalchipkeyRead( void )
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0

	return;
 8000b78:	46c0      	nop			; (mov r8, r8)

}
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
	...

08000b80 <debugconsoleTask>:
uint8_t name[] = "Jithu...";

uint32_t number = 0;

void debugconsoleTask(void)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0


    if( ! debugConsoleInit() )
 8000b84:	f000 f842 	bl	8000c0c <debugConsoleInit>
 8000b88:	0003      	movs	r3, r0
 8000b8a:	001a      	movs	r2, r3
 8000b8c:	2301      	movs	r3, #1
 8000b8e:	4053      	eors	r3, r2
 8000b90:	b2db      	uxtb	r3, r3
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d000      	beq.n	8000b98 <debugconsoleTask+0x18>
    {
        while(1);           ///!< If uart initialization failed, don't run the task
 8000b96:	e7fe      	b.n	8000b96 <debugconsoleTask+0x16>
    }

    for (;;)
    {
        debugTextValue("\nNOW I CAN PRINT DECIMAL\t", number, DECIMAL );
 8000b98:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <debugconsoleTask+0x78>)
 8000b9a:	6819      	ldr	r1, [r3, #0]
 8000b9c:	4b17      	ldr	r3, [pc, #92]	; (8000bfc <debugconsoleTask+0x7c>)
 8000b9e:	220a      	movs	r2, #10
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	f000 f89f 	bl	8000ce4 <debugTextValue>
        vTaskDelay(10);
 8000ba6:	200a      	movs	r0, #10
 8000ba8:	f004 fc9e 	bl	80054e8 <vTaskDelay>
        debugTextValue("\nNOW I CAN PRINT HEX\t", number, HEX );
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <debugconsoleTask+0x78>)
 8000bae:	6819      	ldr	r1, [r3, #0]
 8000bb0:	4b13      	ldr	r3, [pc, #76]	; (8000c00 <debugconsoleTask+0x80>)
 8000bb2:	2210      	movs	r2, #16
 8000bb4:	0018      	movs	r0, r3
 8000bb6:	f000 f895 	bl	8000ce4 <debugTextValue>
        vTaskDelay(10);
 8000bba:	200a      	movs	r0, #10
 8000bbc:	f004 fc94 	bl	80054e8 <vTaskDelay>
        debugTextValue("\nNOW I CAN PRINT BINARY\t", number, BINARY );
 8000bc0:	4b0d      	ldr	r3, [pc, #52]	; (8000bf8 <debugconsoleTask+0x78>)
 8000bc2:	6819      	ldr	r1, [r3, #0]
 8000bc4:	4b0f      	ldr	r3, [pc, #60]	; (8000c04 <debugconsoleTask+0x84>)
 8000bc6:	2202      	movs	r2, #2
 8000bc8:	0018      	movs	r0, r3
 8000bca:	f000 f88b 	bl	8000ce4 <debugTextValue>
        number++;
 8000bce:	4b0a      	ldr	r3, [pc, #40]	; (8000bf8 <debugconsoleTask+0x78>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	1c5a      	adds	r2, r3, #1
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <debugconsoleTask+0x78>)
 8000bd6:	601a      	str	r2, [r3, #0]

    	if( HAL_UART_ERROR_NONE != HAL_UART_GetError(&huart2) )
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <debugconsoleTask+0x88>)
 8000bda:	0018      	movs	r0, r3
 8000bdc:	f002 fe3b 	bl	8003856 <HAL_UART_GetError>
 8000be0:	1e03      	subs	r3, r0, #0
 8000be2:	d005      	beq.n	8000bf0 <debugconsoleTask+0x70>
    	{
    		HAL_UART_DeInit(&huart2);
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <debugconsoleTask+0x88>)
 8000be6:	0018      	movs	r0, r3
 8000be8:	f002 fbe0 	bl	80033ac <HAL_UART_DeInit>
    		debugConsoleInit();
 8000bec:	f000 f80e 	bl	8000c0c <debugConsoleInit>
    	}

        vTaskDelay(200);
 8000bf0:	20c8      	movs	r0, #200	; 0xc8
 8000bf2:	f004 fc79 	bl	80054e8 <vTaskDelay>
        debugTextValue("\nNOW I CAN PRINT DECIMAL\t", number, DECIMAL );
 8000bf6:	e7cf      	b.n	8000b98 <debugconsoleTask+0x18>
 8000bf8:	20000068 	.word	0x20000068
 8000bfc:	08006400 	.word	0x08006400
 8000c00:	0800641c 	.word	0x0800641c
 8000c04:	08006434 	.word	0x08006434
 8000c08:	2000121c 	.word	0x2000121c

08000c0c <debugConsoleInit>:
 *Para1:- N/A
 *Return:-N/A
 *Details:-  Initialize the uart used for debug.
 **********************************************************************************/
static bool debugConsoleInit( void )
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0

    bool returnValue = true;
 8000c12:	1dfb      	adds	r3, r7, #7
 8000c14:	2201      	movs	r2, #1
 8000c16:	701a      	strb	r2, [r3, #0]
     /* USER CODE END USART2_Init  */
     huart2.Instance = USART2;
 8000c18:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <debugConsoleInit+0x78>)
 8000c1a:	4a1b      	ldr	r2, [pc, #108]	; (8000c88 <debugConsoleInit+0x7c>)
 8000c1c:	601a      	str	r2, [r3, #0]
     huart2.Init.BaudRate = 115200;
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <debugConsoleInit+0x78>)
 8000c20:	22e1      	movs	r2, #225	; 0xe1
 8000c22:	0252      	lsls	r2, r2, #9
 8000c24:	605a      	str	r2, [r3, #4]
     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c26:	4b17      	ldr	r3, [pc, #92]	; (8000c84 <debugConsoleInit+0x78>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	609a      	str	r2, [r3, #8]
     huart2.Init.StopBits = UART_STOPBITS_1;
 8000c2c:	4b15      	ldr	r3, [pc, #84]	; (8000c84 <debugConsoleInit+0x78>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	60da      	str	r2, [r3, #12]
     huart2.Init.Parity = UART_PARITY_NONE;
 8000c32:	4b14      	ldr	r3, [pc, #80]	; (8000c84 <debugConsoleInit+0x78>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	611a      	str	r2, [r3, #16]
     huart2.Init.Mode = UART_MODE_TX_RX;
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <debugConsoleInit+0x78>)
 8000c3a:	220c      	movs	r2, #12
 8000c3c:	615a      	str	r2, [r3, #20]
     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c3e:	4b11      	ldr	r3, [pc, #68]	; (8000c84 <debugConsoleInit+0x78>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c44:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <debugConsoleInit+0x78>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	61da      	str	r2, [r3, #28]
     if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <debugConsoleInit+0x78>)
 8000c4c:	0018      	movs	r0, r3
 8000c4e:	f002 fb57 	bl	8003300 <HAL_UART_Init>
 8000c52:	1e03      	subs	r3, r0, #0
 8000c54:	d003      	beq.n	8000c5e <debugConsoleInit+0x52>
     {
         returnValue = false;
 8000c56:	1dfb      	adds	r3, r7, #7
 8000c58:	2200      	movs	r2, #0
 8000c5a:	701a      	strb	r2, [r3, #0]
 8000c5c:	e007      	b.n	8000c6e <debugConsoleInit+0x62>
       // Error_Handler(); NEED TO ADD error handling function.
     }else
     {
         __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <debugConsoleInit+0x78>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	4b07      	ldr	r3, [pc, #28]	; (8000c84 <debugConsoleInit+0x78>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	2140      	movs	r1, #64	; 0x40
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	601a      	str	r2, [r3, #0]
     }



     mDebugConInit = returnValue;
 8000c6e:	4b07      	ldr	r3, [pc, #28]	; (8000c8c <debugConsoleInit+0x80>)
 8000c70:	1dfa      	adds	r2, r7, #7
 8000c72:	7812      	ldrb	r2, [r2, #0]
 8000c74:	701a      	strb	r2, [r3, #0]
     return ( returnValue );
 8000c76:	1dfb      	adds	r3, r7, #7
 8000c78:	781b      	ldrb	r3, [r3, #0]

}
 8000c7a:	0018      	movs	r0, r3
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	b002      	add	sp, #8
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	2000121c 	.word	0x2000121c
 8000c88:	40004400 	.word	0x40004400
 8000c8c:	20000064 	.word	0x20000064

08000c90 <debugText>:
 *Para1:- debugMsg
 *Return:-N/A
 *Details:-
 **********************************************************************************/
bool debugText( const char *debugMsg )
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	b084      	sub	sp, #16
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	6078      	str	r0, [r7, #4]
    char *msg =(char*) debugMsg;
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	60bb      	str	r3, [r7, #8]
    bool returnValue = false;
 8000c9c:	230f      	movs	r3, #15
 8000c9e:	18fb      	adds	r3, r7, r3
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]

    if( mDebugConInit )
 8000ca4:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <debugText+0x4c>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d010      	beq.n	8000cce <debugText+0x3e>
    {
        if( HAL_OK == HAL_UART_Transmit_IT(&huart2, (uint8_t *)msg, strlen(msg)) )
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff fa2a 	bl	8000108 <strlen>
 8000cb4:	0003      	movs	r3, r0
 8000cb6:	b29a      	uxth	r2, r3
 8000cb8:	68b9      	ldr	r1, [r7, #8]
 8000cba:	4b09      	ldr	r3, [pc, #36]	; (8000ce0 <debugText+0x50>)
 8000cbc:	0018      	movs	r0, r3
 8000cbe:	f002 fbaf 	bl	8003420 <HAL_UART_Transmit_IT>
 8000cc2:	1e03      	subs	r3, r0, #0
 8000cc4:	d103      	bne.n	8000cce <debugText+0x3e>
        {
            returnValue = true;
 8000cc6:	230f      	movs	r3, #15
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	2201      	movs	r2, #1
 8000ccc:	701a      	strb	r2, [r3, #0]
        }
    }

    return ( returnValue );
 8000cce:	230f      	movs	r3, #15
 8000cd0:	18fb      	adds	r3, r7, r3
 8000cd2:	781b      	ldrb	r3, [r3, #0]
}
 8000cd4:	0018      	movs	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	b004      	add	sp, #16
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20000064 	.word	0x20000064
 8000ce0:	2000121c 	.word	0x2000121c

08000ce4 <debugTextValue>:
 *Para3:- baseValue
 *Return:-N/A
 *Details:-
 **********************************************************************************/
bool debugTextValue( const char *debugMsg, uint32_t value, uint8_t baseValue )
{
 8000ce4:	b590      	push	{r4, r7, lr}
 8000ce6:	b087      	sub	sp, #28
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	701a      	strb	r2, [r3, #0]
    bool returnValue = false;
 8000cf2:	2117      	movs	r1, #23
 8000cf4:	187b      	adds	r3, r7, r1
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	701a      	strb	r2, [r3, #0]

    returnValue = debugText( debugMsg );
 8000cfa:	187c      	adds	r4, r7, r1
 8000cfc:	68fb      	ldr	r3, [r7, #12]
 8000cfe:	0018      	movs	r0, r3
 8000d00:	f7ff ffc6 	bl	8000c90 <debugText>
 8000d04:	0003      	movs	r3, r0
 8000d06:	7023      	strb	r3, [r4, #0]

    while(   HAL_UART_STATE_READY != HAL_UART_GetState(&huart2) );
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	4b0c      	ldr	r3, [pc, #48]	; (8000d3c <debugTextValue+0x58>)
 8000d0c:	0018      	movs	r0, r3
 8000d0e:	f002 fd8f 	bl	8003830 <HAL_UART_GetState>
 8000d12:	0003      	movs	r3, r0
 8000d14:	2b20      	cmp	r3, #32
 8000d16:	d1f8      	bne.n	8000d0a <debugTextValue+0x26>

    IntToText(value, baseValue, tempBuff);
 8000d18:	4a09      	ldr	r2, [pc, #36]	; (8000d40 <debugTextValue+0x5c>)
 8000d1a:	1dfb      	adds	r3, r7, #7
 8000d1c:	7819      	ldrb	r1, [r3, #0]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	0018      	movs	r0, r3
 8000d22:	f000 f80f 	bl	8000d44 <IntToText>
    debugText( tempBuff );
 8000d26:	4b06      	ldr	r3, [pc, #24]	; (8000d40 <debugTextValue+0x5c>)
 8000d28:	0018      	movs	r0, r3
 8000d2a:	f7ff ffb1 	bl	8000c90 <debugText>

    return returnValue;
 8000d2e:	2317      	movs	r3, #23
 8000d30:	18fb      	adds	r3, r7, r3
 8000d32:	781b      	ldrb	r3, [r3, #0]
}
 8000d34:	0018      	movs	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	b007      	add	sp, #28
 8000d3a:	bd90      	pop	{r4, r7, pc}
 8000d3c:	2000121c 	.word	0x2000121c
 8000d40:	20000004 	.word	0x20000004

08000d44 <IntToText>:
 *Para3:- str  ( pointer to buffer )
 *Return:-N/A
 *Details:-
 **********************************************************************************/
bool IntToText(uint32_t value, uint8_t base, char * str )
{
 8000d44:	b590      	push	{r4, r7, lr}
 8000d46:	b089      	sub	sp, #36	; 0x24
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	607a      	str	r2, [r7, #4]
 8000d4e:	230b      	movs	r3, #11
 8000d50:	18fb      	adds	r3, r7, r3
 8000d52:	1c0a      	adds	r2, r1, #0
 8000d54:	701a      	strb	r2, [r3, #0]
    uint32_t temp = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	617b      	str	r3, [r7, #20]
    uint8_t i = 0;
 8000d5a:	231f      	movs	r3, #31
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
    uint32_t division = value;
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	61bb      	str	r3, [r7, #24]

    if( 0 == division )
 8000d66:	69bb      	ldr	r3, [r7, #24]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d14c      	bne.n	8000e06 <IntToText+0xc2>
    {
        *(str+i++) = temp|0x30;
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	241f      	movs	r4, #31
 8000d72:	193b      	adds	r3, r7, r4
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	1939      	adds	r1, r7, r4
 8000d78:	1c58      	adds	r0, r3, #1
 8000d7a:	7008      	strb	r0, [r1, #0]
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	185b      	adds	r3, r3, r1
 8000d82:	2130      	movs	r1, #48	; 0x30
 8000d84:	430a      	orrs	r2, r1
 8000d86:	b2d2      	uxtb	r2, r2
 8000d88:	701a      	strb	r2, [r3, #0]
        *(str+i) = '\0';
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	781b      	ldrb	r3, [r3, #0]
 8000d8e:	687a      	ldr	r2, [r7, #4]
 8000d90:	18d3      	adds	r3, r2, r3
 8000d92:	2200      	movs	r2, #0
 8000d94:	701a      	strb	r2, [r3, #0]
 8000d96:	e090      	b.n	8000eba <IntToText+0x176>
    }else
    {
        while ( 0 != division )
        {
            temp = division%base;
 8000d98:	240b      	movs	r4, #11
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	781a      	ldrb	r2, [r3, #0]
 8000d9e:	69bb      	ldr	r3, [r7, #24]
 8000da0:	0011      	movs	r1, r2
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fa3e 	bl	8000224 <__aeabi_uidivmod>
 8000da8:	000b      	movs	r3, r1
 8000daa:	617b      	str	r3, [r7, #20]
            division /= base;
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	0019      	movs	r1, r3
 8000db2:	69b8      	ldr	r0, [r7, #24]
 8000db4:	f7ff f9b0 	bl	8000118 <__udivsi3>
 8000db8:	0003      	movs	r3, r0
 8000dba:	61bb      	str	r3, [r7, #24]

            if( ( base == HEX ) && (temp >= DECIMAL) )
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	2b10      	cmp	r3, #16
 8000dc2:	d111      	bne.n	8000de8 <IntToText+0xa4>
 8000dc4:	697b      	ldr	r3, [r7, #20]
 8000dc6:	2b09      	cmp	r3, #9
 8000dc8:	d90e      	bls.n	8000de8 <IntToText+0xa4>
            {
                *(str+i++) = (temp - DECIMAL ) + 'A';
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	b2da      	uxtb	r2, r3
 8000dce:	211f      	movs	r1, #31
 8000dd0:	187b      	adds	r3, r7, r1
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	1879      	adds	r1, r7, r1
 8000dd6:	1c58      	adds	r0, r3, #1
 8000dd8:	7008      	strb	r0, [r1, #0]
 8000dda:	0019      	movs	r1, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	185b      	adds	r3, r3, r1
 8000de0:	3237      	adds	r2, #55	; 0x37
 8000de2:	b2d2      	uxtb	r2, r2
 8000de4:	701a      	strb	r2, [r3, #0]
 8000de6:	e00e      	b.n	8000e06 <IntToText+0xc2>
             }
            else
            {
                *(str+i++) = temp|0x30;
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	211f      	movs	r1, #31
 8000dee:	187b      	adds	r3, r7, r1
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	1879      	adds	r1, r7, r1
 8000df4:	1c58      	adds	r0, r3, #1
 8000df6:	7008      	strb	r0, [r1, #0]
 8000df8:	0019      	movs	r1, r3
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	185b      	adds	r3, r3, r1
 8000dfe:	2130      	movs	r1, #48	; 0x30
 8000e00:	430a      	orrs	r2, r1
 8000e02:	b2d2      	uxtb	r2, r2
 8000e04:	701a      	strb	r2, [r3, #0]
        while ( 0 != division )
 8000e06:	69bb      	ldr	r3, [r7, #24]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d1c5      	bne.n	8000d98 <IntToText+0x54>
            }
        }
       	if( base == HEX )
 8000e0c:	230b      	movs	r3, #11
 8000e0e:	18fb      	adds	r3, r7, r3
 8000e10:	781b      	ldrb	r3, [r3, #0]
 8000e12:	2b10      	cmp	r3, #16
 8000e14:	d11f      	bne.n	8000e56 <IntToText+0x112>
		{
			*(str+i++) = 'x';
 8000e16:	201f      	movs	r0, #31
 8000e18:	183b      	adds	r3, r7, r0
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	183a      	adds	r2, r7, r0
 8000e1e:	1c59      	adds	r1, r3, #1
 8000e20:	7011      	strb	r1, [r2, #0]
 8000e22:	001a      	movs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	189b      	adds	r3, r3, r2
 8000e28:	2278      	movs	r2, #120	; 0x78
 8000e2a:	701a      	strb	r2, [r3, #0]
			*(str+i++) = '0';
 8000e2c:	183b      	adds	r3, r7, r0
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	183a      	adds	r2, r7, r0
 8000e32:	1c59      	adds	r1, r3, #1
 8000e34:	7011      	strb	r1, [r2, #0]
 8000e36:	001a      	movs	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	189b      	adds	r3, r3, r2
 8000e3c:	2230      	movs	r2, #48	; 0x30
 8000e3e:	701a      	strb	r2, [r3, #0]
			*(str+i++) = ' ';
 8000e40:	183b      	adds	r3, r7, r0
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	183a      	adds	r2, r7, r0
 8000e46:	1c59      	adds	r1, r3, #1
 8000e48:	7011      	strb	r1, [r2, #0]
 8000e4a:	001a      	movs	r2, r3
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	189b      	adds	r3, r3, r2
 8000e50:	2220      	movs	r2, #32
 8000e52:	701a      	strb	r2, [r3, #0]
 8000e54:	e023      	b.n	8000e9e <IntToText+0x15a>
		}else if( base == BINARY )
 8000e56:	230b      	movs	r3, #11
 8000e58:	18fb      	adds	r3, r7, r3
 8000e5a:	781b      	ldrb	r3, [r3, #0]
 8000e5c:	2b02      	cmp	r3, #2
 8000e5e:	d11e      	bne.n	8000e9e <IntToText+0x15a>
		{
			*(str+i++) = '.';
 8000e60:	201f      	movs	r0, #31
 8000e62:	183b      	adds	r3, r7, r0
 8000e64:	781b      	ldrb	r3, [r3, #0]
 8000e66:	183a      	adds	r2, r7, r0
 8000e68:	1c59      	adds	r1, r3, #1
 8000e6a:	7011      	strb	r1, [r2, #0]
 8000e6c:	001a      	movs	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	189b      	adds	r3, r3, r2
 8000e72:	222e      	movs	r2, #46	; 0x2e
 8000e74:	701a      	strb	r2, [r3, #0]
			*(str+i++) = 'b';
 8000e76:	183b      	adds	r3, r7, r0
 8000e78:	781b      	ldrb	r3, [r3, #0]
 8000e7a:	183a      	adds	r2, r7, r0
 8000e7c:	1c59      	adds	r1, r3, #1
 8000e7e:	7011      	strb	r1, [r2, #0]
 8000e80:	001a      	movs	r2, r3
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	189b      	adds	r3, r3, r2
 8000e86:	2262      	movs	r2, #98	; 0x62
 8000e88:	701a      	strb	r2, [r3, #0]
			*(str+i++) = ' ';
 8000e8a:	183b      	adds	r3, r7, r0
 8000e8c:	781b      	ldrb	r3, [r3, #0]
 8000e8e:	183a      	adds	r2, r7, r0
 8000e90:	1c59      	adds	r1, r3, #1
 8000e92:	7011      	strb	r1, [r2, #0]
 8000e94:	001a      	movs	r2, r3
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	189b      	adds	r3, r3, r2
 8000e9a:	2220      	movs	r2, #32
 8000e9c:	701a      	strb	r2, [r3, #0]
		}


        *(str+i) = '\0';
 8000e9e:	211f      	movs	r1, #31
 8000ea0:	187b      	adds	r3, r7, r1
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	687a      	ldr	r2, [r7, #4]
 8000ea6:	18d3      	adds	r3, r2, r3
 8000ea8:	2200      	movs	r2, #0
 8000eaa:	701a      	strb	r2, [r3, #0]
        reverseStr(str, i);
 8000eac:	187b      	adds	r3, r7, r1
 8000eae:	781a      	ldrb	r2, [r3, #0]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f000 f805 	bl	8000ec4 <reverseStr>
    }


    return true;
 8000eba:	2301      	movs	r3, #1
}
 8000ebc:	0018      	movs	r0, r3
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b009      	add	sp, #36	; 0x24
 8000ec2:	bd90      	pop	{r4, r7, pc}

08000ec4 <reverseStr>:
 *Para2:- size of the string.
 *Return:-N/A
 *Details:-
 **********************************************************************************/
void reverseStr(char *str, uint8_t size)
{
 8000ec4:	b590      	push	{r4, r7, lr}
 8000ec6:	b085      	sub	sp, #20
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
 8000ecc:	000a      	movs	r2, r1
 8000ece:	1cfb      	adds	r3, r7, #3
 8000ed0:	701a      	strb	r2, [r3, #0]
    uint8_t i = size-1;
 8000ed2:	210f      	movs	r1, #15
 8000ed4:	187b      	adds	r3, r7, r1
 8000ed6:	1cfa      	adds	r2, r7, #3
 8000ed8:	7812      	ldrb	r2, [r2, #0]
 8000eda:	3a01      	subs	r2, #1
 8000edc:	701a      	strb	r2, [r3, #0]
    uint8_t j = 0;
 8000ede:	230e      	movs	r3, #14
 8000ee0:	18fb      	adds	r3, r7, r3
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
    uint8_t temp = i;
 8000ee6:	230d      	movs	r3, #13
 8000ee8:	18fb      	adds	r3, r7, r3
 8000eea:	187a      	adds	r2, r7, r1
 8000eec:	7812      	ldrb	r2, [r2, #0]
 8000eee:	701a      	strb	r2, [r3, #0]

    do
    {
        temp     = *(str+j);
 8000ef0:	210e      	movs	r1, #14
 8000ef2:	187b      	adds	r3, r7, r1
 8000ef4:	781b      	ldrb	r3, [r3, #0]
 8000ef6:	687a      	ldr	r2, [r7, #4]
 8000ef8:	18d2      	adds	r2, r2, r3
 8000efa:	240d      	movs	r4, #13
 8000efc:	193b      	adds	r3, r7, r4
 8000efe:	7812      	ldrb	r2, [r2, #0]
 8000f00:	701a      	strb	r2, [r3, #0]
        *(str+j) = *(str+i);
 8000f02:	200f      	movs	r0, #15
 8000f04:	183b      	adds	r3, r7, r0
 8000f06:	781b      	ldrb	r3, [r3, #0]
 8000f08:	687a      	ldr	r2, [r7, #4]
 8000f0a:	18d2      	adds	r2, r2, r3
 8000f0c:	187b      	adds	r3, r7, r1
 8000f0e:	781b      	ldrb	r3, [r3, #0]
 8000f10:	6879      	ldr	r1, [r7, #4]
 8000f12:	18cb      	adds	r3, r1, r3
 8000f14:	7812      	ldrb	r2, [r2, #0]
 8000f16:	701a      	strb	r2, [r3, #0]
        *(str+i) = temp;
 8000f18:	183b      	adds	r3, r7, r0
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	687a      	ldr	r2, [r7, #4]
 8000f1e:	18d3      	adds	r3, r2, r3
 8000f20:	193a      	adds	r2, r7, r4
 8000f22:	7812      	ldrb	r2, [r2, #0]
 8000f24:	701a      	strb	r2, [r3, #0]
        if( i == 0 ) break;		//!<  NEED TO FIND A BETTER WAY TO HANDLE THE UNDERFLOW !
 8000f26:	183b      	adds	r3, r7, r0
 8000f28:	781b      	ldrb	r3, [r3, #0]
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d018      	beq.n	8000f60 <reverseStr+0x9c>
        i = i-1;
 8000f2e:	210f      	movs	r1, #15
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	187a      	adds	r2, r7, r1
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	3a01      	subs	r2, #1
 8000f38:	701a      	strb	r2, [r3, #0]
        j = j +1;
 8000f3a:	200e      	movs	r0, #14
 8000f3c:	183b      	adds	r3, r7, r0
 8000f3e:	183a      	adds	r2, r7, r0
 8000f40:	7812      	ldrb	r2, [r2, #0]
 8000f42:	3201      	adds	r2, #1
 8000f44:	701a      	strb	r2, [r3, #0]
        temp = (unsigned char) i/2;
 8000f46:	230d      	movs	r3, #13
 8000f48:	18fb      	adds	r3, r7, r3
 8000f4a:	187a      	adds	r2, r7, r1
 8000f4c:	7812      	ldrb	r2, [r2, #0]
 8000f4e:	0852      	lsrs	r2, r2, #1
 8000f50:	701a      	strb	r2, [r3, #0]
    }while( i > j );
 8000f52:	187a      	adds	r2, r7, r1
 8000f54:	183b      	adds	r3, r7, r0
 8000f56:	7812      	ldrb	r2, [r2, #0]
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	429a      	cmp	r2, r3
 8000f5c:	d8c8      	bhi.n	8000ef0 <reverseStr+0x2c>

}
 8000f5e:	e000      	b.n	8000f62 <reverseStr+0x9e>
        if( i == 0 ) break;		//!<  NEED TO FIND A BETTER WAY TO HANDLE THE UNDERFLOW !
 8000f60:	46c0      	nop			; (mov r8, r8)
}
 8000f62:	46c0      	nop			; (mov r8, r8)
 8000f64:	46bd      	mov	sp, r7
 8000f66:	b005      	add	sp, #20
 8000f68:	bd90      	pop	{r4, r7, pc}
	...

08000f6c <ledTask>:
/*@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@*/

keyMsgData_t mkeyDetectedPtr;

void ledTask(void const * argument)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
    static char status = 0;
    (void) argument;            //!< Just ignore the parameter.

    intLed();               //!< Initialize Led
 8000f74:	f000 f82a 	bl	8000fcc <intLed>
    intLedStrip();
 8000f78:	f000 f8b6 	bl	80010e8 <intLedStrip>


  for(;;)
  {
      while( 0 != uxQueueMessagesWaiting( gKeyDetectQ ))
 8000f7c:	e018      	b.n	8000fb0 <ledTask+0x44>
      {
          if( pdPASS == xQueueReceive( gKeyDetectQ, &mkeyDetectedPtr, 0) )
 8000f7e:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <ledTask+0x54>)
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	4910      	ldr	r1, [pc, #64]	; (8000fc4 <ledTask+0x58>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	0018      	movs	r0, r3
 8000f88:	f003 ffa0 	bl	8004ecc <xQueueReceive>
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	2b01      	cmp	r3, #1
 8000f90:	d10e      	bne.n	8000fb0 <ledTask+0x44>
          {

              if( 0 == status )
 8000f92:	4b0d      	ldr	r3, [pc, #52]	; (8000fc8 <ledTask+0x5c>)
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d105      	bne.n	8000fa6 <ledTask+0x3a>
              {
                  status = 1;
 8000f9a:	4b0b      	ldr	r3, [pc, #44]	; (8000fc8 <ledTask+0x5c>)
 8000f9c:	2201      	movs	r2, #1
 8000f9e:	701a      	strb	r2, [r3, #0]
                  ledTurnOnAll();
 8000fa0:	f000 f842 	bl	8001028 <ledTurnOnAll>
 8000fa4:	e004      	b.n	8000fb0 <ledTask+0x44>
              }else
              {
                  status = 0;
 8000fa6:	4b08      	ldr	r3, [pc, #32]	; (8000fc8 <ledTask+0x5c>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	701a      	strb	r2, [r3, #0]
                  ledTurnOffAll();
 8000fac:	f000 f86c 	bl	8001088 <ledTurnOffAll>
      while( 0 != uxQueueMessagesWaiting( gKeyDetectQ ))
 8000fb0:	4b03      	ldr	r3, [pc, #12]	; (8000fc0 <ledTask+0x54>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	0018      	movs	r0, r3
 8000fb6:	f004 f83e 	bl	8005036 <uxQueueMessagesWaiting>
 8000fba:	1e03      	subs	r3, r0, #0
 8000fbc:	d1df      	bne.n	8000f7e <ledTask+0x12>
 8000fbe:	e7f7      	b.n	8000fb0 <ledTask+0x44>
 8000fc0:	20001304 	.word	0x20001304
 8000fc4:	20001308 	.word	0x20001308
 8000fc8:	2000006c 	.word	0x2000006c

08000fcc <intLed>:
 *Para1 :N/A
 *Return:N/A
 *Note: Initialize all LED pins configured on 'led' structure.
 ************************************************************************************/
void intLed(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b082      	sub	sp, #8
 8000fd0:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8000fd2:	1dfb      	adds	r3, r7, #7
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]

    for ( i = 0; i < MAXIMUM_LED; i++ )
 8000fd8:	1dfb      	adds	r3, r7, #7
 8000fda:	2200      	movs	r2, #0
 8000fdc:	701a      	strb	r2, [r3, #0]
 8000fde:	e018      	b.n	8001012 <intLed+0x46>
    {
        PIN_INIT( (led[ i ].port), &(led[i].pinConfig));      //!< Macro defined in buttonWrapper.h. May be need to change if required.
 8000fe0:	1dfb      	adds	r3, r7, #7
 8000fe2:	781a      	ldrb	r2, [r3, #0]
 8000fe4:	490f      	ldr	r1, [pc, #60]	; (8001024 <intLed+0x58>)
 8000fe6:	0013      	movs	r3, r2
 8000fe8:	00db      	lsls	r3, r3, #3
 8000fea:	1a9b      	subs	r3, r3, r2
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	5858      	ldr	r0, [r3, r1]
 8000ff0:	1dfb      	adds	r3, r7, #7
 8000ff2:	781a      	ldrb	r2, [r3, #0]
 8000ff4:	0013      	movs	r3, r2
 8000ff6:	00db      	lsls	r3, r3, #3
 8000ff8:	1a9b      	subs	r3, r3, r2
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	4a09      	ldr	r2, [pc, #36]	; (8001024 <intLed+0x58>)
 8000ffe:	189b      	adds	r3, r3, r2
 8001000:	3304      	adds	r3, #4
 8001002:	0019      	movs	r1, r3
 8001004:	f000 fce4 	bl	80019d0 <HAL_GPIO_Init>
    for ( i = 0; i < MAXIMUM_LED; i++ )
 8001008:	1dfb      	adds	r3, r7, #7
 800100a:	781a      	ldrb	r2, [r3, #0]
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	3201      	adds	r2, #1
 8001010:	701a      	strb	r2, [r3, #0]
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	781b      	ldrb	r3, [r3, #0]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0e2      	beq.n	8000fe0 <intLed+0x14>
    }
}
 800101a:	46c0      	nop			; (mov r8, r8)
 800101c:	46bd      	mov	sp, r7
 800101e:	b002      	add	sp, #8
 8001020:	bd80      	pop	{r7, pc}
 8001022:	46c0      	nop			; (mov r8, r8)
 8001024:	08006534 	.word	0x08006534

08001028 <ledTurnOnAll>:
 *Para1 :N/A
 *Return:N/A
 *Note: Turn ON all LEDs
 ************************************************************************************/
void ledTurnOnAll( void )
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 800102e:	1dfb      	adds	r3, r7, #7
 8001030:	2200      	movs	r2, #0
 8001032:	701a      	strb	r2, [r3, #0]

    for ( i = 0; i < MAXIMUM_LED; i++ )
 8001034:	1dfb      	adds	r3, r7, #7
 8001036:	2200      	movs	r2, #0
 8001038:	701a      	strb	r2, [r3, #0]
 800103a:	e01b      	b.n	8001074 <ledTurnOnAll+0x4c>
    {
        WRITE_PIN((led[ i ].port), led[i].pinConfig.Pin, LED_ON );
 800103c:	1dfb      	adds	r3, r7, #7
 800103e:	781a      	ldrb	r2, [r3, #0]
 8001040:	4910      	ldr	r1, [pc, #64]	; (8001084 <ledTurnOnAll+0x5c>)
 8001042:	0013      	movs	r3, r2
 8001044:	00db      	lsls	r3, r3, #3
 8001046:	1a9b      	subs	r3, r3, r2
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	5858      	ldr	r0, [r3, r1]
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	781a      	ldrb	r2, [r3, #0]
 8001050:	490c      	ldr	r1, [pc, #48]	; (8001084 <ledTurnOnAll+0x5c>)
 8001052:	0013      	movs	r3, r2
 8001054:	00db      	lsls	r3, r3, #3
 8001056:	1a9b      	subs	r3, r3, r2
 8001058:	009b      	lsls	r3, r3, #2
 800105a:	18cb      	adds	r3, r1, r3
 800105c:	3304      	adds	r3, #4
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	b29b      	uxth	r3, r3
 8001062:	2201      	movs	r2, #1
 8001064:	0019      	movs	r1, r3
 8001066:	f000 fee7 	bl	8001e38 <HAL_GPIO_WritePin>
    for ( i = 0; i < MAXIMUM_LED; i++ )
 800106a:	1dfb      	adds	r3, r7, #7
 800106c:	781a      	ldrb	r2, [r3, #0]
 800106e:	1dfb      	adds	r3, r7, #7
 8001070:	3201      	adds	r2, #1
 8001072:	701a      	strb	r2, [r3, #0]
 8001074:	1dfb      	adds	r3, r7, #7
 8001076:	781b      	ldrb	r3, [r3, #0]
 8001078:	2b00      	cmp	r3, #0
 800107a:	d0df      	beq.n	800103c <ledTurnOnAll+0x14>
    }
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	b002      	add	sp, #8
 8001082:	bd80      	pop	{r7, pc}
 8001084:	08006534 	.word	0x08006534

08001088 <ledTurnOffAll>:
 *Para1 :N/A
 *Return:N/A
 *Note: Turn OFF all LEDs
 ************************************************************************************/
void ledTurnOffAll( void )
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b082      	sub	sp, #8
 800108c:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 800108e:	1dfb      	adds	r3, r7, #7
 8001090:	2200      	movs	r2, #0
 8001092:	701a      	strb	r2, [r3, #0]

    for ( i = 0; i < MAXIMUM_LED; i++ )
 8001094:	1dfb      	adds	r3, r7, #7
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]
 800109a:	e01b      	b.n	80010d4 <ledTurnOffAll+0x4c>
    {
        WRITE_PIN((led[i].port), led[i].pinConfig.Pin, LED_OFF );
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	4910      	ldr	r1, [pc, #64]	; (80010e4 <ledTurnOffAll+0x5c>)
 80010a2:	0013      	movs	r3, r2
 80010a4:	00db      	lsls	r3, r3, #3
 80010a6:	1a9b      	subs	r3, r3, r2
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	5858      	ldr	r0, [r3, r1]
 80010ac:	1dfb      	adds	r3, r7, #7
 80010ae:	781a      	ldrb	r2, [r3, #0]
 80010b0:	490c      	ldr	r1, [pc, #48]	; (80010e4 <ledTurnOffAll+0x5c>)
 80010b2:	0013      	movs	r3, r2
 80010b4:	00db      	lsls	r3, r3, #3
 80010b6:	1a9b      	subs	r3, r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	18cb      	adds	r3, r1, r3
 80010bc:	3304      	adds	r3, #4
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	b29b      	uxth	r3, r3
 80010c2:	2200      	movs	r2, #0
 80010c4:	0019      	movs	r1, r3
 80010c6:	f000 feb7 	bl	8001e38 <HAL_GPIO_WritePin>
    for ( i = 0; i < MAXIMUM_LED; i++ )
 80010ca:	1dfb      	adds	r3, r7, #7
 80010cc:	781a      	ldrb	r2, [r3, #0]
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	3201      	adds	r2, #1
 80010d2:	701a      	strb	r2, [r3, #0]
 80010d4:	1dfb      	adds	r3, r7, #7
 80010d6:	781b      	ldrb	r3, [r3, #0]
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d0df      	beq.n	800109c <ledTurnOffAll+0x14>
    }
}
 80010dc:	46c0      	nop			; (mov r8, r8)
 80010de:	46bd      	mov	sp, r7
 80010e0:	b002      	add	sp, #8
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	08006534 	.word	0x08006534

080010e8 <intLedStrip>:
 *Para1 :N/A
 *Return:N/A
 *Note: Turn OFF all LEDs
 ************************************************************************************/
void intLedStrip( void )
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	af00      	add	r7, sp, #0
	  ledStripSpiStruct.Instance = LEDSTRIP_SPI_PORT;
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <intLedStrip+0x78>)
 80010ee:	4a1d      	ldr	r2, [pc, #116]	; (8001164 <intLedStrip+0x7c>)
 80010f0:	601a      	str	r2, [r3, #0]
	  ledStripSpiStruct.Init.Mode = SPI_MODE_MASTER;
 80010f2:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <intLedStrip+0x78>)
 80010f4:	2282      	movs	r2, #130	; 0x82
 80010f6:	0052      	lsls	r2, r2, #1
 80010f8:	605a      	str	r2, [r3, #4]
	  ledStripSpiStruct.Init.Direction = SPI_DIRECTION_2LINES;
 80010fa:	4b19      	ldr	r3, [pc, #100]	; (8001160 <intLedStrip+0x78>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	609a      	str	r2, [r3, #8]
	  ledStripSpiStruct.Init.DataSize = SPI_DATASIZE_8BIT;
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <intLedStrip+0x78>)
 8001102:	22e0      	movs	r2, #224	; 0xe0
 8001104:	00d2      	lsls	r2, r2, #3
 8001106:	60da      	str	r2, [r3, #12]
	  ledStripSpiStruct.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001108:	4b15      	ldr	r3, [pc, #84]	; (8001160 <intLedStrip+0x78>)
 800110a:	2200      	movs	r2, #0
 800110c:	611a      	str	r2, [r3, #16]
	  ledStripSpiStruct.Init.CLKPhase = SPI_PHASE_1EDGE;
 800110e:	4b14      	ldr	r3, [pc, #80]	; (8001160 <intLedStrip+0x78>)
 8001110:	2200      	movs	r2, #0
 8001112:	615a      	str	r2, [r3, #20]
	  ledStripSpiStruct.Init.NSS = SPI_NSS_SOFT;
 8001114:	4b12      	ldr	r3, [pc, #72]	; (8001160 <intLedStrip+0x78>)
 8001116:	2280      	movs	r2, #128	; 0x80
 8001118:	0092      	lsls	r2, r2, #2
 800111a:	619a      	str	r2, [r3, #24]
	  ledStripSpiStruct.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800111c:	4b10      	ldr	r3, [pc, #64]	; (8001160 <intLedStrip+0x78>)
 800111e:	2210      	movs	r2, #16
 8001120:	61da      	str	r2, [r3, #28]
	  ledStripSpiStruct.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001122:	4b0f      	ldr	r3, [pc, #60]	; (8001160 <intLedStrip+0x78>)
 8001124:	2200      	movs	r2, #0
 8001126:	621a      	str	r2, [r3, #32]
	  ledStripSpiStruct.Init.TIMode = SPI_TIMODE_DISABLE;
 8001128:	4b0d      	ldr	r3, [pc, #52]	; (8001160 <intLedStrip+0x78>)
 800112a:	2200      	movs	r2, #0
 800112c:	625a      	str	r2, [r3, #36]	; 0x24
	  ledStripSpiStruct.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800112e:	4b0c      	ldr	r3, [pc, #48]	; (8001160 <intLedStrip+0x78>)
 8001130:	2200      	movs	r2, #0
 8001132:	629a      	str	r2, [r3, #40]	; 0x28
	  ledStripSpiStruct.Init.CRCPolynomial = 7;
 8001134:	4b0a      	ldr	r3, [pc, #40]	; (8001160 <intLedStrip+0x78>)
 8001136:	2207      	movs	r2, #7
 8001138:	62da      	str	r2, [r3, #44]	; 0x2c
	  ledStripSpiStruct.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800113a:	4b09      	ldr	r3, [pc, #36]	; (8001160 <intLedStrip+0x78>)
 800113c:	2200      	movs	r2, #0
 800113e:	631a      	str	r2, [r3, #48]	; 0x30
	  ledStripSpiStruct.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <intLedStrip+0x78>)
 8001142:	2208      	movs	r2, #8
 8001144:	635a      	str	r2, [r3, #52]	; 0x34
	  if (HAL_SPI_Init(&ledStripSpiStruct) != HAL_OK)
 8001146:	4b06      	ldr	r3, [pc, #24]	; (8001160 <intLedStrip+0x78>)
 8001148:	0018      	movs	r0, r3
 800114a:	f001 fcd5 	bl	8002af8 <HAL_SPI_Init>
 800114e:	1e03      	subs	r3, r0, #0
 8001150:	d000      	beq.n	8001154 <intLedStrip+0x6c>
	  {
	    while(1);
 8001152:	e7fe      	b.n	8001152 <intLedStrip+0x6a>
	  }else
	  {
		  selfTestPowerOnLedStrip();
 8001154:	f000 f808 	bl	8001168 <selfTestPowerOnLedStrip>
	  }
}
 8001158:	46c0      	nop			; (mov r8, r8)
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	20001324 	.word	0x20001324
 8001164:	40013000 	.word	0x40013000

08001168 <selfTestPowerOnLedStrip>:
 *Para1 :N/A
 *Return:N/A
 *Note: running display
 ************************************************************************************/
void selfTestPowerOnLedStrip( void )
{
 8001168:	b590      	push	{r4, r7, lr}
 800116a:	b087      	sub	sp, #28
 800116c:	af00      	add	r7, sp, #0

#define TOTAL_LED 108

	uint64_t msb64Bit = 0;
 800116e:	2300      	movs	r3, #0
 8001170:	2400      	movs	r4, #0
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	60fc      	str	r4, [r7, #12]
	uint64_t lsb64Bit = 0;
 8001176:	2300      	movs	r3, #0
 8001178:	2400      	movs	r4, #0
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	607c      	str	r4, [r7, #4]
	uint8_t i = 0;
 800117e:	2117      	movs	r1, #23
 8001180:	187b      	adds	r3, r7, r1
 8001182:	2200      	movs	r2, #0
 8001184:	701a      	strb	r2, [r3, #0]

	lsb64Bit = 0x01;
 8001186:	2301      	movs	r3, #1
 8001188:	2400      	movs	r4, #0
 800118a:	603b      	str	r3, [r7, #0]
 800118c:	607c      	str	r4, [r7, #4]
	for(i=0; i<64; i++)
 800118e:	187b      	adds	r3, r7, r1
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
 8001194:	e01d      	b.n	80011d2 <selfTestPowerOnLedStrip+0x6a>
	{
		HAL_SPI_Transmit_IT( &ledStripSpiStruct, (uint8_t* ) &lsb64Bit, (uint16_t)sizeof(lsb64Bit) );
 8001196:	0039      	movs	r1, r7
 8001198:	4b2b      	ldr	r3, [pc, #172]	; (8001248 <selfTestPowerOnLedStrip+0xe0>)
 800119a:	2208      	movs	r2, #8
 800119c:	0018      	movs	r0, r3
 800119e:	f001 fd45 	bl	8002c2c <HAL_SPI_Transmit_IT>
		lsb64Bit<<=1;
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	687c      	ldr	r4, [r7, #4]
 80011a6:	18db      	adds	r3, r3, r3
 80011a8:	4164      	adcs	r4, r4
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	607c      	str	r4, [r7, #4]
		HAL_SPI_Transmit_IT( &ledStripSpiStruct, (uint8_t* ) &msb64Bit, (uint16_t)sizeof(msb64Bit) );
 80011ae:	2308      	movs	r3, #8
 80011b0:	18f9      	adds	r1, r7, r3
 80011b2:	4b25      	ldr	r3, [pc, #148]	; (8001248 <selfTestPowerOnLedStrip+0xe0>)
 80011b4:	2208      	movs	r2, #8
 80011b6:	0018      	movs	r0, r3
 80011b8:	f001 fd38 	bl	8002c2c <HAL_SPI_Transmit_IT>

		vTaskDelay(700);
 80011bc:	23af      	movs	r3, #175	; 0xaf
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	0018      	movs	r0, r3
 80011c2:	f004 f991 	bl	80054e8 <vTaskDelay>
	for(i=0; i<64; i++)
 80011c6:	2117      	movs	r1, #23
 80011c8:	187b      	adds	r3, r7, r1
 80011ca:	781a      	ldrb	r2, [r3, #0]
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	3201      	adds	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
 80011d2:	2317      	movs	r3, #23
 80011d4:	18fb      	adds	r3, r7, r3
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	2b3f      	cmp	r3, #63	; 0x3f
 80011da:	d9dc      	bls.n	8001196 <selfTestPowerOnLedStrip+0x2e>
	}

	msb64Bit = 0x01;
 80011dc:	2301      	movs	r3, #1
 80011de:	2400      	movs	r4, #0
 80011e0:	60bb      	str	r3, [r7, #8]
 80011e2:	60fc      	str	r4, [r7, #12]
	for(i=0; i<(TOTAL_LED-64); i++)
 80011e4:	2317      	movs	r3, #23
 80011e6:	18fb      	adds	r3, r7, r3
 80011e8:	2200      	movs	r2, #0
 80011ea:	701a      	strb	r2, [r3, #0]
 80011ec:	e022      	b.n	8001234 <selfTestPowerOnLedStrip+0xcc>
	{
		HAL_SPI_Transmit_IT( &ledStripSpiStruct, (uint8_t *) &lsb64Bit, (uint16_t)sizeof(lsb64Bit) );
 80011ee:	0039      	movs	r1, r7
 80011f0:	4b15      	ldr	r3, [pc, #84]	; (8001248 <selfTestPowerOnLedStrip+0xe0>)
 80011f2:	2208      	movs	r2, #8
 80011f4:	0018      	movs	r0, r3
 80011f6:	f001 fd19 	bl	8002c2c <HAL_SPI_Transmit_IT>
		vTaskDelay(700);
 80011fa:	23af      	movs	r3, #175	; 0xaf
 80011fc:	009b      	lsls	r3, r3, #2
 80011fe:	0018      	movs	r0, r3
 8001200:	f004 f972 	bl	80054e8 <vTaskDelay>
		HAL_SPI_Transmit_IT( &ledStripSpiStruct, (uint8_t *) &msb64Bit, (uint16_t)sizeof(msb64Bit) );
 8001204:	2308      	movs	r3, #8
 8001206:	18f9      	adds	r1, r7, r3
 8001208:	4b0f      	ldr	r3, [pc, #60]	; (8001248 <selfTestPowerOnLedStrip+0xe0>)
 800120a:	2208      	movs	r2, #8
 800120c:	0018      	movs	r0, r3
 800120e:	f001 fd0d 	bl	8002c2c <HAL_SPI_Transmit_IT>
		msb64Bit<<=1;
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	68fc      	ldr	r4, [r7, #12]
 8001216:	18db      	adds	r3, r3, r3
 8001218:	4164      	adcs	r4, r4
 800121a:	60bb      	str	r3, [r7, #8]
 800121c:	60fc      	str	r4, [r7, #12]

		vTaskDelay(700);
 800121e:	23af      	movs	r3, #175	; 0xaf
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	0018      	movs	r0, r3
 8001224:	f004 f960 	bl	80054e8 <vTaskDelay>
	for(i=0; i<(TOTAL_LED-64); i++)
 8001228:	2117      	movs	r1, #23
 800122a:	187b      	adds	r3, r7, r1
 800122c:	781a      	ldrb	r2, [r3, #0]
 800122e:	187b      	adds	r3, r7, r1
 8001230:	3201      	adds	r2, #1
 8001232:	701a      	strb	r2, [r3, #0]
 8001234:	2317      	movs	r3, #23
 8001236:	18fb      	adds	r3, r7, r3
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	2b2b      	cmp	r3, #43	; 0x2b
 800123c:	d9d7      	bls.n	80011ee <selfTestPowerOnLedStrip+0x86>
	}


}
 800123e:	46c0      	nop			; (mov r8, r8)
 8001240:	46bd      	mov	sp, r7
 8001242:	b007      	add	sp, #28
 8001244:	bd90      	pop	{r4, r7, pc}
 8001246:	46c0      	nop			; (mov r8, r8)
 8001248:	20001324 	.word	0x20001324

0800124c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800124c:	480d      	ldr	r0, [pc, #52]	; (8001284 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800124e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001250:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001252:	e003      	b.n	800125c <LoopCopyDataInit>

08001254 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001254:	4b0c      	ldr	r3, [pc, #48]	; (8001288 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001256:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001258:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800125a:	3104      	adds	r1, #4

0800125c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800125c:	480b      	ldr	r0, [pc, #44]	; (800128c <LoopForever+0xa>)
  ldr r3, =_edata
 800125e:	4b0c      	ldr	r3, [pc, #48]	; (8001290 <LoopForever+0xe>)
  adds r2, r0, r1
 8001260:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001262:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001264:	d3f6      	bcc.n	8001254 <CopyDataInit>
  ldr r2, =_sbss
 8001266:	4a0b      	ldr	r2, [pc, #44]	; (8001294 <LoopForever+0x12>)
  b LoopFillZerobss
 8001268:	e002      	b.n	8001270 <LoopFillZerobss>

0800126a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  str  r3, [r2]
 800126c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800126e:	3204      	adds	r2, #4

08001270 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <LoopForever+0x16>)
  cmp r2, r3
 8001272:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001274:	d3f9      	bcc.n	800126a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001276:	f7ff fbd1 	bl	8000a1c <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800127a:	f005 f86f 	bl	800635c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800127e:	f7ff f8c1 	bl	8000404 <main>

08001282 <LoopForever>:

LoopForever:
    b LoopForever
 8001282:	e7fe      	b.n	8001282 <LoopForever>
  ldr   r0, =_estack
 8001284:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8001288:	08006558 	.word	0x08006558
  ldr r0, =_sdata
 800128c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8001290:	20000044 	.word	0x20000044
  ldr r2, =_sbss
 8001294:	20000044 	.word	0x20000044
  ldr r3, = _ebss
 8001298:	200013f0 	.word	0x200013f0

0800129c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800129c:	e7fe      	b.n	800129c <ADC1_IRQHandler>
	...

080012a0 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b082      	sub	sp, #8
 80012a4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80012a6:	1dfb      	adds	r3, r7, #7
 80012a8:	2200      	movs	r2, #0
 80012aa:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ac:	4b0b      	ldr	r3, [pc, #44]	; (80012dc <HAL_Init+0x3c>)
 80012ae:	681a      	ldr	r2, [r3, #0]
 80012b0:	4b0a      	ldr	r3, [pc, #40]	; (80012dc <HAL_Init+0x3c>)
 80012b2:	2180      	movs	r1, #128	; 0x80
 80012b4:	0049      	lsls	r1, r1, #1
 80012b6:	430a      	orrs	r2, r1
 80012b8:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80012ba:	2003      	movs	r0, #3
 80012bc:	f000 f810 	bl	80012e0 <HAL_InitTick>
 80012c0:	1e03      	subs	r3, r0, #0
 80012c2:	d003      	beq.n	80012cc <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80012c4:	1dfb      	adds	r3, r7, #7
 80012c6:	2201      	movs	r2, #1
 80012c8:	701a      	strb	r2, [r3, #0]
 80012ca:	e001      	b.n	80012d0 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80012cc:	f7ff fa4e 	bl	800076c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80012d0:	1dfb      	adds	r3, r7, #7
 80012d2:	781b      	ldrb	r3, [r3, #0]
}
 80012d4:	0018      	movs	r0, r3
 80012d6:	46bd      	mov	sp, r7
 80012d8:	b002      	add	sp, #8
 80012da:	bd80      	pop	{r7, pc}
 80012dc:	40022000 	.word	0x40022000

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b590      	push	{r4, r7, lr}
 80012e2:	b085      	sub	sp, #20
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80012e8:	230f      	movs	r3, #15
 80012ea:	18fb      	adds	r3, r7, r3
 80012ec:	2200      	movs	r2, #0
 80012ee:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <HAL_InitTick+0x88>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d02b      	beq.n	8001350 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <HAL_InitTick+0x8c>)
 80012fa:	681c      	ldr	r4, [r3, #0]
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <HAL_InitTick+0x88>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	0019      	movs	r1, r3
 8001302:	23fa      	movs	r3, #250	; 0xfa
 8001304:	0098      	lsls	r0, r3, #2
 8001306:	f7fe ff07 	bl	8000118 <__udivsi3>
 800130a:	0003      	movs	r3, r0
 800130c:	0019      	movs	r1, r3
 800130e:	0020      	movs	r0, r4
 8001310:	f7fe ff02 	bl	8000118 <__udivsi3>
 8001314:	0003      	movs	r3, r0
 8001316:	0018      	movs	r0, r3
 8001318:	f000 f947 	bl	80015aa <HAL_SYSTICK_Config>
 800131c:	1e03      	subs	r3, r0, #0
 800131e:	d112      	bne.n	8001346 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	2b03      	cmp	r3, #3
 8001324:	d80a      	bhi.n	800133c <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	2301      	movs	r3, #1
 800132a:	425b      	negs	r3, r3
 800132c:	2200      	movs	r2, #0
 800132e:	0018      	movs	r0, r3
 8001330:	f000 f906 	bl	8001540 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001334:	4b0e      	ldr	r3, [pc, #56]	; (8001370 <HAL_InitTick+0x90>)
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	601a      	str	r2, [r3, #0]
 800133a:	e00d      	b.n	8001358 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 800133c:	230f      	movs	r3, #15
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
 8001344:	e008      	b.n	8001358 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001346:	230f      	movs	r3, #15
 8001348:	18fb      	adds	r3, r7, r3
 800134a:	2201      	movs	r2, #1
 800134c:	701a      	strb	r2, [r3, #0]
 800134e:	e003      	b.n	8001358 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001350:	230f      	movs	r3, #15
 8001352:	18fb      	adds	r3, r7, r3
 8001354:	2201      	movs	r2, #1
 8001356:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001358:	230f      	movs	r3, #15
 800135a:	18fb      	adds	r3, r7, r3
 800135c:	781b      	ldrb	r3, [r3, #0]
}
 800135e:	0018      	movs	r0, r3
 8001360:	46bd      	mov	sp, r7
 8001362:	b005      	add	sp, #20
 8001364:	bd90      	pop	{r4, r7, pc}
 8001366:	46c0      	nop			; (mov r8, r8)
 8001368:	2000003c 	.word	0x2000003c
 800136c:	20000000 	.word	0x20000000
 8001370:	20000038 	.word	0x20000038

08001374 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001378:	4b04      	ldr	r3, [pc, #16]	; (800138c <HAL_IncTick+0x18>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b04      	ldr	r3, [pc, #16]	; (8001390 <HAL_IncTick+0x1c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	18d2      	adds	r2, r2, r3
 8001382:	4b02      	ldr	r3, [pc, #8]	; (800138c <HAL_IncTick+0x18>)
 8001384:	601a      	str	r2, [r3, #0]
}
 8001386:	46c0      	nop			; (mov r8, r8)
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	200013ec 	.word	0x200013ec
 8001390:	2000003c 	.word	0x2000003c

08001394 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	af00      	add	r7, sp, #0
  return uwTick;
 8001398:	4b02      	ldr	r3, [pc, #8]	; (80013a4 <HAL_GetTick+0x10>)
 800139a:	681b      	ldr	r3, [r3, #0]
}
 800139c:	0018      	movs	r0, r3
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
 80013a2:	46c0      	nop			; (mov r8, r8)
 80013a4:	200013ec 	.word	0x200013ec

080013a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b082      	sub	sp, #8
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	0002      	movs	r2, r0
 80013b0:	1dfb      	adds	r3, r7, #7
 80013b2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013b4:	1dfb      	adds	r3, r7, #7
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b7f      	cmp	r3, #127	; 0x7f
 80013ba:	d809      	bhi.n	80013d0 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013bc:	1dfb      	adds	r3, r7, #7
 80013be:	781b      	ldrb	r3, [r3, #0]
 80013c0:	001a      	movs	r2, r3
 80013c2:	231f      	movs	r3, #31
 80013c4:	401a      	ands	r2, r3
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <__NVIC_EnableIRQ+0x30>)
 80013c8:	2101      	movs	r1, #1
 80013ca:	4091      	lsls	r1, r2
 80013cc:	000a      	movs	r2, r1
 80013ce:	601a      	str	r2, [r3, #0]
  }
}
 80013d0:	46c0      	nop			; (mov r8, r8)
 80013d2:	46bd      	mov	sp, r7
 80013d4:	b002      	add	sp, #8
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	e000e100 	.word	0xe000e100

080013dc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	0002      	movs	r2, r0
 80013e4:	1dfb      	adds	r3, r7, #7
 80013e6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80013e8:	1dfb      	adds	r3, r7, #7
 80013ea:	781b      	ldrb	r3, [r3, #0]
 80013ec:	2b7f      	cmp	r3, #127	; 0x7f
 80013ee:	d80e      	bhi.n	800140e <__NVIC_DisableIRQ+0x32>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013f0:	1dfb      	adds	r3, r7, #7
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	001a      	movs	r2, r3
 80013f6:	231f      	movs	r3, #31
 80013f8:	4013      	ands	r3, r2
 80013fa:	4907      	ldr	r1, [pc, #28]	; (8001418 <__NVIC_DisableIRQ+0x3c>)
 80013fc:	2201      	movs	r2, #1
 80013fe:	409a      	lsls	r2, r3
 8001400:	0013      	movs	r3, r2
 8001402:	2280      	movs	r2, #128	; 0x80
 8001404:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001406:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800140a:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  }
}
 800140e:	46c0      	nop			; (mov r8, r8)
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}
 8001416:	46c0      	nop			; (mov r8, r8)
 8001418:	e000e100 	.word	0xe000e100

0800141c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800141c:	b590      	push	{r4, r7, lr}
 800141e:	b083      	sub	sp, #12
 8001420:	af00      	add	r7, sp, #0
 8001422:	0002      	movs	r2, r0
 8001424:	6039      	str	r1, [r7, #0]
 8001426:	1dfb      	adds	r3, r7, #7
 8001428:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800142a:	1dfb      	adds	r3, r7, #7
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	2b7f      	cmp	r3, #127	; 0x7f
 8001430:	d828      	bhi.n	8001484 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001432:	4a2f      	ldr	r2, [pc, #188]	; (80014f0 <__NVIC_SetPriority+0xd4>)
 8001434:	1dfb      	adds	r3, r7, #7
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	b25b      	sxtb	r3, r3
 800143a:	089b      	lsrs	r3, r3, #2
 800143c:	33c0      	adds	r3, #192	; 0xc0
 800143e:	009b      	lsls	r3, r3, #2
 8001440:	589b      	ldr	r3, [r3, r2]
 8001442:	1dfa      	adds	r2, r7, #7
 8001444:	7812      	ldrb	r2, [r2, #0]
 8001446:	0011      	movs	r1, r2
 8001448:	2203      	movs	r2, #3
 800144a:	400a      	ands	r2, r1
 800144c:	00d2      	lsls	r2, r2, #3
 800144e:	21ff      	movs	r1, #255	; 0xff
 8001450:	4091      	lsls	r1, r2
 8001452:	000a      	movs	r2, r1
 8001454:	43d2      	mvns	r2, r2
 8001456:	401a      	ands	r2, r3
 8001458:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	019b      	lsls	r3, r3, #6
 800145e:	22ff      	movs	r2, #255	; 0xff
 8001460:	401a      	ands	r2, r3
 8001462:	1dfb      	adds	r3, r7, #7
 8001464:	781b      	ldrb	r3, [r3, #0]
 8001466:	0018      	movs	r0, r3
 8001468:	2303      	movs	r3, #3
 800146a:	4003      	ands	r3, r0
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001470:	481f      	ldr	r0, [pc, #124]	; (80014f0 <__NVIC_SetPriority+0xd4>)
 8001472:	1dfb      	adds	r3, r7, #7
 8001474:	781b      	ldrb	r3, [r3, #0]
 8001476:	b25b      	sxtb	r3, r3
 8001478:	089b      	lsrs	r3, r3, #2
 800147a:	430a      	orrs	r2, r1
 800147c:	33c0      	adds	r3, #192	; 0xc0
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001482:	e031      	b.n	80014e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001484:	4a1b      	ldr	r2, [pc, #108]	; (80014f4 <__NVIC_SetPriority+0xd8>)
 8001486:	1dfb      	adds	r3, r7, #7
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	0019      	movs	r1, r3
 800148c:	230f      	movs	r3, #15
 800148e:	400b      	ands	r3, r1
 8001490:	3b08      	subs	r3, #8
 8001492:	089b      	lsrs	r3, r3, #2
 8001494:	3306      	adds	r3, #6
 8001496:	009b      	lsls	r3, r3, #2
 8001498:	18d3      	adds	r3, r2, r3
 800149a:	3304      	adds	r3, #4
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	1dfa      	adds	r2, r7, #7
 80014a0:	7812      	ldrb	r2, [r2, #0]
 80014a2:	0011      	movs	r1, r2
 80014a4:	2203      	movs	r2, #3
 80014a6:	400a      	ands	r2, r1
 80014a8:	00d2      	lsls	r2, r2, #3
 80014aa:	21ff      	movs	r1, #255	; 0xff
 80014ac:	4091      	lsls	r1, r2
 80014ae:	000a      	movs	r2, r1
 80014b0:	43d2      	mvns	r2, r2
 80014b2:	401a      	ands	r2, r3
 80014b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	019b      	lsls	r3, r3, #6
 80014ba:	22ff      	movs	r2, #255	; 0xff
 80014bc:	401a      	ands	r2, r3
 80014be:	1dfb      	adds	r3, r7, #7
 80014c0:	781b      	ldrb	r3, [r3, #0]
 80014c2:	0018      	movs	r0, r3
 80014c4:	2303      	movs	r3, #3
 80014c6:	4003      	ands	r3, r0
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014cc:	4809      	ldr	r0, [pc, #36]	; (80014f4 <__NVIC_SetPriority+0xd8>)
 80014ce:	1dfb      	adds	r3, r7, #7
 80014d0:	781b      	ldrb	r3, [r3, #0]
 80014d2:	001c      	movs	r4, r3
 80014d4:	230f      	movs	r3, #15
 80014d6:	4023      	ands	r3, r4
 80014d8:	3b08      	subs	r3, #8
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	430a      	orrs	r2, r1
 80014de:	3306      	adds	r3, #6
 80014e0:	009b      	lsls	r3, r3, #2
 80014e2:	18c3      	adds	r3, r0, r3
 80014e4:	3304      	adds	r3, #4
 80014e6:	601a      	str	r2, [r3, #0]
}
 80014e8:	46c0      	nop			; (mov r8, r8)
 80014ea:	46bd      	mov	sp, r7
 80014ec:	b003      	add	sp, #12
 80014ee:	bd90      	pop	{r4, r7, pc}
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b082      	sub	sp, #8
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	4a0c      	ldr	r2, [pc, #48]	; (8001538 <SysTick_Config+0x40>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d901      	bls.n	800150e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800150a:	2301      	movs	r3, #1
 800150c:	e010      	b.n	8001530 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800150e:	4b0b      	ldr	r3, [pc, #44]	; (800153c <SysTick_Config+0x44>)
 8001510:	687a      	ldr	r2, [r7, #4]
 8001512:	3a01      	subs	r2, #1
 8001514:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001516:	2301      	movs	r3, #1
 8001518:	425b      	negs	r3, r3
 800151a:	2103      	movs	r1, #3
 800151c:	0018      	movs	r0, r3
 800151e:	f7ff ff7d 	bl	800141c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001522:	4b06      	ldr	r3, [pc, #24]	; (800153c <SysTick_Config+0x44>)
 8001524:	2200      	movs	r2, #0
 8001526:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001528:	4b04      	ldr	r3, [pc, #16]	; (800153c <SysTick_Config+0x44>)
 800152a:	2207      	movs	r2, #7
 800152c:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800152e:	2300      	movs	r3, #0
}
 8001530:	0018      	movs	r0, r3
 8001532:	46bd      	mov	sp, r7
 8001534:	b002      	add	sp, #8
 8001536:	bd80      	pop	{r7, pc}
 8001538:	00ffffff 	.word	0x00ffffff
 800153c:	e000e010 	.word	0xe000e010

08001540 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b084      	sub	sp, #16
 8001544:	af00      	add	r7, sp, #0
 8001546:	60b9      	str	r1, [r7, #8]
 8001548:	607a      	str	r2, [r7, #4]
 800154a:	210f      	movs	r1, #15
 800154c:	187b      	adds	r3, r7, r1
 800154e:	1c02      	adds	r2, r0, #0
 8001550:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001552:	68ba      	ldr	r2, [r7, #8]
 8001554:	187b      	adds	r3, r7, r1
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	b25b      	sxtb	r3, r3
 800155a:	0011      	movs	r1, r2
 800155c:	0018      	movs	r0, r3
 800155e:	f7ff ff5d 	bl	800141c <__NVIC_SetPriority>
}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b004      	add	sp, #16
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	0002      	movs	r2, r0
 8001572:	1dfb      	adds	r3, r7, #7
 8001574:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001576:	1dfb      	adds	r3, r7, #7
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	b25b      	sxtb	r3, r3
 800157c:	0018      	movs	r0, r3
 800157e:	f7ff ff13 	bl	80013a8 <__NVIC_EnableIRQ>
}
 8001582:	46c0      	nop			; (mov r8, r8)
 8001584:	46bd      	mov	sp, r7
 8001586:	b002      	add	sp, #8
 8001588:	bd80      	pop	{r7, pc}

0800158a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b082      	sub	sp, #8
 800158e:	af00      	add	r7, sp, #0
 8001590:	0002      	movs	r2, r0
 8001592:	1dfb      	adds	r3, r7, #7
 8001594:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001596:	1dfb      	adds	r3, r7, #7
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	b25b      	sxtb	r3, r3
 800159c:	0018      	movs	r0, r3
 800159e:	f7ff ff1d 	bl	80013dc <__NVIC_DisableIRQ>
}
 80015a2:	46c0      	nop			; (mov r8, r8)
 80015a4:	46bd      	mov	sp, r7
 80015a6:	b002      	add	sp, #8
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015aa:	b580      	push	{r7, lr}
 80015ac:	b082      	sub	sp, #8
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	0018      	movs	r0, r3
 80015b6:	f7ff ff9f 	bl	80014f8 <SysTick_Config>
 80015ba:	0003      	movs	r3, r0
}
 80015bc:	0018      	movs	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	b002      	add	sp, #8
 80015c2:	bd80      	pop	{r7, pc}

080015c4 <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b082      	sub	sp, #8
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e077      	b.n	80016c6 <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	4a3d      	ldr	r2, [pc, #244]	; (80016d0 <HAL_DMA_Init+0x10c>)
 80015dc:	4694      	mov	ip, r2
 80015de:	4463      	add	r3, ip
 80015e0:	2114      	movs	r1, #20
 80015e2:	0018      	movs	r0, r3
 80015e4:	f7fe fd98 	bl	8000118 <__udivsi3>
 80015e8:	0003      	movs	r3, r0
 80015ea:	009a      	lsls	r2, r3, #2
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2225      	movs	r2, #37	; 0x25
 80015f4:	2102      	movs	r1, #2
 80015f6:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4934      	ldr	r1, [pc, #208]	; (80016d4 <HAL_DMA_Init+0x110>)
 8001604:	400a      	ands	r2, r1
 8001606:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6819      	ldr	r1, [r3, #0]
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689a      	ldr	r2, [r3, #8]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	431a      	orrs	r2, r3
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	695b      	ldr	r3, [r3, #20]
 8001622:	431a      	orrs	r2, r3
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	699b      	ldr	r3, [r3, #24]
 8001628:	431a      	orrs	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	69db      	ldr	r3, [r3, #28]
 800162e:	431a      	orrs	r2, r3
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	430a      	orrs	r2, r1
 800163c:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	0018      	movs	r0, r3
 8001642:	f000 f975 	bl	8001930 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	689a      	ldr	r2, [r3, #8]
 800164a:	2380      	movs	r3, #128	; 0x80
 800164c:	01db      	lsls	r3, r3, #7
 800164e:	429a      	cmp	r2, r3
 8001650:	d102      	bne.n	8001658 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685a      	ldr	r2, [r3, #4]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001660:	21ff      	movs	r1, #255	; 0xff
 8001662:	400a      	ands	r2, r1
 8001664:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800166e:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d011      	beq.n	800169c <HAL_DMA_Init+0xd8>
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	2b04      	cmp	r3, #4
 800167e:	d80d      	bhi.n	800169c <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	0018      	movs	r0, r3
 8001684:	f000 f980 	bl	8001988 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001694:	687a      	ldr	r2, [r7, #4]
 8001696:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	e008      	b.n	80016ae <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	2200      	movs	r2, #0
 80016a0:	651a      	str	r2, [r3, #80]	; 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2200      	movs	r2, #0
 80016ac:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	2200      	movs	r2, #0
 80016b2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	2225      	movs	r2, #37	; 0x25
 80016b8:	2101      	movs	r1, #1
 80016ba:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	2224      	movs	r2, #36	; 0x24
 80016c0:	2100      	movs	r1, #0
 80016c2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80016c4:	2300      	movs	r3, #0
}
 80016c6:	0018      	movs	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b002      	add	sp, #8
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	46c0      	nop			; (mov r8, r8)
 80016d0:	bffdfff8 	.word	0xbffdfff8
 80016d4:	ffff800f 	.word	0xffff800f

080016d8 <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016e0:	230f      	movs	r3, #15
 80016e2:	18fb      	adds	r3, r7, r3
 80016e4:	2200      	movs	r2, #0
 80016e6:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2224      	movs	r2, #36	; 0x24
 80016ec:	2100      	movs	r1, #0
 80016ee:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2224      	movs	r2, #36	; 0x24
 80016f4:	5c9b      	ldrb	r3, [r3, r2]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d101      	bne.n	80016fe <HAL_DMA_Abort_IT+0x26>
 80016fa:	2302      	movs	r3, #2
 80016fc:	e05e      	b.n	80017bc <HAL_DMA_Abort_IT+0xe4>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	2224      	movs	r2, #36	; 0x24
 8001702:	2101      	movs	r1, #1
 8001704:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2225      	movs	r2, #37	; 0x25
 800170a:	5c9b      	ldrb	r3, [r3, r2]
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b02      	cmp	r3, #2
 8001710:	d007      	beq.n	8001722 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2204      	movs	r2, #4
 8001716:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001718:	230f      	movs	r3, #15
 800171a:	18fb      	adds	r3, r7, r3
 800171c:	2201      	movs	r2, #1
 800171e:	701a      	strb	r2, [r3, #0]
 8001720:	e049      	b.n	80017b6 <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	681a      	ldr	r2, [r3, #0]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	210e      	movs	r1, #14
 800172e:	438a      	bics	r2, r1
 8001730:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	2101      	movs	r1, #1
 800173e:	438a      	bics	r2, r1
 8001740:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174c:	491d      	ldr	r1, [pc, #116]	; (80017c4 <HAL_DMA_Abort_IT+0xec>)
 800174e:	400a      	ands	r2, r1
 8001750:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 8001752:	4b1d      	ldr	r3, [pc, #116]	; (80017c8 <HAL_DMA_Abort_IT+0xf0>)
 8001754:	6859      	ldr	r1, [r3, #4]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800175a:	221c      	movs	r2, #28
 800175c:	4013      	ands	r3, r2
 800175e:	2201      	movs	r2, #1
 8001760:	409a      	lsls	r2, r3
 8001762:	4b19      	ldr	r3, [pc, #100]	; (80017c8 <HAL_DMA_Abort_IT+0xf0>)
 8001764:	430a      	orrs	r2, r1
 8001766:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800176c:	687a      	ldr	r2, [r7, #4]
 800176e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001770:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001776:	2b00      	cmp	r3, #0
 8001778:	d00c      	beq.n	8001794 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001784:	490f      	ldr	r1, [pc, #60]	; (80017c4 <HAL_DMA_Abort_IT+0xec>)
 8001786:	400a      	ands	r2, r1
 8001788:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800178e:	687a      	ldr	r2, [r7, #4]
 8001790:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001792:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2225      	movs	r2, #37	; 0x25
 8001798:	2101      	movs	r1, #1
 800179a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	2224      	movs	r2, #36	; 0x24
 80017a0:	2100      	movs	r1, #0
 80017a2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d004      	beq.n	80017b6 <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b0:	687a      	ldr	r2, [r7, #4]
 80017b2:	0010      	movs	r0, r2
 80017b4:	4798      	blx	r3
    }
  }
  return status;
 80017b6:	230f      	movs	r3, #15
 80017b8:	18fb      	adds	r3, r7, r3
 80017ba:	781b      	ldrb	r3, [r3, #0]
}
 80017bc:	0018      	movs	r0, r3
 80017be:	46bd      	mov	sp, r7
 80017c0:	b004      	add	sp, #16
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	fffffeff 	.word	0xfffffeff
 80017c8:	40020000 	.word	0x40020000

080017cc <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80017d4:	4b55      	ldr	r3, [pc, #340]	; (800192c <HAL_DMA_IRQHandler+0x160>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	221c      	movs	r2, #28
 80017e8:	4013      	ands	r3, r2
 80017ea:	2204      	movs	r2, #4
 80017ec:	409a      	lsls	r2, r3
 80017ee:	0013      	movs	r3, r2
 80017f0:	68fa      	ldr	r2, [r7, #12]
 80017f2:	4013      	ands	r3, r2
 80017f4:	d027      	beq.n	8001846 <HAL_DMA_IRQHandler+0x7a>
 80017f6:	68bb      	ldr	r3, [r7, #8]
 80017f8:	2204      	movs	r2, #4
 80017fa:	4013      	ands	r3, r2
 80017fc:	d023      	beq.n	8001846 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	2220      	movs	r2, #32
 8001806:	4013      	ands	r3, r2
 8001808:	d107      	bne.n	800181a <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	681a      	ldr	r2, [r3, #0]
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	2104      	movs	r1, #4
 8001816:	438a      	bics	r2, r1
 8001818:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800181a:	4b44      	ldr	r3, [pc, #272]	; (800192c <HAL_DMA_IRQHandler+0x160>)
 800181c:	6859      	ldr	r1, [r3, #4]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001822:	221c      	movs	r2, #28
 8001824:	4013      	ands	r3, r2
 8001826:	2204      	movs	r2, #4
 8001828:	409a      	lsls	r2, r3
 800182a:	4b40      	ldr	r3, [pc, #256]	; (800192c <HAL_DMA_IRQHandler+0x160>)
 800182c:	430a      	orrs	r2, r1
 800182e:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001834:	2b00      	cmp	r3, #0
 8001836:	d100      	bne.n	800183a <HAL_DMA_IRQHandler+0x6e>
 8001838:	e073      	b.n	8001922 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	0010      	movs	r0, r2
 8001842:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001844:	e06d      	b.n	8001922 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184a:	221c      	movs	r2, #28
 800184c:	4013      	ands	r3, r2
 800184e:	2202      	movs	r2, #2
 8001850:	409a      	lsls	r2, r3
 8001852:	0013      	movs	r3, r2
 8001854:	68fa      	ldr	r2, [r7, #12]
 8001856:	4013      	ands	r3, r2
 8001858:	d02e      	beq.n	80018b8 <HAL_DMA_IRQHandler+0xec>
 800185a:	68bb      	ldr	r3, [r7, #8]
 800185c:	2202      	movs	r2, #2
 800185e:	4013      	ands	r3, r2
 8001860:	d02a      	beq.n	80018b8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	2220      	movs	r2, #32
 800186a:	4013      	ands	r3, r2
 800186c:	d10b      	bne.n	8001886 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	681a      	ldr	r2, [r3, #0]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	210a      	movs	r1, #10
 800187a:	438a      	bics	r2, r1
 800187c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	2225      	movs	r2, #37	; 0x25
 8001882:	2101      	movs	r1, #1
 8001884:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 8001886:	4b29      	ldr	r3, [pc, #164]	; (800192c <HAL_DMA_IRQHandler+0x160>)
 8001888:	6859      	ldr	r1, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188e:	221c      	movs	r2, #28
 8001890:	4013      	ands	r3, r2
 8001892:	2202      	movs	r2, #2
 8001894:	409a      	lsls	r2, r3
 8001896:	4b25      	ldr	r3, [pc, #148]	; (800192c <HAL_DMA_IRQHandler+0x160>)
 8001898:	430a      	orrs	r2, r1
 800189a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	2224      	movs	r2, #36	; 0x24
 80018a0:	2100      	movs	r1, #0
 80018a2:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d03a      	beq.n	8001922 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b0:	687a      	ldr	r2, [r7, #4]
 80018b2:	0010      	movs	r0, r2
 80018b4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80018b6:	e034      	b.n	8001922 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))!= 0U) && ((source_it & DMA_IT_TE) != 0U))
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018bc:	221c      	movs	r2, #28
 80018be:	4013      	ands	r3, r2
 80018c0:	2208      	movs	r2, #8
 80018c2:	409a      	lsls	r2, r3
 80018c4:	0013      	movs	r3, r2
 80018c6:	68fa      	ldr	r2, [r7, #12]
 80018c8:	4013      	ands	r3, r2
 80018ca:	d02b      	beq.n	8001924 <HAL_DMA_IRQHandler+0x158>
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	2208      	movs	r2, #8
 80018d0:	4013      	ands	r3, r2
 80018d2:	d027      	beq.n	8001924 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	681a      	ldr	r2, [r3, #0]
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	210e      	movs	r1, #14
 80018e0:	438a      	bics	r2, r1
 80018e2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex& 0x1cU)));
 80018e4:	4b11      	ldr	r3, [pc, #68]	; (800192c <HAL_DMA_IRQHandler+0x160>)
 80018e6:	6859      	ldr	r1, [r3, #4]
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ec:	221c      	movs	r2, #28
 80018ee:	4013      	ands	r3, r2
 80018f0:	2201      	movs	r2, #1
 80018f2:	409a      	lsls	r2, r3
 80018f4:	4b0d      	ldr	r3, [pc, #52]	; (800192c <HAL_DMA_IRQHandler+0x160>)
 80018f6:	430a      	orrs	r2, r1
 80018f8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2201      	movs	r2, #1
 80018fe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2225      	movs	r2, #37	; 0x25
 8001904:	2101      	movs	r1, #1
 8001906:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2224      	movs	r2, #36	; 0x24
 800190c:	2100      	movs	r1, #0
 800190e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001914:	2b00      	cmp	r3, #0
 8001916:	d005      	beq.n	8001924 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	0010      	movs	r0, r2
 8001920:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001922:	46c0      	nop			; (mov r8, r8)
 8001924:	46c0      	nop			; (mov r8, r8)
}
 8001926:	46bd      	mov	sp, r7
 8001928:	b004      	add	sp, #16
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40020000 	.word	0x40020000

08001930 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	001a      	movs	r2, r3
 800193e:	23ff      	movs	r3, #255	; 0xff
 8001940:	4013      	ands	r3, r2
 8001942:	3b08      	subs	r3, #8
 8001944:	2114      	movs	r1, #20
 8001946:	0018      	movs	r0, r3
 8001948:	f7fe fbe6 	bl	8000118 <__udivsi3>
 800194c:	0003      	movs	r3, r0
 800194e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001954:	089b      	lsrs	r3, r3, #2
 8001956:	4a0a      	ldr	r2, [pc, #40]	; (8001980 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 8001958:	4694      	mov	ip, r2
 800195a:	4463      	add	r3, ip
 800195c:	009b      	lsls	r3, r3, #2
 800195e:	001a      	movs	r2, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	4a07      	ldr	r2, [pc, #28]	; (8001984 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 8001968:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	221c      	movs	r2, #28
 800196e:	4013      	ands	r3, r2
 8001970:	2201      	movs	r2, #1
 8001972:	409a      	lsls	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8001978:	46c0      	nop			; (mov r8, r8)
 800197a:	46bd      	mov	sp, r7
 800197c:	b004      	add	sp, #16
 800197e:	bd80      	pop	{r7, pc}
 8001980:	10008200 	.word	0x10008200
 8001984:	40020880 	.word	0x40020880

08001988 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b084      	sub	sp, #16
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	685b      	ldr	r3, [r3, #4]
 8001994:	22ff      	movs	r2, #255	; 0xff
 8001996:	4013      	ands	r3, r2
 8001998:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	4a0a      	ldr	r2, [pc, #40]	; (80019c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800199e:	4694      	mov	ip, r2
 80019a0:	4463      	add	r3, ip
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	001a      	movs	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	651a      	str	r2, [r3, #80]	; 0x50

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a07      	ldr	r2, [pc, #28]	; (80019cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80019ae:	655a      	str	r2, [r3, #84]	; 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	3b01      	subs	r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	4013      	ands	r3, r2
 80019b8:	2201      	movs	r2, #1
 80019ba:	409a      	lsls	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	659a      	str	r2, [r3, #88]	; 0x58
}
 80019c0:	46c0      	nop			; (mov r8, r8)
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b004      	add	sp, #16
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	1000823f 	.word	0x1000823f
 80019cc:	40020940 	.word	0x40020940

080019d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b086      	sub	sp, #24
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
 80019d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019de:	e147      	b.n	8001c70 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	2101      	movs	r1, #1
 80019e6:	697a      	ldr	r2, [r7, #20]
 80019e8:	4091      	lsls	r1, r2
 80019ea:	000a      	movs	r2, r1
 80019ec:	4013      	ands	r3, r2
 80019ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d100      	bne.n	80019f8 <HAL_GPIO_Init+0x28>
 80019f6:	e138      	b.n	8001c6a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d003      	beq.n	8001a08 <HAL_GPIO_Init+0x38>
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	2b12      	cmp	r3, #18
 8001a06:	d123      	bne.n	8001a50 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	08da      	lsrs	r2, r3, #3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	3208      	adds	r2, #8
 8001a10:	0092      	lsls	r2, r2, #2
 8001a12:	58d3      	ldr	r3, [r2, r3]
 8001a14:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	2207      	movs	r2, #7
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	220f      	movs	r2, #15
 8001a20:	409a      	lsls	r2, r3
 8001a22:	0013      	movs	r3, r2
 8001a24:	43da      	mvns	r2, r3
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	691a      	ldr	r2, [r3, #16]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2107      	movs	r1, #7
 8001a34:	400b      	ands	r3, r1
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	693a      	ldr	r2, [r7, #16]
 8001a3e:	4313      	orrs	r3, r2
 8001a40:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a42:	697b      	ldr	r3, [r7, #20]
 8001a44:	08da      	lsrs	r2, r3, #3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	3208      	adds	r2, #8
 8001a4a:	0092      	lsls	r2, r2, #2
 8001a4c:	6939      	ldr	r1, [r7, #16]
 8001a4e:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	005b      	lsls	r3, r3, #1
 8001a5a:	2203      	movs	r2, #3
 8001a5c:	409a      	lsls	r2, r3
 8001a5e:	0013      	movs	r3, r2
 8001a60:	43da      	mvns	r2, r3
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	4013      	ands	r3, r2
 8001a66:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	2203      	movs	r2, #3
 8001a6e:	401a      	ands	r2, r3
 8001a70:	697b      	ldr	r3, [r7, #20]
 8001a72:	005b      	lsls	r3, r3, #1
 8001a74:	409a      	lsls	r2, r3
 8001a76:	0013      	movs	r3, r2
 8001a78:	693a      	ldr	r2, [r7, #16]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	693a      	ldr	r2, [r7, #16]
 8001a82:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	2b01      	cmp	r3, #1
 8001a8a:	d00b      	beq.n	8001aa4 <HAL_GPIO_Init+0xd4>
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d007      	beq.n	8001aa4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a98:	2b11      	cmp	r3, #17
 8001a9a:	d003      	beq.n	8001aa4 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	685b      	ldr	r3, [r3, #4]
 8001aa0:	2b12      	cmp	r3, #18
 8001aa2:	d130      	bne.n	8001b06 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	2203      	movs	r2, #3
 8001ab0:	409a      	lsls	r2, r3
 8001ab2:	0013      	movs	r3, r2
 8001ab4:	43da      	mvns	r2, r3
 8001ab6:	693b      	ldr	r3, [r7, #16]
 8001ab8:	4013      	ands	r3, r2
 8001aba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	68da      	ldr	r2, [r3, #12]
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	409a      	lsls	r2, r3
 8001ac6:	0013      	movs	r3, r2
 8001ac8:	693a      	ldr	r2, [r7, #16]
 8001aca:	4313      	orrs	r3, r2
 8001acc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	693a      	ldr	r2, [r7, #16]
 8001ad2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ada:	2201      	movs	r2, #1
 8001adc:	697b      	ldr	r3, [r7, #20]
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	0013      	movs	r3, r2
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	693b      	ldr	r3, [r7, #16]
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	091b      	lsrs	r3, r3, #4
 8001af0:	2201      	movs	r2, #1
 8001af2:	401a      	ands	r2, r3
 8001af4:	697b      	ldr	r3, [r7, #20]
 8001af6:	409a      	lsls	r2, r3
 8001af8:	0013      	movs	r3, r2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	693a      	ldr	r2, [r7, #16]
 8001b04:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	409a      	lsls	r2, r3
 8001b14:	0013      	movs	r3, r2
 8001b16:	43da      	mvns	r2, r3
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	689a      	ldr	r2, [r3, #8]
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	005b      	lsls	r3, r3, #1
 8001b26:	409a      	lsls	r2, r3
 8001b28:	0013      	movs	r3, r2
 8001b2a:	693a      	ldr	r2, [r7, #16]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	685a      	ldr	r2, [r3, #4]
 8001b3a:	2380      	movs	r3, #128	; 0x80
 8001b3c:	055b      	lsls	r3, r3, #21
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d100      	bne.n	8001b44 <HAL_GPIO_Init+0x174>
 8001b42:	e092      	b.n	8001c6a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001b44:	4a50      	ldr	r2, [pc, #320]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	089b      	lsrs	r3, r3, #2
 8001b4a:	3318      	adds	r3, #24
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	589b      	ldr	r3, [r3, r2]
 8001b50:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	2203      	movs	r2, #3
 8001b56:	4013      	ands	r3, r2
 8001b58:	00db      	lsls	r3, r3, #3
 8001b5a:	220f      	movs	r2, #15
 8001b5c:	409a      	lsls	r2, r3
 8001b5e:	0013      	movs	r3, r2
 8001b60:	43da      	mvns	r2, r3
 8001b62:	693b      	ldr	r3, [r7, #16]
 8001b64:	4013      	ands	r3, r2
 8001b66:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	23a0      	movs	r3, #160	; 0xa0
 8001b6c:	05db      	lsls	r3, r3, #23
 8001b6e:	429a      	cmp	r2, r3
 8001b70:	d013      	beq.n	8001b9a <HAL_GPIO_Init+0x1ca>
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4a45      	ldr	r2, [pc, #276]	; (8001c8c <HAL_GPIO_Init+0x2bc>)
 8001b76:	4293      	cmp	r3, r2
 8001b78:	d00d      	beq.n	8001b96 <HAL_GPIO_Init+0x1c6>
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	4a44      	ldr	r2, [pc, #272]	; (8001c90 <HAL_GPIO_Init+0x2c0>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d007      	beq.n	8001b92 <HAL_GPIO_Init+0x1c2>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	4a43      	ldr	r2, [pc, #268]	; (8001c94 <HAL_GPIO_Init+0x2c4>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d101      	bne.n	8001b8e <HAL_GPIO_Init+0x1be>
 8001b8a:	2303      	movs	r3, #3
 8001b8c:	e006      	b.n	8001b9c <HAL_GPIO_Init+0x1cc>
 8001b8e:	2305      	movs	r3, #5
 8001b90:	e004      	b.n	8001b9c <HAL_GPIO_Init+0x1cc>
 8001b92:	2302      	movs	r3, #2
 8001b94:	e002      	b.n	8001b9c <HAL_GPIO_Init+0x1cc>
 8001b96:	2301      	movs	r3, #1
 8001b98:	e000      	b.n	8001b9c <HAL_GPIO_Init+0x1cc>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	697a      	ldr	r2, [r7, #20]
 8001b9e:	2103      	movs	r1, #3
 8001ba0:	400a      	ands	r2, r1
 8001ba2:	00d2      	lsls	r2, r2, #3
 8001ba4:	4093      	lsls	r3, r2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001bac:	4936      	ldr	r1, [pc, #216]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	089b      	lsrs	r3, r3, #2
 8001bb2:	3318      	adds	r3, #24
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	693a      	ldr	r2, [r7, #16]
 8001bb8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001bba:	4a33      	ldr	r2, [pc, #204]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001bbc:	2380      	movs	r3, #128	; 0x80
 8001bbe:	58d3      	ldr	r3, [r2, r3]
 8001bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	43da      	mvns	r2, r3
 8001bc6:	693b      	ldr	r3, [r7, #16]
 8001bc8:	4013      	ands	r3, r2
 8001bca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001bcc:	683b      	ldr	r3, [r7, #0]
 8001bce:	685a      	ldr	r2, [r3, #4]
 8001bd0:	2380      	movs	r3, #128	; 0x80
 8001bd2:	025b      	lsls	r3, r3, #9
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	d003      	beq.n	8001be0 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001be0:	4929      	ldr	r1, [pc, #164]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001be2:	2280      	movs	r2, #128	; 0x80
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001be8:	4a27      	ldr	r2, [pc, #156]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001bea:	2384      	movs	r3, #132	; 0x84
 8001bec:	58d3      	ldr	r3, [r2, r3]
 8001bee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	43da      	mvns	r2, r3
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	2380      	movs	r3, #128	; 0x80
 8001c00:	029b      	lsls	r3, r3, #10
 8001c02:	4013      	ands	r3, r2
 8001c04:	d003      	beq.n	8001c0e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001c06:	693a      	ldr	r2, [r7, #16]
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	4313      	orrs	r3, r2
 8001c0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c0e:	491e      	ldr	r1, [pc, #120]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001c10:	2284      	movs	r2, #132	; 0x84
 8001c12:	693b      	ldr	r3, [r7, #16]
 8001c14:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c16:	4b1c      	ldr	r3, [pc, #112]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	43da      	mvns	r2, r3
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	4013      	ands	r3, r2
 8001c24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685a      	ldr	r2, [r3, #4]
 8001c2a:	2380      	movs	r3, #128	; 0x80
 8001c2c:	035b      	lsls	r3, r3, #13
 8001c2e:	4013      	ands	r3, r2
 8001c30:	d003      	beq.n	8001c3a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001c32:	693a      	ldr	r2, [r7, #16]
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c3a:	4b13      	ldr	r3, [pc, #76]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001c3c:	693a      	ldr	r2, [r7, #16]
 8001c3e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001c40:	4b11      	ldr	r3, [pc, #68]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	43da      	mvns	r2, r3
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	685a      	ldr	r2, [r3, #4]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	039b      	lsls	r3, r3, #14
 8001c58:	4013      	ands	r3, r2
 8001c5a:	d003      	beq.n	8001c64 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	4313      	orrs	r3, r2
 8001c62:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c64:	4b08      	ldr	r3, [pc, #32]	; (8001c88 <HAL_GPIO_Init+0x2b8>)
 8001c66:	693a      	ldr	r2, [r7, #16]
 8001c68:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001c6a:	697b      	ldr	r3, [r7, #20]
 8001c6c:	3301      	adds	r3, #1
 8001c6e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	40da      	lsrs	r2, r3
 8001c78:	1e13      	subs	r3, r2, #0
 8001c7a:	d000      	beq.n	8001c7e <HAL_GPIO_Init+0x2ae>
 8001c7c:	e6b0      	b.n	80019e0 <HAL_GPIO_Init+0x10>
  }
}
 8001c7e:	46c0      	nop			; (mov r8, r8)
 8001c80:	46bd      	mov	sp, r7
 8001c82:	b006      	add	sp, #24
 8001c84:	bd80      	pop	{r7, pc}
 8001c86:	46c0      	nop			; (mov r8, r8)
 8001c88:	40021800 	.word	0x40021800
 8001c8c:	50000400 	.word	0x50000400
 8001c90:	50000800 	.word	0x50000800
 8001c94:	50000c00 	.word	0x50000c00

08001c98 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b086      	sub	sp, #24
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8001ca6:	e0b4      	b.n	8001e12 <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001ca8:	2201      	movs	r2, #1
 8001caa:	697b      	ldr	r3, [r7, #20]
 8001cac:	409a      	lsls	r2, r3
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d100      	bne.n	8001cbc <HAL_GPIO_DeInit+0x24>
 8001cba:	e0a7      	b.n	8001e0c <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8001cbc:	4a5a      	ldr	r2, [pc, #360]	; (8001e28 <HAL_GPIO_DeInit+0x190>)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	089b      	lsrs	r3, r3, #2
 8001cc2:	3318      	adds	r3, #24
 8001cc4:	009b      	lsls	r3, r3, #2
 8001cc6:	589b      	ldr	r3, [r3, r2]
 8001cc8:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001cca:	697b      	ldr	r3, [r7, #20]
 8001ccc:	2203      	movs	r2, #3
 8001cce:	4013      	ands	r3, r2
 8001cd0:	00db      	lsls	r3, r3, #3
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	409a      	lsls	r2, r3
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 8001cdc:	687a      	ldr	r2, [r7, #4]
 8001cde:	23a0      	movs	r3, #160	; 0xa0
 8001ce0:	05db      	lsls	r3, r3, #23
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d013      	beq.n	8001d0e <HAL_GPIO_DeInit+0x76>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a50      	ldr	r2, [pc, #320]	; (8001e2c <HAL_GPIO_DeInit+0x194>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d00d      	beq.n	8001d0a <HAL_GPIO_DeInit+0x72>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a4f      	ldr	r2, [pc, #316]	; (8001e30 <HAL_GPIO_DeInit+0x198>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d007      	beq.n	8001d06 <HAL_GPIO_DeInit+0x6e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a4e      	ldr	r2, [pc, #312]	; (8001e34 <HAL_GPIO_DeInit+0x19c>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d101      	bne.n	8001d02 <HAL_GPIO_DeInit+0x6a>
 8001cfe:	2303      	movs	r3, #3
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_DeInit+0x78>
 8001d02:	2305      	movs	r3, #5
 8001d04:	e004      	b.n	8001d10 <HAL_GPIO_DeInit+0x78>
 8001d06:	2302      	movs	r3, #2
 8001d08:	e002      	b.n	8001d10 <HAL_GPIO_DeInit+0x78>
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e000      	b.n	8001d10 <HAL_GPIO_DeInit+0x78>
 8001d0e:	2300      	movs	r3, #0
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	2103      	movs	r1, #3
 8001d14:	400a      	ands	r2, r1
 8001d16:	00d2      	lsls	r2, r2, #3
 8001d18:	4093      	lsls	r3, r2
 8001d1a:	68fa      	ldr	r2, [r7, #12]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d136      	bne.n	8001d8e <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 8001d20:	4a41      	ldr	r2, [pc, #260]	; (8001e28 <HAL_GPIO_DeInit+0x190>)
 8001d22:	2380      	movs	r3, #128	; 0x80
 8001d24:	58d3      	ldr	r3, [r2, r3]
 8001d26:	693a      	ldr	r2, [r7, #16]
 8001d28:	43d2      	mvns	r2, r2
 8001d2a:	493f      	ldr	r1, [pc, #252]	; (8001e28 <HAL_GPIO_DeInit+0x190>)
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2280      	movs	r2, #128	; 0x80
 8001d30:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 8001d32:	4a3d      	ldr	r2, [pc, #244]	; (8001e28 <HAL_GPIO_DeInit+0x190>)
 8001d34:	2384      	movs	r3, #132	; 0x84
 8001d36:	58d3      	ldr	r3, [r2, r3]
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	43d2      	mvns	r2, r2
 8001d3c:	493a      	ldr	r1, [pc, #232]	; (8001e28 <HAL_GPIO_DeInit+0x190>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	2284      	movs	r2, #132	; 0x84
 8001d42:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR1 &= ~(iocurrent);
 8001d44:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <HAL_GPIO_DeInit+0x190>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43d9      	mvns	r1, r3
 8001d4c:	4b36      	ldr	r3, [pc, #216]	; (8001e28 <HAL_GPIO_DeInit+0x190>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]
        EXTI->FTSR1 &= ~(iocurrent);
 8001d52:	4b35      	ldr	r3, [pc, #212]	; (8001e28 <HAL_GPIO_DeInit+0x190>)
 8001d54:	685a      	ldr	r2, [r3, #4]
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43d9      	mvns	r1, r3
 8001d5a:	4b33      	ldr	r3, [pc, #204]	; (8001e28 <HAL_GPIO_DeInit+0x190>)
 8001d5c:	400a      	ands	r2, r1
 8001d5e:	605a      	str	r2, [r3, #4]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	2203      	movs	r2, #3
 8001d64:	4013      	ands	r3, r2
 8001d66:	00db      	lsls	r3, r3, #3
 8001d68:	220f      	movs	r2, #15
 8001d6a:	409a      	lsls	r2, r3
 8001d6c:	0013      	movs	r3, r2
 8001d6e:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8001d70:	4a2d      	ldr	r2, [pc, #180]	; (8001e28 <HAL_GPIO_DeInit+0x190>)
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3318      	adds	r3, #24
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	589a      	ldr	r2, [r3, r2]
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	43d9      	mvns	r1, r3
 8001d80:	4829      	ldr	r0, [pc, #164]	; (8001e28 <HAL_GPIO_DeInit+0x190>)
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	089b      	lsrs	r3, r3, #2
 8001d86:	400a      	ands	r2, r1
 8001d88:	3318      	adds	r3, #24
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	005b      	lsls	r3, r3, #1
 8001d96:	2103      	movs	r1, #3
 8001d98:	4099      	lsls	r1, r3
 8001d9a:	000b      	movs	r3, r1
 8001d9c:	431a      	orrs	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	08da      	lsrs	r2, r3, #3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3208      	adds	r2, #8
 8001daa:	0092      	lsls	r2, r2, #2
 8001dac:	58d3      	ldr	r3, [r2, r3]
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	2107      	movs	r1, #7
 8001db2:	400a      	ands	r2, r1
 8001db4:	0092      	lsls	r2, r2, #2
 8001db6:	210f      	movs	r1, #15
 8001db8:	4091      	lsls	r1, r2
 8001dba:	000a      	movs	r2, r1
 8001dbc:	43d1      	mvns	r1, r2
 8001dbe:	697a      	ldr	r2, [r7, #20]
 8001dc0:	08d2      	lsrs	r2, r2, #3
 8001dc2:	4019      	ands	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	3208      	adds	r2, #8
 8001dc8:	0092      	lsls	r2, r2, #2
 8001dca:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	697a      	ldr	r2, [r7, #20]
 8001dd2:	0052      	lsls	r2, r2, #1
 8001dd4:	2103      	movs	r1, #3
 8001dd6:	4091      	lsls	r1, r2
 8001dd8:	000a      	movs	r2, r1
 8001dda:	43d2      	mvns	r2, r2
 8001ddc:	401a      	ands	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	2101      	movs	r1, #1
 8001de8:	697a      	ldr	r2, [r7, #20]
 8001dea:	4091      	lsls	r1, r2
 8001dec:	000a      	movs	r2, r1
 8001dee:	43d2      	mvns	r2, r2
 8001df0:	401a      	ands	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	697a      	ldr	r2, [r7, #20]
 8001dfc:	0052      	lsls	r2, r2, #1
 8001dfe:	2103      	movs	r1, #3
 8001e00:	4091      	lsls	r1, r2
 8001e02:	000a      	movs	r2, r1
 8001e04:	43d2      	mvns	r2, r2
 8001e06:	401a      	ands	r2, r3
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	60da      	str	r2, [r3, #12]
    }

    position++;
 8001e0c:	697b      	ldr	r3, [r7, #20]
 8001e0e:	3301      	adds	r3, #1
 8001e10:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	40da      	lsrs	r2, r3
 8001e18:	1e13      	subs	r3, r2, #0
 8001e1a:	d000      	beq.n	8001e1e <HAL_GPIO_DeInit+0x186>
 8001e1c:	e744      	b.n	8001ca8 <HAL_GPIO_DeInit+0x10>
  }
}
 8001e1e:	46c0      	nop			; (mov r8, r8)
 8001e20:	46bd      	mov	sp, r7
 8001e22:	b006      	add	sp, #24
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	46c0      	nop			; (mov r8, r8)
 8001e28:	40021800 	.word	0x40021800
 8001e2c:	50000400 	.word	0x50000400
 8001e30:	50000800 	.word	0x50000800
 8001e34:	50000c00 	.word	0x50000c00

08001e38 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	0008      	movs	r0, r1
 8001e42:	0011      	movs	r1, r2
 8001e44:	1cbb      	adds	r3, r7, #2
 8001e46:	1c02      	adds	r2, r0, #0
 8001e48:	801a      	strh	r2, [r3, #0]
 8001e4a:	1c7b      	adds	r3, r7, #1
 8001e4c:	1c0a      	adds	r2, r1, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e50:	1c7b      	adds	r3, r7, #1
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d004      	beq.n	8001e62 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e58:	1cbb      	adds	r3, r7, #2
 8001e5a:	881a      	ldrh	r2, [r3, #0]
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e60:	e003      	b.n	8001e6a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e62:	1cbb      	adds	r3, r7, #2
 8001e64:	881a      	ldrh	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e6a:	46c0      	nop			; (mov r8, r8)
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b002      	add	sp, #8
 8001e70:	bd80      	pop	{r7, pc}
	...

08001e74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001e7c:	4b19      	ldr	r3, [pc, #100]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a19      	ldr	r2, [pc, #100]	; (8001ee8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001e82:	4013      	ands	r3, r2
 8001e84:	0019      	movs	r1, r3
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001e88:	687a      	ldr	r2, [r7, #4]
 8001e8a:	430a      	orrs	r2, r1
 8001e8c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e8e:	687a      	ldr	r2, [r7, #4]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d11f      	bne.n	8001ed8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 8001e98:	4b14      	ldr	r3, [pc, #80]	; (8001eec <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	0013      	movs	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	189b      	adds	r3, r3, r2
 8001ea2:	005b      	lsls	r3, r3, #1
 8001ea4:	4912      	ldr	r1, [pc, #72]	; (8001ef0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001ea6:	0018      	movs	r0, r3
 8001ea8:	f7fe f936 	bl	8000118 <__udivsi3>
 8001eac:	0003      	movs	r3, r0
 8001eae:	3301      	adds	r3, #1
 8001eb0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001eb2:	e008      	b.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d003      	beq.n	8001ec2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	3b01      	subs	r3, #1
 8001ebe:	60fb      	str	r3, [r7, #12]
 8001ec0:	e001      	b.n	8001ec6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e009      	b.n	8001eda <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ec6:	4b07      	ldr	r3, [pc, #28]	; (8001ee4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ec8:	695a      	ldr	r2, [r3, #20]
 8001eca:	2380      	movs	r3, #128	; 0x80
 8001ecc:	00db      	lsls	r3, r3, #3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	2380      	movs	r3, #128	; 0x80
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d0ed      	beq.n	8001eb4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	0018      	movs	r0, r3
 8001edc:	46bd      	mov	sp, r7
 8001ede:	b004      	add	sp, #16
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	46c0      	nop			; (mov r8, r8)
 8001ee4:	40007000 	.word	0x40007000
 8001ee8:	fffff9ff 	.word	0xfffff9ff
 8001eec:	20000000 	.word	0x20000000
 8001ef0:	000f4240 	.word	0x000f4240

08001ef4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001ef8:	4b03      	ldr	r3, [pc, #12]	; (8001f08 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001efa:	689a      	ldr	r2, [r3, #8]
 8001efc:	23e0      	movs	r3, #224	; 0xe0
 8001efe:	01db      	lsls	r3, r3, #7
 8001f00:	4013      	ands	r3, r2
}
 8001f02:	0018      	movs	r0, r3
 8001f04:	46bd      	mov	sp, r7
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	40021000 	.word	0x40021000

08001f0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f0c:	b580      	push	{r7, lr}
 8001f0e:	b088      	sub	sp, #32
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d101      	bne.n	8001f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e2f9      	b.n	8002512 <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2201      	movs	r2, #1
 8001f24:	4013      	ands	r3, r2
 8001f26:	d100      	bne.n	8001f2a <HAL_RCC_OscConfig+0x1e>
 8001f28:	e07c      	b.n	8002024 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f2a:	4bc3      	ldr	r3, [pc, #780]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8001f2c:	689b      	ldr	r3, [r3, #8]
 8001f2e:	2238      	movs	r2, #56	; 0x38
 8001f30:	4013      	ands	r3, r2
 8001f32:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f34:	4bc0      	ldr	r3, [pc, #768]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8001f36:	68db      	ldr	r3, [r3, #12]
 8001f38:	2203      	movs	r2, #3
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001f3e:	69bb      	ldr	r3, [r7, #24]
 8001f40:	2b10      	cmp	r3, #16
 8001f42:	d102      	bne.n	8001f4a <HAL_RCC_OscConfig+0x3e>
 8001f44:	697b      	ldr	r3, [r7, #20]
 8001f46:	2b03      	cmp	r3, #3
 8001f48:	d002      	beq.n	8001f50 <HAL_RCC_OscConfig+0x44>
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	2b08      	cmp	r3, #8
 8001f4e:	d10b      	bne.n	8001f68 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f50:	4bb9      	ldr	r3, [pc, #740]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	2380      	movs	r3, #128	; 0x80
 8001f56:	029b      	lsls	r3, r3, #10
 8001f58:	4013      	ands	r3, r2
 8001f5a:	d062      	beq.n	8002022 <HAL_RCC_OscConfig+0x116>
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d15e      	bne.n	8002022 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001f64:	2301      	movs	r3, #1
 8001f66:	e2d4      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	025b      	lsls	r3, r3, #9
 8001f70:	429a      	cmp	r2, r3
 8001f72:	d107      	bne.n	8001f84 <HAL_RCC_OscConfig+0x78>
 8001f74:	4bb0      	ldr	r3, [pc, #704]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8001f76:	681a      	ldr	r2, [r3, #0]
 8001f78:	4baf      	ldr	r3, [pc, #700]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8001f7a:	2180      	movs	r1, #128	; 0x80
 8001f7c:	0249      	lsls	r1, r1, #9
 8001f7e:	430a      	orrs	r2, r1
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	e020      	b.n	8001fc6 <HAL_RCC_OscConfig+0xba>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	23a0      	movs	r3, #160	; 0xa0
 8001f8a:	02db      	lsls	r3, r3, #11
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d10e      	bne.n	8001fae <HAL_RCC_OscConfig+0xa2>
 8001f90:	4ba9      	ldr	r3, [pc, #676]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4ba8      	ldr	r3, [pc, #672]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8001f96:	2180      	movs	r1, #128	; 0x80
 8001f98:	02c9      	lsls	r1, r1, #11
 8001f9a:	430a      	orrs	r2, r1
 8001f9c:	601a      	str	r2, [r3, #0]
 8001f9e:	4ba6      	ldr	r3, [pc, #664]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	4ba5      	ldr	r3, [pc, #660]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8001fa4:	2180      	movs	r1, #128	; 0x80
 8001fa6:	0249      	lsls	r1, r1, #9
 8001fa8:	430a      	orrs	r2, r1
 8001faa:	601a      	str	r2, [r3, #0]
 8001fac:	e00b      	b.n	8001fc6 <HAL_RCC_OscConfig+0xba>
 8001fae:	4ba2      	ldr	r3, [pc, #648]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8001fb0:	681a      	ldr	r2, [r3, #0]
 8001fb2:	4ba1      	ldr	r3, [pc, #644]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8001fb4:	49a1      	ldr	r1, [pc, #644]	; (800223c <HAL_RCC_OscConfig+0x330>)
 8001fb6:	400a      	ands	r2, r1
 8001fb8:	601a      	str	r2, [r3, #0]
 8001fba:	4b9f      	ldr	r3, [pc, #636]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	4b9e      	ldr	r3, [pc, #632]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8001fc0:	499f      	ldr	r1, [pc, #636]	; (8002240 <HAL_RCC_OscConfig+0x334>)
 8001fc2:	400a      	ands	r2, r1
 8001fc4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	685b      	ldr	r3, [r3, #4]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d014      	beq.n	8001ff8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fce:	f7ff f9e1 	bl	8001394 <HAL_GetTick>
 8001fd2:	0003      	movs	r3, r0
 8001fd4:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fd6:	e008      	b.n	8001fea <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fd8:	f7ff f9dc 	bl	8001394 <HAL_GetTick>
 8001fdc:	0002      	movs	r2, r0
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	2b64      	cmp	r3, #100	; 0x64
 8001fe4:	d901      	bls.n	8001fea <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001fe6:	2303      	movs	r3, #3
 8001fe8:	e293      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fea:	4b93      	ldr	r3, [pc, #588]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8001fec:	681a      	ldr	r2, [r3, #0]
 8001fee:	2380      	movs	r3, #128	; 0x80
 8001ff0:	029b      	lsls	r3, r3, #10
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	d0f0      	beq.n	8001fd8 <HAL_RCC_OscConfig+0xcc>
 8001ff6:	e015      	b.n	8002024 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff8:	f7ff f9cc 	bl	8001394 <HAL_GetTick>
 8001ffc:	0003      	movs	r3, r0
 8001ffe:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002000:	e008      	b.n	8002014 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002002:	f7ff f9c7 	bl	8001394 <HAL_GetTick>
 8002006:	0002      	movs	r2, r0
 8002008:	693b      	ldr	r3, [r7, #16]
 800200a:	1ad3      	subs	r3, r2, r3
 800200c:	2b64      	cmp	r3, #100	; 0x64
 800200e:	d901      	bls.n	8002014 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002010:	2303      	movs	r3, #3
 8002012:	e27e      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002014:	4b88      	ldr	r3, [pc, #544]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8002016:	681a      	ldr	r2, [r3, #0]
 8002018:	2380      	movs	r3, #128	; 0x80
 800201a:	029b      	lsls	r3, r3, #10
 800201c:	4013      	ands	r3, r2
 800201e:	d1f0      	bne.n	8002002 <HAL_RCC_OscConfig+0xf6>
 8002020:	e000      	b.n	8002024 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002022:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2202      	movs	r2, #2
 800202a:	4013      	ands	r3, r2
 800202c:	d100      	bne.n	8002030 <HAL_RCC_OscConfig+0x124>
 800202e:	e099      	b.n	8002164 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002030:	4b81      	ldr	r3, [pc, #516]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	2238      	movs	r2, #56	; 0x38
 8002036:	4013      	ands	r3, r2
 8002038:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800203a:	4b7f      	ldr	r3, [pc, #508]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	2203      	movs	r2, #3
 8002040:	4013      	ands	r3, r2
 8002042:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8002044:	69bb      	ldr	r3, [r7, #24]
 8002046:	2b10      	cmp	r3, #16
 8002048:	d102      	bne.n	8002050 <HAL_RCC_OscConfig+0x144>
 800204a:	697b      	ldr	r3, [r7, #20]
 800204c:	2b02      	cmp	r3, #2
 800204e:	d002      	beq.n	8002056 <HAL_RCC_OscConfig+0x14a>
 8002050:	69bb      	ldr	r3, [r7, #24]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d135      	bne.n	80020c2 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002056:	4b78      	ldr	r3, [pc, #480]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8002058:	681a      	ldr	r2, [r3, #0]
 800205a:	2380      	movs	r3, #128	; 0x80
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4013      	ands	r3, r2
 8002060:	d005      	beq.n	800206e <HAL_RCC_OscConfig+0x162>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d101      	bne.n	800206e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800206a:	2301      	movs	r3, #1
 800206c:	e251      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800206e:	4b72      	ldr	r3, [pc, #456]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4a74      	ldr	r2, [pc, #464]	; (8002244 <HAL_RCC_OscConfig+0x338>)
 8002074:	4013      	ands	r3, r2
 8002076:	0019      	movs	r1, r3
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	021a      	lsls	r2, r3, #8
 800207e:	4b6e      	ldr	r3, [pc, #440]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8002080:	430a      	orrs	r2, r1
 8002082:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	2b00      	cmp	r3, #0
 8002088:	d112      	bne.n	80020b0 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800208a:	4b6b      	ldr	r3, [pc, #428]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4a6e      	ldr	r2, [pc, #440]	; (8002248 <HAL_RCC_OscConfig+0x33c>)
 8002090:	4013      	ands	r3, r2
 8002092:	0019      	movs	r1, r3
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	691a      	ldr	r2, [r3, #16]
 8002098:	4b67      	ldr	r3, [pc, #412]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 800209a:	430a      	orrs	r2, r1
 800209c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800209e:	4b66      	ldr	r3, [pc, #408]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	0adb      	lsrs	r3, r3, #11
 80020a4:	2207      	movs	r2, #7
 80020a6:	4013      	ands	r3, r2
 80020a8:	4a68      	ldr	r2, [pc, #416]	; (800224c <HAL_RCC_OscConfig+0x340>)
 80020aa:	40da      	lsrs	r2, r3
 80020ac:	4b68      	ldr	r3, [pc, #416]	; (8002250 <HAL_RCC_OscConfig+0x344>)
 80020ae:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80020b0:	4b68      	ldr	r3, [pc, #416]	; (8002254 <HAL_RCC_OscConfig+0x348>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	0018      	movs	r0, r3
 80020b6:	f7ff f913 	bl	80012e0 <HAL_InitTick>
 80020ba:	1e03      	subs	r3, r0, #0
 80020bc:	d051      	beq.n	8002162 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80020be:	2301      	movs	r3, #1
 80020c0:	e227      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d030      	beq.n	800212c <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80020ca:	4b5b      	ldr	r3, [pc, #364]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a5e      	ldr	r2, [pc, #376]	; (8002248 <HAL_RCC_OscConfig+0x33c>)
 80020d0:	4013      	ands	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691a      	ldr	r2, [r3, #16]
 80020d8:	4b57      	ldr	r3, [pc, #348]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80020de:	4b56      	ldr	r3, [pc, #344]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 80020e0:	681a      	ldr	r2, [r3, #0]
 80020e2:	4b55      	ldr	r3, [pc, #340]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 80020e4:	2180      	movs	r1, #128	; 0x80
 80020e6:	0049      	lsls	r1, r1, #1
 80020e8:	430a      	orrs	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7ff f952 	bl	8001394 <HAL_GetTick>
 80020f0:	0003      	movs	r3, r0
 80020f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f6:	f7ff f94d 	bl	8001394 <HAL_GetTick>
 80020fa:	0002      	movs	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e204      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002108:	4b4b      	ldr	r3, [pc, #300]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	4013      	ands	r3, r2
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002114:	4b48      	ldr	r3, [pc, #288]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	4a4a      	ldr	r2, [pc, #296]	; (8002244 <HAL_RCC_OscConfig+0x338>)
 800211a:	4013      	ands	r3, r2
 800211c:	0019      	movs	r1, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	695b      	ldr	r3, [r3, #20]
 8002122:	021a      	lsls	r2, r3, #8
 8002124:	4b44      	ldr	r3, [pc, #272]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8002126:	430a      	orrs	r2, r1
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	e01b      	b.n	8002164 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800212c:	4b42      	ldr	r3, [pc, #264]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	4b41      	ldr	r3, [pc, #260]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8002132:	4949      	ldr	r1, [pc, #292]	; (8002258 <HAL_RCC_OscConfig+0x34c>)
 8002134:	400a      	ands	r2, r1
 8002136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7ff f92c 	bl	8001394 <HAL_GetTick>
 800213c:	0003      	movs	r3, r0
 800213e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002140:	e008      	b.n	8002154 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002142:	f7ff f927 	bl	8001394 <HAL_GetTick>
 8002146:	0002      	movs	r2, r0
 8002148:	693b      	ldr	r3, [r7, #16]
 800214a:	1ad3      	subs	r3, r2, r3
 800214c:	2b02      	cmp	r3, #2
 800214e:	d901      	bls.n	8002154 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8002150:	2303      	movs	r3, #3
 8002152:	e1de      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002154:	4b38      	ldr	r3, [pc, #224]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	2380      	movs	r3, #128	; 0x80
 800215a:	00db      	lsls	r3, r3, #3
 800215c:	4013      	ands	r3, r2
 800215e:	d1f0      	bne.n	8002142 <HAL_RCC_OscConfig+0x236>
 8002160:	e000      	b.n	8002164 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002162:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2208      	movs	r2, #8
 800216a:	4013      	ands	r3, r2
 800216c:	d047      	beq.n	80021fe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800216e:	4b32      	ldr	r3, [pc, #200]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8002170:	689b      	ldr	r3, [r3, #8]
 8002172:	2238      	movs	r2, #56	; 0x38
 8002174:	4013      	ands	r3, r2
 8002176:	2b18      	cmp	r3, #24
 8002178:	d10a      	bne.n	8002190 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800217a:	4b2f      	ldr	r3, [pc, #188]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 800217c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800217e:	2202      	movs	r2, #2
 8002180:	4013      	ands	r3, r2
 8002182:	d03c      	beq.n	80021fe <HAL_RCC_OscConfig+0x2f2>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d138      	bne.n	80021fe <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800218c:	2301      	movs	r3, #1
 800218e:	e1c0      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	699b      	ldr	r3, [r3, #24]
 8002194:	2b00      	cmp	r3, #0
 8002196:	d019      	beq.n	80021cc <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002198:	4b27      	ldr	r3, [pc, #156]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 800219a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800219c:	4b26      	ldr	r3, [pc, #152]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 800219e:	2101      	movs	r1, #1
 80021a0:	430a      	orrs	r2, r1
 80021a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021a4:	f7ff f8f6 	bl	8001394 <HAL_GetTick>
 80021a8:	0003      	movs	r3, r0
 80021aa:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021ac:	e008      	b.n	80021c0 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021ae:	f7ff f8f1 	bl	8001394 <HAL_GetTick>
 80021b2:	0002      	movs	r2, r0
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	1ad3      	subs	r3, r2, r3
 80021b8:	2b02      	cmp	r3, #2
 80021ba:	d901      	bls.n	80021c0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80021bc:	2303      	movs	r3, #3
 80021be:	e1a8      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80021c0:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 80021c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021c4:	2202      	movs	r2, #2
 80021c6:	4013      	ands	r3, r2
 80021c8:	d0f1      	beq.n	80021ae <HAL_RCC_OscConfig+0x2a2>
 80021ca:	e018      	b.n	80021fe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80021cc:	4b1a      	ldr	r3, [pc, #104]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 80021ce:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 80021d2:	2101      	movs	r1, #1
 80021d4:	438a      	bics	r2, r1
 80021d6:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021d8:	f7ff f8dc 	bl	8001394 <HAL_GetTick>
 80021dc:	0003      	movs	r3, r0
 80021de:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021e0:	e008      	b.n	80021f4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021e2:	f7ff f8d7 	bl	8001394 <HAL_GetTick>
 80021e6:	0002      	movs	r2, r0
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	1ad3      	subs	r3, r2, r3
 80021ec:	2b02      	cmp	r3, #2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e18e      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80021f4:	4b10      	ldr	r3, [pc, #64]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 80021f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021f8:	2202      	movs	r2, #2
 80021fa:	4013      	ands	r3, r2
 80021fc:	d1f1      	bne.n	80021e2 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2204      	movs	r2, #4
 8002204:	4013      	ands	r3, r2
 8002206:	d100      	bne.n	800220a <HAL_RCC_OscConfig+0x2fe>
 8002208:	e0c6      	b.n	8002398 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 800220a:	231f      	movs	r3, #31
 800220c:	18fb      	adds	r3, r7, r3
 800220e:	2200      	movs	r2, #0
 8002210:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002212:	4b09      	ldr	r3, [pc, #36]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8002214:	689b      	ldr	r3, [r3, #8]
 8002216:	2238      	movs	r2, #56	; 0x38
 8002218:	4013      	ands	r3, r2
 800221a:	2b20      	cmp	r3, #32
 800221c:	d11e      	bne.n	800225c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800221e:	4b06      	ldr	r3, [pc, #24]	; (8002238 <HAL_RCC_OscConfig+0x32c>)
 8002220:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002222:	2202      	movs	r2, #2
 8002224:	4013      	ands	r3, r2
 8002226:	d100      	bne.n	800222a <HAL_RCC_OscConfig+0x31e>
 8002228:	e0b6      	b.n	8002398 <HAL_RCC_OscConfig+0x48c>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d000      	beq.n	8002234 <HAL_RCC_OscConfig+0x328>
 8002232:	e0b1      	b.n	8002398 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8002234:	2301      	movs	r3, #1
 8002236:	e16c      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
 8002238:	40021000 	.word	0x40021000
 800223c:	fffeffff 	.word	0xfffeffff
 8002240:	fffbffff 	.word	0xfffbffff
 8002244:	ffff80ff 	.word	0xffff80ff
 8002248:	ffffc7ff 	.word	0xffffc7ff
 800224c:	00f42400 	.word	0x00f42400
 8002250:	20000000 	.word	0x20000000
 8002254:	20000038 	.word	0x20000038
 8002258:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800225c:	4baf      	ldr	r3, [pc, #700]	; (800251c <HAL_RCC_OscConfig+0x610>)
 800225e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002260:	2380      	movs	r3, #128	; 0x80
 8002262:	055b      	lsls	r3, r3, #21
 8002264:	4013      	ands	r3, r2
 8002266:	d101      	bne.n	800226c <HAL_RCC_OscConfig+0x360>
 8002268:	2301      	movs	r3, #1
 800226a:	e000      	b.n	800226e <HAL_RCC_OscConfig+0x362>
 800226c:	2300      	movs	r3, #0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d011      	beq.n	8002296 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002272:	4baa      	ldr	r3, [pc, #680]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002274:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002276:	4ba9      	ldr	r3, [pc, #676]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002278:	2180      	movs	r1, #128	; 0x80
 800227a:	0549      	lsls	r1, r1, #21
 800227c:	430a      	orrs	r2, r1
 800227e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002280:	4ba6      	ldr	r3, [pc, #664]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002282:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002284:	2380      	movs	r3, #128	; 0x80
 8002286:	055b      	lsls	r3, r3, #21
 8002288:	4013      	ands	r3, r2
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800228e:	231f      	movs	r3, #31
 8002290:	18fb      	adds	r3, r7, r3
 8002292:	2201      	movs	r2, #1
 8002294:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002296:	4ba2      	ldr	r3, [pc, #648]	; (8002520 <HAL_RCC_OscConfig+0x614>)
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	4013      	ands	r3, r2
 80022a0:	d11a      	bne.n	80022d8 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022a2:	4b9f      	ldr	r3, [pc, #636]	; (8002520 <HAL_RCC_OscConfig+0x614>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	4b9e      	ldr	r3, [pc, #632]	; (8002520 <HAL_RCC_OscConfig+0x614>)
 80022a8:	2180      	movs	r1, #128	; 0x80
 80022aa:	0049      	lsls	r1, r1, #1
 80022ac:	430a      	orrs	r2, r1
 80022ae:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 80022b0:	f7ff f870 	bl	8001394 <HAL_GetTick>
 80022b4:	0003      	movs	r3, r0
 80022b6:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022ba:	f7ff f86b 	bl	8001394 <HAL_GetTick>
 80022be:	0002      	movs	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e122      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80022cc:	4b94      	ldr	r3, [pc, #592]	; (8002520 <HAL_RCC_OscConfig+0x614>)
 80022ce:	681a      	ldr	r2, [r3, #0]
 80022d0:	2380      	movs	r3, #128	; 0x80
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	4013      	ands	r3, r2
 80022d6:	d0f0      	beq.n	80022ba <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	2b01      	cmp	r3, #1
 80022de:	d106      	bne.n	80022ee <HAL_RCC_OscConfig+0x3e2>
 80022e0:	4b8e      	ldr	r3, [pc, #568]	; (800251c <HAL_RCC_OscConfig+0x610>)
 80022e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022e4:	4b8d      	ldr	r3, [pc, #564]	; (800251c <HAL_RCC_OscConfig+0x610>)
 80022e6:	2101      	movs	r1, #1
 80022e8:	430a      	orrs	r2, r1
 80022ea:	65da      	str	r2, [r3, #92]	; 0x5c
 80022ec:	e01c      	b.n	8002328 <HAL_RCC_OscConfig+0x41c>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	2b05      	cmp	r3, #5
 80022f4:	d10c      	bne.n	8002310 <HAL_RCC_OscConfig+0x404>
 80022f6:	4b89      	ldr	r3, [pc, #548]	; (800251c <HAL_RCC_OscConfig+0x610>)
 80022f8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80022fa:	4b88      	ldr	r3, [pc, #544]	; (800251c <HAL_RCC_OscConfig+0x610>)
 80022fc:	2104      	movs	r1, #4
 80022fe:	430a      	orrs	r2, r1
 8002300:	65da      	str	r2, [r3, #92]	; 0x5c
 8002302:	4b86      	ldr	r3, [pc, #536]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002304:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002306:	4b85      	ldr	r3, [pc, #532]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002308:	2101      	movs	r1, #1
 800230a:	430a      	orrs	r2, r1
 800230c:	65da      	str	r2, [r3, #92]	; 0x5c
 800230e:	e00b      	b.n	8002328 <HAL_RCC_OscConfig+0x41c>
 8002310:	4b82      	ldr	r3, [pc, #520]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002312:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002314:	4b81      	ldr	r3, [pc, #516]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002316:	2101      	movs	r1, #1
 8002318:	438a      	bics	r2, r1
 800231a:	65da      	str	r2, [r3, #92]	; 0x5c
 800231c:	4b7f      	ldr	r3, [pc, #508]	; (800251c <HAL_RCC_OscConfig+0x610>)
 800231e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002320:	4b7e      	ldr	r3, [pc, #504]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002322:	2104      	movs	r1, #4
 8002324:	438a      	bics	r2, r1
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d014      	beq.n	800235a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002330:	f7ff f830 	bl	8001394 <HAL_GetTick>
 8002334:	0003      	movs	r3, r0
 8002336:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002338:	e009      	b.n	800234e <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800233a:	f7ff f82b 	bl	8001394 <HAL_GetTick>
 800233e:	0002      	movs	r2, r0
 8002340:	693b      	ldr	r3, [r7, #16]
 8002342:	1ad3      	subs	r3, r2, r3
 8002344:	4a77      	ldr	r2, [pc, #476]	; (8002524 <HAL_RCC_OscConfig+0x618>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d901      	bls.n	800234e <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e0e1      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800234e:	4b73      	ldr	r3, [pc, #460]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002350:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002352:	2202      	movs	r2, #2
 8002354:	4013      	ands	r3, r2
 8002356:	d0f0      	beq.n	800233a <HAL_RCC_OscConfig+0x42e>
 8002358:	e013      	b.n	8002382 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800235a:	f7ff f81b 	bl	8001394 <HAL_GetTick>
 800235e:	0003      	movs	r3, r0
 8002360:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002362:	e009      	b.n	8002378 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002364:	f7ff f816 	bl	8001394 <HAL_GetTick>
 8002368:	0002      	movs	r2, r0
 800236a:	693b      	ldr	r3, [r7, #16]
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	4a6d      	ldr	r2, [pc, #436]	; (8002524 <HAL_RCC_OscConfig+0x618>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d901      	bls.n	8002378 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8002374:	2303      	movs	r3, #3
 8002376:	e0cc      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002378:	4b68      	ldr	r3, [pc, #416]	; (800251c <HAL_RCC_OscConfig+0x610>)
 800237a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237c:	2202      	movs	r2, #2
 800237e:	4013      	ands	r3, r2
 8002380:	d1f0      	bne.n	8002364 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002382:	231f      	movs	r3, #31
 8002384:	18fb      	adds	r3, r7, r3
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	2b01      	cmp	r3, #1
 800238a:	d105      	bne.n	8002398 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800238c:	4b63      	ldr	r3, [pc, #396]	; (800251c <HAL_RCC_OscConfig+0x610>)
 800238e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002390:	4b62      	ldr	r3, [pc, #392]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002392:	4965      	ldr	r1, [pc, #404]	; (8002528 <HAL_RCC_OscConfig+0x61c>)
 8002394:	400a      	ands	r2, r1
 8002396:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	69db      	ldr	r3, [r3, #28]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d100      	bne.n	80023a2 <HAL_RCC_OscConfig+0x496>
 80023a0:	e0b6      	b.n	8002510 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023a2:	4b5e      	ldr	r3, [pc, #376]	; (800251c <HAL_RCC_OscConfig+0x610>)
 80023a4:	689b      	ldr	r3, [r3, #8]
 80023a6:	2238      	movs	r2, #56	; 0x38
 80023a8:	4013      	ands	r3, r2
 80023aa:	2b10      	cmp	r3, #16
 80023ac:	d100      	bne.n	80023b0 <HAL_RCC_OscConfig+0x4a4>
 80023ae:	e07e      	b.n	80024ae <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	2b02      	cmp	r3, #2
 80023b6:	d153      	bne.n	8002460 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023b8:	4b58      	ldr	r3, [pc, #352]	; (800251c <HAL_RCC_OscConfig+0x610>)
 80023ba:	681a      	ldr	r2, [r3, #0]
 80023bc:	4b57      	ldr	r3, [pc, #348]	; (800251c <HAL_RCC_OscConfig+0x610>)
 80023be:	495b      	ldr	r1, [pc, #364]	; (800252c <HAL_RCC_OscConfig+0x620>)
 80023c0:	400a      	ands	r2, r1
 80023c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7fe ffe6 	bl	8001394 <HAL_GetTick>
 80023c8:	0003      	movs	r3, r0
 80023ca:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ce:	f7fe ffe1 	bl	8001394 <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e098      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80023e0:	4b4e      	ldr	r3, [pc, #312]	; (800251c <HAL_RCC_OscConfig+0x610>)
 80023e2:	681a      	ldr	r2, [r3, #0]
 80023e4:	2380      	movs	r3, #128	; 0x80
 80023e6:	049b      	lsls	r3, r3, #18
 80023e8:	4013      	ands	r3, r2
 80023ea:	d1f0      	bne.n	80023ce <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80023ec:	4b4b      	ldr	r3, [pc, #300]	; (800251c <HAL_RCC_OscConfig+0x610>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	4a4f      	ldr	r2, [pc, #316]	; (8002530 <HAL_RCC_OscConfig+0x624>)
 80023f2:	4013      	ands	r3, r2
 80023f4:	0019      	movs	r1, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a1a      	ldr	r2, [r3, #32]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023fe:	431a      	orrs	r2, r3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002404:	021b      	lsls	r3, r3, #8
 8002406:	431a      	orrs	r2, r3
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240c:	431a      	orrs	r2, r3
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	431a      	orrs	r2, r3
 8002414:	4b41      	ldr	r3, [pc, #260]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002416:	430a      	orrs	r2, r1
 8002418:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800241a:	4b40      	ldr	r3, [pc, #256]	; (800251c <HAL_RCC_OscConfig+0x610>)
 800241c:	681a      	ldr	r2, [r3, #0]
 800241e:	4b3f      	ldr	r3, [pc, #252]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002420:	2180      	movs	r1, #128	; 0x80
 8002422:	0449      	lsls	r1, r1, #17
 8002424:	430a      	orrs	r2, r1
 8002426:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002428:	4b3c      	ldr	r3, [pc, #240]	; (800251c <HAL_RCC_OscConfig+0x610>)
 800242a:	68da      	ldr	r2, [r3, #12]
 800242c:	4b3b      	ldr	r3, [pc, #236]	; (800251c <HAL_RCC_OscConfig+0x610>)
 800242e:	2180      	movs	r1, #128	; 0x80
 8002430:	0549      	lsls	r1, r1, #21
 8002432:	430a      	orrs	r2, r1
 8002434:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002436:	f7fe ffad 	bl	8001394 <HAL_GetTick>
 800243a:	0003      	movs	r3, r0
 800243c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800243e:	e008      	b.n	8002452 <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002440:	f7fe ffa8 	bl	8001394 <HAL_GetTick>
 8002444:	0002      	movs	r2, r0
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	1ad3      	subs	r3, r2, r3
 800244a:	2b02      	cmp	r3, #2
 800244c:	d901      	bls.n	8002452 <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 800244e:	2303      	movs	r3, #3
 8002450:	e05f      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002452:	4b32      	ldr	r3, [pc, #200]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	2380      	movs	r3, #128	; 0x80
 8002458:	049b      	lsls	r3, r3, #18
 800245a:	4013      	ands	r3, r2
 800245c:	d0f0      	beq.n	8002440 <HAL_RCC_OscConfig+0x534>
 800245e:	e057      	b.n	8002510 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002460:	4b2e      	ldr	r3, [pc, #184]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002462:	681a      	ldr	r2, [r3, #0]
 8002464:	4b2d      	ldr	r3, [pc, #180]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002466:	4931      	ldr	r1, [pc, #196]	; (800252c <HAL_RCC_OscConfig+0x620>)
 8002468:	400a      	ands	r2, r1
 800246a:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 800246c:	4b2b      	ldr	r3, [pc, #172]	; (800251c <HAL_RCC_OscConfig+0x610>)
 800246e:	68da      	ldr	r2, [r3, #12]
 8002470:	4b2a      	ldr	r3, [pc, #168]	; (800251c <HAL_RCC_OscConfig+0x610>)
 8002472:	2103      	movs	r1, #3
 8002474:	438a      	bics	r2, r1
 8002476:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8002478:	4b28      	ldr	r3, [pc, #160]	; (800251c <HAL_RCC_OscConfig+0x610>)
 800247a:	68da      	ldr	r2, [r3, #12]
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_RCC_OscConfig+0x610>)
 800247e:	492d      	ldr	r1, [pc, #180]	; (8002534 <HAL_RCC_OscConfig+0x628>)
 8002480:	400a      	ands	r2, r1
 8002482:	60da      	str	r2, [r3, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002484:	f7fe ff86 	bl	8001394 <HAL_GetTick>
 8002488:	0003      	movs	r3, r0
 800248a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800248c:	e008      	b.n	80024a0 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800248e:	f7fe ff81 	bl	8001394 <HAL_GetTick>
 8002492:	0002      	movs	r2, r0
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	1ad3      	subs	r3, r2, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e038      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80024a0:	4b1e      	ldr	r3, [pc, #120]	; (800251c <HAL_RCC_OscConfig+0x610>)
 80024a2:	681a      	ldr	r2, [r3, #0]
 80024a4:	2380      	movs	r3, #128	; 0x80
 80024a6:	049b      	lsls	r3, r3, #18
 80024a8:	4013      	ands	r3, r2
 80024aa:	d1f0      	bne.n	800248e <HAL_RCC_OscConfig+0x582>
 80024ac:	e030      	b.n	8002510 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d101      	bne.n	80024ba <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 80024b6:	2301      	movs	r3, #1
 80024b8:	e02b      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80024ba:	4b18      	ldr	r3, [pc, #96]	; (800251c <HAL_RCC_OscConfig+0x610>)
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c0:	697b      	ldr	r3, [r7, #20]
 80024c2:	2203      	movs	r2, #3
 80024c4:	401a      	ands	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	6a1b      	ldr	r3, [r3, #32]
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d11e      	bne.n	800250c <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	2270      	movs	r2, #112	; 0x70
 80024d2:	401a      	ands	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024d8:	429a      	cmp	r2, r3
 80024da:	d117      	bne.n	800250c <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024dc:	697a      	ldr	r2, [r7, #20]
 80024de:	23fe      	movs	r3, #254	; 0xfe
 80024e0:	01db      	lsls	r3, r3, #7
 80024e2:	401a      	ands	r2, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024e8:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d10e      	bne.n	800250c <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80024ee:	697a      	ldr	r2, [r7, #20]
 80024f0:	23f8      	movs	r3, #248	; 0xf8
 80024f2:	039b      	lsls	r3, r3, #14
 80024f4:	401a      	ands	r2, r3
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80024fa:	429a      	cmp	r2, r3
 80024fc:	d106      	bne.n	800250c <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	0f5b      	lsrs	r3, r3, #29
 8002502:	075a      	lsls	r2, r3, #29
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002508:	429a      	cmp	r2, r3
 800250a:	d001      	beq.n	8002510 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	e000      	b.n	8002512 <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8002510:	2300      	movs	r3, #0
}
 8002512:	0018      	movs	r0, r3
 8002514:	46bd      	mov	sp, r7
 8002516:	b008      	add	sp, #32
 8002518:	bd80      	pop	{r7, pc}
 800251a:	46c0      	nop			; (mov r8, r8)
 800251c:	40021000 	.word	0x40021000
 8002520:	40007000 	.word	0x40007000
 8002524:	00001388 	.word	0x00001388
 8002528:	efffffff 	.word	0xefffffff
 800252c:	feffffff 	.word	0xfeffffff
 8002530:	1fc1808c 	.word	0x1fc1808c
 8002534:	effeffff 	.word	0xeffeffff

08002538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
 8002540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d101      	bne.n	800254c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0e9      	b.n	8002720 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800254c:	4b76      	ldr	r3, [pc, #472]	; (8002728 <HAL_RCC_ClockConfig+0x1f0>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	2207      	movs	r2, #7
 8002552:	4013      	ands	r3, r2
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	429a      	cmp	r2, r3
 8002558:	d91e      	bls.n	8002598 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800255a:	4b73      	ldr	r3, [pc, #460]	; (8002728 <HAL_RCC_ClockConfig+0x1f0>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	2207      	movs	r2, #7
 8002560:	4393      	bics	r3, r2
 8002562:	0019      	movs	r1, r3
 8002564:	4b70      	ldr	r3, [pc, #448]	; (8002728 <HAL_RCC_ClockConfig+0x1f0>)
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	430a      	orrs	r2, r1
 800256a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800256c:	f7fe ff12 	bl	8001394 <HAL_GetTick>
 8002570:	0003      	movs	r3, r0
 8002572:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002574:	e009      	b.n	800258a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002576:	f7fe ff0d 	bl	8001394 <HAL_GetTick>
 800257a:	0002      	movs	r2, r0
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	4a6a      	ldr	r2, [pc, #424]	; (800272c <HAL_RCC_ClockConfig+0x1f4>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d901      	bls.n	800258a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002586:	2303      	movs	r3, #3
 8002588:	e0ca      	b.n	8002720 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800258a:	4b67      	ldr	r3, [pc, #412]	; (8002728 <HAL_RCC_ClockConfig+0x1f0>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	2207      	movs	r2, #7
 8002590:	4013      	ands	r3, r2
 8002592:	683a      	ldr	r2, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d1ee      	bne.n	8002576 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2202      	movs	r2, #2
 800259e:	4013      	ands	r3, r2
 80025a0:	d015      	beq.n	80025ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	2204      	movs	r2, #4
 80025a8:	4013      	ands	r3, r2
 80025aa:	d006      	beq.n	80025ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80025ac:	4b60      	ldr	r3, [pc, #384]	; (8002730 <HAL_RCC_ClockConfig+0x1f8>)
 80025ae:	689a      	ldr	r2, [r3, #8]
 80025b0:	4b5f      	ldr	r3, [pc, #380]	; (8002730 <HAL_RCC_ClockConfig+0x1f8>)
 80025b2:	21e0      	movs	r1, #224	; 0xe0
 80025b4:	01c9      	lsls	r1, r1, #7
 80025b6:	430a      	orrs	r2, r1
 80025b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025ba:	4b5d      	ldr	r3, [pc, #372]	; (8002730 <HAL_RCC_ClockConfig+0x1f8>)
 80025bc:	689b      	ldr	r3, [r3, #8]
 80025be:	4a5d      	ldr	r2, [pc, #372]	; (8002734 <HAL_RCC_ClockConfig+0x1fc>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	0019      	movs	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	4b59      	ldr	r3, [pc, #356]	; (8002730 <HAL_RCC_ClockConfig+0x1f8>)
 80025ca:	430a      	orrs	r2, r1
 80025cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	2201      	movs	r2, #1
 80025d4:	4013      	ands	r3, r2
 80025d6:	d057      	beq.n	8002688 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	685b      	ldr	r3, [r3, #4]
 80025dc:	2b01      	cmp	r3, #1
 80025de:	d107      	bne.n	80025f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025e0:	4b53      	ldr	r3, [pc, #332]	; (8002730 <HAL_RCC_ClockConfig+0x1f8>)
 80025e2:	681a      	ldr	r2, [r3, #0]
 80025e4:	2380      	movs	r3, #128	; 0x80
 80025e6:	029b      	lsls	r3, r3, #10
 80025e8:	4013      	ands	r3, r2
 80025ea:	d12b      	bne.n	8002644 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80025ec:	2301      	movs	r3, #1
 80025ee:	e097      	b.n	8002720 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	2b02      	cmp	r3, #2
 80025f6:	d107      	bne.n	8002608 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025f8:	4b4d      	ldr	r3, [pc, #308]	; (8002730 <HAL_RCC_ClockConfig+0x1f8>)
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	2380      	movs	r3, #128	; 0x80
 80025fe:	049b      	lsls	r3, r3, #18
 8002600:	4013      	ands	r3, r2
 8002602:	d11f      	bne.n	8002644 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002604:	2301      	movs	r3, #1
 8002606:	e08b      	b.n	8002720 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d107      	bne.n	8002620 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002610:	4b47      	ldr	r3, [pc, #284]	; (8002730 <HAL_RCC_ClockConfig+0x1f8>)
 8002612:	681a      	ldr	r2, [r3, #0]
 8002614:	2380      	movs	r3, #128	; 0x80
 8002616:	00db      	lsls	r3, r3, #3
 8002618:	4013      	ands	r3, r2
 800261a:	d113      	bne.n	8002644 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e07f      	b.n	8002720 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	685b      	ldr	r3, [r3, #4]
 8002624:	2b03      	cmp	r3, #3
 8002626:	d106      	bne.n	8002636 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002628:	4b41      	ldr	r3, [pc, #260]	; (8002730 <HAL_RCC_ClockConfig+0x1f8>)
 800262a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800262c:	2202      	movs	r2, #2
 800262e:	4013      	ands	r3, r2
 8002630:	d108      	bne.n	8002644 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002632:	2301      	movs	r3, #1
 8002634:	e074      	b.n	8002720 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002636:	4b3e      	ldr	r3, [pc, #248]	; (8002730 <HAL_RCC_ClockConfig+0x1f8>)
 8002638:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800263a:	2202      	movs	r2, #2
 800263c:	4013      	ands	r3, r2
 800263e:	d101      	bne.n	8002644 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002640:	2301      	movs	r3, #1
 8002642:	e06d      	b.n	8002720 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002644:	4b3a      	ldr	r3, [pc, #232]	; (8002730 <HAL_RCC_ClockConfig+0x1f8>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	2207      	movs	r2, #7
 800264a:	4393      	bics	r3, r2
 800264c:	0019      	movs	r1, r3
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685a      	ldr	r2, [r3, #4]
 8002652:	4b37      	ldr	r3, [pc, #220]	; (8002730 <HAL_RCC_ClockConfig+0x1f8>)
 8002654:	430a      	orrs	r2, r1
 8002656:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002658:	f7fe fe9c 	bl	8001394 <HAL_GetTick>
 800265c:	0003      	movs	r3, r0
 800265e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002660:	e009      	b.n	8002676 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002662:	f7fe fe97 	bl	8001394 <HAL_GetTick>
 8002666:	0002      	movs	r2, r0
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	4a2f      	ldr	r2, [pc, #188]	; (800272c <HAL_RCC_ClockConfig+0x1f4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e054      	b.n	8002720 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002676:	4b2e      	ldr	r3, [pc, #184]	; (8002730 <HAL_RCC_ClockConfig+0x1f8>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	2238      	movs	r2, #56	; 0x38
 800267c:	401a      	ands	r2, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	429a      	cmp	r2, r3
 8002686:	d1ec      	bne.n	8002662 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002688:	4b27      	ldr	r3, [pc, #156]	; (8002728 <HAL_RCC_ClockConfig+0x1f0>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	2207      	movs	r2, #7
 800268e:	4013      	ands	r3, r2
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	429a      	cmp	r2, r3
 8002694:	d21e      	bcs.n	80026d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002696:	4b24      	ldr	r3, [pc, #144]	; (8002728 <HAL_RCC_ClockConfig+0x1f0>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	2207      	movs	r2, #7
 800269c:	4393      	bics	r3, r2
 800269e:	0019      	movs	r1, r3
 80026a0:	4b21      	ldr	r3, [pc, #132]	; (8002728 <HAL_RCC_ClockConfig+0x1f0>)
 80026a2:	683a      	ldr	r2, [r7, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026a8:	f7fe fe74 	bl	8001394 <HAL_GetTick>
 80026ac:	0003      	movs	r3, r0
 80026ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026b0:	e009      	b.n	80026c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026b2:	f7fe fe6f 	bl	8001394 <HAL_GetTick>
 80026b6:	0002      	movs	r2, r0
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	4a1b      	ldr	r2, [pc, #108]	; (800272c <HAL_RCC_ClockConfig+0x1f4>)
 80026be:	4293      	cmp	r3, r2
 80026c0:	d901      	bls.n	80026c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80026c2:	2303      	movs	r3, #3
 80026c4:	e02c      	b.n	8002720 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026c6:	4b18      	ldr	r3, [pc, #96]	; (8002728 <HAL_RCC_ClockConfig+0x1f0>)
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	2207      	movs	r2, #7
 80026cc:	4013      	ands	r3, r2
 80026ce:	683a      	ldr	r2, [r7, #0]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d1ee      	bne.n	80026b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	2204      	movs	r2, #4
 80026da:	4013      	ands	r3, r2
 80026dc:	d009      	beq.n	80026f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80026de:	4b14      	ldr	r3, [pc, #80]	; (8002730 <HAL_RCC_ClockConfig+0x1f8>)
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	4a15      	ldr	r2, [pc, #84]	; (8002738 <HAL_RCC_ClockConfig+0x200>)
 80026e4:	4013      	ands	r3, r2
 80026e6:	0019      	movs	r1, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	68da      	ldr	r2, [r3, #12]
 80026ec:	4b10      	ldr	r3, [pc, #64]	; (8002730 <HAL_RCC_ClockConfig+0x1f8>)
 80026ee:	430a      	orrs	r2, r1
 80026f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80026f2:	f000 f829 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 80026f6:	0001      	movs	r1, r0
 80026f8:	4b0d      	ldr	r3, [pc, #52]	; (8002730 <HAL_RCC_ClockConfig+0x1f8>)
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	0a1b      	lsrs	r3, r3, #8
 80026fe:	220f      	movs	r2, #15
 8002700:	401a      	ands	r2, r3
 8002702:	4b0e      	ldr	r3, [pc, #56]	; (800273c <HAL_RCC_ClockConfig+0x204>)
 8002704:	0092      	lsls	r2, r2, #2
 8002706:	58d3      	ldr	r3, [r2, r3]
 8002708:	221f      	movs	r2, #31
 800270a:	4013      	ands	r3, r2
 800270c:	000a      	movs	r2, r1
 800270e:	40da      	lsrs	r2, r3
 8002710:	4b0b      	ldr	r3, [pc, #44]	; (8002740 <HAL_RCC_ClockConfig+0x208>)
 8002712:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002714:	4b0b      	ldr	r3, [pc, #44]	; (8002744 <HAL_RCC_ClockConfig+0x20c>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	0018      	movs	r0, r3
 800271a:	f7fe fde1 	bl	80012e0 <HAL_InitTick>
 800271e:	0003      	movs	r3, r0
}
 8002720:	0018      	movs	r0, r3
 8002722:	46bd      	mov	sp, r7
 8002724:	b004      	add	sp, #16
 8002726:	bd80      	pop	{r7, pc}
 8002728:	40022000 	.word	0x40022000
 800272c:	00001388 	.word	0x00001388
 8002730:	40021000 	.word	0x40021000
 8002734:	fffff0ff 	.word	0xfffff0ff
 8002738:	ffff8fff 	.word	0xffff8fff
 800273c:	08006468 	.word	0x08006468
 8002740:	20000000 	.word	0x20000000
 8002744:	20000038 	.word	0x20000038

08002748 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800274e:	4b3c      	ldr	r3, [pc, #240]	; (8002840 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002750:	689b      	ldr	r3, [r3, #8]
 8002752:	2238      	movs	r2, #56	; 0x38
 8002754:	4013      	ands	r3, r2
 8002756:	d10f      	bne.n	8002778 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002758:	4b39      	ldr	r3, [pc, #228]	; (8002840 <HAL_RCC_GetSysClockFreq+0xf8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	0adb      	lsrs	r3, r3, #11
 800275e:	2207      	movs	r2, #7
 8002760:	4013      	ands	r3, r2
 8002762:	2201      	movs	r2, #1
 8002764:	409a      	lsls	r2, r3
 8002766:	0013      	movs	r3, r2
 8002768:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800276a:	6839      	ldr	r1, [r7, #0]
 800276c:	4835      	ldr	r0, [pc, #212]	; (8002844 <HAL_RCC_GetSysClockFreq+0xfc>)
 800276e:	f7fd fcd3 	bl	8000118 <__udivsi3>
 8002772:	0003      	movs	r3, r0
 8002774:	613b      	str	r3, [r7, #16]
 8002776:	e05d      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002778:	4b31      	ldr	r3, [pc, #196]	; (8002840 <HAL_RCC_GetSysClockFreq+0xf8>)
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	2238      	movs	r2, #56	; 0x38
 800277e:	4013      	ands	r3, r2
 8002780:	2b08      	cmp	r3, #8
 8002782:	d102      	bne.n	800278a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002784:	4b30      	ldr	r3, [pc, #192]	; (8002848 <HAL_RCC_GetSysClockFreq+0x100>)
 8002786:	613b      	str	r3, [r7, #16]
 8002788:	e054      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800278a:	4b2d      	ldr	r3, [pc, #180]	; (8002840 <HAL_RCC_GetSysClockFreq+0xf8>)
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2238      	movs	r2, #56	; 0x38
 8002790:	4013      	ands	r3, r2
 8002792:	2b10      	cmp	r3, #16
 8002794:	d138      	bne.n	8002808 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002796:	4b2a      	ldr	r3, [pc, #168]	; (8002840 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002798:	68db      	ldr	r3, [r3, #12]
 800279a:	2203      	movs	r2, #3
 800279c:	4013      	ands	r3, r2
 800279e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80027a0:	4b27      	ldr	r3, [pc, #156]	; (8002840 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027a2:	68db      	ldr	r3, [r3, #12]
 80027a4:	091b      	lsrs	r3, r3, #4
 80027a6:	2207      	movs	r2, #7
 80027a8:	4013      	ands	r3, r2
 80027aa:	3301      	adds	r3, #1
 80027ac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2b03      	cmp	r3, #3
 80027b2:	d10d      	bne.n	80027d0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80027b4:	68b9      	ldr	r1, [r7, #8]
 80027b6:	4824      	ldr	r0, [pc, #144]	; (8002848 <HAL_RCC_GetSysClockFreq+0x100>)
 80027b8:	f7fd fcae 	bl	8000118 <__udivsi3>
 80027bc:	0003      	movs	r3, r0
 80027be:	0019      	movs	r1, r3
 80027c0:	4b1f      	ldr	r3, [pc, #124]	; (8002840 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027c2:	68db      	ldr	r3, [r3, #12]
 80027c4:	0a1b      	lsrs	r3, r3, #8
 80027c6:	227f      	movs	r2, #127	; 0x7f
 80027c8:	4013      	ands	r3, r2
 80027ca:	434b      	muls	r3, r1
 80027cc:	617b      	str	r3, [r7, #20]
        break;
 80027ce:	e00d      	b.n	80027ec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 80027d0:	68b9      	ldr	r1, [r7, #8]
 80027d2:	481c      	ldr	r0, [pc, #112]	; (8002844 <HAL_RCC_GetSysClockFreq+0xfc>)
 80027d4:	f7fd fca0 	bl	8000118 <__udivsi3>
 80027d8:	0003      	movs	r3, r0
 80027da:	0019      	movs	r1, r3
 80027dc:	4b18      	ldr	r3, [pc, #96]	; (8002840 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027de:	68db      	ldr	r3, [r3, #12]
 80027e0:	0a1b      	lsrs	r3, r3, #8
 80027e2:	227f      	movs	r2, #127	; 0x7f
 80027e4:	4013      	ands	r3, r2
 80027e6:	434b      	muls	r3, r1
 80027e8:	617b      	str	r3, [r7, #20]
        break;
 80027ea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 80027ec:	4b14      	ldr	r3, [pc, #80]	; (8002840 <HAL_RCC_GetSysClockFreq+0xf8>)
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	0f5b      	lsrs	r3, r3, #29
 80027f2:	2207      	movs	r2, #7
 80027f4:	4013      	ands	r3, r2
 80027f6:	3301      	adds	r3, #1
 80027f8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 80027fa:	6879      	ldr	r1, [r7, #4]
 80027fc:	6978      	ldr	r0, [r7, #20]
 80027fe:	f7fd fc8b 	bl	8000118 <__udivsi3>
 8002802:	0003      	movs	r3, r0
 8002804:	613b      	str	r3, [r7, #16]
 8002806:	e015      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002808:	4b0d      	ldr	r3, [pc, #52]	; (8002840 <HAL_RCC_GetSysClockFreq+0xf8>)
 800280a:	689b      	ldr	r3, [r3, #8]
 800280c:	2238      	movs	r2, #56	; 0x38
 800280e:	4013      	ands	r3, r2
 8002810:	2b20      	cmp	r3, #32
 8002812:	d103      	bne.n	800281c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002814:	2380      	movs	r3, #128	; 0x80
 8002816:	021b      	lsls	r3, r3, #8
 8002818:	613b      	str	r3, [r7, #16]
 800281a:	e00b      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800281c:	4b08      	ldr	r3, [pc, #32]	; (8002840 <HAL_RCC_GetSysClockFreq+0xf8>)
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	2238      	movs	r2, #56	; 0x38
 8002822:	4013      	ands	r3, r2
 8002824:	2b18      	cmp	r3, #24
 8002826:	d103      	bne.n	8002830 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002828:	23fa      	movs	r3, #250	; 0xfa
 800282a:	01db      	lsls	r3, r3, #7
 800282c:	613b      	str	r3, [r7, #16]
 800282e:	e001      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002830:	2300      	movs	r3, #0
 8002832:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002834:	693b      	ldr	r3, [r7, #16]
}
 8002836:	0018      	movs	r0, r3
 8002838:	46bd      	mov	sp, r7
 800283a:	b006      	add	sp, #24
 800283c:	bd80      	pop	{r7, pc}
 800283e:	46c0      	nop			; (mov r8, r8)
 8002840:	40021000 	.word	0x40021000
 8002844:	00f42400 	.word	0x00f42400
 8002848:	007a1200 	.word	0x007a1200

0800284c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002850:	4b02      	ldr	r3, [pc, #8]	; (800285c <HAL_RCC_GetHCLKFreq+0x10>)
 8002852:	681b      	ldr	r3, [r3, #0]
}
 8002854:	0018      	movs	r0, r3
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
 800285a:	46c0      	nop			; (mov r8, r8)
 800285c:	20000000 	.word	0x20000000

08002860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002860:	b5b0      	push	{r4, r5, r7, lr}
 8002862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002864:	f7ff fff2 	bl	800284c <HAL_RCC_GetHCLKFreq>
 8002868:	0004      	movs	r4, r0
 800286a:	f7ff fb43 	bl	8001ef4 <LL_RCC_GetAPB1Prescaler>
 800286e:	0003      	movs	r3, r0
 8002870:	0b1a      	lsrs	r2, r3, #12
 8002872:	4b05      	ldr	r3, [pc, #20]	; (8002888 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002874:	0092      	lsls	r2, r2, #2
 8002876:	58d3      	ldr	r3, [r2, r3]
 8002878:	221f      	movs	r2, #31
 800287a:	4013      	ands	r3, r2
 800287c:	40dc      	lsrs	r4, r3
 800287e:	0023      	movs	r3, r4
}
 8002880:	0018      	movs	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	bdb0      	pop	{r4, r5, r7, pc}
 8002886:	46c0      	nop			; (mov r8, r8)
 8002888:	080064a8 	.word	0x080064a8

0800288c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b086      	sub	sp, #24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002894:	2313      	movs	r3, #19
 8002896:	18fb      	adds	r3, r7, r3
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800289c:	2312      	movs	r3, #18
 800289e:	18fb      	adds	r3, r7, r3
 80028a0:	2200      	movs	r2, #0
 80028a2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	2380      	movs	r3, #128	; 0x80
 80028aa:	029b      	lsls	r3, r3, #10
 80028ac:	4013      	ands	r3, r2
 80028ae:	d100      	bne.n	80028b2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80028b0:	e0a4      	b.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80028b2:	2311      	movs	r3, #17
 80028b4:	18fb      	adds	r3, r7, r3
 80028b6:	2200      	movs	r2, #0
 80028b8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028ba:	4b87      	ldr	r3, [pc, #540]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80028bc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028be:	2380      	movs	r3, #128	; 0x80
 80028c0:	055b      	lsls	r3, r3, #21
 80028c2:	4013      	ands	r3, r2
 80028c4:	d111      	bne.n	80028ea <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028c6:	4b84      	ldr	r3, [pc, #528]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80028c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028ca:	4b83      	ldr	r3, [pc, #524]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80028cc:	2180      	movs	r1, #128	; 0x80
 80028ce:	0549      	lsls	r1, r1, #21
 80028d0:	430a      	orrs	r2, r1
 80028d2:	63da      	str	r2, [r3, #60]	; 0x3c
 80028d4:	4b80      	ldr	r3, [pc, #512]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80028d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	055b      	lsls	r3, r3, #21
 80028dc:	4013      	ands	r3, r2
 80028de:	60bb      	str	r3, [r7, #8]
 80028e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028e2:	2311      	movs	r3, #17
 80028e4:	18fb      	adds	r3, r7, r3
 80028e6:	2201      	movs	r2, #1
 80028e8:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028ea:	4b7c      	ldr	r3, [pc, #496]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028ec:	681a      	ldr	r2, [r3, #0]
 80028ee:	4b7b      	ldr	r3, [pc, #492]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80028f0:	2180      	movs	r1, #128	; 0x80
 80028f2:	0049      	lsls	r1, r1, #1
 80028f4:	430a      	orrs	r2, r1
 80028f6:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80028f8:	f7fe fd4c 	bl	8001394 <HAL_GetTick>
 80028fc:	0003      	movs	r3, r0
 80028fe:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002900:	e00b      	b.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002902:	f7fe fd47 	bl	8001394 <HAL_GetTick>
 8002906:	0002      	movs	r2, r0
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	1ad3      	subs	r3, r2, r3
 800290c:	2b02      	cmp	r3, #2
 800290e:	d904      	bls.n	800291a <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002910:	2313      	movs	r3, #19
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	2203      	movs	r2, #3
 8002916:	701a      	strb	r2, [r3, #0]
        break;
 8002918:	e005      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800291a:	4b70      	ldr	r3, [pc, #448]	; (8002adc <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	2380      	movs	r3, #128	; 0x80
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	4013      	ands	r3, r2
 8002924:	d0ed      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 8002926:	2313      	movs	r3, #19
 8002928:	18fb      	adds	r3, r7, r3
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d154      	bne.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002930:	4b69      	ldr	r3, [pc, #420]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002932:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002934:	23c0      	movs	r3, #192	; 0xc0
 8002936:	009b      	lsls	r3, r3, #2
 8002938:	4013      	ands	r3, r2
 800293a:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d019      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0xea>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	697a      	ldr	r2, [r7, #20]
 8002948:	429a      	cmp	r2, r3
 800294a:	d014      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800294c:	4b62      	ldr	r3, [pc, #392]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800294e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002950:	4a63      	ldr	r2, [pc, #396]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002952:	4013      	ands	r3, r2
 8002954:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002956:	4b60      	ldr	r3, [pc, #384]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002958:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800295a:	4b5f      	ldr	r3, [pc, #380]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800295c:	2180      	movs	r1, #128	; 0x80
 800295e:	0249      	lsls	r1, r1, #9
 8002960:	430a      	orrs	r2, r1
 8002962:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002964:	4b5c      	ldr	r3, [pc, #368]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002966:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002968:	4b5b      	ldr	r3, [pc, #364]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800296a:	495e      	ldr	r1, [pc, #376]	; (8002ae4 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800296c:	400a      	ands	r2, r1
 800296e:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002970:	4b59      	ldr	r3, [pc, #356]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002972:	697a      	ldr	r2, [r7, #20]
 8002974:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2201      	movs	r2, #1
 800297a:	4013      	ands	r3, r2
 800297c:	d016      	beq.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fd09 	bl	8001394 <HAL_GetTick>
 8002982:	0003      	movs	r3, r0
 8002984:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002986:	e00c      	b.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002988:	f7fe fd04 	bl	8001394 <HAL_GetTick>
 800298c:	0002      	movs	r2, r0
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	1ad3      	subs	r3, r2, r3
 8002992:	4a55      	ldr	r2, [pc, #340]	; (8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d904      	bls.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 8002998:	2313      	movs	r3, #19
 800299a:	18fb      	adds	r3, r7, r3
 800299c:	2203      	movs	r2, #3
 800299e:	701a      	strb	r2, [r3, #0]
            break;
 80029a0:	e004      	b.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80029a2:	4b4d      	ldr	r3, [pc, #308]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80029a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a6:	2202      	movs	r2, #2
 80029a8:	4013      	ands	r3, r2
 80029aa:	d0ed      	beq.n	8002988 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80029ac:	2313      	movs	r3, #19
 80029ae:	18fb      	adds	r3, r7, r3
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80029b6:	4b48      	ldr	r3, [pc, #288]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80029b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ba:	4a49      	ldr	r2, [pc, #292]	; (8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80029bc:	4013      	ands	r3, r2
 80029be:	0019      	movs	r1, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699a      	ldr	r2, [r3, #24]
 80029c4:	4b44      	ldr	r3, [pc, #272]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80029c6:	430a      	orrs	r2, r1
 80029c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80029ca:	e00c      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80029cc:	2312      	movs	r3, #18
 80029ce:	18fb      	adds	r3, r7, r3
 80029d0:	2213      	movs	r2, #19
 80029d2:	18ba      	adds	r2, r7, r2
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	701a      	strb	r2, [r3, #0]
 80029d8:	e005      	b.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029da:	2312      	movs	r3, #18
 80029dc:	18fb      	adds	r3, r7, r3
 80029de:	2213      	movs	r2, #19
 80029e0:	18ba      	adds	r2, r7, r2
 80029e2:	7812      	ldrb	r2, [r2, #0]
 80029e4:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80029e6:	2311      	movs	r3, #17
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	2b01      	cmp	r3, #1
 80029ee:	d105      	bne.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029f0:	4b39      	ldr	r3, [pc, #228]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80029f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029f4:	4b38      	ldr	r3, [pc, #224]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80029f6:	493d      	ldr	r1, [pc, #244]	; (8002aec <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80029f8:	400a      	ands	r2, r1
 80029fa:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2201      	movs	r2, #1
 8002a02:	4013      	ands	r3, r2
 8002a04:	d009      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002a06:	4b34      	ldr	r3, [pc, #208]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a0a:	2203      	movs	r2, #3
 8002a0c:	4393      	bics	r3, r2
 8002a0e:	0019      	movs	r1, r3
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	4b30      	ldr	r3, [pc, #192]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a16:	430a      	orrs	r2, r1
 8002a18:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	4013      	ands	r3, r2
 8002a22:	d009      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002a24:	4b2c      	ldr	r3, [pc, #176]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a28:	220c      	movs	r2, #12
 8002a2a:	4393      	bics	r3, r2
 8002a2c:	0019      	movs	r1, r3
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	689a      	ldr	r2, [r3, #8]
 8002a32:	4b29      	ldr	r3, [pc, #164]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a34:	430a      	orrs	r2, r1
 8002a36:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2240      	movs	r2, #64	; 0x40
 8002a3e:	4013      	ands	r3, r2
 8002a40:	d009      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a42:	4b25      	ldr	r3, [pc, #148]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a46:	4a2a      	ldr	r2, [pc, #168]	; (8002af0 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002a48:	4013      	ands	r3, r2
 8002a4a:	0019      	movs	r1, r3
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	68da      	ldr	r2, [r3, #12]
 8002a50:	4b21      	ldr	r3, [pc, #132]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a52:	430a      	orrs	r2, r1
 8002a54:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681a      	ldr	r2, [r3, #0]
 8002a5a:	2380      	movs	r3, #128	; 0x80
 8002a5c:	01db      	lsls	r3, r3, #7
 8002a5e:	4013      	ands	r3, r2
 8002a60:	d015      	beq.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002a62:	4b1d      	ldr	r3, [pc, #116]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a66:	009b      	lsls	r3, r3, #2
 8002a68:	0899      	lsrs	r1, r3, #2
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	4b1a      	ldr	r3, [pc, #104]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a70:	430a      	orrs	r2, r1
 8002a72:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	695a      	ldr	r2, [r3, #20]
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	05db      	lsls	r3, r3, #23
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d106      	bne.n	8002a8e <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a80:	4b15      	ldr	r3, [pc, #84]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a82:	68da      	ldr	r2, [r3, #12]
 8002a84:	4b14      	ldr	r3, [pc, #80]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a86:	2180      	movs	r1, #128	; 0x80
 8002a88:	0249      	lsls	r1, r1, #9
 8002a8a:	430a      	orrs	r2, r1
 8002a8c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681a      	ldr	r2, [r3, #0]
 8002a92:	2380      	movs	r3, #128	; 0x80
 8002a94:	011b      	lsls	r3, r3, #4
 8002a96:	4013      	ands	r3, r2
 8002a98:	d016      	beq.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a9a:	4b0f      	ldr	r3, [pc, #60]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002a9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a9e:	4a15      	ldr	r2, [pc, #84]	; (8002af4 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	0019      	movs	r1, r3
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	691a      	ldr	r2, [r3, #16]
 8002aa8:	4b0b      	ldr	r3, [pc, #44]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	691a      	ldr	r2, [r3, #16]
 8002ab2:	2380      	movs	r3, #128	; 0x80
 8002ab4:	01db      	lsls	r3, r3, #7
 8002ab6:	429a      	cmp	r2, r3
 8002ab8:	d106      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002aba:	4b07      	ldr	r3, [pc, #28]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002abc:	68da      	ldr	r2, [r3, #12]
 8002abe:	4b06      	ldr	r3, [pc, #24]	; (8002ad8 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002ac0:	2180      	movs	r1, #128	; 0x80
 8002ac2:	0249      	lsls	r1, r1, #9
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 8002ac8:	2312      	movs	r3, #18
 8002aca:	18fb      	adds	r3, r7, r3
 8002acc:	781b      	ldrb	r3, [r3, #0]
}
 8002ace:	0018      	movs	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	b006      	add	sp, #24
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	46c0      	nop			; (mov r8, r8)
 8002ad8:	40021000 	.word	0x40021000
 8002adc:	40007000 	.word	0x40007000
 8002ae0:	fffffcff 	.word	0xfffffcff
 8002ae4:	fffeffff 	.word	0xfffeffff
 8002ae8:	00001388 	.word	0x00001388
 8002aec:	efffffff 	.word	0xefffffff
 8002af0:	ffffcfff 	.word	0xffffcfff
 8002af4:	ffff3fff 	.word	0xffff3fff

08002af8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b084      	sub	sp, #16
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e08a      	b.n	8002c20 <HAL_SPI_Init+0x128>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	225d      	movs	r2, #93	; 0x5d
 8002b14:	5c9b      	ldrb	r3, [r3, r2]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_SPI_Init+0x34>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	225c      	movs	r2, #92	; 0x5c
 8002b20:	2100      	movs	r1, #0
 8002b22:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	0018      	movs	r0, r3
 8002b28:	f7fd fe4a 	bl	80007c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	225d      	movs	r2, #93	; 0x5d
 8002b30:	2102      	movs	r1, #2
 8002b32:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	2140      	movs	r1, #64	; 0x40
 8002b40:	438a      	bics	r2, r1
 8002b42:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68da      	ldr	r2, [r3, #12]
 8002b48:	23e0      	movs	r3, #224	; 0xe0
 8002b4a:	00db      	lsls	r3, r3, #3
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	d902      	bls.n	8002b56 <HAL_SPI_Init+0x5e>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002b50:	2300      	movs	r3, #0
 8002b52:	60fb      	str	r3, [r7, #12]
 8002b54:	e002      	b.n	8002b5c <HAL_SPI_Init+0x64>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002b56:	2380      	movs	r3, #128	; 0x80
 8002b58:	015b      	lsls	r3, r3, #5
 8002b5a:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	68da      	ldr	r2, [r3, #12]
 8002b60:	23f0      	movs	r3, #240	; 0xf0
 8002b62:	011b      	lsls	r3, r3, #4
 8002b64:	429a      	cmp	r2, r3
 8002b66:	d008      	beq.n	8002b7a <HAL_SPI_Init+0x82>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	68da      	ldr	r2, [r3, #12]
 8002b6c:	23e0      	movs	r3, #224	; 0xe0
 8002b6e:	00db      	lsls	r3, r3, #3
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d002      	beq.n	8002b7a <HAL_SPI_Init+0x82>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	2200      	movs	r2, #0
 8002b78:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d10c      	bne.n	8002b9c <HAL_SPI_Init+0xa4>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	23e0      	movs	r3, #224	; 0xe0
 8002b88:	00db      	lsls	r3, r3, #3
 8002b8a:	429a      	cmp	r2, r3
 8002b8c:	d903      	bls.n	8002b96 <HAL_SPI_Init+0x9e>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2202      	movs	r2, #2
 8002b92:	631a      	str	r2, [r3, #48]	; 0x30
 8002b94:	e002      	b.n	8002b9c <HAL_SPI_Init+0xa4>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685a      	ldr	r2, [r3, #4]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	431a      	orrs	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	691b      	ldr	r3, [r3, #16]
 8002baa:	431a      	orrs	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	431a      	orrs	r2, r3
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6999      	ldr	r1, [r3, #24]
 8002bb6:	2380      	movs	r3, #128	; 0x80
 8002bb8:	009b      	lsls	r3, r3, #2
 8002bba:	400b      	ands	r3, r1
 8002bbc:	431a      	orrs	r2, r3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	69db      	ldr	r3, [r3, #28]
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	0011      	movs	r1, r2
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	430a      	orrs	r2, r1
 8002bd6:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	699b      	ldr	r3, [r3, #24]
 8002bdc:	0c1b      	lsrs	r3, r3, #16
 8002bde:	2204      	movs	r2, #4
 8002be0:	401a      	ands	r2, r3
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bec:	431a      	orrs	r2, r3
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	68fa      	ldr	r2, [r7, #12]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	69da      	ldr	r2, [r3, #28]
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	4907      	ldr	r1, [pc, #28]	; (8002c28 <HAL_SPI_Init+0x130>)
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	2200      	movs	r2, #0
 8002c14:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	225d      	movs	r2, #93	; 0x5d
 8002c1a:	2101      	movs	r1, #1
 8002c1c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002c1e:	2300      	movs	r3, #0
}
 8002c20:	0018      	movs	r0, r3
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b004      	add	sp, #16
 8002c26:	bd80      	pop	{r7, pc}
 8002c28:	fffff7ff 	.word	0xfffff7ff

08002c2c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b086      	sub	sp, #24
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	60b9      	str	r1, [r7, #8]
 8002c36:	1dbb      	adds	r3, r7, #6
 8002c38:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c3a:	2317      	movs	r3, #23
 8002c3c:	18fb      	adds	r3, r7, r3
 8002c3e:	2200      	movs	r2, #0
 8002c40:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	225c      	movs	r2, #92	; 0x5c
 8002c46:	5c9b      	ldrb	r3, [r3, r2]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d101      	bne.n	8002c50 <HAL_SPI_Transmit_IT+0x24>
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	e076      	b.n	8002d3e <HAL_SPI_Transmit_IT+0x112>
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	225c      	movs	r2, #92	; 0x5c
 8002c54:	2101      	movs	r1, #1
 8002c56:	5499      	strb	r1, [r3, r2]

  if ((pData == NULL) || (Size == 0U))
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d003      	beq.n	8002c66 <HAL_SPI_Transmit_IT+0x3a>
 8002c5e:	1dbb      	adds	r3, r7, #6
 8002c60:	881b      	ldrh	r3, [r3, #0]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d104      	bne.n	8002c70 <HAL_SPI_Transmit_IT+0x44>
  {
    errorcode = HAL_ERROR;
 8002c66:	2317      	movs	r3, #23
 8002c68:	18fb      	adds	r3, r7, r3
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c6e:	e05f      	b.n	8002d30 <HAL_SPI_Transmit_IT+0x104>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	225d      	movs	r2, #93	; 0x5d
 8002c74:	5c9b      	ldrb	r3, [r3, r2]
 8002c76:	b2db      	uxtb	r3, r3
 8002c78:	2b01      	cmp	r3, #1
 8002c7a:	d004      	beq.n	8002c86 <HAL_SPI_Transmit_IT+0x5a>
  {
    errorcode = HAL_BUSY;
 8002c7c:	2317      	movs	r3, #23
 8002c7e:	18fb      	adds	r3, r7, r3
 8002c80:	2202      	movs	r2, #2
 8002c82:	701a      	strb	r2, [r3, #0]
    goto error;
 8002c84:	e054      	b.n	8002d30 <HAL_SPI_Transmit_IT+0x104>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	225d      	movs	r2, #93	; 0x5d
 8002c8a:	2103      	movs	r1, #3
 8002c8c:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	2200      	movs	r2, #0
 8002c92:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	68ba      	ldr	r2, [r7, #8]
 8002c98:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	1dba      	adds	r2, r7, #6
 8002c9e:	8812      	ldrh	r2, [r2, #0]
 8002ca0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	1dba      	adds	r2, r7, #6
 8002ca6:	8812      	ldrh	r2, [r2, #0]
 8002ca8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2200      	movs	r2, #0
 8002cae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	2244      	movs	r2, #68	; 0x44
 8002cb4:	2100      	movs	r1, #0
 8002cb6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	2246      	movs	r2, #70	; 0x46
 8002cbc:	2100      	movs	r1, #0
 8002cbe:	5299      	strh	r1, [r3, r2]
  hspi->RxISR       = NULL;
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	68da      	ldr	r2, [r3, #12]
 8002cca:	23e0      	movs	r3, #224	; 0xe0
 8002ccc:	00db      	lsls	r3, r3, #3
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	d903      	bls.n	8002cda <HAL_SPI_Transmit_IT+0xae>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4a1c      	ldr	r2, [pc, #112]	; (8002d48 <HAL_SPI_Transmit_IT+0x11c>)
 8002cd6:	651a      	str	r2, [r3, #80]	; 0x50
 8002cd8:	e002      	b.n	8002ce0 <HAL_SPI_Transmit_IT+0xb4>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	4a1b      	ldr	r2, [pc, #108]	; (8002d4c <HAL_SPI_Transmit_IT+0x120>)
 8002cde:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	689a      	ldr	r2, [r3, #8]
 8002ce4:	2380      	movs	r3, #128	; 0x80
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d108      	bne.n	8002cfe <HAL_SPI_Transmit_IT+0xd2>
  {
    SPI_1LINE_TX(hspi);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2180      	movs	r1, #128	; 0x80
 8002cf8:	01c9      	lsls	r1, r1, #7
 8002cfa:	430a      	orrs	r2, r1
 8002cfc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685a      	ldr	r2, [r3, #4]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	21a0      	movs	r1, #160	; 0xa0
 8002d0a:	430a      	orrs	r2, r1
 8002d0c:	605a      	str	r2, [r3, #4]


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2240      	movs	r2, #64	; 0x40
 8002d16:	4013      	ands	r3, r2
 8002d18:	2b40      	cmp	r3, #64	; 0x40
 8002d1a:	d008      	beq.n	8002d2e <HAL_SPI_Transmit_IT+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2140      	movs	r1, #64	; 0x40
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	601a      	str	r2, [r3, #0]
 8002d2c:	e000      	b.n	8002d30 <HAL_SPI_Transmit_IT+0x104>
  }

error :
 8002d2e:	46c0      	nop			; (mov r8, r8)
  __HAL_UNLOCK(hspi);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	225c      	movs	r2, #92	; 0x5c
 8002d34:	2100      	movs	r1, #0
 8002d36:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002d38:	2317      	movs	r3, #23
 8002d3a:	18fb      	adds	r3, r7, r3
 8002d3c:	781b      	ldrb	r3, [r3, #0]
}
 8002d3e:	0018      	movs	r0, r3
 8002d40:	46bd      	mov	sp, r7
 8002d42:	b006      	add	sp, #24
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	46c0      	nop			; (mov r8, r8)
 8002d48:	08002fe1 	.word	0x08002fe1
 8002d4c:	08002f99 	.word	0x08002f99

08002d50 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	099b      	lsrs	r3, r3, #6
 8002d6c:	001a      	movs	r2, r3
 8002d6e:	2301      	movs	r3, #1
 8002d70:	4013      	ands	r3, r2
 8002d72:	d10f      	bne.n	8002d94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d74:	69bb      	ldr	r3, [r7, #24]
 8002d76:	2201      	movs	r2, #1
 8002d78:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002d7a:	d00b      	beq.n	8002d94 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002d7c:	69fb      	ldr	r3, [r7, #28]
 8002d7e:	099b      	lsrs	r3, r3, #6
 8002d80:	001a      	movs	r2, r3
 8002d82:	2301      	movs	r3, #1
 8002d84:	4013      	ands	r3, r2
 8002d86:	d005      	beq.n	8002d94 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d8c:	687a      	ldr	r2, [r7, #4]
 8002d8e:	0010      	movs	r0, r2
 8002d90:	4798      	blx	r3
    return;
 8002d92:	e0d6      	b.n	8002f42 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002d94:	69bb      	ldr	r3, [r7, #24]
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	001a      	movs	r2, r3
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	d00b      	beq.n	8002db8 <HAL_SPI_IRQHandler+0x68>
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	09db      	lsrs	r3, r3, #7
 8002da4:	001a      	movs	r2, r3
 8002da6:	2301      	movs	r3, #1
 8002da8:	4013      	ands	r3, r2
 8002daa:	d005      	beq.n	8002db8 <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002db0:	687a      	ldr	r2, [r7, #4]
 8002db2:	0010      	movs	r0, r2
 8002db4:	4798      	blx	r3
    return;
 8002db6:	e0c4      	b.n	8002f42 <HAL_SPI_IRQHandler+0x1f2>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002db8:	69bb      	ldr	r3, [r7, #24]
 8002dba:	095b      	lsrs	r3, r3, #5
 8002dbc:	001a      	movs	r2, r3
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	d10c      	bne.n	8002dde <HAL_SPI_IRQHandler+0x8e>
 8002dc4:	69bb      	ldr	r3, [r7, #24]
 8002dc6:	099b      	lsrs	r3, r3, #6
 8002dc8:	001a      	movs	r2, r3
 8002dca:	2301      	movs	r3, #1
 8002dcc:	4013      	ands	r3, r2
 8002dce:	d106      	bne.n	8002dde <HAL_SPI_IRQHandler+0x8e>
 8002dd0:	69bb      	ldr	r3, [r7, #24]
 8002dd2:	0a1b      	lsrs	r3, r3, #8
 8002dd4:	001a      	movs	r2, r3
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	4013      	ands	r3, r2
 8002dda:	d100      	bne.n	8002dde <HAL_SPI_IRQHandler+0x8e>
 8002ddc:	e0b1      	b.n	8002f42 <HAL_SPI_IRQHandler+0x1f2>
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	095b      	lsrs	r3, r3, #5
 8002de2:	001a      	movs	r2, r3
 8002de4:	2301      	movs	r3, #1
 8002de6:	4013      	ands	r3, r2
 8002de8:	d100      	bne.n	8002dec <HAL_SPI_IRQHandler+0x9c>
 8002dea:	e0aa      	b.n	8002f42 <HAL_SPI_IRQHandler+0x1f2>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	099b      	lsrs	r3, r3, #6
 8002df0:	001a      	movs	r2, r3
 8002df2:	2301      	movs	r3, #1
 8002df4:	4013      	ands	r3, r2
 8002df6:	d023      	beq.n	8002e40 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	225d      	movs	r2, #93	; 0x5d
 8002dfc:	5c9b      	ldrb	r3, [r3, r2]
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b03      	cmp	r3, #3
 8002e02:	d011      	beq.n	8002e28 <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e08:	2204      	movs	r2, #4
 8002e0a:	431a      	orrs	r2, r3
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e10:	2300      	movs	r3, #0
 8002e12:	617b      	str	r3, [r7, #20]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68db      	ldr	r3, [r3, #12]
 8002e1a:	617b      	str	r3, [r7, #20]
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	617b      	str	r3, [r7, #20]
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	e00b      	b.n	8002e40 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e28:	2300      	movs	r3, #0
 8002e2a:	613b      	str	r3, [r7, #16]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	68db      	ldr	r3, [r3, #12]
 8002e32:	613b      	str	r3, [r7, #16]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	613b      	str	r3, [r7, #16]
 8002e3c:	693b      	ldr	r3, [r7, #16]
        return;
 8002e3e:	e080      	b.n	8002f42 <HAL_SPI_IRQHandler+0x1f2>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002e40:	69bb      	ldr	r3, [r7, #24]
 8002e42:	095b      	lsrs	r3, r3, #5
 8002e44:	001a      	movs	r2, r3
 8002e46:	2301      	movs	r3, #1
 8002e48:	4013      	ands	r3, r2
 8002e4a:	d014      	beq.n	8002e76 <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e50:	2201      	movs	r2, #1
 8002e52:	431a      	orrs	r2, r3
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60fb      	str	r3, [r7, #12]
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	60fb      	str	r3, [r7, #12]
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	681a      	ldr	r2, [r3, #0]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	2140      	movs	r1, #64	; 0x40
 8002e70:	438a      	bics	r2, r1
 8002e72:	601a      	str	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	0a1b      	lsrs	r3, r3, #8
 8002e7a:	001a      	movs	r2, r3
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d00c      	beq.n	8002e9c <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e86:	2208      	movs	r2, #8
 8002e88:	431a      	orrs	r2, r3
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002e8e:	2300      	movs	r3, #0
 8002e90:	60bb      	str	r3, [r7, #8]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d04d      	beq.n	8002f40 <HAL_SPI_IRQHandler+0x1f0>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	21e0      	movs	r1, #224	; 0xe0
 8002eb0:	438a      	bics	r2, r1
 8002eb2:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	225d      	movs	r2, #93	; 0x5d
 8002eb8:	2101      	movs	r1, #1
 8002eba:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	2202      	movs	r2, #2
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	d103      	bne.n	8002ecc <HAL_SPI_IRQHandler+0x17c>
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	4013      	ands	r3, r2
 8002eca:	d032      	beq.n	8002f32 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2103      	movs	r1, #3
 8002ed8:	438a      	bics	r2, r1
 8002eda:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d010      	beq.n	8002f06 <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ee8:	4a17      	ldr	r2, [pc, #92]	; (8002f48 <HAL_SPI_IRQHandler+0x1f8>)
 8002eea:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ef0:	0018      	movs	r0, r3
 8002ef2:	f7fe fbf1 	bl	80016d8 <HAL_DMA_Abort_IT>
 8002ef6:	1e03      	subs	r3, r0, #0
 8002ef8:	d005      	beq.n	8002f06 <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002efe:	2240      	movs	r2, #64	; 0x40
 8002f00:	431a      	orrs	r2, r3
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d016      	beq.n	8002f3c <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f12:	4a0d      	ldr	r2, [pc, #52]	; (8002f48 <HAL_SPI_IRQHandler+0x1f8>)
 8002f14:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f1a:	0018      	movs	r0, r3
 8002f1c:	f7fe fbdc 	bl	80016d8 <HAL_DMA_Abort_IT>
 8002f20:	1e03      	subs	r3, r0, #0
 8002f22:	d00b      	beq.n	8002f3c <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f28:	2240      	movs	r2, #64	; 0x40
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8002f30:	e004      	b.n	8002f3c <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	0018      	movs	r0, r3
 8002f36:	f000 f811 	bl	8002f5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002f3a:	e000      	b.n	8002f3e <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002f3c:	46c0      	nop			; (mov r8, r8)
    return;
 8002f3e:	46c0      	nop			; (mov r8, r8)
 8002f40:	46c0      	nop			; (mov r8, r8)
  }
}
 8002f42:	46bd      	mov	sp, r7
 8002f44:	b008      	add	sp, #32
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	08002f6d 	.word	0x08002f6d

08002f4c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8002f54:	46c0      	nop			; (mov r8, r8)
 8002f56:	46bd      	mov	sp, r7
 8002f58:	b002      	add	sp, #8
 8002f5a:	bd80      	pop	{r7, pc}

08002f5c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	b082      	sub	sp, #8
 8002f60:	af00      	add	r7, sp, #0
 8002f62:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002f64:	46c0      	nop			; (mov r8, r8)
 8002f66:	46bd      	mov	sp, r7
 8002f68:	b002      	add	sp, #8
 8002f6a:	bd80      	pop	{r7, pc}

08002f6c <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b084      	sub	sp, #16
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f78:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	2246      	movs	r2, #70	; 0x46
 8002f7e:	2100      	movs	r1, #0
 8002f80:	5299      	strh	r1, [r3, r2]
  hspi->TxXferCount = 0U;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	2200      	movs	r2, #0
 8002f86:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	0018      	movs	r0, r3
 8002f8c:	f7ff ffe6 	bl	8002f5c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8002f90:	46c0      	nop			; (mov r8, r8)
 8002f92:	46bd      	mov	sp, r7
 8002f94:	b004      	add	sp, #16
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	330c      	adds	r3, #12
 8002faa:	7812      	ldrb	r2, [r2, #0]
 8002fac:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fb2:	1c5a      	adds	r2, r3, #1
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d103      	bne.n	8002fd8 <SPI_TxISR_8BIT+0x40>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f000 f952 	bl	800327c <SPI_CloseTx_ISR>
  }
}
 8002fd8:	46c0      	nop			; (mov r8, r8)
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b002      	add	sp, #8
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b082      	sub	sp, #8
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002fec:	881a      	ldrh	r2, [r3, #0]
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ff8:	1c9a      	adds	r2, r3, #2
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003002:	b29b      	uxth	r3, r3
 8003004:	3b01      	subs	r3, #1
 8003006:	b29a      	uxth	r2, r3
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d103      	bne.n	800301e <SPI_TxISR_16BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	0018      	movs	r0, r3
 800301a:	f000 f92f 	bl	800327c <SPI_CloseTx_ISR>
  }
}
 800301e:	46c0      	nop			; (mov r8, r8)
 8003020:	46bd      	mov	sp, r7
 8003022:	b002      	add	sp, #8
 8003024:	bd80      	pop	{r7, pc}
	...

08003028 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b084      	sub	sp, #16
 800302c:	af00      	add	r7, sp, #0
 800302e:	60f8      	str	r0, [r7, #12]
 8003030:	60b9      	str	r1, [r7, #8]
 8003032:	603b      	str	r3, [r7, #0]
 8003034:	1dfb      	adds	r3, r7, #7
 8003036:	701a      	strb	r2, [r3, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003038:	e050      	b.n	80030dc <SPI_WaitFlagStateUntilTimeout+0xb4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	d04d      	beq.n	80030dc <SPI_WaitFlagStateUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003040:	f7fe f9a8 	bl	8001394 <HAL_GetTick>
 8003044:	0002      	movs	r2, r0
 8003046:	69bb      	ldr	r3, [r7, #24]
 8003048:	1ad3      	subs	r3, r2, r3
 800304a:	683a      	ldr	r2, [r7, #0]
 800304c:	429a      	cmp	r2, r3
 800304e:	d902      	bls.n	8003056 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	2b00      	cmp	r3, #0
 8003054:	d142      	bne.n	80030dc <SPI_WaitFlagStateUntilTimeout+0xb4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	685a      	ldr	r2, [r3, #4]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	21e0      	movs	r1, #224	; 0xe0
 8003062:	438a      	bics	r2, r1
 8003064:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	685a      	ldr	r2, [r3, #4]
 800306a:	2382      	movs	r3, #130	; 0x82
 800306c:	005b      	lsls	r3, r3, #1
 800306e:	429a      	cmp	r2, r3
 8003070:	d113      	bne.n	800309a <SPI_WaitFlagStateUntilTimeout+0x72>
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	689a      	ldr	r2, [r3, #8]
 8003076:	2380      	movs	r3, #128	; 0x80
 8003078:	021b      	lsls	r3, r3, #8
 800307a:	429a      	cmp	r2, r3
 800307c:	d005      	beq.n	800308a <SPI_WaitFlagStateUntilTimeout+0x62>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	2380      	movs	r3, #128	; 0x80
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	429a      	cmp	r2, r3
 8003088:	d107      	bne.n	800309a <SPI_WaitFlagStateUntilTimeout+0x72>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2140      	movs	r1, #64	; 0x40
 8003096:	438a      	bics	r2, r1
 8003098:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800309e:	2380      	movs	r3, #128	; 0x80
 80030a0:	019b      	lsls	r3, r3, #6
 80030a2:	429a      	cmp	r2, r3
 80030a4:	d110      	bne.n	80030c8 <SPI_WaitFlagStateUntilTimeout+0xa0>
        {
          SPI_RESET_CRC(hspi);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4914      	ldr	r1, [pc, #80]	; (8003104 <SPI_WaitFlagStateUntilTimeout+0xdc>)
 80030b2:	400a      	ands	r2, r1
 80030b4:	601a      	str	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	0189      	lsls	r1, r1, #6
 80030c4:	430a      	orrs	r2, r1
 80030c6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	225d      	movs	r2, #93	; 0x5d
 80030cc:	2101      	movs	r1, #1
 80030ce:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	225c      	movs	r2, #92	; 0x5c
 80030d4:	2100      	movs	r1, #0
 80030d6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030d8:	2303      	movs	r3, #3
 80030da:	e00f      	b.n	80030fc <SPI_WaitFlagStateUntilTimeout+0xd4>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	68ba      	ldr	r2, [r7, #8]
 80030e4:	4013      	ands	r3, r2
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	1ad3      	subs	r3, r2, r3
 80030ea:	425a      	negs	r2, r3
 80030ec:	4153      	adcs	r3, r2
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	001a      	movs	r2, r3
 80030f2:	1dfb      	adds	r3, r7, #7
 80030f4:	781b      	ldrb	r3, [r3, #0]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d19f      	bne.n	800303a <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 80030fa:	2300      	movs	r3, #0
}
 80030fc:	0018      	movs	r0, r3
 80030fe:	46bd      	mov	sp, r7
 8003100:	b004      	add	sp, #16
 8003102:	bd80      	pop	{r7, pc}
 8003104:	ffffdfff 	.word	0xffffdfff

08003108 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0
 800310e:	60f8      	str	r0, [r7, #12]
 8003110:	60b9      	str	r1, [r7, #8]
 8003112:	607a      	str	r2, [r7, #4]
 8003114:	603b      	str	r3, [r7, #0]
  while ((hspi->Instance->SR & Fifo) != State)
 8003116:	e05c      	b.n	80031d2 <SPI_WaitFifoStateUntilTimeout+0xca>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	23c0      	movs	r3, #192	; 0xc0
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	429a      	cmp	r2, r3
 8003120:	d106      	bne.n	8003130 <SPI_WaitFifoStateUntilTimeout+0x28>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d103      	bne.n	8003130 <SPI_WaitFifoStateUntilTimeout+0x28>
    {
      /* Read 8bit CRC to flush Data Register */
      READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	330c      	adds	r3, #12
 800312e:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	3301      	adds	r3, #1
 8003134:	d04d      	beq.n	80031d2 <SPI_WaitFifoStateUntilTimeout+0xca>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8003136:	f7fe f92d 	bl	8001394 <HAL_GetTick>
 800313a:	0002      	movs	r2, r0
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	1ad3      	subs	r3, r2, r3
 8003140:	683a      	ldr	r2, [r7, #0]
 8003142:	429a      	cmp	r2, r3
 8003144:	d902      	bls.n	800314c <SPI_WaitFifoStateUntilTimeout+0x44>
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d142      	bne.n	80031d2 <SPI_WaitFifoStateUntilTimeout+0xca>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	685a      	ldr	r2, [r3, #4]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	21e0      	movs	r1, #224	; 0xe0
 8003158:	438a      	bics	r2, r1
 800315a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	685a      	ldr	r2, [r3, #4]
 8003160:	2382      	movs	r3, #130	; 0x82
 8003162:	005b      	lsls	r3, r3, #1
 8003164:	429a      	cmp	r2, r3
 8003166:	d113      	bne.n	8003190 <SPI_WaitFifoStateUntilTimeout+0x88>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	2380      	movs	r3, #128	; 0x80
 800316e:	021b      	lsls	r3, r3, #8
 8003170:	429a      	cmp	r2, r3
 8003172:	d005      	beq.n	8003180 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	429a      	cmp	r2, r3
 800317e:	d107      	bne.n	8003190 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	2140      	movs	r1, #64	; 0x40
 800318c:	438a      	bics	r2, r1
 800318e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	019b      	lsls	r3, r3, #6
 8003198:	429a      	cmp	r2, r3
 800319a:	d110      	bne.n	80031be <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          SPI_RESET_CRC(hspi);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	681a      	ldr	r2, [r3, #0]
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4911      	ldr	r1, [pc, #68]	; (80031ec <SPI_WaitFifoStateUntilTimeout+0xe4>)
 80031a8:	400a      	ands	r2, r1
 80031aa:	601a      	str	r2, [r3, #0]
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2180      	movs	r1, #128	; 0x80
 80031b8:	0189      	lsls	r1, r1, #6
 80031ba:	430a      	orrs	r2, r1
 80031bc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	225d      	movs	r2, #93	; 0x5d
 80031c2:	2101      	movs	r1, #1
 80031c4:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	225c      	movs	r2, #92	; 0x5c
 80031ca:	2100      	movs	r1, #0
 80031cc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e008      	b.n	80031e4 <SPI_WaitFifoStateUntilTimeout+0xdc>
  while ((hspi->Instance->SR & Fifo) != State)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	68ba      	ldr	r2, [r7, #8]
 80031da:	4013      	ands	r3, r2
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	429a      	cmp	r2, r3
 80031e0:	d19a      	bne.n	8003118 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80031e2:	2300      	movs	r3, #0
}
 80031e4:	0018      	movs	r0, r3
 80031e6:	46bd      	mov	sp, r7
 80031e8:	b004      	add	sp, #16
 80031ea:	bd80      	pop	{r7, pc}
 80031ec:	ffffdfff 	.word	0xffffdfff

080031f0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b086      	sub	sp, #24
 80031f4:	af02      	add	r7, sp, #8
 80031f6:	60f8      	str	r0, [r7, #12]
 80031f8:	60b9      	str	r1, [r7, #8]
 80031fa:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	23c0      	movs	r3, #192	; 0xc0
 8003200:	0159      	lsls	r1, r3, #5
 8003202:	68f8      	ldr	r0, [r7, #12]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	9300      	str	r3, [sp, #0]
 8003208:	0013      	movs	r3, r2
 800320a:	2200      	movs	r2, #0
 800320c:	f7ff ff7c 	bl	8003108 <SPI_WaitFifoStateUntilTimeout>
 8003210:	1e03      	subs	r3, r0, #0
 8003212:	d007      	beq.n	8003224 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003218:	2220      	movs	r2, #32
 800321a:	431a      	orrs	r2, r3
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e027      	b.n	8003274 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003224:	68ba      	ldr	r2, [r7, #8]
 8003226:	68f8      	ldr	r0, [r7, #12]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	0013      	movs	r3, r2
 800322e:	2200      	movs	r2, #0
 8003230:	2180      	movs	r1, #128	; 0x80
 8003232:	f7ff fef9 	bl	8003028 <SPI_WaitFlagStateUntilTimeout>
 8003236:	1e03      	subs	r3, r0, #0
 8003238:	d007      	beq.n	800324a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800323e:	2220      	movs	r2, #32
 8003240:	431a      	orrs	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003246:	2303      	movs	r3, #3
 8003248:	e014      	b.n	8003274 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800324a:	68ba      	ldr	r2, [r7, #8]
 800324c:	23c0      	movs	r3, #192	; 0xc0
 800324e:	00d9      	lsls	r1, r3, #3
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	9300      	str	r3, [sp, #0]
 8003256:	0013      	movs	r3, r2
 8003258:	2200      	movs	r2, #0
 800325a:	f7ff ff55 	bl	8003108 <SPI_WaitFifoStateUntilTimeout>
 800325e:	1e03      	subs	r3, r0, #0
 8003260:	d007      	beq.n	8003272 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003266:	2220      	movs	r2, #32
 8003268:	431a      	orrs	r2, r3
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e000      	b.n	8003274 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	0018      	movs	r0, r3
 8003276:	46bd      	mov	sp, r7
 8003278:	b004      	add	sp, #16
 800327a:	bd80      	pop	{r7, pc}

0800327c <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003284:	f7fe f886 	bl	8001394 <HAL_GetTick>
 8003288:	0003      	movs	r3, r0
 800328a:	60fb      	str	r3, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685a      	ldr	r2, [r3, #4]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	21a0      	movs	r1, #160	; 0xa0
 8003298:	438a      	bics	r2, r1
 800329a:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2164      	movs	r1, #100	; 0x64
 80032a2:	0018      	movs	r0, r3
 80032a4:	f7ff ffa4 	bl	80031f0 <SPI_EndRxTxTransaction>
 80032a8:	1e03      	subs	r3, r0, #0
 80032aa:	d005      	beq.n	80032b8 <SPI_CloseTx_ISR+0x3c>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032b0:	2220      	movs	r2, #32
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d10a      	bne.n	80032d6 <SPI_CloseTx_ISR+0x5a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80032c0:	2300      	movs	r3, #0
 80032c2:	60bb      	str	r3, [r7, #8]
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68db      	ldr	r3, [r3, #12]
 80032ca:	60bb      	str	r3, [r7, #8]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	689b      	ldr	r3, [r3, #8]
 80032d2:	60bb      	str	r3, [r7, #8]
 80032d4:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	225d      	movs	r2, #93	; 0x5d
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d004      	beq.n	80032f0 <SPI_CloseTx_ISR+0x74>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	0018      	movs	r0, r3
 80032ea:	f7ff fe37 	bl	8002f5c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 80032ee:	e003      	b.n	80032f8 <SPI_CloseTx_ISR+0x7c>
    HAL_SPI_TxCpltCallback(hspi);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	0018      	movs	r0, r3
 80032f4:	f7ff fe2a 	bl	8002f4c <HAL_SPI_TxCpltCallback>
}
 80032f8:	46c0      	nop			; (mov r8, r8)
 80032fa:	46bd      	mov	sp, r7
 80032fc:	b004      	add	sp, #16
 80032fe:	bd80      	pop	{r7, pc}

08003300 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e046      	b.n	80033a0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2280      	movs	r2, #128	; 0x80
 8003316:	589b      	ldr	r3, [r3, r2]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d107      	bne.n	800332c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	227c      	movs	r2, #124	; 0x7c
 8003320:	2100      	movs	r1, #0
 8003322:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	0018      	movs	r0, r3
 8003328:	f7fd faca 	bl	80008c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2280      	movs	r2, #128	; 0x80
 8003330:	2124      	movs	r1, #36	; 0x24
 8003332:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	681a      	ldr	r2, [r3, #0]
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	2101      	movs	r1, #1
 8003340:	438a      	bics	r2, r1
 8003342:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	0018      	movs	r0, r3
 8003348:	f000 fa90 	bl	800386c <UART_SetConfig>
 800334c:	0003      	movs	r3, r0
 800334e:	2b01      	cmp	r3, #1
 8003350:	d101      	bne.n	8003356 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e024      	b.n	80033a0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800335a:	2b00      	cmp	r3, #0
 800335c:	d003      	beq.n	8003366 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	0018      	movs	r0, r3
 8003362:	f000 ff0b 	bl	800417c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	685a      	ldr	r2, [r3, #4]
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	490d      	ldr	r1, [pc, #52]	; (80033a8 <HAL_UART_Init+0xa8>)
 8003372:	400a      	ands	r2, r1
 8003374:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	212a      	movs	r1, #42	; 0x2a
 8003382:	438a      	bics	r2, r1
 8003384:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	681a      	ldr	r2, [r3, #0]
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	2101      	movs	r1, #1
 8003392:	430a      	orrs	r2, r1
 8003394:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	0018      	movs	r0, r3
 800339a:	f000 ffa3 	bl	80042e4 <UART_CheckIdleState>
 800339e:	0003      	movs	r3, r0
}
 80033a0:	0018      	movs	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	b002      	add	sp, #8
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	ffffb7ff 	.word	0xffffb7ff

080033ac <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d101      	bne.n	80033be <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e02c      	b.n	8003418 <HAL_UART_DeInit+0x6c>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2280      	movs	r2, #128	; 0x80
 80033c2:	2124      	movs	r1, #36	; 0x24
 80033c4:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	2101      	movs	r1, #1
 80033d2:	438a      	bics	r2, r1
 80033d4:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	2200      	movs	r2, #0
 80033dc:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2200      	movs	r2, #0
 80033e4:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	2200      	movs	r2, #0
 80033ec:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	0018      	movs	r0, r3
 80033f2:	f7fd fab7 	bl	8000964 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2288      	movs	r2, #136	; 0x88
 80033fa:	2100      	movs	r1, #0
 80033fc:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2280      	movs	r2, #128	; 0x80
 8003402:	2100      	movs	r1, #0
 8003404:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2284      	movs	r2, #132	; 0x84
 800340a:	2100      	movs	r1, #0
 800340c:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	227c      	movs	r2, #124	; 0x7c
 8003412:	2100      	movs	r1, #0
 8003414:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	0018      	movs	r0, r3
 800341a:	46bd      	mov	sp, r7
 800341c:	b002      	add	sp, #8
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	60f8      	str	r0, [r7, #12]
 8003428:	60b9      	str	r1, [r7, #8]
 800342a:	1dbb      	adds	r3, r7, #6
 800342c:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	2280      	movs	r2, #128	; 0x80
 8003432:	589b      	ldr	r3, [r3, r2]
 8003434:	2b20      	cmp	r3, #32
 8003436:	d000      	beq.n	800343a <HAL_UART_Transmit_IT+0x1a>
 8003438:	e07f      	b.n	800353a <HAL_UART_Transmit_IT+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800343a:	68bb      	ldr	r3, [r7, #8]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d003      	beq.n	8003448 <HAL_UART_Transmit_IT+0x28>
 8003440:	1dbb      	adds	r3, r7, #6
 8003442:	881b      	ldrh	r3, [r3, #0]
 8003444:	2b00      	cmp	r3, #0
 8003446:	d101      	bne.n	800344c <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e077      	b.n	800353c <HAL_UART_Transmit_IT+0x11c>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	689a      	ldr	r2, [r3, #8]
 8003450:	2380      	movs	r3, #128	; 0x80
 8003452:	015b      	lsls	r3, r3, #5
 8003454:	429a      	cmp	r2, r3
 8003456:	d109      	bne.n	800346c <HAL_UART_Transmit_IT+0x4c>
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d105      	bne.n	800346c <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	2201      	movs	r2, #1
 8003464:	4013      	ands	r3, r2
 8003466:	d001      	beq.n	800346c <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	e067      	b.n	800353c <HAL_UART_Transmit_IT+0x11c>
      }
    }

    __HAL_LOCK(huart);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	227c      	movs	r2, #124	; 0x7c
 8003470:	5c9b      	ldrb	r3, [r3, r2]
 8003472:	2b01      	cmp	r3, #1
 8003474:	d101      	bne.n	800347a <HAL_UART_Transmit_IT+0x5a>
 8003476:	2302      	movs	r3, #2
 8003478:	e060      	b.n	800353c <HAL_UART_Transmit_IT+0x11c>
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	227c      	movs	r2, #124	; 0x7c
 800347e:	2101      	movs	r1, #1
 8003480:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	68ba      	ldr	r2, [r7, #8]
 8003486:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	1dba      	adds	r2, r7, #6
 800348c:	2154      	movs	r1, #84	; 0x54
 800348e:	8812      	ldrh	r2, [r2, #0]
 8003490:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1dba      	adds	r2, r7, #6
 8003496:	2156      	movs	r1, #86	; 0x56
 8003498:	8812      	ldrh	r2, [r2, #0]
 800349a:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2288      	movs	r2, #136	; 0x88
 80034a6:	2100      	movs	r1, #0
 80034a8:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2280      	movs	r2, #128	; 0x80
 80034ae:	2121      	movs	r1, #33	; 0x21
 80034b0:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80034b6:	2380      	movs	r3, #128	; 0x80
 80034b8:	059b      	lsls	r3, r3, #22
 80034ba:	429a      	cmp	r2, r3
 80034bc:	d11e      	bne.n	80034fc <HAL_UART_Transmit_IT+0xdc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	2380      	movs	r3, #128	; 0x80
 80034c4:	015b      	lsls	r3, r3, #5
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d107      	bne.n	80034da <HAL_UART_Transmit_IT+0xba>
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d103      	bne.n	80034da <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4a1b      	ldr	r2, [pc, #108]	; (8003544 <HAL_UART_Transmit_IT+0x124>)
 80034d6:	671a      	str	r2, [r3, #112]	; 0x70
 80034d8:	e002      	b.n	80034e0 <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	4a1a      	ldr	r2, [pc, #104]	; (8003548 <HAL_UART_Transmit_IT+0x128>)
 80034de:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	227c      	movs	r2, #124	; 0x7c
 80034e4:	2100      	movs	r1, #0
 80034e6:	5499      	strb	r1, [r3, r2]

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	689a      	ldr	r2, [r3, #8]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2180      	movs	r1, #128	; 0x80
 80034f4:	0409      	lsls	r1, r1, #16
 80034f6:	430a      	orrs	r2, r1
 80034f8:	609a      	str	r2, [r3, #8]
 80034fa:	e01c      	b.n	8003536 <HAL_UART_Transmit_IT+0x116>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	2380      	movs	r3, #128	; 0x80
 8003502:	015b      	lsls	r3, r3, #5
 8003504:	429a      	cmp	r2, r3
 8003506:	d107      	bne.n	8003518 <HAL_UART_Transmit_IT+0xf8>
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d103      	bne.n	8003518 <HAL_UART_Transmit_IT+0xf8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	4a0e      	ldr	r2, [pc, #56]	; (800354c <HAL_UART_Transmit_IT+0x12c>)
 8003514:	671a      	str	r2, [r3, #112]	; 0x70
 8003516:	e002      	b.n	800351e <HAL_UART_Transmit_IT+0xfe>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	4a0d      	ldr	r2, [pc, #52]	; (8003550 <HAL_UART_Transmit_IT+0x130>)
 800351c:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	227c      	movs	r2, #124	; 0x7c
 8003522:	2100      	movs	r1, #0
 8003524:	5499      	strb	r1, [r3, r2]

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	681a      	ldr	r2, [r3, #0]
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	2180      	movs	r1, #128	; 0x80
 8003532:	430a      	orrs	r2, r1
 8003534:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 8003536:	2300      	movs	r3, #0
 8003538:	e000      	b.n	800353c <HAL_UART_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800353a:	2302      	movs	r3, #2
  }
}
 800353c:	0018      	movs	r0, r3
 800353e:	46bd      	mov	sp, r7
 8003540:	b004      	add	sp, #16
 8003542:	bd80      	pop	{r7, pc}
 8003544:	08004619 	.word	0x08004619
 8003548:	08004571 	.word	0x08004571
 800354c:	080044f7 	.word	0x080044f7
 8003550:	08004487 	.word	0x08004487

08003554 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	69db      	ldr	r3, [r3, #28]
 8003562:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	689b      	ldr	r3, [r3, #8]
 8003572:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	220f      	movs	r2, #15
 8003578:	4013      	ands	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800357c:	693b      	ldr	r3, [r7, #16]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d117      	bne.n	80035b2 <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003582:	69fb      	ldr	r3, [r7, #28]
 8003584:	2220      	movs	r2, #32
 8003586:	4013      	ands	r3, r2
 8003588:	d013      	beq.n	80035b2 <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800358a:	69bb      	ldr	r3, [r7, #24]
 800358c:	2220      	movs	r2, #32
 800358e:	4013      	ands	r3, r2
 8003590:	d104      	bne.n	800359c <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003592:	697a      	ldr	r2, [r7, #20]
 8003594:	2380      	movs	r3, #128	; 0x80
 8003596:	055b      	lsls	r3, r3, #21
 8003598:	4013      	ands	r3, r2
 800359a:	d00a      	beq.n	80035b2 <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d100      	bne.n	80035a6 <HAL_UART_IRQHandler+0x52>
 80035a4:	e127      	b.n	80037f6 <HAL_UART_IRQHandler+0x2a2>
      {
        huart->RxISR(huart);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035aa:	687a      	ldr	r2, [r7, #4]
 80035ac:	0010      	movs	r0, r2
 80035ae:	4798      	blx	r3
      }
      return;
 80035b0:	e121      	b.n	80037f6 <HAL_UART_IRQHandler+0x2a2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d100      	bne.n	80035ba <HAL_UART_IRQHandler+0x66>
 80035b8:	e0c8      	b.n	800374c <HAL_UART_IRQHandler+0x1f8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	4a92      	ldr	r2, [pc, #584]	; (8003808 <HAL_UART_IRQHandler+0x2b4>)
 80035be:	4013      	ands	r3, r2
 80035c0:	d105      	bne.n	80035ce <HAL_UART_IRQHandler+0x7a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 80035c2:	69ba      	ldr	r2, [r7, #24]
 80035c4:	2390      	movs	r3, #144	; 0x90
 80035c6:	005b      	lsls	r3, r3, #1
 80035c8:	4013      	ands	r3, r2
 80035ca:	d100      	bne.n	80035ce <HAL_UART_IRQHandler+0x7a>
 80035cc:	e0be      	b.n	800374c <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	2201      	movs	r2, #1
 80035d2:	4013      	ands	r3, r2
 80035d4:	d010      	beq.n	80035f8 <HAL_UART_IRQHandler+0xa4>
 80035d6:	69ba      	ldr	r2, [r7, #24]
 80035d8:	2380      	movs	r3, #128	; 0x80
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	4013      	ands	r3, r2
 80035de:	d00b      	beq.n	80035f8 <HAL_UART_IRQHandler+0xa4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2201      	movs	r2, #1
 80035e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2288      	movs	r2, #136	; 0x88
 80035ec:	589b      	ldr	r3, [r3, r2]
 80035ee:	2201      	movs	r2, #1
 80035f0:	431a      	orrs	r2, r3
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2188      	movs	r1, #136	; 0x88
 80035f6:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035f8:	69fb      	ldr	r3, [r7, #28]
 80035fa:	2202      	movs	r2, #2
 80035fc:	4013      	ands	r3, r2
 80035fe:	d00f      	beq.n	8003620 <HAL_UART_IRQHandler+0xcc>
 8003600:	697b      	ldr	r3, [r7, #20]
 8003602:	2201      	movs	r2, #1
 8003604:	4013      	ands	r3, r2
 8003606:	d00b      	beq.n	8003620 <HAL_UART_IRQHandler+0xcc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2202      	movs	r2, #2
 800360e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2288      	movs	r2, #136	; 0x88
 8003614:	589b      	ldr	r3, [r3, r2]
 8003616:	2204      	movs	r2, #4
 8003618:	431a      	orrs	r2, r3
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2188      	movs	r1, #136	; 0x88
 800361e:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	2204      	movs	r2, #4
 8003624:	4013      	ands	r3, r2
 8003626:	d00f      	beq.n	8003648 <HAL_UART_IRQHandler+0xf4>
 8003628:	697b      	ldr	r3, [r7, #20]
 800362a:	2201      	movs	r2, #1
 800362c:	4013      	ands	r3, r2
 800362e:	d00b      	beq.n	8003648 <HAL_UART_IRQHandler+0xf4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2204      	movs	r2, #4
 8003636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2288      	movs	r2, #136	; 0x88
 800363c:	589b      	ldr	r3, [r3, r2]
 800363e:	2202      	movs	r2, #2
 8003640:	431a      	orrs	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2188      	movs	r1, #136	; 0x88
 8003646:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	2208      	movs	r2, #8
 800364c:	4013      	ands	r3, r2
 800364e:	d013      	beq.n	8003678 <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003650:	69bb      	ldr	r3, [r7, #24]
 8003652:	2220      	movs	r2, #32
 8003654:	4013      	ands	r3, r2
 8003656:	d103      	bne.n	8003660 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	4a6b      	ldr	r2, [pc, #428]	; (8003808 <HAL_UART_IRQHandler+0x2b4>)
 800365c:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800365e:	d00b      	beq.n	8003678 <HAL_UART_IRQHandler+0x124>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2208      	movs	r2, #8
 8003666:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2288      	movs	r2, #136	; 0x88
 800366c:	589b      	ldr	r3, [r3, r2]
 800366e:	2208      	movs	r2, #8
 8003670:	431a      	orrs	r2, r3
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	2188      	movs	r1, #136	; 0x88
 8003676:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2288      	movs	r2, #136	; 0x88
 800367c:	589b      	ldr	r3, [r3, r2]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d100      	bne.n	8003684 <HAL_UART_IRQHandler+0x130>
 8003682:	e0ba      	b.n	80037fa <HAL_UART_IRQHandler+0x2a6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	2220      	movs	r2, #32
 8003688:	4013      	ands	r3, r2
 800368a:	d011      	beq.n	80036b0 <HAL_UART_IRQHandler+0x15c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800368c:	69bb      	ldr	r3, [r7, #24]
 800368e:	2220      	movs	r2, #32
 8003690:	4013      	ands	r3, r2
 8003692:	d104      	bne.n	800369e <HAL_UART_IRQHandler+0x14a>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003694:	697a      	ldr	r2, [r7, #20]
 8003696:	2380      	movs	r3, #128	; 0x80
 8003698:	055b      	lsls	r3, r3, #21
 800369a:	4013      	ands	r3, r2
 800369c:	d008      	beq.n	80036b0 <HAL_UART_IRQHandler+0x15c>
      {
        if (huart->RxISR != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d004      	beq.n	80036b0 <HAL_UART_IRQHandler+0x15c>
        {
          huart->RxISR(huart);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80036aa:	687a      	ldr	r2, [r7, #4]
 80036ac:	0010      	movs	r0, r2
 80036ae:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2288      	movs	r2, #136	; 0x88
 80036b4:	589b      	ldr	r3, [r3, r2]
 80036b6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	2240      	movs	r2, #64	; 0x40
 80036c0:	4013      	ands	r3, r2
 80036c2:	2b40      	cmp	r3, #64	; 0x40
 80036c4:	d003      	beq.n	80036ce <HAL_UART_IRQHandler+0x17a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2208      	movs	r2, #8
 80036ca:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036cc:	d033      	beq.n	8003736 <HAL_UART_IRQHandler+0x1e2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	0018      	movs	r0, r3
 80036d2:	f000 fe9d 	bl	8004410 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	2240      	movs	r2, #64	; 0x40
 80036de:	4013      	ands	r3, r2
 80036e0:	2b40      	cmp	r3, #64	; 0x40
 80036e2:	d123      	bne.n	800372c <HAL_UART_IRQHandler+0x1d8>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	689a      	ldr	r2, [r3, #8]
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2140      	movs	r1, #64	; 0x40
 80036f0:	438a      	bics	r2, r1
 80036f2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d012      	beq.n	8003722 <HAL_UART_IRQHandler+0x1ce>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003700:	4a42      	ldr	r2, [pc, #264]	; (800380c <HAL_UART_IRQHandler+0x2b8>)
 8003702:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003708:	0018      	movs	r0, r3
 800370a:	f7fd ffe5 	bl	80016d8 <HAL_DMA_Abort_IT>
 800370e:	1e03      	subs	r3, r0, #0
 8003710:	d01a      	beq.n	8003748 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003716:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800371c:	0018      	movs	r0, r3
 800371e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003720:	e012      	b.n	8003748 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	0018      	movs	r0, r3
 8003726:	f000 f87b 	bl	8003820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800372a:	e00d      	b.n	8003748 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	0018      	movs	r0, r3
 8003730:	f000 f876 	bl	8003820 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003734:	e008      	b.n	8003748 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	0018      	movs	r0, r3
 800373a:	f000 f871 	bl	8003820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2288      	movs	r2, #136	; 0x88
 8003742:	2100      	movs	r1, #0
 8003744:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003746:	e058      	b.n	80037fa <HAL_UART_IRQHandler+0x2a6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003748:	46c0      	nop			; (mov r8, r8)
    return;
 800374a:	e056      	b.n	80037fa <HAL_UART_IRQHandler+0x2a6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800374c:	69fa      	ldr	r2, [r7, #28]
 800374e:	2380      	movs	r3, #128	; 0x80
 8003750:	035b      	lsls	r3, r3, #13
 8003752:	4013      	ands	r3, r2
 8003754:	d00e      	beq.n	8003774 <HAL_UART_IRQHandler+0x220>
 8003756:	697a      	ldr	r2, [r7, #20]
 8003758:	2380      	movs	r3, #128	; 0x80
 800375a:	03db      	lsls	r3, r3, #15
 800375c:	4013      	ands	r3, r2
 800375e:	d009      	beq.n	8003774 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2280      	movs	r2, #128	; 0x80
 8003766:	0352      	lsls	r2, r2, #13
 8003768:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	0018      	movs	r0, r3
 800376e:	f000 ffc6 	bl	80046fe <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003772:	e045      	b.n	8003800 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003774:	69fb      	ldr	r3, [r7, #28]
 8003776:	2280      	movs	r2, #128	; 0x80
 8003778:	4013      	ands	r3, r2
 800377a:	d012      	beq.n	80037a2 <HAL_UART_IRQHandler+0x24e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800377c:	69bb      	ldr	r3, [r7, #24]
 800377e:	2280      	movs	r2, #128	; 0x80
 8003780:	4013      	ands	r3, r2
 8003782:	d104      	bne.n	800378e <HAL_UART_IRQHandler+0x23a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8003784:	697a      	ldr	r2, [r7, #20]
 8003786:	2380      	movs	r3, #128	; 0x80
 8003788:	041b      	lsls	r3, r3, #16
 800378a:	4013      	ands	r3, r2
 800378c:	d009      	beq.n	80037a2 <HAL_UART_IRQHandler+0x24e>
  {
    if (huart->TxISR != NULL)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003792:	2b00      	cmp	r3, #0
 8003794:	d033      	beq.n	80037fe <HAL_UART_IRQHandler+0x2aa>
    {
      huart->TxISR(huart);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	0010      	movs	r0, r2
 800379e:	4798      	blx	r3
    }
    return;
 80037a0:	e02d      	b.n	80037fe <HAL_UART_IRQHandler+0x2aa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037a2:	69fb      	ldr	r3, [r7, #28]
 80037a4:	2240      	movs	r2, #64	; 0x40
 80037a6:	4013      	ands	r3, r2
 80037a8:	d008      	beq.n	80037bc <HAL_UART_IRQHandler+0x268>
 80037aa:	69bb      	ldr	r3, [r7, #24]
 80037ac:	2240      	movs	r2, #64	; 0x40
 80037ae:	4013      	ands	r3, r2
 80037b0:	d004      	beq.n	80037bc <HAL_UART_IRQHandler+0x268>
  {
    UART_EndTransmit_IT(huart);
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	0018      	movs	r0, r3
 80037b6:	f000 ff87 	bl	80046c8 <UART_EndTransmit_IT>
    return;
 80037ba:	e021      	b.n	8003800 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80037bc:	69fa      	ldr	r2, [r7, #28]
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	041b      	lsls	r3, r3, #16
 80037c2:	4013      	ands	r3, r2
 80037c4:	d009      	beq.n	80037da <HAL_UART_IRQHandler+0x286>
 80037c6:	69ba      	ldr	r2, [r7, #24]
 80037c8:	2380      	movs	r3, #128	; 0x80
 80037ca:	05db      	lsls	r3, r3, #23
 80037cc:	4013      	ands	r3, r2
 80037ce:	d004      	beq.n	80037da <HAL_UART_IRQHandler+0x286>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	0018      	movs	r0, r3
 80037d4:	f000 ffa3 	bl	800471e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037d8:	e012      	b.n	8003800 <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80037da:	69fa      	ldr	r2, [r7, #28]
 80037dc:	2380      	movs	r3, #128	; 0x80
 80037de:	045b      	lsls	r3, r3, #17
 80037e0:	4013      	ands	r3, r2
 80037e2:	d00d      	beq.n	8003800 <HAL_UART_IRQHandler+0x2ac>
 80037e4:	69bb      	ldr	r3, [r7, #24]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	da0a      	bge.n	8003800 <HAL_UART_IRQHandler+0x2ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	0018      	movs	r0, r3
 80037ee:	f000 ff8e 	bl	800470e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037f2:	46c0      	nop			; (mov r8, r8)
 80037f4:	e004      	b.n	8003800 <HAL_UART_IRQHandler+0x2ac>
      return;
 80037f6:	46c0      	nop			; (mov r8, r8)
 80037f8:	e002      	b.n	8003800 <HAL_UART_IRQHandler+0x2ac>
    return;
 80037fa:	46c0      	nop			; (mov r8, r8)
 80037fc:	e000      	b.n	8003800 <HAL_UART_IRQHandler+0x2ac>
    return;
 80037fe:	46c0      	nop			; (mov r8, r8)
  }
}
 8003800:	46bd      	mov	sp, r7
 8003802:	b008      	add	sp, #32
 8003804:	bd80      	pop	{r7, pc}
 8003806:	46c0      	nop			; (mov r8, r8)
 8003808:	10000001 	.word	0x10000001
 800380c:	08004459 	.word	0x08004459

08003810 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b082      	sub	sp, #8
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003818:	46c0      	nop			; (mov r8, r8)
 800381a:	46bd      	mov	sp, r7
 800381c:	b002      	add	sp, #8
 800381e:	bd80      	pop	{r7, pc}

08003820 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b082      	sub	sp, #8
 8003824:	af00      	add	r7, sp, #0
 8003826:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003828:	46c0      	nop			; (mov r8, r8)
 800382a:	46bd      	mov	sp, r7
 800382c:	b002      	add	sp, #8
 800382e:	bd80      	pop	{r7, pc}

08003830 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2280      	movs	r2, #128	; 0x80
 800383c:	589b      	ldr	r3, [r3, r2]
 800383e:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2284      	movs	r2, #132	; 0x84
 8003844:	589b      	ldr	r3, [r3, r2]
 8003846:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003848:	68fa      	ldr	r2, [r7, #12]
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	4313      	orrs	r3, r2
}
 800384e:	0018      	movs	r0, r3
 8003850:	46bd      	mov	sp, r7
 8003852:	b004      	add	sp, #16
 8003854:	bd80      	pop	{r7, pc}

08003856 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(UART_HandleTypeDef *huart)
{
 8003856:	b580      	push	{r7, lr}
 8003858:	b082      	sub	sp, #8
 800385a:	af00      	add	r7, sp, #0
 800385c:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2288      	movs	r2, #136	; 0x88
 8003862:	589b      	ldr	r3, [r3, r2]
}
 8003864:	0018      	movs	r0, r3
 8003866:	46bd      	mov	sp, r7
 8003868:	b002      	add	sp, #8
 800386a:	bd80      	pop	{r7, pc}

0800386c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b088      	sub	sp, #32
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003878:	231e      	movs	r3, #30
 800387a:	18fb      	adds	r3, r7, r3
 800387c:	2200      	movs	r2, #0
 800387e:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003880:	2300      	movs	r3, #0
 8003882:	613b      	str	r3, [r7, #16]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	431a      	orrs	r2, r3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	695b      	ldr	r3, [r3, #20]
 8003892:	431a      	orrs	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	69db      	ldr	r3, [r3, #28]
 8003898:	4313      	orrs	r3, r2
 800389a:	61bb      	str	r3, [r7, #24]
  tmpreg |= (uint32_t)huart->FifoMode;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80038a0:	69ba      	ldr	r2, [r7, #24]
 80038a2:	4313      	orrs	r3, r2
 80038a4:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4aba      	ldr	r2, [pc, #744]	; (8003b98 <UART_SetConfig+0x32c>)
 80038ae:	4013      	ands	r3, r2
 80038b0:	0019      	movs	r1, r3
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	69ba      	ldr	r2, [r7, #24]
 80038b8:	430a      	orrs	r2, r1
 80038ba:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4ab6      	ldr	r2, [pc, #728]	; (8003b9c <UART_SetConfig+0x330>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	0019      	movs	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	699b      	ldr	r3, [r3, #24]
 80038d8:	61bb      	str	r3, [r7, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	69ba      	ldr	r2, [r7, #24]
 80038e0:	4313      	orrs	r3, r2
 80038e2:	61bb      	str	r3, [r7, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	4aad      	ldr	r2, [pc, #692]	; (8003ba0 <UART_SetConfig+0x334>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	0019      	movs	r1, r3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	69ba      	ldr	r2, [r7, #24]
 80038f6:	430a      	orrs	r2, r1
 80038f8:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003900:	220f      	movs	r2, #15
 8003902:	4393      	bics	r3, r2
 8003904:	0019      	movs	r1, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	430a      	orrs	r2, r1
 8003910:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4aa3      	ldr	r2, [pc, #652]	; (8003ba4 <UART_SetConfig+0x338>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d125      	bne.n	8003968 <UART_SetConfig+0xfc>
 800391c:	4ba2      	ldr	r3, [pc, #648]	; (8003ba8 <UART_SetConfig+0x33c>)
 800391e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003920:	2203      	movs	r2, #3
 8003922:	4013      	ands	r3, r2
 8003924:	2b01      	cmp	r3, #1
 8003926:	d00f      	beq.n	8003948 <UART_SetConfig+0xdc>
 8003928:	d304      	bcc.n	8003934 <UART_SetConfig+0xc8>
 800392a:	2b02      	cmp	r3, #2
 800392c:	d007      	beq.n	800393e <UART_SetConfig+0xd2>
 800392e:	2b03      	cmp	r3, #3
 8003930:	d00f      	beq.n	8003952 <UART_SetConfig+0xe6>
 8003932:	e013      	b.n	800395c <UART_SetConfig+0xf0>
 8003934:	231f      	movs	r3, #31
 8003936:	18fb      	adds	r3, r7, r3
 8003938:	2200      	movs	r2, #0
 800393a:	701a      	strb	r2, [r3, #0]
 800393c:	e05a      	b.n	80039f4 <UART_SetConfig+0x188>
 800393e:	231f      	movs	r3, #31
 8003940:	18fb      	adds	r3, r7, r3
 8003942:	2202      	movs	r2, #2
 8003944:	701a      	strb	r2, [r3, #0]
 8003946:	e055      	b.n	80039f4 <UART_SetConfig+0x188>
 8003948:	231f      	movs	r3, #31
 800394a:	18fb      	adds	r3, r7, r3
 800394c:	2204      	movs	r2, #4
 800394e:	701a      	strb	r2, [r3, #0]
 8003950:	e050      	b.n	80039f4 <UART_SetConfig+0x188>
 8003952:	231f      	movs	r3, #31
 8003954:	18fb      	adds	r3, r7, r3
 8003956:	2208      	movs	r2, #8
 8003958:	701a      	strb	r2, [r3, #0]
 800395a:	e04b      	b.n	80039f4 <UART_SetConfig+0x188>
 800395c:	231f      	movs	r3, #31
 800395e:	18fb      	adds	r3, r7, r3
 8003960:	2210      	movs	r2, #16
 8003962:	701a      	strb	r2, [r3, #0]
 8003964:	46c0      	nop			; (mov r8, r8)
 8003966:	e045      	b.n	80039f4 <UART_SetConfig+0x188>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a8f      	ldr	r2, [pc, #572]	; (8003bac <UART_SetConfig+0x340>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d128      	bne.n	80039c4 <UART_SetConfig+0x158>
 8003972:	4b8d      	ldr	r3, [pc, #564]	; (8003ba8 <UART_SetConfig+0x33c>)
 8003974:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003976:	220c      	movs	r2, #12
 8003978:	4013      	ands	r3, r2
 800397a:	2b04      	cmp	r3, #4
 800397c:	d012      	beq.n	80039a4 <UART_SetConfig+0x138>
 800397e:	d802      	bhi.n	8003986 <UART_SetConfig+0x11a>
 8003980:	2b00      	cmp	r3, #0
 8003982:	d005      	beq.n	8003990 <UART_SetConfig+0x124>
 8003984:	e018      	b.n	80039b8 <UART_SetConfig+0x14c>
 8003986:	2b08      	cmp	r3, #8
 8003988:	d007      	beq.n	800399a <UART_SetConfig+0x12e>
 800398a:	2b0c      	cmp	r3, #12
 800398c:	d00f      	beq.n	80039ae <UART_SetConfig+0x142>
 800398e:	e013      	b.n	80039b8 <UART_SetConfig+0x14c>
 8003990:	231f      	movs	r3, #31
 8003992:	18fb      	adds	r3, r7, r3
 8003994:	2200      	movs	r2, #0
 8003996:	701a      	strb	r2, [r3, #0]
 8003998:	e02c      	b.n	80039f4 <UART_SetConfig+0x188>
 800399a:	231f      	movs	r3, #31
 800399c:	18fb      	adds	r3, r7, r3
 800399e:	2202      	movs	r2, #2
 80039a0:	701a      	strb	r2, [r3, #0]
 80039a2:	e027      	b.n	80039f4 <UART_SetConfig+0x188>
 80039a4:	231f      	movs	r3, #31
 80039a6:	18fb      	adds	r3, r7, r3
 80039a8:	2204      	movs	r2, #4
 80039aa:	701a      	strb	r2, [r3, #0]
 80039ac:	e022      	b.n	80039f4 <UART_SetConfig+0x188>
 80039ae:	231f      	movs	r3, #31
 80039b0:	18fb      	adds	r3, r7, r3
 80039b2:	2208      	movs	r2, #8
 80039b4:	701a      	strb	r2, [r3, #0]
 80039b6:	e01d      	b.n	80039f4 <UART_SetConfig+0x188>
 80039b8:	231f      	movs	r3, #31
 80039ba:	18fb      	adds	r3, r7, r3
 80039bc:	2210      	movs	r2, #16
 80039be:	701a      	strb	r2, [r3, #0]
 80039c0:	46c0      	nop			; (mov r8, r8)
 80039c2:	e017      	b.n	80039f4 <UART_SetConfig+0x188>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a79      	ldr	r2, [pc, #484]	; (8003bb0 <UART_SetConfig+0x344>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d104      	bne.n	80039d8 <UART_SetConfig+0x16c>
 80039ce:	231f      	movs	r3, #31
 80039d0:	18fb      	adds	r3, r7, r3
 80039d2:	2200      	movs	r2, #0
 80039d4:	701a      	strb	r2, [r3, #0]
 80039d6:	e00d      	b.n	80039f4 <UART_SetConfig+0x188>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	4a75      	ldr	r2, [pc, #468]	; (8003bb4 <UART_SetConfig+0x348>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d104      	bne.n	80039ec <UART_SetConfig+0x180>
 80039e2:	231f      	movs	r3, #31
 80039e4:	18fb      	adds	r3, r7, r3
 80039e6:	2200      	movs	r2, #0
 80039e8:	701a      	strb	r2, [r3, #0]
 80039ea:	e003      	b.n	80039f4 <UART_SetConfig+0x188>
 80039ec:	231f      	movs	r3, #31
 80039ee:	18fb      	adds	r3, r7, r3
 80039f0:	2210      	movs	r2, #16
 80039f2:	701a      	strb	r2, [r3, #0]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	69da      	ldr	r2, [r3, #28]
 80039f8:	2380      	movs	r3, #128	; 0x80
 80039fa:	021b      	lsls	r3, r3, #8
 80039fc:	429a      	cmp	r2, r3
 80039fe:	d000      	beq.n	8003a02 <UART_SetConfig+0x196>
 8003a00:	e1de      	b.n	8003dc0 <UART_SetConfig+0x554>
  {
    switch (clocksource)
 8003a02:	231f      	movs	r3, #31
 8003a04:	18fb      	adds	r3, r7, r3
 8003a06:	781b      	ldrb	r3, [r3, #0]
 8003a08:	2b02      	cmp	r3, #2
 8003a0a:	d100      	bne.n	8003a0e <UART_SetConfig+0x1a2>
 8003a0c:	e06c      	b.n	8003ae8 <UART_SetConfig+0x27c>
 8003a0e:	dc02      	bgt.n	8003a16 <UART_SetConfig+0x1aa>
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d007      	beq.n	8003a24 <UART_SetConfig+0x1b8>
 8003a14:	e1ab      	b.n	8003d6e <UART_SetConfig+0x502>
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d100      	bne.n	8003a1c <UART_SetConfig+0x1b0>
 8003a1a:	e0e5      	b.n	8003be8 <UART_SetConfig+0x37c>
 8003a1c:	2b08      	cmp	r3, #8
 8003a1e:	d100      	bne.n	8003a22 <UART_SetConfig+0x1b6>
 8003a20:	e144      	b.n	8003cac <UART_SetConfig+0x440>
 8003a22:	e1a4      	b.n	8003d6e <UART_SetConfig+0x502>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a24:	f7fe ff1c 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 8003a28:	0003      	movs	r3, r0
 8003a2a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d044      	beq.n	8003abe <UART_SetConfig+0x252>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d03e      	beq.n	8003aba <UART_SetConfig+0x24e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a40:	2b02      	cmp	r3, #2
 8003a42:	d038      	beq.n	8003ab6 <UART_SetConfig+0x24a>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a48:	2b03      	cmp	r3, #3
 8003a4a:	d032      	beq.n	8003ab2 <UART_SetConfig+0x246>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a50:	2b04      	cmp	r3, #4
 8003a52:	d02c      	beq.n	8003aae <UART_SetConfig+0x242>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	2b05      	cmp	r3, #5
 8003a5a:	d026      	beq.n	8003aaa <UART_SetConfig+0x23e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a60:	2b06      	cmp	r3, #6
 8003a62:	d020      	beq.n	8003aa6 <UART_SetConfig+0x23a>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	2b07      	cmp	r3, #7
 8003a6a:	d01a      	beq.n	8003aa2 <UART_SetConfig+0x236>
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d014      	beq.n	8003a9e <UART_SetConfig+0x232>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a78:	2b09      	cmp	r3, #9
 8003a7a:	d00e      	beq.n	8003a9a <UART_SetConfig+0x22e>
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a80:	2b0a      	cmp	r3, #10
 8003a82:	d008      	beq.n	8003a96 <UART_SetConfig+0x22a>
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a88:	2b0b      	cmp	r3, #11
 8003a8a:	d102      	bne.n	8003a92 <UART_SetConfig+0x226>
 8003a8c:	2380      	movs	r3, #128	; 0x80
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	e016      	b.n	8003ac0 <UART_SetConfig+0x254>
 8003a92:	2301      	movs	r3, #1
 8003a94:	e014      	b.n	8003ac0 <UART_SetConfig+0x254>
 8003a96:	2380      	movs	r3, #128	; 0x80
 8003a98:	e012      	b.n	8003ac0 <UART_SetConfig+0x254>
 8003a9a:	2340      	movs	r3, #64	; 0x40
 8003a9c:	e010      	b.n	8003ac0 <UART_SetConfig+0x254>
 8003a9e:	2320      	movs	r3, #32
 8003aa0:	e00e      	b.n	8003ac0 <UART_SetConfig+0x254>
 8003aa2:	2310      	movs	r3, #16
 8003aa4:	e00c      	b.n	8003ac0 <UART_SetConfig+0x254>
 8003aa6:	230c      	movs	r3, #12
 8003aa8:	e00a      	b.n	8003ac0 <UART_SetConfig+0x254>
 8003aaa:	230a      	movs	r3, #10
 8003aac:	e008      	b.n	8003ac0 <UART_SetConfig+0x254>
 8003aae:	2308      	movs	r3, #8
 8003ab0:	e006      	b.n	8003ac0 <UART_SetConfig+0x254>
 8003ab2:	2306      	movs	r3, #6
 8003ab4:	e004      	b.n	8003ac0 <UART_SetConfig+0x254>
 8003ab6:	2304      	movs	r3, #4
 8003ab8:	e002      	b.n	8003ac0 <UART_SetConfig+0x254>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e000      	b.n	8003ac0 <UART_SetConfig+0x254>
 8003abe:	2301      	movs	r3, #1
 8003ac0:	0019      	movs	r1, r3
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f7fc fb28 	bl	8000118 <__udivsi3>
 8003ac8:	0003      	movs	r3, r0
 8003aca:	005a      	lsls	r2, r3, #1
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	18d2      	adds	r2, r2, r3
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	0019      	movs	r1, r3
 8003ada:	0010      	movs	r0, r2
 8003adc:	f7fc fb1c 	bl	8000118 <__udivsi3>
 8003ae0:	0003      	movs	r3, r0
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	617b      	str	r3, [r7, #20]
        break;
 8003ae6:	e147      	b.n	8003d78 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d043      	beq.n	8003b78 <UART_SetConfig+0x30c>
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af4:	2b01      	cmp	r3, #1
 8003af6:	d03d      	beq.n	8003b74 <UART_SetConfig+0x308>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d037      	beq.n	8003b70 <UART_SetConfig+0x304>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b04:	2b03      	cmp	r3, #3
 8003b06:	d031      	beq.n	8003b6c <UART_SetConfig+0x300>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d02b      	beq.n	8003b68 <UART_SetConfig+0x2fc>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b14:	2b05      	cmp	r3, #5
 8003b16:	d025      	beq.n	8003b64 <UART_SetConfig+0x2f8>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1c:	2b06      	cmp	r3, #6
 8003b1e:	d01f      	beq.n	8003b60 <UART_SetConfig+0x2f4>
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b24:	2b07      	cmp	r3, #7
 8003b26:	d019      	beq.n	8003b5c <UART_SetConfig+0x2f0>
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2c:	2b08      	cmp	r3, #8
 8003b2e:	d013      	beq.n	8003b58 <UART_SetConfig+0x2ec>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b34:	2b09      	cmp	r3, #9
 8003b36:	d00d      	beq.n	8003b54 <UART_SetConfig+0x2e8>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3c:	2b0a      	cmp	r3, #10
 8003b3e:	d007      	beq.n	8003b50 <UART_SetConfig+0x2e4>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	2b0b      	cmp	r3, #11
 8003b46:	d101      	bne.n	8003b4c <UART_SetConfig+0x2e0>
 8003b48:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <UART_SetConfig+0x34c>)
 8003b4a:	e016      	b.n	8003b7a <UART_SetConfig+0x30e>
 8003b4c:	4b1b      	ldr	r3, [pc, #108]	; (8003bbc <UART_SetConfig+0x350>)
 8003b4e:	e014      	b.n	8003b7a <UART_SetConfig+0x30e>
 8003b50:	4b1b      	ldr	r3, [pc, #108]	; (8003bc0 <UART_SetConfig+0x354>)
 8003b52:	e012      	b.n	8003b7a <UART_SetConfig+0x30e>
 8003b54:	4b1b      	ldr	r3, [pc, #108]	; (8003bc4 <UART_SetConfig+0x358>)
 8003b56:	e010      	b.n	8003b7a <UART_SetConfig+0x30e>
 8003b58:	4b1b      	ldr	r3, [pc, #108]	; (8003bc8 <UART_SetConfig+0x35c>)
 8003b5a:	e00e      	b.n	8003b7a <UART_SetConfig+0x30e>
 8003b5c:	4b1b      	ldr	r3, [pc, #108]	; (8003bcc <UART_SetConfig+0x360>)
 8003b5e:	e00c      	b.n	8003b7a <UART_SetConfig+0x30e>
 8003b60:	4b1b      	ldr	r3, [pc, #108]	; (8003bd0 <UART_SetConfig+0x364>)
 8003b62:	e00a      	b.n	8003b7a <UART_SetConfig+0x30e>
 8003b64:	4b1b      	ldr	r3, [pc, #108]	; (8003bd4 <UART_SetConfig+0x368>)
 8003b66:	e008      	b.n	8003b7a <UART_SetConfig+0x30e>
 8003b68:	4b1b      	ldr	r3, [pc, #108]	; (8003bd8 <UART_SetConfig+0x36c>)
 8003b6a:	e006      	b.n	8003b7a <UART_SetConfig+0x30e>
 8003b6c:	4b1b      	ldr	r3, [pc, #108]	; (8003bdc <UART_SetConfig+0x370>)
 8003b6e:	e004      	b.n	8003b7a <UART_SetConfig+0x30e>
 8003b70:	4b1b      	ldr	r3, [pc, #108]	; (8003be0 <UART_SetConfig+0x374>)
 8003b72:	e002      	b.n	8003b7a <UART_SetConfig+0x30e>
 8003b74:	4b1b      	ldr	r3, [pc, #108]	; (8003be4 <UART_SetConfig+0x378>)
 8003b76:	e000      	b.n	8003b7a <UART_SetConfig+0x30e>
 8003b78:	4b10      	ldr	r3, [pc, #64]	; (8003bbc <UART_SetConfig+0x350>)
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	6852      	ldr	r2, [r2, #4]
 8003b7e:	0852      	lsrs	r2, r2, #1
 8003b80:	189a      	adds	r2, r3, r2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	0019      	movs	r1, r3
 8003b88:	0010      	movs	r0, r2
 8003b8a:	f7fc fac5 	bl	8000118 <__udivsi3>
 8003b8e:	0003      	movs	r3, r0
 8003b90:	b29b      	uxth	r3, r3
 8003b92:	617b      	str	r3, [r7, #20]
        break;
 8003b94:	e0f0      	b.n	8003d78 <UART_SetConfig+0x50c>
 8003b96:	46c0      	nop			; (mov r8, r8)
 8003b98:	cfff69f3 	.word	0xcfff69f3
 8003b9c:	ffffcfff 	.word	0xffffcfff
 8003ba0:	11fff4ff 	.word	0x11fff4ff
 8003ba4:	40013800 	.word	0x40013800
 8003ba8:	40021000 	.word	0x40021000
 8003bac:	40004400 	.word	0x40004400
 8003bb0:	40004800 	.word	0x40004800
 8003bb4:	40004c00 	.word	0x40004c00
 8003bb8:	0001e848 	.word	0x0001e848
 8003bbc:	01e84800 	.word	0x01e84800
 8003bc0:	0003d090 	.word	0x0003d090
 8003bc4:	0007a120 	.word	0x0007a120
 8003bc8:	000f4240 	.word	0x000f4240
 8003bcc:	001e8480 	.word	0x001e8480
 8003bd0:	0028b0aa 	.word	0x0028b0aa
 8003bd4:	0030d400 	.word	0x0030d400
 8003bd8:	003d0900 	.word	0x003d0900
 8003bdc:	00516154 	.word	0x00516154
 8003be0:	007a1200 	.word	0x007a1200
 8003be4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003be8:	f7fe fdae 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8003bec:	0003      	movs	r3, r0
 8003bee:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d044      	beq.n	8003c82 <UART_SetConfig+0x416>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfc:	2b01      	cmp	r3, #1
 8003bfe:	d03e      	beq.n	8003c7e <UART_SetConfig+0x412>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c04:	2b02      	cmp	r3, #2
 8003c06:	d038      	beq.n	8003c7a <UART_SetConfig+0x40e>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	2b03      	cmp	r3, #3
 8003c0e:	d032      	beq.n	8003c76 <UART_SetConfig+0x40a>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d02c      	beq.n	8003c72 <UART_SetConfig+0x406>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c1c:	2b05      	cmp	r3, #5
 8003c1e:	d026      	beq.n	8003c6e <UART_SetConfig+0x402>
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c24:	2b06      	cmp	r3, #6
 8003c26:	d020      	beq.n	8003c6a <UART_SetConfig+0x3fe>
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2c:	2b07      	cmp	r3, #7
 8003c2e:	d01a      	beq.n	8003c66 <UART_SetConfig+0x3fa>
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d014      	beq.n	8003c62 <UART_SetConfig+0x3f6>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	2b09      	cmp	r3, #9
 8003c3e:	d00e      	beq.n	8003c5e <UART_SetConfig+0x3f2>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c44:	2b0a      	cmp	r3, #10
 8003c46:	d008      	beq.n	8003c5a <UART_SetConfig+0x3ee>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c4c:	2b0b      	cmp	r3, #11
 8003c4e:	d102      	bne.n	8003c56 <UART_SetConfig+0x3ea>
 8003c50:	2380      	movs	r3, #128	; 0x80
 8003c52:	005b      	lsls	r3, r3, #1
 8003c54:	e016      	b.n	8003c84 <UART_SetConfig+0x418>
 8003c56:	2301      	movs	r3, #1
 8003c58:	e014      	b.n	8003c84 <UART_SetConfig+0x418>
 8003c5a:	2380      	movs	r3, #128	; 0x80
 8003c5c:	e012      	b.n	8003c84 <UART_SetConfig+0x418>
 8003c5e:	2340      	movs	r3, #64	; 0x40
 8003c60:	e010      	b.n	8003c84 <UART_SetConfig+0x418>
 8003c62:	2320      	movs	r3, #32
 8003c64:	e00e      	b.n	8003c84 <UART_SetConfig+0x418>
 8003c66:	2310      	movs	r3, #16
 8003c68:	e00c      	b.n	8003c84 <UART_SetConfig+0x418>
 8003c6a:	230c      	movs	r3, #12
 8003c6c:	e00a      	b.n	8003c84 <UART_SetConfig+0x418>
 8003c6e:	230a      	movs	r3, #10
 8003c70:	e008      	b.n	8003c84 <UART_SetConfig+0x418>
 8003c72:	2308      	movs	r3, #8
 8003c74:	e006      	b.n	8003c84 <UART_SetConfig+0x418>
 8003c76:	2306      	movs	r3, #6
 8003c78:	e004      	b.n	8003c84 <UART_SetConfig+0x418>
 8003c7a:	2304      	movs	r3, #4
 8003c7c:	e002      	b.n	8003c84 <UART_SetConfig+0x418>
 8003c7e:	2302      	movs	r3, #2
 8003c80:	e000      	b.n	8003c84 <UART_SetConfig+0x418>
 8003c82:	2301      	movs	r3, #1
 8003c84:	0019      	movs	r1, r3
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f7fc fa46 	bl	8000118 <__udivsi3>
 8003c8c:	0003      	movs	r3, r0
 8003c8e:	005a      	lsls	r2, r3, #1
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	685b      	ldr	r3, [r3, #4]
 8003c94:	085b      	lsrs	r3, r3, #1
 8003c96:	18d2      	adds	r2, r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	0019      	movs	r1, r3
 8003c9e:	0010      	movs	r0, r2
 8003ca0:	f7fc fa3a 	bl	8000118 <__udivsi3>
 8003ca4:	0003      	movs	r3, r0
 8003ca6:	b29b      	uxth	r3, r3
 8003ca8:	617b      	str	r3, [r7, #20]
        break;
 8003caa:	e065      	b.n	8003d78 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d04c      	beq.n	8003d4e <UART_SetConfig+0x4e2>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d045      	beq.n	8003d48 <UART_SetConfig+0x4dc>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d03e      	beq.n	8003d42 <UART_SetConfig+0x4d6>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	2b03      	cmp	r3, #3
 8003cca:	d038      	beq.n	8003d3e <UART_SetConfig+0x4d2>
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	2b04      	cmp	r3, #4
 8003cd2:	d031      	beq.n	8003d38 <UART_SetConfig+0x4cc>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd8:	2b05      	cmp	r3, #5
 8003cda:	d02b      	beq.n	8003d34 <UART_SetConfig+0x4c8>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce0:	2b06      	cmp	r3, #6
 8003ce2:	d025      	beq.n	8003d30 <UART_SetConfig+0x4c4>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce8:	2b07      	cmp	r3, #7
 8003cea:	d01e      	beq.n	8003d2a <UART_SetConfig+0x4be>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d017      	beq.n	8003d24 <UART_SetConfig+0x4b8>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf8:	2b09      	cmp	r3, #9
 8003cfa:	d010      	beq.n	8003d1e <UART_SetConfig+0x4b2>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	2b0a      	cmp	r3, #10
 8003d02:	d009      	beq.n	8003d18 <UART_SetConfig+0x4ac>
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	2b0b      	cmp	r3, #11
 8003d0a:	d102      	bne.n	8003d12 <UART_SetConfig+0x4a6>
 8003d0c:	2380      	movs	r3, #128	; 0x80
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	e01f      	b.n	8003d52 <UART_SetConfig+0x4e6>
 8003d12:	2380      	movs	r3, #128	; 0x80
 8003d14:	025b      	lsls	r3, r3, #9
 8003d16:	e01c      	b.n	8003d52 <UART_SetConfig+0x4e6>
 8003d18:	2380      	movs	r3, #128	; 0x80
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	e019      	b.n	8003d52 <UART_SetConfig+0x4e6>
 8003d1e:	2380      	movs	r3, #128	; 0x80
 8003d20:	00db      	lsls	r3, r3, #3
 8003d22:	e016      	b.n	8003d52 <UART_SetConfig+0x4e6>
 8003d24:	2380      	movs	r3, #128	; 0x80
 8003d26:	011b      	lsls	r3, r3, #4
 8003d28:	e013      	b.n	8003d52 <UART_SetConfig+0x4e6>
 8003d2a:	2380      	movs	r3, #128	; 0x80
 8003d2c:	015b      	lsls	r3, r3, #5
 8003d2e:	e010      	b.n	8003d52 <UART_SetConfig+0x4e6>
 8003d30:	4bb9      	ldr	r3, [pc, #740]	; (8004018 <UART_SetConfig+0x7ac>)
 8003d32:	e00e      	b.n	8003d52 <UART_SetConfig+0x4e6>
 8003d34:	4bb9      	ldr	r3, [pc, #740]	; (800401c <UART_SetConfig+0x7b0>)
 8003d36:	e00c      	b.n	8003d52 <UART_SetConfig+0x4e6>
 8003d38:	2380      	movs	r3, #128	; 0x80
 8003d3a:	019b      	lsls	r3, r3, #6
 8003d3c:	e009      	b.n	8003d52 <UART_SetConfig+0x4e6>
 8003d3e:	4bb8      	ldr	r3, [pc, #736]	; (8004020 <UART_SetConfig+0x7b4>)
 8003d40:	e007      	b.n	8003d52 <UART_SetConfig+0x4e6>
 8003d42:	2380      	movs	r3, #128	; 0x80
 8003d44:	01db      	lsls	r3, r3, #7
 8003d46:	e004      	b.n	8003d52 <UART_SetConfig+0x4e6>
 8003d48:	2380      	movs	r3, #128	; 0x80
 8003d4a:	021b      	lsls	r3, r3, #8
 8003d4c:	e001      	b.n	8003d52 <UART_SetConfig+0x4e6>
 8003d4e:	2380      	movs	r3, #128	; 0x80
 8003d50:	025b      	lsls	r3, r3, #9
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	6852      	ldr	r2, [r2, #4]
 8003d56:	0852      	lsrs	r2, r2, #1
 8003d58:	189a      	adds	r2, r3, r2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	0019      	movs	r1, r3
 8003d60:	0010      	movs	r0, r2
 8003d62:	f7fc f9d9 	bl	8000118 <__udivsi3>
 8003d66:	0003      	movs	r3, r0
 8003d68:	b29b      	uxth	r3, r3
 8003d6a:	617b      	str	r3, [r7, #20]
        break;
 8003d6c:	e004      	b.n	8003d78 <UART_SetConfig+0x50c>
      default:
        ret = HAL_ERROR;
 8003d6e:	231e      	movs	r3, #30
 8003d70:	18fb      	adds	r3, r7, r3
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
        break;
 8003d76:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	2b0f      	cmp	r3, #15
 8003d7c:	d91b      	bls.n	8003db6 <UART_SetConfig+0x54a>
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	4aa8      	ldr	r2, [pc, #672]	; (8004024 <UART_SetConfig+0x7b8>)
 8003d82:	4293      	cmp	r3, r2
 8003d84:	d817      	bhi.n	8003db6 <UART_SetConfig+0x54a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	200a      	movs	r0, #10
 8003d8c:	183b      	adds	r3, r7, r0
 8003d8e:	210f      	movs	r1, #15
 8003d90:	438a      	bics	r2, r1
 8003d92:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	085b      	lsrs	r3, r3, #1
 8003d98:	b29b      	uxth	r3, r3
 8003d9a:	2207      	movs	r2, #7
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	b299      	uxth	r1, r3
 8003da0:	183b      	adds	r3, r7, r0
 8003da2:	183a      	adds	r2, r7, r0
 8003da4:	8812      	ldrh	r2, [r2, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	183a      	adds	r2, r7, r0
 8003db0:	8812      	ldrh	r2, [r2, #0]
 8003db2:	60da      	str	r2, [r3, #12]
 8003db4:	e1c5      	b.n	8004142 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 8003db6:	231e      	movs	r3, #30
 8003db8:	18fb      	adds	r3, r7, r3
 8003dba:	2201      	movs	r2, #1
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e1c0      	b.n	8004142 <UART_SetConfig+0x8d6>
    }
  }
  else
  {
    switch (clocksource)
 8003dc0:	231f      	movs	r3, #31
 8003dc2:	18fb      	adds	r3, r7, r3
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	2b02      	cmp	r3, #2
 8003dc8:	d100      	bne.n	8003dcc <UART_SetConfig+0x560>
 8003dca:	e06c      	b.n	8003ea6 <UART_SetConfig+0x63a>
 8003dcc:	dc02      	bgt.n	8003dd4 <UART_SetConfig+0x568>
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d007      	beq.n	8003de2 <UART_SetConfig+0x576>
 8003dd2:	e1a1      	b.n	8004118 <UART_SetConfig+0x8ac>
 8003dd4:	2b04      	cmp	r3, #4
 8003dd6:	d100      	bne.n	8003dda <UART_SetConfig+0x56e>
 8003dd8:	e0bc      	b.n	8003f54 <UART_SetConfig+0x6e8>
 8003dda:	2b08      	cmp	r3, #8
 8003ddc:	d100      	bne.n	8003de0 <UART_SetConfig+0x574>
 8003dde:	e13b      	b.n	8004058 <UART_SetConfig+0x7ec>
 8003de0:	e19a      	b.n	8004118 <UART_SetConfig+0x8ac>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003de2:	f7fe fd3d 	bl	8002860 <HAL_RCC_GetPCLK1Freq>
 8003de6:	0003      	movs	r3, r0
 8003de8:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d044      	beq.n	8003e7c <UART_SetConfig+0x610>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	2b01      	cmp	r3, #1
 8003df8:	d03e      	beq.n	8003e78 <UART_SetConfig+0x60c>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d038      	beq.n	8003e74 <UART_SetConfig+0x608>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	2b03      	cmp	r3, #3
 8003e08:	d032      	beq.n	8003e70 <UART_SetConfig+0x604>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d02c      	beq.n	8003e6c <UART_SetConfig+0x600>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	2b05      	cmp	r3, #5
 8003e18:	d026      	beq.n	8003e68 <UART_SetConfig+0x5fc>
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	2b06      	cmp	r3, #6
 8003e20:	d020      	beq.n	8003e64 <UART_SetConfig+0x5f8>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e26:	2b07      	cmp	r3, #7
 8003e28:	d01a      	beq.n	8003e60 <UART_SetConfig+0x5f4>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2e:	2b08      	cmp	r3, #8
 8003e30:	d014      	beq.n	8003e5c <UART_SetConfig+0x5f0>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e36:	2b09      	cmp	r3, #9
 8003e38:	d00e      	beq.n	8003e58 <UART_SetConfig+0x5ec>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e3e:	2b0a      	cmp	r3, #10
 8003e40:	d008      	beq.n	8003e54 <UART_SetConfig+0x5e8>
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e46:	2b0b      	cmp	r3, #11
 8003e48:	d102      	bne.n	8003e50 <UART_SetConfig+0x5e4>
 8003e4a:	2380      	movs	r3, #128	; 0x80
 8003e4c:	005b      	lsls	r3, r3, #1
 8003e4e:	e016      	b.n	8003e7e <UART_SetConfig+0x612>
 8003e50:	2301      	movs	r3, #1
 8003e52:	e014      	b.n	8003e7e <UART_SetConfig+0x612>
 8003e54:	2380      	movs	r3, #128	; 0x80
 8003e56:	e012      	b.n	8003e7e <UART_SetConfig+0x612>
 8003e58:	2340      	movs	r3, #64	; 0x40
 8003e5a:	e010      	b.n	8003e7e <UART_SetConfig+0x612>
 8003e5c:	2320      	movs	r3, #32
 8003e5e:	e00e      	b.n	8003e7e <UART_SetConfig+0x612>
 8003e60:	2310      	movs	r3, #16
 8003e62:	e00c      	b.n	8003e7e <UART_SetConfig+0x612>
 8003e64:	230c      	movs	r3, #12
 8003e66:	e00a      	b.n	8003e7e <UART_SetConfig+0x612>
 8003e68:	230a      	movs	r3, #10
 8003e6a:	e008      	b.n	8003e7e <UART_SetConfig+0x612>
 8003e6c:	2308      	movs	r3, #8
 8003e6e:	e006      	b.n	8003e7e <UART_SetConfig+0x612>
 8003e70:	2306      	movs	r3, #6
 8003e72:	e004      	b.n	8003e7e <UART_SetConfig+0x612>
 8003e74:	2304      	movs	r3, #4
 8003e76:	e002      	b.n	8003e7e <UART_SetConfig+0x612>
 8003e78:	2302      	movs	r3, #2
 8003e7a:	e000      	b.n	8003e7e <UART_SetConfig+0x612>
 8003e7c:	2301      	movs	r3, #1
 8003e7e:	0019      	movs	r1, r3
 8003e80:	68f8      	ldr	r0, [r7, #12]
 8003e82:	f7fc f949 	bl	8000118 <__udivsi3>
 8003e86:	0003      	movs	r3, r0
 8003e88:	001a      	movs	r2, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	085b      	lsrs	r3, r3, #1
 8003e90:	18d2      	adds	r2, r2, r3
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	0019      	movs	r1, r3
 8003e98:	0010      	movs	r0, r2
 8003e9a:	f7fc f93d 	bl	8000118 <__udivsi3>
 8003e9e:	0003      	movs	r3, r0
 8003ea0:	b29b      	uxth	r3, r3
 8003ea2:	617b      	str	r3, [r7, #20]
        break;
 8003ea4:	e13d      	b.n	8004122 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d043      	beq.n	8003f36 <UART_SetConfig+0x6ca>
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d03d      	beq.n	8003f32 <UART_SetConfig+0x6c6>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eba:	2b02      	cmp	r3, #2
 8003ebc:	d037      	beq.n	8003f2e <UART_SetConfig+0x6c2>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec2:	2b03      	cmp	r3, #3
 8003ec4:	d031      	beq.n	8003f2a <UART_SetConfig+0x6be>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eca:	2b04      	cmp	r3, #4
 8003ecc:	d02b      	beq.n	8003f26 <UART_SetConfig+0x6ba>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed2:	2b05      	cmp	r3, #5
 8003ed4:	d025      	beq.n	8003f22 <UART_SetConfig+0x6b6>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eda:	2b06      	cmp	r3, #6
 8003edc:	d01f      	beq.n	8003f1e <UART_SetConfig+0x6b2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ee2:	2b07      	cmp	r3, #7
 8003ee4:	d019      	beq.n	8003f1a <UART_SetConfig+0x6ae>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d013      	beq.n	8003f16 <UART_SetConfig+0x6aa>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef2:	2b09      	cmp	r3, #9
 8003ef4:	d00d      	beq.n	8003f12 <UART_SetConfig+0x6a6>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003efa:	2b0a      	cmp	r3, #10
 8003efc:	d007      	beq.n	8003f0e <UART_SetConfig+0x6a2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f02:	2b0b      	cmp	r3, #11
 8003f04:	d101      	bne.n	8003f0a <UART_SetConfig+0x69e>
 8003f06:	4b48      	ldr	r3, [pc, #288]	; (8004028 <UART_SetConfig+0x7bc>)
 8003f08:	e016      	b.n	8003f38 <UART_SetConfig+0x6cc>
 8003f0a:	4b48      	ldr	r3, [pc, #288]	; (800402c <UART_SetConfig+0x7c0>)
 8003f0c:	e014      	b.n	8003f38 <UART_SetConfig+0x6cc>
 8003f0e:	4b48      	ldr	r3, [pc, #288]	; (8004030 <UART_SetConfig+0x7c4>)
 8003f10:	e012      	b.n	8003f38 <UART_SetConfig+0x6cc>
 8003f12:	4b48      	ldr	r3, [pc, #288]	; (8004034 <UART_SetConfig+0x7c8>)
 8003f14:	e010      	b.n	8003f38 <UART_SetConfig+0x6cc>
 8003f16:	4b48      	ldr	r3, [pc, #288]	; (8004038 <UART_SetConfig+0x7cc>)
 8003f18:	e00e      	b.n	8003f38 <UART_SetConfig+0x6cc>
 8003f1a:	4b48      	ldr	r3, [pc, #288]	; (800403c <UART_SetConfig+0x7d0>)
 8003f1c:	e00c      	b.n	8003f38 <UART_SetConfig+0x6cc>
 8003f1e:	4b48      	ldr	r3, [pc, #288]	; (8004040 <UART_SetConfig+0x7d4>)
 8003f20:	e00a      	b.n	8003f38 <UART_SetConfig+0x6cc>
 8003f22:	4b48      	ldr	r3, [pc, #288]	; (8004044 <UART_SetConfig+0x7d8>)
 8003f24:	e008      	b.n	8003f38 <UART_SetConfig+0x6cc>
 8003f26:	4b48      	ldr	r3, [pc, #288]	; (8004048 <UART_SetConfig+0x7dc>)
 8003f28:	e006      	b.n	8003f38 <UART_SetConfig+0x6cc>
 8003f2a:	4b48      	ldr	r3, [pc, #288]	; (800404c <UART_SetConfig+0x7e0>)
 8003f2c:	e004      	b.n	8003f38 <UART_SetConfig+0x6cc>
 8003f2e:	4b48      	ldr	r3, [pc, #288]	; (8004050 <UART_SetConfig+0x7e4>)
 8003f30:	e002      	b.n	8003f38 <UART_SetConfig+0x6cc>
 8003f32:	4b48      	ldr	r3, [pc, #288]	; (8004054 <UART_SetConfig+0x7e8>)
 8003f34:	e000      	b.n	8003f38 <UART_SetConfig+0x6cc>
 8003f36:	4b3d      	ldr	r3, [pc, #244]	; (800402c <UART_SetConfig+0x7c0>)
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	6852      	ldr	r2, [r2, #4]
 8003f3c:	0852      	lsrs	r2, r2, #1
 8003f3e:	189a      	adds	r2, r3, r2
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	685b      	ldr	r3, [r3, #4]
 8003f44:	0019      	movs	r1, r3
 8003f46:	0010      	movs	r0, r2
 8003f48:	f7fc f8e6 	bl	8000118 <__udivsi3>
 8003f4c:	0003      	movs	r3, r0
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	617b      	str	r3, [r7, #20]
        break;
 8003f52:	e0e6      	b.n	8004122 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f54:	f7fe fbf8 	bl	8002748 <HAL_RCC_GetSysClockFreq>
 8003f58:	0003      	movs	r3, r0
 8003f5a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d044      	beq.n	8003fee <UART_SetConfig+0x782>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f68:	2b01      	cmp	r3, #1
 8003f6a:	d03e      	beq.n	8003fea <UART_SetConfig+0x77e>
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f70:	2b02      	cmp	r3, #2
 8003f72:	d038      	beq.n	8003fe6 <UART_SetConfig+0x77a>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f78:	2b03      	cmp	r3, #3
 8003f7a:	d032      	beq.n	8003fe2 <UART_SetConfig+0x776>
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f80:	2b04      	cmp	r3, #4
 8003f82:	d02c      	beq.n	8003fde <UART_SetConfig+0x772>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f88:	2b05      	cmp	r3, #5
 8003f8a:	d026      	beq.n	8003fda <UART_SetConfig+0x76e>
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f90:	2b06      	cmp	r3, #6
 8003f92:	d020      	beq.n	8003fd6 <UART_SetConfig+0x76a>
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f98:	2b07      	cmp	r3, #7
 8003f9a:	d01a      	beq.n	8003fd2 <UART_SetConfig+0x766>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa0:	2b08      	cmp	r3, #8
 8003fa2:	d014      	beq.n	8003fce <UART_SetConfig+0x762>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fa8:	2b09      	cmp	r3, #9
 8003faa:	d00e      	beq.n	8003fca <UART_SetConfig+0x75e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	2b0a      	cmp	r3, #10
 8003fb2:	d008      	beq.n	8003fc6 <UART_SetConfig+0x75a>
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb8:	2b0b      	cmp	r3, #11
 8003fba:	d102      	bne.n	8003fc2 <UART_SetConfig+0x756>
 8003fbc:	2380      	movs	r3, #128	; 0x80
 8003fbe:	005b      	lsls	r3, r3, #1
 8003fc0:	e016      	b.n	8003ff0 <UART_SetConfig+0x784>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e014      	b.n	8003ff0 <UART_SetConfig+0x784>
 8003fc6:	2380      	movs	r3, #128	; 0x80
 8003fc8:	e012      	b.n	8003ff0 <UART_SetConfig+0x784>
 8003fca:	2340      	movs	r3, #64	; 0x40
 8003fcc:	e010      	b.n	8003ff0 <UART_SetConfig+0x784>
 8003fce:	2320      	movs	r3, #32
 8003fd0:	e00e      	b.n	8003ff0 <UART_SetConfig+0x784>
 8003fd2:	2310      	movs	r3, #16
 8003fd4:	e00c      	b.n	8003ff0 <UART_SetConfig+0x784>
 8003fd6:	230c      	movs	r3, #12
 8003fd8:	e00a      	b.n	8003ff0 <UART_SetConfig+0x784>
 8003fda:	230a      	movs	r3, #10
 8003fdc:	e008      	b.n	8003ff0 <UART_SetConfig+0x784>
 8003fde:	2308      	movs	r3, #8
 8003fe0:	e006      	b.n	8003ff0 <UART_SetConfig+0x784>
 8003fe2:	2306      	movs	r3, #6
 8003fe4:	e004      	b.n	8003ff0 <UART_SetConfig+0x784>
 8003fe6:	2304      	movs	r3, #4
 8003fe8:	e002      	b.n	8003ff0 <UART_SetConfig+0x784>
 8003fea:	2302      	movs	r3, #2
 8003fec:	e000      	b.n	8003ff0 <UART_SetConfig+0x784>
 8003fee:	2301      	movs	r3, #1
 8003ff0:	0019      	movs	r1, r3
 8003ff2:	68f8      	ldr	r0, [r7, #12]
 8003ff4:	f7fc f890 	bl	8000118 <__udivsi3>
 8003ff8:	0003      	movs	r3, r0
 8003ffa:	001a      	movs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	085b      	lsrs	r3, r3, #1
 8004002:	18d2      	adds	r2, r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	0019      	movs	r1, r3
 800400a:	0010      	movs	r0, r2
 800400c:	f7fc f884 	bl	8000118 <__udivsi3>
 8004010:	0003      	movs	r3, r0
 8004012:	b29b      	uxth	r3, r3
 8004014:	617b      	str	r3, [r7, #20]
        break;
 8004016:	e084      	b.n	8004122 <UART_SetConfig+0x8b6>
 8004018:	00001554 	.word	0x00001554
 800401c:	00001998 	.word	0x00001998
 8004020:	00002aaa 	.word	0x00002aaa
 8004024:	0000ffff 	.word	0x0000ffff
 8004028:	0000f424 	.word	0x0000f424
 800402c:	00f42400 	.word	0x00f42400
 8004030:	0001e848 	.word	0x0001e848
 8004034:	0003d090 	.word	0x0003d090
 8004038:	0007a120 	.word	0x0007a120
 800403c:	000f4240 	.word	0x000f4240
 8004040:	00145855 	.word	0x00145855
 8004044:	00186a00 	.word	0x00186a00
 8004048:	001e8480 	.word	0x001e8480
 800404c:	0028b0aa 	.word	0x0028b0aa
 8004050:	003d0900 	.word	0x003d0900
 8004054:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405c:	2b00      	cmp	r3, #0
 800405e:	d04b      	beq.n	80040f8 <UART_SetConfig+0x88c>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	2b01      	cmp	r3, #1
 8004066:	d044      	beq.n	80040f2 <UART_SetConfig+0x886>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406c:	2b02      	cmp	r3, #2
 800406e:	d03d      	beq.n	80040ec <UART_SetConfig+0x880>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004074:	2b03      	cmp	r3, #3
 8004076:	d037      	beq.n	80040e8 <UART_SetConfig+0x87c>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407c:	2b04      	cmp	r3, #4
 800407e:	d030      	beq.n	80040e2 <UART_SetConfig+0x876>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	2b05      	cmp	r3, #5
 8004086:	d02a      	beq.n	80040de <UART_SetConfig+0x872>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408c:	2b06      	cmp	r3, #6
 800408e:	d024      	beq.n	80040da <UART_SetConfig+0x86e>
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004094:	2b07      	cmp	r3, #7
 8004096:	d01d      	beq.n	80040d4 <UART_SetConfig+0x868>
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409c:	2b08      	cmp	r3, #8
 800409e:	d016      	beq.n	80040ce <UART_SetConfig+0x862>
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a4:	2b09      	cmp	r3, #9
 80040a6:	d00f      	beq.n	80040c8 <UART_SetConfig+0x85c>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ac:	2b0a      	cmp	r3, #10
 80040ae:	d008      	beq.n	80040c2 <UART_SetConfig+0x856>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b4:	2b0b      	cmp	r3, #11
 80040b6:	d101      	bne.n	80040bc <UART_SetConfig+0x850>
 80040b8:	2380      	movs	r3, #128	; 0x80
 80040ba:	e01f      	b.n	80040fc <UART_SetConfig+0x890>
 80040bc:	2380      	movs	r3, #128	; 0x80
 80040be:	021b      	lsls	r3, r3, #8
 80040c0:	e01c      	b.n	80040fc <UART_SetConfig+0x890>
 80040c2:	2380      	movs	r3, #128	; 0x80
 80040c4:	005b      	lsls	r3, r3, #1
 80040c6:	e019      	b.n	80040fc <UART_SetConfig+0x890>
 80040c8:	2380      	movs	r3, #128	; 0x80
 80040ca:	009b      	lsls	r3, r3, #2
 80040cc:	e016      	b.n	80040fc <UART_SetConfig+0x890>
 80040ce:	2380      	movs	r3, #128	; 0x80
 80040d0:	00db      	lsls	r3, r3, #3
 80040d2:	e013      	b.n	80040fc <UART_SetConfig+0x890>
 80040d4:	2380      	movs	r3, #128	; 0x80
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	e010      	b.n	80040fc <UART_SetConfig+0x890>
 80040da:	4b24      	ldr	r3, [pc, #144]	; (800416c <UART_SetConfig+0x900>)
 80040dc:	e00e      	b.n	80040fc <UART_SetConfig+0x890>
 80040de:	4b24      	ldr	r3, [pc, #144]	; (8004170 <UART_SetConfig+0x904>)
 80040e0:	e00c      	b.n	80040fc <UART_SetConfig+0x890>
 80040e2:	2380      	movs	r3, #128	; 0x80
 80040e4:	015b      	lsls	r3, r3, #5
 80040e6:	e009      	b.n	80040fc <UART_SetConfig+0x890>
 80040e8:	4b22      	ldr	r3, [pc, #136]	; (8004174 <UART_SetConfig+0x908>)
 80040ea:	e007      	b.n	80040fc <UART_SetConfig+0x890>
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	019b      	lsls	r3, r3, #6
 80040f0:	e004      	b.n	80040fc <UART_SetConfig+0x890>
 80040f2:	2380      	movs	r3, #128	; 0x80
 80040f4:	01db      	lsls	r3, r3, #7
 80040f6:	e001      	b.n	80040fc <UART_SetConfig+0x890>
 80040f8:	2380      	movs	r3, #128	; 0x80
 80040fa:	021b      	lsls	r3, r3, #8
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	6852      	ldr	r2, [r2, #4]
 8004100:	0852      	lsrs	r2, r2, #1
 8004102:	189a      	adds	r2, r3, r2
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	685b      	ldr	r3, [r3, #4]
 8004108:	0019      	movs	r1, r3
 800410a:	0010      	movs	r0, r2
 800410c:	f7fc f804 	bl	8000118 <__udivsi3>
 8004110:	0003      	movs	r3, r0
 8004112:	b29b      	uxth	r3, r3
 8004114:	617b      	str	r3, [r7, #20]
        break;
 8004116:	e004      	b.n	8004122 <UART_SetConfig+0x8b6>
      default:
        ret = HAL_ERROR;
 8004118:	231e      	movs	r3, #30
 800411a:	18fb      	adds	r3, r7, r3
 800411c:	2201      	movs	r2, #1
 800411e:	701a      	strb	r2, [r3, #0]
        break;
 8004120:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	2b0f      	cmp	r3, #15
 8004126:	d908      	bls.n	800413a <UART_SetConfig+0x8ce>
 8004128:	697b      	ldr	r3, [r7, #20]
 800412a:	4a13      	ldr	r2, [pc, #76]	; (8004178 <UART_SetConfig+0x90c>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d804      	bhi.n	800413a <UART_SetConfig+0x8ce>
    {
      huart->Instance->BRR = usartdiv;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	697a      	ldr	r2, [r7, #20]
 8004136:	60da      	str	r2, [r3, #12]
 8004138:	e003      	b.n	8004142 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 800413a:	231e      	movs	r3, #30
 800413c:	18fb      	adds	r3, r7, r3
 800413e:	2201      	movs	r2, #1
 8004140:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	226a      	movs	r2, #106	; 0x6a
 8004146:	2101      	movs	r1, #1
 8004148:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2268      	movs	r2, #104	; 0x68
 800414e:	2101      	movs	r1, #1
 8004150:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 800415e:	231e      	movs	r3, #30
 8004160:	18fb      	adds	r3, r7, r3
 8004162:	781b      	ldrb	r3, [r3, #0]
}
 8004164:	0018      	movs	r0, r3
 8004166:	46bd      	mov	sp, r7
 8004168:	b008      	add	sp, #32
 800416a:	bd80      	pop	{r7, pc}
 800416c:	00000aaa 	.word	0x00000aaa
 8004170:	00000ccc 	.word	0x00000ccc
 8004174:	00001555 	.word	0x00001555
 8004178:	0000ffff 	.word	0x0000ffff

0800417c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800417c:	b580      	push	{r7, lr}
 800417e:	b082      	sub	sp, #8
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004188:	2201      	movs	r2, #1
 800418a:	4013      	ands	r3, r2
 800418c:	d00b      	beq.n	80041a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	4a4a      	ldr	r2, [pc, #296]	; (80042c0 <UART_AdvFeatureConfig+0x144>)
 8004196:	4013      	ands	r3, r2
 8004198:	0019      	movs	r1, r3
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	430a      	orrs	r2, r1
 80041a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041aa:	2202      	movs	r2, #2
 80041ac:	4013      	ands	r3, r2
 80041ae:	d00b      	beq.n	80041c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4a43      	ldr	r2, [pc, #268]	; (80042c4 <UART_AdvFeatureConfig+0x148>)
 80041b8:	4013      	ands	r3, r2
 80041ba:	0019      	movs	r1, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	430a      	orrs	r2, r1
 80041c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041cc:	2204      	movs	r2, #4
 80041ce:	4013      	ands	r3, r2
 80041d0:	d00b      	beq.n	80041ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	4a3b      	ldr	r2, [pc, #236]	; (80042c8 <UART_AdvFeatureConfig+0x14c>)
 80041da:	4013      	ands	r3, r2
 80041dc:	0019      	movs	r1, r3
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	430a      	orrs	r2, r1
 80041e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ee:	2208      	movs	r2, #8
 80041f0:	4013      	ands	r3, r2
 80041f2:	d00b      	beq.n	800420c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	4a34      	ldr	r2, [pc, #208]	; (80042cc <UART_AdvFeatureConfig+0x150>)
 80041fc:	4013      	ands	r3, r2
 80041fe:	0019      	movs	r1, r3
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004210:	2210      	movs	r2, #16
 8004212:	4013      	ands	r3, r2
 8004214:	d00b      	beq.n	800422e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a2c      	ldr	r2, [pc, #176]	; (80042d0 <UART_AdvFeatureConfig+0x154>)
 800421e:	4013      	ands	r3, r2
 8004220:	0019      	movs	r1, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	430a      	orrs	r2, r1
 800422c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004232:	2220      	movs	r2, #32
 8004234:	4013      	ands	r3, r2
 8004236:	d00b      	beq.n	8004250 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	689b      	ldr	r3, [r3, #8]
 800423e:	4a25      	ldr	r2, [pc, #148]	; (80042d4 <UART_AdvFeatureConfig+0x158>)
 8004240:	4013      	ands	r3, r2
 8004242:	0019      	movs	r1, r3
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004254:	2240      	movs	r2, #64	; 0x40
 8004256:	4013      	ands	r3, r2
 8004258:	d01d      	beq.n	8004296 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4a1d      	ldr	r2, [pc, #116]	; (80042d8 <UART_AdvFeatureConfig+0x15c>)
 8004262:	4013      	ands	r3, r2
 8004264:	0019      	movs	r1, r3
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004276:	2380      	movs	r3, #128	; 0x80
 8004278:	035b      	lsls	r3, r3, #13
 800427a:	429a      	cmp	r2, r3
 800427c:	d10b      	bne.n	8004296 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	685b      	ldr	r3, [r3, #4]
 8004284:	4a15      	ldr	r2, [pc, #84]	; (80042dc <UART_AdvFeatureConfig+0x160>)
 8004286:	4013      	ands	r3, r2
 8004288:	0019      	movs	r1, r3
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800429a:	2280      	movs	r2, #128	; 0x80
 800429c:	4013      	ands	r3, r2
 800429e:	d00b      	beq.n	80042b8 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	4a0e      	ldr	r2, [pc, #56]	; (80042e0 <UART_AdvFeatureConfig+0x164>)
 80042a8:	4013      	ands	r3, r2
 80042aa:	0019      	movs	r1, r3
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	430a      	orrs	r2, r1
 80042b6:	605a      	str	r2, [r3, #4]
  }
}
 80042b8:	46c0      	nop			; (mov r8, r8)
 80042ba:	46bd      	mov	sp, r7
 80042bc:	b002      	add	sp, #8
 80042be:	bd80      	pop	{r7, pc}
 80042c0:	fffdffff 	.word	0xfffdffff
 80042c4:	fffeffff 	.word	0xfffeffff
 80042c8:	fffbffff 	.word	0xfffbffff
 80042cc:	ffff7fff 	.word	0xffff7fff
 80042d0:	ffffefff 	.word	0xffffefff
 80042d4:	ffffdfff 	.word	0xffffdfff
 80042d8:	ffefffff 	.word	0xffefffff
 80042dc:	ff9fffff 	.word	0xff9fffff
 80042e0:	fff7ffff 	.word	0xfff7ffff

080042e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80042e4:	b580      	push	{r7, lr}
 80042e6:	b086      	sub	sp, #24
 80042e8:	af02      	add	r7, sp, #8
 80042ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2288      	movs	r2, #136	; 0x88
 80042f0:	2100      	movs	r1, #0
 80042f2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80042f4:	f7fd f84e 	bl	8001394 <HAL_GetTick>
 80042f8:	0003      	movs	r3, r0
 80042fa:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	2208      	movs	r2, #8
 8004304:	4013      	ands	r3, r2
 8004306:	2b08      	cmp	r3, #8
 8004308:	d10d      	bne.n	8004326 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800430a:	68fa      	ldr	r2, [r7, #12]
 800430c:	2380      	movs	r3, #128	; 0x80
 800430e:	0399      	lsls	r1, r3, #14
 8004310:	6878      	ldr	r0, [r7, #4]
 8004312:	4b18      	ldr	r3, [pc, #96]	; (8004374 <UART_CheckIdleState+0x90>)
 8004314:	9300      	str	r3, [sp, #0]
 8004316:	0013      	movs	r3, r2
 8004318:	2200      	movs	r2, #0
 800431a:	f000 f82d 	bl	8004378 <UART_WaitOnFlagUntilTimeout>
 800431e:	1e03      	subs	r3, r0, #0
 8004320:	d001      	beq.n	8004326 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004322:	2303      	movs	r3, #3
 8004324:	e021      	b.n	800436a <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2204      	movs	r2, #4
 800432e:	4013      	ands	r3, r2
 8004330:	2b04      	cmp	r3, #4
 8004332:	d10d      	bne.n	8004350 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004334:	68fa      	ldr	r2, [r7, #12]
 8004336:	2380      	movs	r3, #128	; 0x80
 8004338:	03d9      	lsls	r1, r3, #15
 800433a:	6878      	ldr	r0, [r7, #4]
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <UART_CheckIdleState+0x90>)
 800433e:	9300      	str	r3, [sp, #0]
 8004340:	0013      	movs	r3, r2
 8004342:	2200      	movs	r2, #0
 8004344:	f000 f818 	bl	8004378 <UART_WaitOnFlagUntilTimeout>
 8004348:	1e03      	subs	r3, r0, #0
 800434a:	d001      	beq.n	8004350 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800434c:	2303      	movs	r3, #3
 800434e:	e00c      	b.n	800436a <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2280      	movs	r2, #128	; 0x80
 8004354:	2120      	movs	r1, #32
 8004356:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2284      	movs	r2, #132	; 0x84
 800435c:	2120      	movs	r1, #32
 800435e:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	227c      	movs	r2, #124	; 0x7c
 8004364:	2100      	movs	r1, #0
 8004366:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004368:	2300      	movs	r3, #0
}
 800436a:	0018      	movs	r0, r3
 800436c:	46bd      	mov	sp, r7
 800436e:	b004      	add	sp, #16
 8004370:	bd80      	pop	{r7, pc}
 8004372:	46c0      	nop			; (mov r8, r8)
 8004374:	01ffffff 	.word	0x01ffffff

08004378 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	603b      	str	r3, [r7, #0]
 8004384:	1dfb      	adds	r3, r7, #7
 8004386:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004388:	e02b      	b.n	80043e2 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	3301      	adds	r3, #1
 800438e:	d028      	beq.n	80043e2 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004390:	f7fd f800 	bl	8001394 <HAL_GetTick>
 8004394:	0002      	movs	r2, r0
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	1ad3      	subs	r3, r2, r3
 800439a:	69ba      	ldr	r2, [r7, #24]
 800439c:	429a      	cmp	r2, r3
 800439e:	d302      	bcc.n	80043a6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80043a0:	69bb      	ldr	r3, [r7, #24]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d11d      	bne.n	80043e2 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4916      	ldr	r1, [pc, #88]	; (800440c <UART_WaitOnFlagUntilTimeout+0x94>)
 80043b2:	400a      	ands	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	689a      	ldr	r2, [r3, #8]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	2101      	movs	r1, #1
 80043c2:	438a      	bics	r2, r1
 80043c4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2280      	movs	r2, #128	; 0x80
 80043ca:	2120      	movs	r1, #32
 80043cc:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	2284      	movs	r2, #132	; 0x84
 80043d2:	2120      	movs	r1, #32
 80043d4:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	227c      	movs	r2, #124	; 0x7c
 80043da:	2100      	movs	r1, #0
 80043dc:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e00f      	b.n	8004402 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	69db      	ldr	r3, [r3, #28]
 80043e8:	68ba      	ldr	r2, [r7, #8]
 80043ea:	4013      	ands	r3, r2
 80043ec:	68ba      	ldr	r2, [r7, #8]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	425a      	negs	r2, r3
 80043f2:	4153      	adcs	r3, r2
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	001a      	movs	r2, r3
 80043f8:	1dfb      	adds	r3, r7, #7
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d0c4      	beq.n	800438a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004400:	2300      	movs	r3, #0
}
 8004402:	0018      	movs	r0, r3
 8004404:	46bd      	mov	sp, r7
 8004406:	b004      	add	sp, #16
 8004408:	bd80      	pop	{r7, pc}
 800440a:	46c0      	nop			; (mov r8, r8)
 800440c:	fffffe5f 	.word	0xfffffe5f

08004410 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	490b      	ldr	r1, [pc, #44]	; (8004450 <UART_EndRxTransfer+0x40>)
 8004424:	400a      	ands	r2, r1
 8004426:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	689a      	ldr	r2, [r3, #8]
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4908      	ldr	r1, [pc, #32]	; (8004454 <UART_EndRxTransfer+0x44>)
 8004434:	400a      	ands	r2, r1
 8004436:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2284      	movs	r2, #132	; 0x84
 800443c:	2120      	movs	r1, #32
 800443e:	5099      	str	r1, [r3, r2]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8004446:	46c0      	nop			; (mov r8, r8)
 8004448:	46bd      	mov	sp, r7
 800444a:	b002      	add	sp, #8
 800444c:	bd80      	pop	{r7, pc}
 800444e:	46c0      	nop			; (mov r8, r8)
 8004450:	fffffedf 	.word	0xfffffedf
 8004454:	effffffe 	.word	0xeffffffe

08004458 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004458:	b580      	push	{r7, lr}
 800445a:	b084      	sub	sp, #16
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004464:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	225e      	movs	r2, #94	; 0x5e
 800446a:	2100      	movs	r1, #0
 800446c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2256      	movs	r2, #86	; 0x56
 8004472:	2100      	movs	r1, #0
 8004474:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	0018      	movs	r0, r3
 800447a:	f7ff f9d1 	bl	8003820 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	46bd      	mov	sp, r7
 8004482:	b004      	add	sp, #16
 8004484:	bd80      	pop	{r7, pc}

08004486 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2280      	movs	r2, #128	; 0x80
 8004492:	589b      	ldr	r3, [r3, r2]
 8004494:	2b21      	cmp	r3, #33	; 0x21
 8004496:	d12a      	bne.n	80044ee <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2256      	movs	r2, #86	; 0x56
 800449c:	5a9b      	ldrh	r3, [r3, r2]
 800449e:	b29b      	uxth	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d110      	bne.n	80044c6 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	2180      	movs	r1, #128	; 0x80
 80044b0:	438a      	bics	r2, r1
 80044b2:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2140      	movs	r1, #64	; 0x40
 80044c0:	430a      	orrs	r2, r1
 80044c2:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 80044c4:	e013      	b.n	80044ee <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044ca:	781a      	ldrb	r2, [r3, #0]
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d6:	1c5a      	adds	r2, r3, #1
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2256      	movs	r2, #86	; 0x56
 80044e0:	5a9b      	ldrh	r3, [r3, r2]
 80044e2:	b29b      	uxth	r3, r3
 80044e4:	3b01      	subs	r3, #1
 80044e6:	b299      	uxth	r1, r3
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2256      	movs	r2, #86	; 0x56
 80044ec:	5299      	strh	r1, [r3, r2]
}
 80044ee:	46c0      	nop			; (mov r8, r8)
 80044f0:	46bd      	mov	sp, r7
 80044f2:	b002      	add	sp, #8
 80044f4:	bd80      	pop	{r7, pc}

080044f6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b084      	sub	sp, #16
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2280      	movs	r2, #128	; 0x80
 8004502:	589b      	ldr	r3, [r3, r2]
 8004504:	2b21      	cmp	r3, #33	; 0x21
 8004506:	d12f      	bne.n	8004568 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2256      	movs	r2, #86	; 0x56
 800450c:	5a9b      	ldrh	r3, [r3, r2]
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	d110      	bne.n	8004536 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	2180      	movs	r1, #128	; 0x80
 8004520:	438a      	bics	r2, r1
 8004522:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2140      	movs	r1, #64	; 0x40
 8004530:	430a      	orrs	r2, r1
 8004532:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8004534:	e018      	b.n	8004568 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800453a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	881b      	ldrh	r3, [r3, #0]
 8004540:	001a      	movs	r2, r3
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	05d2      	lsls	r2, r2, #23
 8004548:	0dd2      	lsrs	r2, r2, #23
 800454a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004550:	1c9a      	adds	r2, r3, #2
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2256      	movs	r2, #86	; 0x56
 800455a:	5a9b      	ldrh	r3, [r3, r2]
 800455c:	b29b      	uxth	r3, r3
 800455e:	3b01      	subs	r3, #1
 8004560:	b299      	uxth	r1, r3
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2256      	movs	r2, #86	; 0x56
 8004566:	5299      	strh	r1, [r3, r2]
}
 8004568:	46c0      	nop			; (mov r8, r8)
 800456a:	46bd      	mov	sp, r7
 800456c:	b004      	add	sp, #16
 800456e:	bd80      	pop	{r7, pc}

08004570 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b084      	sub	sp, #16
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2280      	movs	r2, #128	; 0x80
 800457c:	589b      	ldr	r3, [r3, r2]
 800457e:	2b21      	cmp	r3, #33	; 0x21
 8004580:	d143      	bne.n	800460a <UART_TxISR_8BIT_FIFOEN+0x9a>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8004582:	230e      	movs	r3, #14
 8004584:	18fb      	adds	r3, r7, r3
 8004586:	687a      	ldr	r2, [r7, #4]
 8004588:	216a      	movs	r1, #106	; 0x6a
 800458a:	5a52      	ldrh	r2, [r2, r1]
 800458c:	801a      	strh	r2, [r3, #0]
 800458e:	e037      	b.n	8004600 <UART_TxISR_8BIT_FIFOEN+0x90>
    {
      if (huart->TxXferCount == 0U)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	2256      	movs	r2, #86	; 0x56
 8004594:	5a9b      	ldrh	r3, [r3, r2]
 8004596:	b29b      	uxth	r3, r3
 8004598:	2b00      	cmp	r3, #0
 800459a:	d111      	bne.n	80045c0 <UART_TxISR_8BIT_FIFOEN+0x50>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	689a      	ldr	r2, [r3, #8]
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	491b      	ldr	r1, [pc, #108]	; (8004614 <UART_TxISR_8BIT_FIFOEN+0xa4>)
 80045a8:	400a      	ands	r2, r1
 80045aa:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	2140      	movs	r1, #64	; 0x40
 80045b8:	430a      	orrs	r2, r1
 80045ba:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80045bc:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80045be:	e024      	b.n	800460a <UART_TxISR_8BIT_FIFOEN+0x9a>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	69db      	ldr	r3, [r3, #28]
 80045c6:	2280      	movs	r2, #128	; 0x80
 80045c8:	4013      	ands	r3, r2
 80045ca:	d013      	beq.n	80045f4 <UART_TxISR_8BIT_FIFOEN+0x84>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045d0:	781a      	ldrb	r2, [r3, #0]
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	1c5a      	adds	r2, r3, #1
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2256      	movs	r2, #86	; 0x56
 80045e6:	5a9b      	ldrh	r3, [r3, r2]
 80045e8:	b29b      	uxth	r3, r3
 80045ea:	3b01      	subs	r3, #1
 80045ec:	b299      	uxth	r1, r3
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	2256      	movs	r2, #86	; 0x56
 80045f2:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80045f4:	210e      	movs	r1, #14
 80045f6:	187b      	adds	r3, r7, r1
 80045f8:	881a      	ldrh	r2, [r3, #0]
 80045fa:	187b      	adds	r3, r7, r1
 80045fc:	3a01      	subs	r2, #1
 80045fe:	801a      	strh	r2, [r3, #0]
 8004600:	230e      	movs	r3, #14
 8004602:	18fb      	adds	r3, r7, r3
 8004604:	881b      	ldrh	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1c2      	bne.n	8004590 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800460a:	46c0      	nop			; (mov r8, r8)
 800460c:	46bd      	mov	sp, r7
 800460e:	b004      	add	sp, #16
 8004610:	bd80      	pop	{r7, pc}
 8004612:	46c0      	nop			; (mov r8, r8)
 8004614:	ff7fffff 	.word	0xff7fffff

08004618 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b084      	sub	sp, #16
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2280      	movs	r2, #128	; 0x80
 8004624:	589b      	ldr	r3, [r3, r2]
 8004626:	2b21      	cmp	r3, #33	; 0x21
 8004628:	d148      	bne.n	80046bc <UART_TxISR_16BIT_FIFOEN+0xa4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800462a:	230e      	movs	r3, #14
 800462c:	18fb      	adds	r3, r7, r3
 800462e:	687a      	ldr	r2, [r7, #4]
 8004630:	216a      	movs	r1, #106	; 0x6a
 8004632:	5a52      	ldrh	r2, [r2, r1]
 8004634:	801a      	strh	r2, [r3, #0]
 8004636:	e03c      	b.n	80046b2 <UART_TxISR_16BIT_FIFOEN+0x9a>
    {
      if (huart->TxXferCount == 0U)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2256      	movs	r2, #86	; 0x56
 800463c:	5a9b      	ldrh	r3, [r3, r2]
 800463e:	b29b      	uxth	r3, r3
 8004640:	2b00      	cmp	r3, #0
 8004642:	d111      	bne.n	8004668 <UART_TxISR_16BIT_FIFOEN+0x50>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	689a      	ldr	r2, [r3, #8]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	491d      	ldr	r1, [pc, #116]	; (80046c4 <UART_TxISR_16BIT_FIFOEN+0xac>)
 8004650:	400a      	ands	r2, r1
 8004652:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	2140      	movs	r1, #64	; 0x40
 8004660:	430a      	orrs	r2, r1
 8004662:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 8004664:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 8004666:	e029      	b.n	80046bc <UART_TxISR_16BIT_FIFOEN+0xa4>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	69db      	ldr	r3, [r3, #28]
 800466e:	2280      	movs	r2, #128	; 0x80
 8004670:	4013      	ands	r3, r2
 8004672:	d018      	beq.n	80046a6 <UART_TxISR_16BIT_FIFOEN+0x8e>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004678:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800467a:	68bb      	ldr	r3, [r7, #8]
 800467c:	881b      	ldrh	r3, [r3, #0]
 800467e:	001a      	movs	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	05d2      	lsls	r2, r2, #23
 8004686:	0dd2      	lsrs	r2, r2, #23
 8004688:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800468e:	1c9a      	adds	r2, r3, #2
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2256      	movs	r2, #86	; 0x56
 8004698:	5a9b      	ldrh	r3, [r3, r2]
 800469a:	b29b      	uxth	r3, r3
 800469c:	3b01      	subs	r3, #1
 800469e:	b299      	uxth	r1, r3
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2256      	movs	r2, #86	; 0x56
 80046a4:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80046a6:	210e      	movs	r1, #14
 80046a8:	187b      	adds	r3, r7, r1
 80046aa:	881a      	ldrh	r2, [r3, #0]
 80046ac:	187b      	adds	r3, r7, r1
 80046ae:	3a01      	subs	r2, #1
 80046b0:	801a      	strh	r2, [r3, #0]
 80046b2:	230e      	movs	r3, #14
 80046b4:	18fb      	adds	r3, r7, r3
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d1bd      	bne.n	8004638 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 80046bc:	46c0      	nop			; (mov r8, r8)
 80046be:	46bd      	mov	sp, r7
 80046c0:	b004      	add	sp, #16
 80046c2:	bd80      	pop	{r7, pc}
 80046c4:	ff7fffff 	.word	0xff7fffff

080046c8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	681a      	ldr	r2, [r3, #0]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2140      	movs	r1, #64	; 0x40
 80046dc:	438a      	bics	r2, r1
 80046de:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2280      	movs	r2, #128	; 0x80
 80046e4:	2120      	movs	r1, #32
 80046e6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	0018      	movs	r0, r3
 80046f2:	f7ff f88d 	bl	8003810 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046f6:	46c0      	nop			; (mov r8, r8)
 80046f8:	46bd      	mov	sp, r7
 80046fa:	b002      	add	sp, #8
 80046fc:	bd80      	pop	{r7, pc}

080046fe <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046fe:	b580      	push	{r7, lr}
 8004700:	b082      	sub	sp, #8
 8004702:	af00      	add	r7, sp, #0
 8004704:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004706:	46c0      	nop			; (mov r8, r8)
 8004708:	46bd      	mov	sp, r7
 800470a:	b002      	add	sp, #8
 800470c:	bd80      	pop	{r7, pc}

0800470e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800470e:	b580      	push	{r7, lr}
 8004710:	b082      	sub	sp, #8
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004716:	46c0      	nop			; (mov r8, r8)
 8004718:	46bd      	mov	sp, r7
 800471a:	b002      	add	sp, #8
 800471c:	bd80      	pop	{r7, pc}

0800471e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b082      	sub	sp, #8
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004726:	46c0      	nop			; (mov r8, r8)
 8004728:	46bd      	mov	sp, r7
 800472a:	b002      	add	sp, #8
 800472c:	bd80      	pop	{r7, pc}
	...

08004730 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b084      	sub	sp, #16
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	227c      	movs	r2, #124	; 0x7c
 800473c:	5c9b      	ldrb	r3, [r3, r2]
 800473e:	2b01      	cmp	r3, #1
 8004740:	d101      	bne.n	8004746 <HAL_UARTEx_DisableFifoMode+0x16>
 8004742:	2302      	movs	r3, #2
 8004744:	e027      	b.n	8004796 <HAL_UARTEx_DisableFifoMode+0x66>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	227c      	movs	r2, #124	; 0x7c
 800474a:	2101      	movs	r1, #1
 800474c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	2280      	movs	r2, #128	; 0x80
 8004752:	2124      	movs	r1, #36	; 0x24
 8004754:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2101      	movs	r1, #1
 800476a:	438a      	bics	r2, r1
 800476c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4a0b      	ldr	r2, [pc, #44]	; (80047a0 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004772:	4013      	ands	r3, r2
 8004774:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	2200      	movs	r2, #0
 800477a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	68fa      	ldr	r2, [r7, #12]
 8004782:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2280      	movs	r2, #128	; 0x80
 8004788:	2120      	movs	r1, #32
 800478a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	227c      	movs	r2, #124	; 0x7c
 8004790:	2100      	movs	r1, #0
 8004792:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004794:	2300      	movs	r3, #0
}
 8004796:	0018      	movs	r0, r3
 8004798:	46bd      	mov	sp, r7
 800479a:	b004      	add	sp, #16
 800479c:	bd80      	pop	{r7, pc}
 800479e:	46c0      	nop			; (mov r8, r8)
 80047a0:	dfffffff 	.word	0xdfffffff

080047a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	b084      	sub	sp, #16
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	227c      	movs	r2, #124	; 0x7c
 80047b2:	5c9b      	ldrb	r3, [r3, r2]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d101      	bne.n	80047bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80047b8:	2302      	movs	r3, #2
 80047ba:	e02e      	b.n	800481a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	227c      	movs	r2, #124	; 0x7c
 80047c0:	2101      	movs	r1, #1
 80047c2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2280      	movs	r2, #128	; 0x80
 80047c8:	2124      	movs	r1, #36	; 0x24
 80047ca:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2101      	movs	r1, #1
 80047e0:	438a      	bics	r2, r1
 80047e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	00db      	lsls	r3, r3, #3
 80047ec:	08d9      	lsrs	r1, r3, #3
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	683a      	ldr	r2, [r7, #0]
 80047f4:	430a      	orrs	r2, r1
 80047f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	0018      	movs	r0, r3
 80047fc:	f000 f854 	bl	80048a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2280      	movs	r2, #128	; 0x80
 800480c:	2120      	movs	r1, #32
 800480e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	227c      	movs	r2, #124	; 0x7c
 8004814:	2100      	movs	r1, #0
 8004816:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	0018      	movs	r0, r3
 800481c:	46bd      	mov	sp, r7
 800481e:	b004      	add	sp, #16
 8004820:	bd80      	pop	{r7, pc}
	...

08004824 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
 800482c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	227c      	movs	r2, #124	; 0x7c
 8004832:	5c9b      	ldrb	r3, [r3, r2]
 8004834:	2b01      	cmp	r3, #1
 8004836:	d101      	bne.n	800483c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004838:	2302      	movs	r3, #2
 800483a:	e02f      	b.n	800489c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	227c      	movs	r2, #124	; 0x7c
 8004840:	2101      	movs	r1, #1
 8004842:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2280      	movs	r2, #128	; 0x80
 8004848:	2124      	movs	r1, #36	; 0x24
 800484a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	681a      	ldr	r2, [r3, #0]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	2101      	movs	r1, #1
 8004860:	438a      	bics	r2, r1
 8004862:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	4a0e      	ldr	r2, [pc, #56]	; (80048a4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 800486c:	4013      	ands	r3, r2
 800486e:	0019      	movs	r1, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	430a      	orrs	r2, r1
 8004878:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	0018      	movs	r0, r3
 800487e:	f000 f813 	bl	80048a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68fa      	ldr	r2, [r7, #12]
 8004888:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2280      	movs	r2, #128	; 0x80
 800488e:	2120      	movs	r1, #32
 8004890:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	227c      	movs	r2, #124	; 0x7c
 8004896:	2100      	movs	r1, #0
 8004898:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800489a:	2300      	movs	r3, #0
}
 800489c:	0018      	movs	r0, r3
 800489e:	46bd      	mov	sp, r7
 80048a0:	b004      	add	sp, #16
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	f1ffffff 	.word	0xf1ffffff

080048a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80048a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048aa:	b089      	sub	sp, #36	; 0x24
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 80048b0:	2314      	movs	r3, #20
 80048b2:	18fb      	adds	r3, r7, r3
 80048b4:	4a2f      	ldr	r2, [pc, #188]	; (8004974 <UARTEx_SetNbDataToProcess+0xcc>)
 80048b6:	ca03      	ldmia	r2!, {r0, r1}
 80048b8:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 80048ba:	230c      	movs	r3, #12
 80048bc:	18fb      	adds	r3, r7, r3
 80048be:	4a2e      	ldr	r2, [pc, #184]	; (8004978 <UARTEx_SetNbDataToProcess+0xd0>)
 80048c0:	ca03      	ldmia	r2!, {r0, r1}
 80048c2:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d108      	bne.n	80048de <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	226a      	movs	r2, #106	; 0x6a
 80048d0:	2101      	movs	r1, #1
 80048d2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2268      	movs	r2, #104	; 0x68
 80048d8:	2101      	movs	r1, #1
 80048da:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80048dc:	e046      	b.n	800496c <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80048de:	261f      	movs	r6, #31
 80048e0:	19bb      	adds	r3, r7, r6
 80048e2:	2208      	movs	r2, #8
 80048e4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80048e6:	201e      	movs	r0, #30
 80048e8:	183b      	adds	r3, r7, r0
 80048ea:	2208      	movs	r2, #8
 80048ec:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	0e5b      	lsrs	r3, r3, #25
 80048f6:	b2da      	uxtb	r2, r3
 80048f8:	241d      	movs	r4, #29
 80048fa:	193b      	adds	r3, r7, r4
 80048fc:	2107      	movs	r1, #7
 80048fe:	400a      	ands	r2, r1
 8004900:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	0f5b      	lsrs	r3, r3, #29
 800490a:	b2da      	uxtb	r2, r3
 800490c:	251c      	movs	r5, #28
 800490e:	197b      	adds	r3, r7, r5
 8004910:	2107      	movs	r1, #7
 8004912:	400a      	ands	r2, r1
 8004914:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8004916:	183b      	adds	r3, r7, r0
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	197a      	adds	r2, r7, r5
 800491c:	7812      	ldrb	r2, [r2, #0]
 800491e:	2114      	movs	r1, #20
 8004920:	1879      	adds	r1, r7, r1
 8004922:	5c8a      	ldrb	r2, [r1, r2]
 8004924:	435a      	muls	r2, r3
 8004926:	0010      	movs	r0, r2
 8004928:	197b      	adds	r3, r7, r5
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	250c      	movs	r5, #12
 800492e:	197a      	adds	r2, r7, r5
 8004930:	5cd3      	ldrb	r3, [r2, r3]
 8004932:	0019      	movs	r1, r3
 8004934:	f7fb fc7a 	bl	800022c <__divsi3>
 8004938:	0003      	movs	r3, r0
 800493a:	b299      	uxth	r1, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	226a      	movs	r2, #106	; 0x6a
 8004940:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8004942:	19bb      	adds	r3, r7, r6
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	193a      	adds	r2, r7, r4
 8004948:	7812      	ldrb	r2, [r2, #0]
 800494a:	2114      	movs	r1, #20
 800494c:	1879      	adds	r1, r7, r1
 800494e:	5c8a      	ldrb	r2, [r1, r2]
 8004950:	435a      	muls	r2, r3
 8004952:	0010      	movs	r0, r2
 8004954:	193b      	adds	r3, r7, r4
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	197a      	adds	r2, r7, r5
 800495a:	5cd3      	ldrb	r3, [r2, r3]
 800495c:	0019      	movs	r1, r3
 800495e:	f7fb fc65 	bl	800022c <__divsi3>
 8004962:	0003      	movs	r3, r0
 8004964:	b299      	uxth	r1, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2268      	movs	r2, #104	; 0x68
 800496a:	5299      	strh	r1, [r3, r2]
}
 800496c:	46c0      	nop			; (mov r8, r8)
 800496e:	46bd      	mov	sp, r7
 8004970:	b009      	add	sp, #36	; 0x24
 8004972:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004974:	08006450 	.word	0x08006450
 8004978:	08006458 	.word	0x08006458

0800497c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b084      	sub	sp, #16
 8004980:	af00      	add	r7, sp, #0
 8004982:	0002      	movs	r2, r0
 8004984:	1dbb      	adds	r3, r7, #6
 8004986:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8004988:	2300      	movs	r3, #0
 800498a:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800498c:	1dbb      	adds	r3, r7, #6
 800498e:	2200      	movs	r2, #0
 8004990:	5e9b      	ldrsh	r3, [r3, r2]
 8004992:	2b84      	cmp	r3, #132	; 0x84
 8004994:	d006      	beq.n	80049a4 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8004996:	1dbb      	adds	r3, r7, #6
 8004998:	2200      	movs	r2, #0
 800499a:	5e9a      	ldrsh	r2, [r3, r2]
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	18d3      	adds	r3, r2, r3
 80049a0:	3303      	adds	r3, #3
 80049a2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80049a4:	68fb      	ldr	r3, [r7, #12]
}
 80049a6:	0018      	movs	r0, r3
 80049a8:	46bd      	mov	sp, r7
 80049aa:	b004      	add	sp, #16
 80049ac:	bd80      	pop	{r7, pc}

080049ae <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80049ae:	b580      	push	{r7, lr}
 80049b0:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80049b2:	f000 fdbf 	bl	8005534 <vTaskStartScheduler>
  
  return osOK;
 80049b6:	2300      	movs	r3, #0
}
 80049b8:	0018      	movs	r0, r3
 80049ba:	46bd      	mov	sp, r7
 80049bc:	bd80      	pop	{r7, pc}

080049be <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80049be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049c0:	b087      	sub	sp, #28
 80049c2:	af02      	add	r7, sp, #8
 80049c4:	6078      	str	r0, [r7, #4]
 80049c6:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	685c      	ldr	r4, [r3, #4]
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80049d4:	b29e      	uxth	r6, r3
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2208      	movs	r2, #8
 80049da:	5e9b      	ldrsh	r3, [r3, r2]
 80049dc:	0018      	movs	r0, r3
 80049de:	f7ff ffcd 	bl	800497c <makeFreeRtosPriority>
 80049e2:	0001      	movs	r1, r0
 80049e4:	683a      	ldr	r2, [r7, #0]
 80049e6:	230c      	movs	r3, #12
 80049e8:	18fb      	adds	r3, r7, r3
 80049ea:	9301      	str	r3, [sp, #4]
 80049ec:	9100      	str	r1, [sp, #0]
 80049ee:	0013      	movs	r3, r2
 80049f0:	0032      	movs	r2, r6
 80049f2:	0029      	movs	r1, r5
 80049f4:	0020      	movs	r0, r4
 80049f6:	f000 fc50 	bl	800529a <xTaskCreate>
 80049fa:	0003      	movs	r3, r0
 80049fc:	2b01      	cmp	r3, #1
 80049fe:	d001      	beq.n	8004a04 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8004a00:	2300      	movs	r3, #0
 8004a02:	e000      	b.n	8004a06 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8004a04:	68fb      	ldr	r3, [r7, #12]
}
 8004a06:	0018      	movs	r0, r3
 8004a08:	46bd      	mov	sp, r7
 8004a0a:	b005      	add	sp, #20
 8004a0c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004a0e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8004a0e:	b580      	push	{r7, lr}
 8004a10:	b084      	sub	sp, #16
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d001      	beq.n	8004a24 <osDelay+0x16>
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	e000      	b.n	8004a26 <osDelay+0x18>
 8004a24:	2301      	movs	r3, #1
 8004a26:	0018      	movs	r0, r3
 8004a28:	f000 fd5e 	bl	80054e8 <vTaskDelay>
  
  return osOK;
 8004a2c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8004a2e:	0018      	movs	r0, r3
 8004a30:	46bd      	mov	sp, r7
 8004a32:	b004      	add	sp, #16
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b082      	sub	sp, #8
 8004a3a:	af00      	add	r7, sp, #0
 8004a3c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	3308      	adds	r3, #8
 8004a42:	001a      	movs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	4252      	negs	r2, r2
 8004a4e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3308      	adds	r3, #8
 8004a54:	001a      	movs	r2, r3
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	3308      	adds	r3, #8
 8004a5e:	001a      	movs	r2, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004a6a:	46c0      	nop			; (mov r8, r8)
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	b002      	add	sp, #8
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b082      	sub	sp, #8
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a80:	46c0      	nop			; (mov r8, r8)
 8004a82:	46bd      	mov	sp, r7
 8004a84:	b002      	add	sp, #8
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
 8004a90:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	689a      	ldr	r2, [r3, #8]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	683a      	ldr	r2, [r7, #0]
 8004aac:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	1c5a      	adds	r2, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	601a      	str	r2, [r3, #0]
}
 8004ac4:	46c0      	nop			; (mov r8, r8)
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	b004      	add	sp, #16
 8004aca:	bd80      	pop	{r7, pc}

08004acc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b084      	sub	sp, #16
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	6078      	str	r0, [r7, #4]
 8004ad4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	d103      	bne.n	8004aea <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	60fb      	str	r3, [r7, #12]
 8004ae8:	e00c      	b.n	8004b04 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	3308      	adds	r3, #8
 8004aee:	60fb      	str	r3, [r7, #12]
 8004af0:	e002      	b.n	8004af8 <vListInsert+0x2c>
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	685b      	ldr	r3, [r3, #4]
 8004af6:	60fb      	str	r3, [r7, #12]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	685b      	ldr	r3, [r3, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	68ba      	ldr	r2, [r7, #8]
 8004b00:	429a      	cmp	r2, r3
 8004b02:	d2f6      	bcs.n	8004af2 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	685a      	ldr	r2, [r3, #4]
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	685b      	ldr	r3, [r3, #4]
 8004b10:	683a      	ldr	r2, [r7, #0]
 8004b12:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	687a      	ldr	r2, [r7, #4]
 8004b24:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	601a      	str	r2, [r3, #0]
}
 8004b30:	46c0      	nop			; (mov r8, r8)
 8004b32:	46bd      	mov	sp, r7
 8004b34:	b004      	add	sp, #16
 8004b36:	bd80      	pop	{r7, pc}

08004b38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b084      	sub	sp, #16
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	691b      	ldr	r3, [r3, #16]
 8004b44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	685b      	ldr	r3, [r3, #4]
 8004b4a:	687a      	ldr	r2, [r7, #4]
 8004b4c:	6892      	ldr	r2, [r2, #8]
 8004b4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	687a      	ldr	r2, [r7, #4]
 8004b56:	6852      	ldr	r2, [r2, #4]
 8004b58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d103      	bne.n	8004b6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	689a      	ldr	r2, [r3, #8]
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	1e5a      	subs	r2, r3, #1
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
}
 8004b80:	0018      	movs	r0, r3
 8004b82:	46bd      	mov	sp, r7
 8004b84:	b004      	add	sp, #16
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b084      	sub	sp, #16
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
 8004b90:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d101      	bne.n	8004ba0 <xQueueGenericReset+0x18>
 8004b9c:	b672      	cpsid	i
 8004b9e:	e7fe      	b.n	8004b9e <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8004ba0:	f001 f99e 	bl	8005ee0 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681a      	ldr	r2, [r3, #0]
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb0:	434b      	muls	r3, r1
 8004bb2:	18d2      	adds	r2, r2, r3
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bce:	1e59      	subs	r1, r3, #1
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd4:	434b      	muls	r3, r1
 8004bd6:	18d2      	adds	r2, r2, r3
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	2244      	movs	r2, #68	; 0x44
 8004be0:	21ff      	movs	r1, #255	; 0xff
 8004be2:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2245      	movs	r2, #69	; 0x45
 8004be8:	21ff      	movs	r1, #255	; 0xff
 8004bea:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10d      	bne.n	8004c0e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d013      	beq.n	8004c22 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	3310      	adds	r3, #16
 8004bfe:	0018      	movs	r0, r3
 8004c00:	f000 fe8a 	bl	8005918 <xTaskRemoveFromEventList>
 8004c04:	1e03      	subs	r3, r0, #0
 8004c06:	d00c      	beq.n	8004c22 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004c08:	f001 f95a 	bl	8005ec0 <vPortYield>
 8004c0c:	e009      	b.n	8004c22 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3310      	adds	r3, #16
 8004c12:	0018      	movs	r0, r3
 8004c14:	f7ff ff0f 	bl	8004a36 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	3324      	adds	r3, #36	; 0x24
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f7ff ff0a 	bl	8004a36 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004c22:	f001 f96f 	bl	8005f04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004c26:	2301      	movs	r3, #1
}
 8004c28:	0018      	movs	r0, r3
 8004c2a:	46bd      	mov	sp, r7
 8004c2c:	b004      	add	sp, #16
 8004c2e:	bd80      	pop	{r7, pc}

08004c30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c30:	b590      	push	{r4, r7, lr}
 8004c32:	b08b      	sub	sp, #44	; 0x2c
 8004c34:	af02      	add	r7, sp, #8
 8004c36:	60f8      	str	r0, [r7, #12]
 8004c38:	60b9      	str	r1, [r7, #8]
 8004c3a:	1dfb      	adds	r3, r7, #7
 8004c3c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d101      	bne.n	8004c48 <xQueueGenericCreate+0x18>
 8004c44:	b672      	cpsid	i
 8004c46:	e7fe      	b.n	8004c46 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d102      	bne.n	8004c54 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	61fb      	str	r3, [r7, #28]
 8004c52:	e003      	b.n	8004c5c <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	68ba      	ldr	r2, [r7, #8]
 8004c58:	4353      	muls	r3, r2
 8004c5a:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	3348      	adds	r3, #72	; 0x48
 8004c60:	0018      	movs	r0, r3
 8004c62:	f001 f9d5 	bl	8006010 <pvPortMalloc>
 8004c66:	0003      	movs	r3, r0
 8004c68:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8004c6a:	69bb      	ldr	r3, [r7, #24]
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d00c      	beq.n	8004c8a <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	3348      	adds	r3, #72	; 0x48
 8004c74:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c76:	1dfb      	adds	r3, r7, #7
 8004c78:	781c      	ldrb	r4, [r3, #0]
 8004c7a:	697a      	ldr	r2, [r7, #20]
 8004c7c:	68b9      	ldr	r1, [r7, #8]
 8004c7e:	68f8      	ldr	r0, [r7, #12]
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	0023      	movs	r3, r4
 8004c86:	f000 f805 	bl	8004c94 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8004c8a:	69bb      	ldr	r3, [r7, #24]
	}
 8004c8c:	0018      	movs	r0, r3
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	b009      	add	sp, #36	; 0x24
 8004c92:	bd90      	pop	{r4, r7, pc}

08004c94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b084      	sub	sp, #16
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	001a      	movs	r2, r3
 8004ca2:	1cfb      	adds	r3, r7, #3
 8004ca4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d103      	bne.n	8004cb4 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cac:	69bb      	ldr	r3, [r7, #24]
 8004cae:	69ba      	ldr	r2, [r7, #24]
 8004cb0:	601a      	str	r2, [r3, #0]
 8004cb2:	e002      	b.n	8004cba <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004cb4:	69bb      	ldr	r3, [r7, #24]
 8004cb6:	687a      	ldr	r2, [r7, #4]
 8004cb8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004cba:	69bb      	ldr	r3, [r7, #24]
 8004cbc:	68fa      	ldr	r2, [r7, #12]
 8004cbe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cc6:	69bb      	ldr	r3, [r7, #24]
 8004cc8:	2101      	movs	r1, #1
 8004cca:	0018      	movs	r0, r3
 8004ccc:	f7ff ff5c 	bl	8004b88 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cd0:	46c0      	nop			; (mov r8, r8)
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	b004      	add	sp, #16
 8004cd6:	bd80      	pop	{r7, pc}

08004cd8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8004cd8:	b580      	push	{r7, lr}
 8004cda:	b082      	sub	sp, #8
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00e      	beq.n	8004d04 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	2200      	movs	r2, #0
 8004cea:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2200      	movs	r2, #0
 8004cf0:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	2100      	movs	r1, #0
 8004d00:	f000 f820 	bl	8004d44 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8004d04:	46c0      	nop			; (mov r8, r8)
 8004d06:	46bd      	mov	sp, r7
 8004d08:	b002      	add	sp, #8
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	0002      	movs	r2, r0
 8004d14:	1dfb      	adds	r3, r7, #7
 8004d16:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	617b      	str	r3, [r7, #20]
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8004d20:	1dfb      	adds	r3, r7, #7
 8004d22:	781a      	ldrb	r2, [r3, #0]
 8004d24:	6939      	ldr	r1, [r7, #16]
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	0018      	movs	r0, r3
 8004d2a:	f7ff ff81 	bl	8004c30 <xQueueGenericCreate>
 8004d2e:	0003      	movs	r3, r0
 8004d30:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	0018      	movs	r0, r3
 8004d36:	f7ff ffcf 	bl	8004cd8 <prvInitialiseMutex>

		return pxNewQueue;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
	}
 8004d3c:	0018      	movs	r0, r3
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	b006      	add	sp, #24
 8004d42:	bd80      	pop	{r7, pc}

08004d44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004d44:	b580      	push	{r7, lr}
 8004d46:	b08a      	sub	sp, #40	; 0x28
 8004d48:	af00      	add	r7, sp, #0
 8004d4a:	60f8      	str	r0, [r7, #12]
 8004d4c:	60b9      	str	r1, [r7, #8]
 8004d4e:	607a      	str	r2, [r7, #4]
 8004d50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d52:	2300      	movs	r3, #0
 8004d54:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8004d5a:	6a3b      	ldr	r3, [r7, #32]
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d101      	bne.n	8004d64 <xQueueGenericSend+0x20>
 8004d60:	b672      	cpsid	i
 8004d62:	e7fe      	b.n	8004d62 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d64:	68bb      	ldr	r3, [r7, #8]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d103      	bne.n	8004d72 <xQueueGenericSend+0x2e>
 8004d6a:	6a3b      	ldr	r3, [r7, #32]
 8004d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d101      	bne.n	8004d76 <xQueueGenericSend+0x32>
 8004d72:	2301      	movs	r3, #1
 8004d74:	e000      	b.n	8004d78 <xQueueGenericSend+0x34>
 8004d76:	2300      	movs	r3, #0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d101      	bne.n	8004d80 <xQueueGenericSend+0x3c>
 8004d7c:	b672      	cpsid	i
 8004d7e:	e7fe      	b.n	8004d7e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	2b02      	cmp	r3, #2
 8004d84:	d103      	bne.n	8004d8e <xQueueGenericSend+0x4a>
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d101      	bne.n	8004d92 <xQueueGenericSend+0x4e>
 8004d8e:	2301      	movs	r3, #1
 8004d90:	e000      	b.n	8004d94 <xQueueGenericSend+0x50>
 8004d92:	2300      	movs	r3, #0
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d101      	bne.n	8004d9c <xQueueGenericSend+0x58>
 8004d98:	b672      	cpsid	i
 8004d9a:	e7fe      	b.n	8004d9a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d9c:	f000 ff3e 	bl	8005c1c <xTaskGetSchedulerState>
 8004da0:	1e03      	subs	r3, r0, #0
 8004da2:	d102      	bne.n	8004daa <xQueueGenericSend+0x66>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <xQueueGenericSend+0x6a>
 8004daa:	2301      	movs	r3, #1
 8004dac:	e000      	b.n	8004db0 <xQueueGenericSend+0x6c>
 8004dae:	2300      	movs	r3, #0
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d101      	bne.n	8004db8 <xQueueGenericSend+0x74>
 8004db4:	b672      	cpsid	i
 8004db6:	e7fe      	b.n	8004db6 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004db8:	f001 f892 	bl	8005ee0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dbc:	6a3b      	ldr	r3, [r7, #32]
 8004dbe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dc0:	6a3b      	ldr	r3, [r7, #32]
 8004dc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc4:	429a      	cmp	r2, r3
 8004dc6:	d302      	bcc.n	8004dce <xQueueGenericSend+0x8a>
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	2b02      	cmp	r3, #2
 8004dcc:	d11e      	bne.n	8004e0c <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	68b9      	ldr	r1, [r7, #8]
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	0018      	movs	r0, r3
 8004dd6:	f000 f943 	bl	8005060 <prvCopyDataToQueue>
 8004dda:	0003      	movs	r3, r0
 8004ddc:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dde:	6a3b      	ldr	r3, [r7, #32]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d009      	beq.n	8004dfa <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004de6:	6a3b      	ldr	r3, [r7, #32]
 8004de8:	3324      	adds	r3, #36	; 0x24
 8004dea:	0018      	movs	r0, r3
 8004dec:	f000 fd94 	bl	8005918 <xTaskRemoveFromEventList>
 8004df0:	1e03      	subs	r3, r0, #0
 8004df2:	d007      	beq.n	8004e04 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004df4:	f001 f864 	bl	8005ec0 <vPortYield>
 8004df8:	e004      	b.n	8004e04 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004dfa:	69fb      	ldr	r3, [r7, #28]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d001      	beq.n	8004e04 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e00:	f001 f85e 	bl	8005ec0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e04:	f001 f87e 	bl	8005f04 <vPortExitCritical>
				return pdPASS;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e05b      	b.n	8004ec4 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e12:	f001 f877 	bl	8005f04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	e054      	b.n	8004ec4 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e20:	2314      	movs	r3, #20
 8004e22:	18fb      	adds	r3, r7, r3
 8004e24:	0018      	movs	r0, r3
 8004e26:	f000 fdd3 	bl	80059d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e2e:	f001 f869 	bl	8005f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e32:	f000 fbb5 	bl	80055a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e36:	f001 f853 	bl	8005ee0 <vPortEnterCritical>
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	2244      	movs	r2, #68	; 0x44
 8004e3e:	5c9b      	ldrb	r3, [r3, r2]
 8004e40:	b25b      	sxtb	r3, r3
 8004e42:	3301      	adds	r3, #1
 8004e44:	d103      	bne.n	8004e4e <xQueueGenericSend+0x10a>
 8004e46:	6a3b      	ldr	r3, [r7, #32]
 8004e48:	2244      	movs	r2, #68	; 0x44
 8004e4a:	2100      	movs	r1, #0
 8004e4c:	5499      	strb	r1, [r3, r2]
 8004e4e:	6a3b      	ldr	r3, [r7, #32]
 8004e50:	2245      	movs	r2, #69	; 0x45
 8004e52:	5c9b      	ldrb	r3, [r3, r2]
 8004e54:	b25b      	sxtb	r3, r3
 8004e56:	3301      	adds	r3, #1
 8004e58:	d103      	bne.n	8004e62 <xQueueGenericSend+0x11e>
 8004e5a:	6a3b      	ldr	r3, [r7, #32]
 8004e5c:	2245      	movs	r2, #69	; 0x45
 8004e5e:	2100      	movs	r1, #0
 8004e60:	5499      	strb	r1, [r3, r2]
 8004e62:	f001 f84f 	bl	8005f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e66:	1d3a      	adds	r2, r7, #4
 8004e68:	2314      	movs	r3, #20
 8004e6a:	18fb      	adds	r3, r7, r3
 8004e6c:	0011      	movs	r1, r2
 8004e6e:	0018      	movs	r0, r3
 8004e70:	f000 fdc2 	bl	80059f8 <xTaskCheckForTimeOut>
 8004e74:	1e03      	subs	r3, r0, #0
 8004e76:	d11e      	bne.n	8004eb6 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e78:	6a3b      	ldr	r3, [r7, #32]
 8004e7a:	0018      	movs	r0, r3
 8004e7c:	f000 f9f5 	bl	800526a <prvIsQueueFull>
 8004e80:	1e03      	subs	r3, r0, #0
 8004e82:	d011      	beq.n	8004ea8 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e84:	6a3b      	ldr	r3, [r7, #32]
 8004e86:	3310      	adds	r3, #16
 8004e88:	687a      	ldr	r2, [r7, #4]
 8004e8a:	0011      	movs	r1, r2
 8004e8c:	0018      	movs	r0, r3
 8004e8e:	f000 fd25 	bl	80058dc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e92:	6a3b      	ldr	r3, [r7, #32]
 8004e94:	0018      	movs	r0, r3
 8004e96:	f000 f974 	bl	8005182 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e9a:	f000 fb8d 	bl	80055b8 <xTaskResumeAll>
 8004e9e:	1e03      	subs	r3, r0, #0
 8004ea0:	d18a      	bne.n	8004db8 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8004ea2:	f001 f80d 	bl	8005ec0 <vPortYield>
 8004ea6:	e787      	b.n	8004db8 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	0018      	movs	r0, r3
 8004eac:	f000 f969 	bl	8005182 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004eb0:	f000 fb82 	bl	80055b8 <xTaskResumeAll>
 8004eb4:	e780      	b.n	8004db8 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	0018      	movs	r0, r3
 8004eba:	f000 f962 	bl	8005182 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ebe:	f000 fb7b 	bl	80055b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ec2:	2300      	movs	r3, #0
		}
	}
}
 8004ec4:	0018      	movs	r0, r3
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	b00a      	add	sp, #40	; 0x28
 8004eca:	bd80      	pop	{r7, pc}

08004ecc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ecc:	b580      	push	{r7, lr}
 8004ece:	b08a      	sub	sp, #40	; 0x28
 8004ed0:	af00      	add	r7, sp, #0
 8004ed2:	60f8      	str	r0, [r7, #12]
 8004ed4:	60b9      	str	r1, [r7, #8]
 8004ed6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004ed8:	2300      	movs	r3, #0
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ee0:	6a3b      	ldr	r3, [r7, #32]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <xQueueReceive+0x1e>
 8004ee6:	b672      	cpsid	i
 8004ee8:	e7fe      	b.n	8004ee8 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d103      	bne.n	8004ef8 <xQueueReceive+0x2c>
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d101      	bne.n	8004efc <xQueueReceive+0x30>
 8004ef8:	2301      	movs	r3, #1
 8004efa:	e000      	b.n	8004efe <xQueueReceive+0x32>
 8004efc:	2300      	movs	r3, #0
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d101      	bne.n	8004f06 <xQueueReceive+0x3a>
 8004f02:	b672      	cpsid	i
 8004f04:	e7fe      	b.n	8004f04 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f06:	f000 fe89 	bl	8005c1c <xTaskGetSchedulerState>
 8004f0a:	1e03      	subs	r3, r0, #0
 8004f0c:	d102      	bne.n	8004f14 <xQueueReceive+0x48>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d101      	bne.n	8004f18 <xQueueReceive+0x4c>
 8004f14:	2301      	movs	r3, #1
 8004f16:	e000      	b.n	8004f1a <xQueueReceive+0x4e>
 8004f18:	2300      	movs	r3, #0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <xQueueReceive+0x56>
 8004f1e:	b672      	cpsid	i
 8004f20:	e7fe      	b.n	8004f20 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f22:	f000 ffdd 	bl	8005ee0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f26:	6a3b      	ldr	r3, [r7, #32]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d01a      	beq.n	8004f68 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	6a3b      	ldr	r3, [r7, #32]
 8004f36:	0011      	movs	r1, r2
 8004f38:	0018      	movs	r0, r3
 8004f3a:	f000 f8fc 	bl	8005136 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	1e5a      	subs	r2, r3, #1
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f46:	6a3b      	ldr	r3, [r7, #32]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d008      	beq.n	8004f60 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f4e:	6a3b      	ldr	r3, [r7, #32]
 8004f50:	3310      	adds	r3, #16
 8004f52:	0018      	movs	r0, r3
 8004f54:	f000 fce0 	bl	8005918 <xTaskRemoveFromEventList>
 8004f58:	1e03      	subs	r3, r0, #0
 8004f5a:	d001      	beq.n	8004f60 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f5c:	f000 ffb0 	bl	8005ec0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f60:	f000 ffd0 	bl	8005f04 <vPortExitCritical>
				return pdPASS;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e062      	b.n	800502e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d103      	bne.n	8004f76 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f6e:	f000 ffc9 	bl	8005f04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f72:	2300      	movs	r3, #0
 8004f74:	e05b      	b.n	800502e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f7c:	2314      	movs	r3, #20
 8004f7e:	18fb      	adds	r3, r7, r3
 8004f80:	0018      	movs	r0, r3
 8004f82:	f000 fd25 	bl	80059d0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f86:	2301      	movs	r3, #1
 8004f88:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f8a:	f000 ffbb 	bl	8005f04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f8e:	f000 fb07 	bl	80055a0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f92:	f000 ffa5 	bl	8005ee0 <vPortEnterCritical>
 8004f96:	6a3b      	ldr	r3, [r7, #32]
 8004f98:	2244      	movs	r2, #68	; 0x44
 8004f9a:	5c9b      	ldrb	r3, [r3, r2]
 8004f9c:	b25b      	sxtb	r3, r3
 8004f9e:	3301      	adds	r3, #1
 8004fa0:	d103      	bne.n	8004faa <xQueueReceive+0xde>
 8004fa2:	6a3b      	ldr	r3, [r7, #32]
 8004fa4:	2244      	movs	r2, #68	; 0x44
 8004fa6:	2100      	movs	r1, #0
 8004fa8:	5499      	strb	r1, [r3, r2]
 8004faa:	6a3b      	ldr	r3, [r7, #32]
 8004fac:	2245      	movs	r2, #69	; 0x45
 8004fae:	5c9b      	ldrb	r3, [r3, r2]
 8004fb0:	b25b      	sxtb	r3, r3
 8004fb2:	3301      	adds	r3, #1
 8004fb4:	d103      	bne.n	8004fbe <xQueueReceive+0xf2>
 8004fb6:	6a3b      	ldr	r3, [r7, #32]
 8004fb8:	2245      	movs	r2, #69	; 0x45
 8004fba:	2100      	movs	r1, #0
 8004fbc:	5499      	strb	r1, [r3, r2]
 8004fbe:	f000 ffa1 	bl	8005f04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fc2:	1d3a      	adds	r2, r7, #4
 8004fc4:	2314      	movs	r3, #20
 8004fc6:	18fb      	adds	r3, r7, r3
 8004fc8:	0011      	movs	r1, r2
 8004fca:	0018      	movs	r0, r3
 8004fcc:	f000 fd14 	bl	80059f8 <xTaskCheckForTimeOut>
 8004fd0:	1e03      	subs	r3, r0, #0
 8004fd2:	d11e      	bne.n	8005012 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fd4:	6a3b      	ldr	r3, [r7, #32]
 8004fd6:	0018      	movs	r0, r3
 8004fd8:	f000 f931 	bl	800523e <prvIsQueueEmpty>
 8004fdc:	1e03      	subs	r3, r0, #0
 8004fde:	d011      	beq.n	8005004 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fe0:	6a3b      	ldr	r3, [r7, #32]
 8004fe2:	3324      	adds	r3, #36	; 0x24
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	0011      	movs	r1, r2
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f000 fc77 	bl	80058dc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004fee:	6a3b      	ldr	r3, [r7, #32]
 8004ff0:	0018      	movs	r0, r3
 8004ff2:	f000 f8c6 	bl	8005182 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ff6:	f000 fadf 	bl	80055b8 <xTaskResumeAll>
 8004ffa:	1e03      	subs	r3, r0, #0
 8004ffc:	d191      	bne.n	8004f22 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8004ffe:	f000 ff5f 	bl	8005ec0 <vPortYield>
 8005002:	e78e      	b.n	8004f22 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005004:	6a3b      	ldr	r3, [r7, #32]
 8005006:	0018      	movs	r0, r3
 8005008:	f000 f8bb 	bl	8005182 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800500c:	f000 fad4 	bl	80055b8 <xTaskResumeAll>
 8005010:	e787      	b.n	8004f22 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005012:	6a3b      	ldr	r3, [r7, #32]
 8005014:	0018      	movs	r0, r3
 8005016:	f000 f8b4 	bl	8005182 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800501a:	f000 facd 	bl	80055b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	0018      	movs	r0, r3
 8005022:	f000 f90c 	bl	800523e <prvIsQueueEmpty>
 8005026:	1e03      	subs	r3, r0, #0
 8005028:	d100      	bne.n	800502c <xQueueReceive+0x160>
 800502a:	e77a      	b.n	8004f22 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800502c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 800502e:	0018      	movs	r0, r3
 8005030:	46bd      	mov	sp, r7
 8005032:	b00a      	add	sp, #40	; 0x28
 8005034:	bd80      	pop	{r7, pc}

08005036 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8005036:	b580      	push	{r7, lr}
 8005038:	b084      	sub	sp, #16
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d101      	bne.n	8005048 <uxQueueMessagesWaiting+0x12>
 8005044:	b672      	cpsid	i
 8005046:	e7fe      	b.n	8005046 <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 8005048:	f000 ff4a 	bl	8005ee0 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005050:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8005052:	f000 ff57 	bl	8005f04 <vPortExitCritical>

	return uxReturn;
 8005056:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8005058:	0018      	movs	r0, r3
 800505a:	46bd      	mov	sp, r7
 800505c:	b004      	add	sp, #16
 800505e:	bd80      	pop	{r7, pc}

08005060 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b086      	sub	sp, #24
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800506c:	2300      	movs	r3, #0
 800506e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005074:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10e      	bne.n	800509c <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d14e      	bne.n	8005124 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	0018      	movs	r0, r3
 800508c:	f000 fde2 	bl	8005c54 <xTaskPriorityDisinherit>
 8005090:	0003      	movs	r3, r0
 8005092:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	605a      	str	r2, [r3, #4]
 800509a:	e043      	b.n	8005124 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d119      	bne.n	80050d6 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6898      	ldr	r0, [r3, #8]
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	0019      	movs	r1, r3
 80050ae:	f001 f979 	bl	80063a4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	689a      	ldr	r2, [r3, #8]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	18d2      	adds	r2, r2, r3
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689a      	ldr	r2, [r3, #8]
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d32b      	bcc.n	8005124 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	609a      	str	r2, [r3, #8]
 80050d4:	e026      	b.n	8005124 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	68d8      	ldr	r0, [r3, #12]
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050de:	68bb      	ldr	r3, [r7, #8]
 80050e0:	0019      	movs	r1, r3
 80050e2:	f001 f95f 	bl	80063a4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	68da      	ldr	r2, [r3, #12]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ee:	425b      	negs	r3, r3
 80050f0:	18d2      	adds	r2, r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	68da      	ldr	r2, [r3, #12]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	429a      	cmp	r2, r3
 8005100:	d207      	bcs.n	8005112 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	685a      	ldr	r2, [r3, #4]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	425b      	negs	r3, r3
 800510c:	18d2      	adds	r2, r2, r3
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b02      	cmp	r3, #2
 8005116:	d105      	bne.n	8005124 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	d002      	beq.n	8005124 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800511e:	693b      	ldr	r3, [r7, #16]
 8005120:	3b01      	subs	r3, #1
 8005122:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	1c5a      	adds	r2, r3, #1
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800512c:	697b      	ldr	r3, [r7, #20]
}
 800512e:	0018      	movs	r0, r3
 8005130:	46bd      	mov	sp, r7
 8005132:	b006      	add	sp, #24
 8005134:	bd80      	pop	{r7, pc}

08005136 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005136:	b580      	push	{r7, lr}
 8005138:	b082      	sub	sp, #8
 800513a:	af00      	add	r7, sp, #0
 800513c:	6078      	str	r0, [r7, #4]
 800513e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d018      	beq.n	800517a <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	68da      	ldr	r2, [r3, #12]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005150:	18d2      	adds	r2, r2, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	68da      	ldr	r2, [r3, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	429a      	cmp	r2, r3
 8005160:	d303      	bcc.n	800516a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681a      	ldr	r2, [r3, #0]
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	68d9      	ldr	r1, [r3, #12]
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	0018      	movs	r0, r3
 8005176:	f001 f915 	bl	80063a4 <memcpy>
	}
}
 800517a:	46c0      	nop			; (mov r8, r8)
 800517c:	46bd      	mov	sp, r7
 800517e:	b002      	add	sp, #8
 8005180:	bd80      	pop	{r7, pc}

08005182 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005182:	b580      	push	{r7, lr}
 8005184:	b084      	sub	sp, #16
 8005186:	af00      	add	r7, sp, #0
 8005188:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800518a:	f000 fea9 	bl	8005ee0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800518e:	230f      	movs	r3, #15
 8005190:	18fb      	adds	r3, r7, r3
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	2145      	movs	r1, #69	; 0x45
 8005196:	5c52      	ldrb	r2, [r2, r1]
 8005198:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800519a:	e013      	b.n	80051c4 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d016      	beq.n	80051d2 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	3324      	adds	r3, #36	; 0x24
 80051a8:	0018      	movs	r0, r3
 80051aa:	f000 fbb5 	bl	8005918 <xTaskRemoveFromEventList>
 80051ae:	1e03      	subs	r3, r0, #0
 80051b0:	d001      	beq.n	80051b6 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80051b2:	f000 fc71 	bl	8005a98 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80051b6:	210f      	movs	r1, #15
 80051b8:	187b      	adds	r3, r7, r1
 80051ba:	781b      	ldrb	r3, [r3, #0]
 80051bc:	3b01      	subs	r3, #1
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	187b      	adds	r3, r7, r1
 80051c2:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051c4:	230f      	movs	r3, #15
 80051c6:	18fb      	adds	r3, r7, r3
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	b25b      	sxtb	r3, r3
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	dce5      	bgt.n	800519c <prvUnlockQueue+0x1a>
 80051d0:	e000      	b.n	80051d4 <prvUnlockQueue+0x52>
					break;
 80051d2:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2245      	movs	r2, #69	; 0x45
 80051d8:	21ff      	movs	r1, #255	; 0xff
 80051da:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 80051dc:	f000 fe92 	bl	8005f04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051e0:	f000 fe7e 	bl	8005ee0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051e4:	230e      	movs	r3, #14
 80051e6:	18fb      	adds	r3, r7, r3
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	2144      	movs	r1, #68	; 0x44
 80051ec:	5c52      	ldrb	r2, [r2, r1]
 80051ee:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051f0:	e013      	b.n	800521a <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d016      	beq.n	8005228 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	3310      	adds	r3, #16
 80051fe:	0018      	movs	r0, r3
 8005200:	f000 fb8a 	bl	8005918 <xTaskRemoveFromEventList>
 8005204:	1e03      	subs	r3, r0, #0
 8005206:	d001      	beq.n	800520c <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005208:	f000 fc46 	bl	8005a98 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800520c:	210e      	movs	r1, #14
 800520e:	187b      	adds	r3, r7, r1
 8005210:	781b      	ldrb	r3, [r3, #0]
 8005212:	3b01      	subs	r3, #1
 8005214:	b2da      	uxtb	r2, r3
 8005216:	187b      	adds	r3, r7, r1
 8005218:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800521a:	230e      	movs	r3, #14
 800521c:	18fb      	adds	r3, r7, r3
 800521e:	781b      	ldrb	r3, [r3, #0]
 8005220:	b25b      	sxtb	r3, r3
 8005222:	2b00      	cmp	r3, #0
 8005224:	dce5      	bgt.n	80051f2 <prvUnlockQueue+0x70>
 8005226:	e000      	b.n	800522a <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005228:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	2244      	movs	r2, #68	; 0x44
 800522e:	21ff      	movs	r1, #255	; 0xff
 8005230:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005232:	f000 fe67 	bl	8005f04 <vPortExitCritical>
}
 8005236:	46c0      	nop			; (mov r8, r8)
 8005238:	46bd      	mov	sp, r7
 800523a:	b004      	add	sp, #16
 800523c:	bd80      	pop	{r7, pc}

0800523e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800523e:	b580      	push	{r7, lr}
 8005240:	b084      	sub	sp, #16
 8005242:	af00      	add	r7, sp, #0
 8005244:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005246:	f000 fe4b 	bl	8005ee0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	2b00      	cmp	r3, #0
 8005250:	d102      	bne.n	8005258 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005252:	2301      	movs	r3, #1
 8005254:	60fb      	str	r3, [r7, #12]
 8005256:	e001      	b.n	800525c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005258:	2300      	movs	r3, #0
 800525a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800525c:	f000 fe52 	bl	8005f04 <vPortExitCritical>

	return xReturn;
 8005260:	68fb      	ldr	r3, [r7, #12]
}
 8005262:	0018      	movs	r0, r3
 8005264:	46bd      	mov	sp, r7
 8005266:	b004      	add	sp, #16
 8005268:	bd80      	pop	{r7, pc}

0800526a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800526a:	b580      	push	{r7, lr}
 800526c:	b084      	sub	sp, #16
 800526e:	af00      	add	r7, sp, #0
 8005270:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005272:	f000 fe35 	bl	8005ee0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	429a      	cmp	r2, r3
 8005280:	d102      	bne.n	8005288 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005282:	2301      	movs	r3, #1
 8005284:	60fb      	str	r3, [r7, #12]
 8005286:	e001      	b.n	800528c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005288:	2300      	movs	r3, #0
 800528a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800528c:	f000 fe3a 	bl	8005f04 <vPortExitCritical>

	return xReturn;
 8005290:	68fb      	ldr	r3, [r7, #12]
}
 8005292:	0018      	movs	r0, r3
 8005294:	46bd      	mov	sp, r7
 8005296:	b004      	add	sp, #16
 8005298:	bd80      	pop	{r7, pc}

0800529a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800529a:	b590      	push	{r4, r7, lr}
 800529c:	b08d      	sub	sp, #52	; 0x34
 800529e:	af04      	add	r7, sp, #16
 80052a0:	60f8      	str	r0, [r7, #12]
 80052a2:	60b9      	str	r1, [r7, #8]
 80052a4:	603b      	str	r3, [r7, #0]
 80052a6:	1dbb      	adds	r3, r7, #6
 80052a8:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052aa:	1dbb      	adds	r3, r7, #6
 80052ac:	881b      	ldrh	r3, [r3, #0]
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	0018      	movs	r0, r3
 80052b2:	f000 fead 	bl	8006010 <pvPortMalloc>
 80052b6:	0003      	movs	r3, r0
 80052b8:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d010      	beq.n	80052e2 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 80052c0:	2054      	movs	r0, #84	; 0x54
 80052c2:	f000 fea5 	bl	8006010 <pvPortMalloc>
 80052c6:	0003      	movs	r3, r0
 80052c8:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 80052ca:	69fb      	ldr	r3, [r7, #28]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d003      	beq.n	80052d8 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	697a      	ldr	r2, [r7, #20]
 80052d4:	631a      	str	r2, [r3, #48]	; 0x30
 80052d6:	e006      	b.n	80052e6 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	0018      	movs	r0, r3
 80052dc:	f000 ff3e 	bl	800615c <vPortFree>
 80052e0:	e001      	b.n	80052e6 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80052e2:	2300      	movs	r3, #0
 80052e4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d016      	beq.n	800531a <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80052ec:	1dbb      	adds	r3, r7, #6
 80052ee:	881a      	ldrh	r2, [r3, #0]
 80052f0:	683c      	ldr	r4, [r7, #0]
 80052f2:	68b9      	ldr	r1, [r7, #8]
 80052f4:	68f8      	ldr	r0, [r7, #12]
 80052f6:	2300      	movs	r3, #0
 80052f8:	9303      	str	r3, [sp, #12]
 80052fa:	69fb      	ldr	r3, [r7, #28]
 80052fc:	9302      	str	r3, [sp, #8]
 80052fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005300:	9301      	str	r3, [sp, #4]
 8005302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005304:	9300      	str	r3, [sp, #0]
 8005306:	0023      	movs	r3, r4
 8005308:	f000 f810 	bl	800532c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800530c:	69fb      	ldr	r3, [r7, #28]
 800530e:	0018      	movs	r0, r3
 8005310:	f000 f886 	bl	8005420 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005314:	2301      	movs	r3, #1
 8005316:	61bb      	str	r3, [r7, #24]
 8005318:	e002      	b.n	8005320 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800531a:	2301      	movs	r3, #1
 800531c:	425b      	negs	r3, r3
 800531e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005320:	69bb      	ldr	r3, [r7, #24]
	}
 8005322:	0018      	movs	r0, r3
 8005324:	46bd      	mov	sp, r7
 8005326:	b009      	add	sp, #36	; 0x24
 8005328:	bd90      	pop	{r4, r7, pc}
	...

0800532c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800532c:	b580      	push	{r7, lr}
 800532e:	b086      	sub	sp, #24
 8005330:	af00      	add	r7, sp, #0
 8005332:	60f8      	str	r0, [r7, #12]
 8005334:	60b9      	str	r1, [r7, #8]
 8005336:	607a      	str	r2, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800533a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800533c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4936      	ldr	r1, [pc, #216]	; (800541c <prvInitialiseNewTask+0xf0>)
 8005342:	468c      	mov	ip, r1
 8005344:	4463      	add	r3, ip
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	18d3      	adds	r3, r2, r3
 800534a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800534c:	693b      	ldr	r3, [r7, #16]
 800534e:	2207      	movs	r2, #7
 8005350:	4393      	bics	r3, r2
 8005352:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	2207      	movs	r2, #7
 8005358:	4013      	ands	r3, r2
 800535a:	d001      	beq.n	8005360 <prvInitialiseNewTask+0x34>
 800535c:	b672      	cpsid	i
 800535e:	e7fe      	b.n	800535e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005360:	2300      	movs	r3, #0
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	e013      	b.n	800538e <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005366:	68ba      	ldr	r2, [r7, #8]
 8005368:	697b      	ldr	r3, [r7, #20]
 800536a:	18d3      	adds	r3, r2, r3
 800536c:	7818      	ldrb	r0, [r3, #0]
 800536e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005370:	2134      	movs	r1, #52	; 0x34
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	18d3      	adds	r3, r2, r3
 8005376:	185b      	adds	r3, r3, r1
 8005378:	1c02      	adds	r2, r0, #0
 800537a:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 800537c:	68ba      	ldr	r2, [r7, #8]
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	18d3      	adds	r3, r2, r3
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d006      	beq.n	8005396 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005388:	697b      	ldr	r3, [r7, #20]
 800538a:	3301      	adds	r3, #1
 800538c:	617b      	str	r3, [r7, #20]
 800538e:	697b      	ldr	r3, [r7, #20]
 8005390:	2b0f      	cmp	r3, #15
 8005392:	d9e8      	bls.n	8005366 <prvInitialiseNewTask+0x3a>
 8005394:	e000      	b.n	8005398 <prvInitialiseNewTask+0x6c>
		{
			break;
 8005396:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	2243      	movs	r2, #67	; 0x43
 800539c:	2100      	movs	r1, #0
 800539e:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80053a0:	6a3b      	ldr	r3, [r7, #32]
 80053a2:	2b06      	cmp	r3, #6
 80053a4:	d901      	bls.n	80053aa <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80053a6:	2306      	movs	r3, #6
 80053a8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80053aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ac:	6a3a      	ldr	r2, [r7, #32]
 80053ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80053b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b2:	6a3a      	ldr	r2, [r7, #32]
 80053b4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80053b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053b8:	2200      	movs	r2, #0
 80053ba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80053bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053be:	3304      	adds	r3, #4
 80053c0:	0018      	movs	r0, r3
 80053c2:	f7ff fb56 	bl	8004a72 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80053c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053c8:	3318      	adds	r3, #24
 80053ca:	0018      	movs	r0, r3
 80053cc:	f7ff fb51 	bl	8004a72 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80053d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80053d6:	6a3b      	ldr	r3, [r7, #32]
 80053d8:	2207      	movs	r2, #7
 80053da:	1ad2      	subs	r2, r2, r3
 80053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80053e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80053e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	2200      	movs	r2, #0
 80053ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80053ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053ee:	2250      	movs	r2, #80	; 0x50
 80053f0:	2100      	movs	r1, #0
 80053f2:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	68f9      	ldr	r1, [r7, #12]
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	0018      	movs	r0, r3
 80053fc:	f000 fcda 	bl	8005db4 <pxPortInitialiseStack>
 8005400:	0002      	movs	r2, r0
 8005402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005404:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8005406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005408:	2b00      	cmp	r3, #0
 800540a:	d002      	beq.n	8005412 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800540c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005410:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005412:	46c0      	nop			; (mov r8, r8)
 8005414:	46bd      	mov	sp, r7
 8005416:	b006      	add	sp, #24
 8005418:	bd80      	pop	{r7, pc}
 800541a:	46c0      	nop			; (mov r8, r8)
 800541c:	3fffffff 	.word	0x3fffffff

08005420 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005428:	f000 fd5a 	bl	8005ee0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800542c:	4b28      	ldr	r3, [pc, #160]	; (80054d0 <prvAddNewTaskToReadyList+0xb0>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	1c5a      	adds	r2, r3, #1
 8005432:	4b27      	ldr	r3, [pc, #156]	; (80054d0 <prvAddNewTaskToReadyList+0xb0>)
 8005434:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005436:	4b27      	ldr	r3, [pc, #156]	; (80054d4 <prvAddNewTaskToReadyList+0xb4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d109      	bne.n	8005452 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800543e:	4b25      	ldr	r3, [pc, #148]	; (80054d4 <prvAddNewTaskToReadyList+0xb4>)
 8005440:	687a      	ldr	r2, [r7, #4]
 8005442:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005444:	4b22      	ldr	r3, [pc, #136]	; (80054d0 <prvAddNewTaskToReadyList+0xb0>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d110      	bne.n	800546e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800544c:	f000 fb3e 	bl	8005acc <prvInitialiseTaskLists>
 8005450:	e00d      	b.n	800546e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005452:	4b21      	ldr	r3, [pc, #132]	; (80054d8 <prvAddNewTaskToReadyList+0xb8>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d109      	bne.n	800546e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800545a:	4b1e      	ldr	r3, [pc, #120]	; (80054d4 <prvAddNewTaskToReadyList+0xb4>)
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005464:	429a      	cmp	r2, r3
 8005466:	d802      	bhi.n	800546e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005468:	4b1a      	ldr	r3, [pc, #104]	; (80054d4 <prvAddNewTaskToReadyList+0xb4>)
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800546e:	4b1b      	ldr	r3, [pc, #108]	; (80054dc <prvAddNewTaskToReadyList+0xbc>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	1c5a      	adds	r2, r3, #1
 8005474:	4b19      	ldr	r3, [pc, #100]	; (80054dc <prvAddNewTaskToReadyList+0xbc>)
 8005476:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800547c:	4b18      	ldr	r3, [pc, #96]	; (80054e0 <prvAddNewTaskToReadyList+0xc0>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	429a      	cmp	r2, r3
 8005482:	d903      	bls.n	800548c <prvAddNewTaskToReadyList+0x6c>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005488:	4b15      	ldr	r3, [pc, #84]	; (80054e0 <prvAddNewTaskToReadyList+0xc0>)
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005490:	0013      	movs	r3, r2
 8005492:	009b      	lsls	r3, r3, #2
 8005494:	189b      	adds	r3, r3, r2
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4a12      	ldr	r2, [pc, #72]	; (80054e4 <prvAddNewTaskToReadyList+0xc4>)
 800549a:	189a      	adds	r2, r3, r2
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	3304      	adds	r3, #4
 80054a0:	0019      	movs	r1, r3
 80054a2:	0010      	movs	r0, r2
 80054a4:	f7ff faf0 	bl	8004a88 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80054a8:	f000 fd2c 	bl	8005f04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80054ac:	4b0a      	ldr	r3, [pc, #40]	; (80054d8 <prvAddNewTaskToReadyList+0xb8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	2b00      	cmp	r3, #0
 80054b2:	d008      	beq.n	80054c6 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80054b4:	4b07      	ldr	r3, [pc, #28]	; (80054d4 <prvAddNewTaskToReadyList+0xb4>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054be:	429a      	cmp	r2, r3
 80054c0:	d201      	bcs.n	80054c6 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80054c2:	f000 fcfd 	bl	8005ec0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	46bd      	mov	sp, r7
 80054ca:	b002      	add	sp, #8
 80054cc:	bd80      	pop	{r7, pc}
 80054ce:	46c0      	nop			; (mov r8, r8)
 80054d0:	20000170 	.word	0x20000170
 80054d4:	20000070 	.word	0x20000070
 80054d8:	2000017c 	.word	0x2000017c
 80054dc:	2000018c 	.word	0x2000018c
 80054e0:	20000178 	.word	0x20000178
 80054e4:	20000074 	.word	0x20000074

080054e8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80054e8:	b580      	push	{r7, lr}
 80054ea:	b084      	sub	sp, #16
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80054f0:	2300      	movs	r3, #0
 80054f2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d010      	beq.n	800551c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80054fa:	4b0d      	ldr	r3, [pc, #52]	; (8005530 <vTaskDelay+0x48>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d001      	beq.n	8005506 <vTaskDelay+0x1e>
 8005502:	b672      	cpsid	i
 8005504:	e7fe      	b.n	8005504 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005506:	f000 f84b 	bl	80055a0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2100      	movs	r1, #0
 800550e:	0018      	movs	r0, r3
 8005510:	f000 fbfc 	bl	8005d0c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005514:	f000 f850 	bl	80055b8 <xTaskResumeAll>
 8005518:	0003      	movs	r3, r0
 800551a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8005522:	f000 fccd 	bl	8005ec0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005526:	46c0      	nop			; (mov r8, r8)
 8005528:	46bd      	mov	sp, r7
 800552a:	b004      	add	sp, #16
 800552c:	bd80      	pop	{r7, pc}
 800552e:	46c0      	nop			; (mov r8, r8)
 8005530:	20000198 	.word	0x20000198

08005534 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b084      	sub	sp, #16
 8005538:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800553a:	4913      	ldr	r1, [pc, #76]	; (8005588 <vTaskStartScheduler+0x54>)
 800553c:	4813      	ldr	r0, [pc, #76]	; (800558c <vTaskStartScheduler+0x58>)
 800553e:	4b14      	ldr	r3, [pc, #80]	; (8005590 <vTaskStartScheduler+0x5c>)
 8005540:	9301      	str	r3, [sp, #4]
 8005542:	2300      	movs	r3, #0
 8005544:	9300      	str	r3, [sp, #0]
 8005546:	2300      	movs	r3, #0
 8005548:	2280      	movs	r2, #128	; 0x80
 800554a:	f7ff fea6 	bl	800529a <xTaskCreate>
 800554e:	0003      	movs	r3, r0
 8005550:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2b01      	cmp	r3, #1
 8005556:	d10d      	bne.n	8005574 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005558:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800555a:	4b0e      	ldr	r3, [pc, #56]	; (8005594 <vTaskStartScheduler+0x60>)
 800555c:	2201      	movs	r2, #1
 800555e:	4252      	negs	r2, r2
 8005560:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005562:	4b0d      	ldr	r3, [pc, #52]	; (8005598 <vTaskStartScheduler+0x64>)
 8005564:	2201      	movs	r2, #1
 8005566:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 8005568:	4b0c      	ldr	r3, [pc, #48]	; (800559c <vTaskStartScheduler+0x68>)
 800556a:	2200      	movs	r2, #0
 800556c:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800556e:	f000 fc83 	bl	8005e78 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005572:	e004      	b.n	800557e <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	3301      	adds	r3, #1
 8005578:	d101      	bne.n	800557e <vTaskStartScheduler+0x4a>
 800557a:	b672      	cpsid	i
 800557c:	e7fe      	b.n	800557c <vTaskStartScheduler+0x48>
}
 800557e:	46c0      	nop			; (mov r8, r8)
 8005580:	46bd      	mov	sp, r7
 8005582:	b002      	add	sp, #8
 8005584:	bd80      	pop	{r7, pc}
 8005586:	46c0      	nop			; (mov r8, r8)
 8005588:	08006460 	.word	0x08006460
 800558c:	08005aad 	.word	0x08005aad
 8005590:	20000194 	.word	0x20000194
 8005594:	20000190 	.word	0x20000190
 8005598:	2000017c 	.word	0x2000017c
 800559c:	20000174 	.word	0x20000174

080055a0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80055a4:	4b03      	ldr	r3, [pc, #12]	; (80055b4 <vTaskSuspendAll+0x14>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	1c5a      	adds	r2, r3, #1
 80055aa:	4b02      	ldr	r3, [pc, #8]	; (80055b4 <vTaskSuspendAll+0x14>)
 80055ac:	601a      	str	r2, [r3, #0]
}
 80055ae:	46c0      	nop			; (mov r8, r8)
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000198 	.word	0x20000198

080055b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b084      	sub	sp, #16
 80055bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80055be:	2300      	movs	r3, #0
 80055c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80055c2:	2300      	movs	r3, #0
 80055c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80055c6:	4b3a      	ldr	r3, [pc, #232]	; (80056b0 <xTaskResumeAll+0xf8>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <xTaskResumeAll+0x1a>
 80055ce:	b672      	cpsid	i
 80055d0:	e7fe      	b.n	80055d0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055d2:	f000 fc85 	bl	8005ee0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055d6:	4b36      	ldr	r3, [pc, #216]	; (80056b0 <xTaskResumeAll+0xf8>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	1e5a      	subs	r2, r3, #1
 80055dc:	4b34      	ldr	r3, [pc, #208]	; (80056b0 <xTaskResumeAll+0xf8>)
 80055de:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055e0:	4b33      	ldr	r3, [pc, #204]	; (80056b0 <xTaskResumeAll+0xf8>)
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d15b      	bne.n	80056a0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055e8:	4b32      	ldr	r3, [pc, #200]	; (80056b4 <xTaskResumeAll+0xfc>)
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d057      	beq.n	80056a0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055f0:	e02f      	b.n	8005652 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80055f2:	4b31      	ldr	r3, [pc, #196]	; (80056b8 <xTaskResumeAll+0x100>)
 80055f4:	68db      	ldr	r3, [r3, #12]
 80055f6:	68db      	ldr	r3, [r3, #12]
 80055f8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	3318      	adds	r3, #24
 80055fe:	0018      	movs	r0, r3
 8005600:	f7ff fa9a 	bl	8004b38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	3304      	adds	r3, #4
 8005608:	0018      	movs	r0, r3
 800560a:	f7ff fa95 	bl	8004b38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005612:	4b2a      	ldr	r3, [pc, #168]	; (80056bc <xTaskResumeAll+0x104>)
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	429a      	cmp	r2, r3
 8005618:	d903      	bls.n	8005622 <xTaskResumeAll+0x6a>
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800561e:	4b27      	ldr	r3, [pc, #156]	; (80056bc <xTaskResumeAll+0x104>)
 8005620:	601a      	str	r2, [r3, #0]
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005626:	0013      	movs	r3, r2
 8005628:	009b      	lsls	r3, r3, #2
 800562a:	189b      	adds	r3, r3, r2
 800562c:	009b      	lsls	r3, r3, #2
 800562e:	4a24      	ldr	r2, [pc, #144]	; (80056c0 <xTaskResumeAll+0x108>)
 8005630:	189a      	adds	r2, r3, r2
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	3304      	adds	r3, #4
 8005636:	0019      	movs	r1, r3
 8005638:	0010      	movs	r0, r2
 800563a:	f7ff fa25 	bl	8004a88 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005642:	4b20      	ldr	r3, [pc, #128]	; (80056c4 <xTaskResumeAll+0x10c>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005648:	429a      	cmp	r2, r3
 800564a:	d302      	bcc.n	8005652 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800564c:	4b1e      	ldr	r3, [pc, #120]	; (80056c8 <xTaskResumeAll+0x110>)
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005652:	4b19      	ldr	r3, [pc, #100]	; (80056b8 <xTaskResumeAll+0x100>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d1cb      	bne.n	80055f2 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d001      	beq.n	8005664 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005660:	f000 fab8 	bl	8005bd4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8005664:	4b19      	ldr	r3, [pc, #100]	; (80056cc <xTaskResumeAll+0x114>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2b00      	cmp	r3, #0
 800566e:	d00f      	beq.n	8005690 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005670:	f000 f82e 	bl	80056d0 <xTaskIncrementTick>
 8005674:	1e03      	subs	r3, r0, #0
 8005676:	d002      	beq.n	800567e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8005678:	4b13      	ldr	r3, [pc, #76]	; (80056c8 <xTaskResumeAll+0x110>)
 800567a:	2201      	movs	r2, #1
 800567c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	3b01      	subs	r3, #1
 8005682:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	2b00      	cmp	r3, #0
 8005688:	d1f2      	bne.n	8005670 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 800568a:	4b10      	ldr	r3, [pc, #64]	; (80056cc <xTaskResumeAll+0x114>)
 800568c:	2200      	movs	r2, #0
 800568e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005690:	4b0d      	ldr	r3, [pc, #52]	; (80056c8 <xTaskResumeAll+0x110>)
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d003      	beq.n	80056a0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005698:	2301      	movs	r3, #1
 800569a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800569c:	f000 fc10 	bl	8005ec0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80056a0:	f000 fc30 	bl	8005f04 <vPortExitCritical>

	return xAlreadyYielded;
 80056a4:	68bb      	ldr	r3, [r7, #8]
}
 80056a6:	0018      	movs	r0, r3
 80056a8:	46bd      	mov	sp, r7
 80056aa:	b004      	add	sp, #16
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	46c0      	nop			; (mov r8, r8)
 80056b0:	20000198 	.word	0x20000198
 80056b4:	20000170 	.word	0x20000170
 80056b8:	20000130 	.word	0x20000130
 80056bc:	20000178 	.word	0x20000178
 80056c0:	20000074 	.word	0x20000074
 80056c4:	20000070 	.word	0x20000070
 80056c8:	20000184 	.word	0x20000184
 80056cc:	20000180 	.word	0x20000180

080056d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b086      	sub	sp, #24
 80056d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80056da:	4b4c      	ldr	r3, [pc, #304]	; (800580c <xTaskIncrementTick+0x13c>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d000      	beq.n	80056e4 <xTaskIncrementTick+0x14>
 80056e2:	e083      	b.n	80057ec <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80056e4:	4b4a      	ldr	r3, [pc, #296]	; (8005810 <xTaskIncrementTick+0x140>)
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	3301      	adds	r3, #1
 80056ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80056ec:	4b48      	ldr	r3, [pc, #288]	; (8005810 <xTaskIncrementTick+0x140>)
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80056f2:	693b      	ldr	r3, [r7, #16]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d117      	bne.n	8005728 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 80056f8:	4b46      	ldr	r3, [pc, #280]	; (8005814 <xTaskIncrementTick+0x144>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d001      	beq.n	8005706 <xTaskIncrementTick+0x36>
 8005702:	b672      	cpsid	i
 8005704:	e7fe      	b.n	8005704 <xTaskIncrementTick+0x34>
 8005706:	4b43      	ldr	r3, [pc, #268]	; (8005814 <xTaskIncrementTick+0x144>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	60fb      	str	r3, [r7, #12]
 800570c:	4b42      	ldr	r3, [pc, #264]	; (8005818 <xTaskIncrementTick+0x148>)
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	4b40      	ldr	r3, [pc, #256]	; (8005814 <xTaskIncrementTick+0x144>)
 8005712:	601a      	str	r2, [r3, #0]
 8005714:	4b40      	ldr	r3, [pc, #256]	; (8005818 <xTaskIncrementTick+0x148>)
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	601a      	str	r2, [r3, #0]
 800571a:	4b40      	ldr	r3, [pc, #256]	; (800581c <xTaskIncrementTick+0x14c>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	4b3e      	ldr	r3, [pc, #248]	; (800581c <xTaskIncrementTick+0x14c>)
 8005722:	601a      	str	r2, [r3, #0]
 8005724:	f000 fa56 	bl	8005bd4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005728:	4b3d      	ldr	r3, [pc, #244]	; (8005820 <xTaskIncrementTick+0x150>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	693a      	ldr	r2, [r7, #16]
 800572e:	429a      	cmp	r2, r3
 8005730:	d34e      	bcc.n	80057d0 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005732:	4b38      	ldr	r3, [pc, #224]	; (8005814 <xTaskIncrementTick+0x144>)
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d101      	bne.n	8005740 <xTaskIncrementTick+0x70>
 800573c:	2301      	movs	r3, #1
 800573e:	e000      	b.n	8005742 <xTaskIncrementTick+0x72>
 8005740:	2300      	movs	r3, #0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d004      	beq.n	8005750 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005746:	4b36      	ldr	r3, [pc, #216]	; (8005820 <xTaskIncrementTick+0x150>)
 8005748:	2201      	movs	r2, #1
 800574a:	4252      	negs	r2, r2
 800574c:	601a      	str	r2, [r3, #0]
					break;
 800574e:	e03f      	b.n	80057d0 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005750:	4b30      	ldr	r3, [pc, #192]	; (8005814 <xTaskIncrementTick+0x144>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800575a:	68bb      	ldr	r3, [r7, #8]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005760:	693a      	ldr	r2, [r7, #16]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	429a      	cmp	r2, r3
 8005766:	d203      	bcs.n	8005770 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005768:	4b2d      	ldr	r3, [pc, #180]	; (8005820 <xTaskIncrementTick+0x150>)
 800576a:	687a      	ldr	r2, [r7, #4]
 800576c:	601a      	str	r2, [r3, #0]
						break;
 800576e:	e02f      	b.n	80057d0 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	3304      	adds	r3, #4
 8005774:	0018      	movs	r0, r3
 8005776:	f7ff f9df 	bl	8004b38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	2b00      	cmp	r3, #0
 8005780:	d004      	beq.n	800578c <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005782:	68bb      	ldr	r3, [r7, #8]
 8005784:	3318      	adds	r3, #24
 8005786:	0018      	movs	r0, r3
 8005788:	f7ff f9d6 	bl	8004b38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800578c:	68bb      	ldr	r3, [r7, #8]
 800578e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005790:	4b24      	ldr	r3, [pc, #144]	; (8005824 <xTaskIncrementTick+0x154>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	429a      	cmp	r2, r3
 8005796:	d903      	bls.n	80057a0 <xTaskIncrementTick+0xd0>
 8005798:	68bb      	ldr	r3, [r7, #8]
 800579a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800579c:	4b21      	ldr	r3, [pc, #132]	; (8005824 <xTaskIncrementTick+0x154>)
 800579e:	601a      	str	r2, [r3, #0]
 80057a0:	68bb      	ldr	r3, [r7, #8]
 80057a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057a4:	0013      	movs	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	189b      	adds	r3, r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	4a1e      	ldr	r2, [pc, #120]	; (8005828 <xTaskIncrementTick+0x158>)
 80057ae:	189a      	adds	r2, r3, r2
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	3304      	adds	r3, #4
 80057b4:	0019      	movs	r1, r3
 80057b6:	0010      	movs	r0, r2
 80057b8:	f7ff f966 	bl	8004a88 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057c0:	4b1a      	ldr	r3, [pc, #104]	; (800582c <xTaskIncrementTick+0x15c>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057c6:	429a      	cmp	r2, r3
 80057c8:	d3b3      	bcc.n	8005732 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80057ca:	2301      	movs	r3, #1
 80057cc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057ce:	e7b0      	b.n	8005732 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80057d0:	4b16      	ldr	r3, [pc, #88]	; (800582c <xTaskIncrementTick+0x15c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057d6:	4914      	ldr	r1, [pc, #80]	; (8005828 <xTaskIncrementTick+0x158>)
 80057d8:	0013      	movs	r3, r2
 80057da:	009b      	lsls	r3, r3, #2
 80057dc:	189b      	adds	r3, r3, r2
 80057de:	009b      	lsls	r3, r3, #2
 80057e0:	585b      	ldr	r3, [r3, r1]
 80057e2:	2b01      	cmp	r3, #1
 80057e4:	d907      	bls.n	80057f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80057e6:	2301      	movs	r3, #1
 80057e8:	617b      	str	r3, [r7, #20]
 80057ea:	e004      	b.n	80057f6 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80057ec:	4b10      	ldr	r3, [pc, #64]	; (8005830 <xTaskIncrementTick+0x160>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	1c5a      	adds	r2, r3, #1
 80057f2:	4b0f      	ldr	r3, [pc, #60]	; (8005830 <xTaskIncrementTick+0x160>)
 80057f4:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80057f6:	4b0f      	ldr	r3, [pc, #60]	; (8005834 <xTaskIncrementTick+0x164>)
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 80057fe:	2301      	movs	r3, #1
 8005800:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8005802:	697b      	ldr	r3, [r7, #20]
}
 8005804:	0018      	movs	r0, r3
 8005806:	46bd      	mov	sp, r7
 8005808:	b006      	add	sp, #24
 800580a:	bd80      	pop	{r7, pc}
 800580c:	20000198 	.word	0x20000198
 8005810:	20000174 	.word	0x20000174
 8005814:	20000128 	.word	0x20000128
 8005818:	2000012c 	.word	0x2000012c
 800581c:	20000188 	.word	0x20000188
 8005820:	20000190 	.word	0x20000190
 8005824:	20000178 	.word	0x20000178
 8005828:	20000074 	.word	0x20000074
 800582c:	20000070 	.word	0x20000070
 8005830:	20000180 	.word	0x20000180
 8005834:	20000184 	.word	0x20000184

08005838 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b082      	sub	sp, #8
 800583c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800583e:	4b22      	ldr	r3, [pc, #136]	; (80058c8 <vTaskSwitchContext+0x90>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2b00      	cmp	r3, #0
 8005844:	d003      	beq.n	800584e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005846:	4b21      	ldr	r3, [pc, #132]	; (80058cc <vTaskSwitchContext+0x94>)
 8005848:	2201      	movs	r2, #1
 800584a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800584c:	e037      	b.n	80058be <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800584e:	4b1f      	ldr	r3, [pc, #124]	; (80058cc <vTaskSwitchContext+0x94>)
 8005850:	2200      	movs	r2, #0
 8005852:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8005854:	4b1e      	ldr	r3, [pc, #120]	; (80058d0 <vTaskSwitchContext+0x98>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	607b      	str	r3, [r7, #4]
 800585a:	e007      	b.n	800586c <vTaskSwitchContext+0x34>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d101      	bne.n	8005866 <vTaskSwitchContext+0x2e>
 8005862:	b672      	cpsid	i
 8005864:	e7fe      	b.n	8005864 <vTaskSwitchContext+0x2c>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	3b01      	subs	r3, #1
 800586a:	607b      	str	r3, [r7, #4]
 800586c:	4919      	ldr	r1, [pc, #100]	; (80058d4 <vTaskSwitchContext+0x9c>)
 800586e:	687a      	ldr	r2, [r7, #4]
 8005870:	0013      	movs	r3, r2
 8005872:	009b      	lsls	r3, r3, #2
 8005874:	189b      	adds	r3, r3, r2
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	585b      	ldr	r3, [r3, r1]
 800587a:	2b00      	cmp	r3, #0
 800587c:	d0ee      	beq.n	800585c <vTaskSwitchContext+0x24>
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	0013      	movs	r3, r2
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	189b      	adds	r3, r3, r2
 8005886:	009b      	lsls	r3, r3, #2
 8005888:	4a12      	ldr	r2, [pc, #72]	; (80058d4 <vTaskSwitchContext+0x9c>)
 800588a:	189b      	adds	r3, r3, r2
 800588c:	603b      	str	r3, [r7, #0]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	685b      	ldr	r3, [r3, #4]
 8005892:	685a      	ldr	r2, [r3, #4]
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	605a      	str	r2, [r3, #4]
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	685a      	ldr	r2, [r3, #4]
 800589c:	683b      	ldr	r3, [r7, #0]
 800589e:	3308      	adds	r3, #8
 80058a0:	429a      	cmp	r2, r3
 80058a2:	d104      	bne.n	80058ae <vTaskSwitchContext+0x76>
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	685b      	ldr	r3, [r3, #4]
 80058a8:	685a      	ldr	r2, [r3, #4]
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	605a      	str	r2, [r3, #4]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	685b      	ldr	r3, [r3, #4]
 80058b2:	68da      	ldr	r2, [r3, #12]
 80058b4:	4b08      	ldr	r3, [pc, #32]	; (80058d8 <vTaskSwitchContext+0xa0>)
 80058b6:	601a      	str	r2, [r3, #0]
 80058b8:	4b05      	ldr	r3, [pc, #20]	; (80058d0 <vTaskSwitchContext+0x98>)
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	601a      	str	r2, [r3, #0]
}
 80058be:	46c0      	nop			; (mov r8, r8)
 80058c0:	46bd      	mov	sp, r7
 80058c2:	b002      	add	sp, #8
 80058c4:	bd80      	pop	{r7, pc}
 80058c6:	46c0      	nop			; (mov r8, r8)
 80058c8:	20000198 	.word	0x20000198
 80058cc:	20000184 	.word	0x20000184
 80058d0:	20000178 	.word	0x20000178
 80058d4:	20000074 	.word	0x20000074
 80058d8:	20000070 	.word	0x20000070

080058dc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b082      	sub	sp, #8
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <vTaskPlaceOnEventList+0x14>
 80058ec:	b672      	cpsid	i
 80058ee:	e7fe      	b.n	80058ee <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058f0:	4b08      	ldr	r3, [pc, #32]	; (8005914 <vTaskPlaceOnEventList+0x38>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	3318      	adds	r3, #24
 80058f6:	001a      	movs	r2, r3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	0011      	movs	r1, r2
 80058fc:	0018      	movs	r0, r3
 80058fe:	f7ff f8e5 	bl	8004acc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2101      	movs	r1, #1
 8005906:	0018      	movs	r0, r3
 8005908:	f000 fa00 	bl	8005d0c <prvAddCurrentTaskToDelayedList>
}
 800590c:	46c0      	nop			; (mov r8, r8)
 800590e:	46bd      	mov	sp, r7
 8005910:	b002      	add	sp, #8
 8005912:	bd80      	pop	{r7, pc}
 8005914:	20000070 	.word	0x20000070

08005918 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005918:	b580      	push	{r7, lr}
 800591a:	b084      	sub	sp, #16
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	68db      	ldr	r3, [r3, #12]
 8005924:	68db      	ldr	r3, [r3, #12]
 8005926:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d101      	bne.n	8005932 <xTaskRemoveFromEventList+0x1a>
 800592e:	b672      	cpsid	i
 8005930:	e7fe      	b.n	8005930 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005932:	68bb      	ldr	r3, [r7, #8]
 8005934:	3318      	adds	r3, #24
 8005936:	0018      	movs	r0, r3
 8005938:	f7ff f8fe 	bl	8004b38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800593c:	4b1e      	ldr	r3, [pc, #120]	; (80059b8 <xTaskRemoveFromEventList+0xa0>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d11d      	bne.n	8005980 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	3304      	adds	r3, #4
 8005948:	0018      	movs	r0, r3
 800594a:	f7ff f8f5 	bl	8004b38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005952:	4b1a      	ldr	r3, [pc, #104]	; (80059bc <xTaskRemoveFromEventList+0xa4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	429a      	cmp	r2, r3
 8005958:	d903      	bls.n	8005962 <xTaskRemoveFromEventList+0x4a>
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800595e:	4b17      	ldr	r3, [pc, #92]	; (80059bc <xTaskRemoveFromEventList+0xa4>)
 8005960:	601a      	str	r2, [r3, #0]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005966:	0013      	movs	r3, r2
 8005968:	009b      	lsls	r3, r3, #2
 800596a:	189b      	adds	r3, r3, r2
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	4a14      	ldr	r2, [pc, #80]	; (80059c0 <xTaskRemoveFromEventList+0xa8>)
 8005970:	189a      	adds	r2, r3, r2
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	3304      	adds	r3, #4
 8005976:	0019      	movs	r1, r3
 8005978:	0010      	movs	r0, r2
 800597a:	f7ff f885 	bl	8004a88 <vListInsertEnd>
 800597e:	e007      	b.n	8005990 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005980:	68bb      	ldr	r3, [r7, #8]
 8005982:	3318      	adds	r3, #24
 8005984:	001a      	movs	r2, r3
 8005986:	4b0f      	ldr	r3, [pc, #60]	; (80059c4 <xTaskRemoveFromEventList+0xac>)
 8005988:	0011      	movs	r1, r2
 800598a:	0018      	movs	r0, r3
 800598c:	f7ff f87c 	bl	8004a88 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005994:	4b0c      	ldr	r3, [pc, #48]	; (80059c8 <xTaskRemoveFromEventList+0xb0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599a:	429a      	cmp	r2, r3
 800599c:	d905      	bls.n	80059aa <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800599e:	2301      	movs	r3, #1
 80059a0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059a2:	4b0a      	ldr	r3, [pc, #40]	; (80059cc <xTaskRemoveFromEventList+0xb4>)
 80059a4:	2201      	movs	r2, #1
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e001      	b.n	80059ae <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80059aa:	2300      	movs	r3, #0
 80059ac:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80059ae:	68fb      	ldr	r3, [r7, #12]
}
 80059b0:	0018      	movs	r0, r3
 80059b2:	46bd      	mov	sp, r7
 80059b4:	b004      	add	sp, #16
 80059b6:	bd80      	pop	{r7, pc}
 80059b8:	20000198 	.word	0x20000198
 80059bc:	20000178 	.word	0x20000178
 80059c0:	20000074 	.word	0x20000074
 80059c4:	20000130 	.word	0x20000130
 80059c8:	20000070 	.word	0x20000070
 80059cc:	20000184 	.word	0x20000184

080059d0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059d0:	b580      	push	{r7, lr}
 80059d2:	b082      	sub	sp, #8
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059d8:	4b05      	ldr	r3, [pc, #20]	; (80059f0 <vTaskInternalSetTimeOutState+0x20>)
 80059da:	681a      	ldr	r2, [r3, #0]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059e0:	4b04      	ldr	r3, [pc, #16]	; (80059f4 <vTaskInternalSetTimeOutState+0x24>)
 80059e2:	681a      	ldr	r2, [r3, #0]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	605a      	str	r2, [r3, #4]
}
 80059e8:	46c0      	nop			; (mov r8, r8)
 80059ea:	46bd      	mov	sp, r7
 80059ec:	b002      	add	sp, #8
 80059ee:	bd80      	pop	{r7, pc}
 80059f0:	20000188 	.word	0x20000188
 80059f4:	20000174 	.word	0x20000174

080059f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
 8005a00:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d101      	bne.n	8005a0c <xTaskCheckForTimeOut+0x14>
 8005a08:	b672      	cpsid	i
 8005a0a:	e7fe      	b.n	8005a0a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d101      	bne.n	8005a16 <xTaskCheckForTimeOut+0x1e>
 8005a12:	b672      	cpsid	i
 8005a14:	e7fe      	b.n	8005a14 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8005a16:	f000 fa63 	bl	8005ee0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a1a:	4b1d      	ldr	r3, [pc, #116]	; (8005a90 <xTaskCheckForTimeOut+0x98>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	1ad3      	subs	r3, r2, r3
 8005a28:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	d102      	bne.n	8005a38 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a32:	2300      	movs	r3, #0
 8005a34:	617b      	str	r3, [r7, #20]
 8005a36:	e024      	b.n	8005a82 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681a      	ldr	r2, [r3, #0]
 8005a3c:	4b15      	ldr	r3, [pc, #84]	; (8005a94 <xTaskCheckForTimeOut+0x9c>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d007      	beq.n	8005a54 <xTaskCheckForTimeOut+0x5c>
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	685b      	ldr	r3, [r3, #4]
 8005a48:	693a      	ldr	r2, [r7, #16]
 8005a4a:	429a      	cmp	r2, r3
 8005a4c:	d302      	bcc.n	8005a54 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	617b      	str	r3, [r7, #20]
 8005a52:	e016      	b.n	8005a82 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	68fa      	ldr	r2, [r7, #12]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d20c      	bcs.n	8005a78 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681a      	ldr	r2, [r3, #0]
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1ad2      	subs	r2, r2, r3
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	0018      	movs	r0, r3
 8005a6e:	f7ff ffaf 	bl	80059d0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	e004      	b.n	8005a82 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 8005a78:	683b      	ldr	r3, [r7, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8005a82:	f000 fa3f 	bl	8005f04 <vPortExitCritical>

	return xReturn;
 8005a86:	697b      	ldr	r3, [r7, #20]
}
 8005a88:	0018      	movs	r0, r3
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	b006      	add	sp, #24
 8005a8e:	bd80      	pop	{r7, pc}
 8005a90:	20000174 	.word	0x20000174
 8005a94:	20000188 	.word	0x20000188

08005a98 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005a9c:	4b02      	ldr	r3, [pc, #8]	; (8005aa8 <vTaskMissedYield+0x10>)
 8005a9e:	2201      	movs	r2, #1
 8005aa0:	601a      	str	r2, [r3, #0]
}
 8005aa2:	46c0      	nop			; (mov r8, r8)
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	20000184 	.word	0x20000184

08005aac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ab4:	f000 f84e 	bl	8005b54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ab8:	4b03      	ldr	r3, [pc, #12]	; (8005ac8 <prvIdleTask+0x1c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b01      	cmp	r3, #1
 8005abe:	d9f9      	bls.n	8005ab4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005ac0:	f000 f9fe 	bl	8005ec0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8005ac4:	e7f6      	b.n	8005ab4 <prvIdleTask+0x8>
 8005ac6:	46c0      	nop			; (mov r8, r8)
 8005ac8:	20000074 	.word	0x20000074

08005acc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b082      	sub	sp, #8
 8005ad0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	607b      	str	r3, [r7, #4]
 8005ad6:	e00c      	b.n	8005af2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005ad8:	687a      	ldr	r2, [r7, #4]
 8005ada:	0013      	movs	r3, r2
 8005adc:	009b      	lsls	r3, r3, #2
 8005ade:	189b      	adds	r3, r3, r2
 8005ae0:	009b      	lsls	r3, r3, #2
 8005ae2:	4a14      	ldr	r2, [pc, #80]	; (8005b34 <prvInitialiseTaskLists+0x68>)
 8005ae4:	189b      	adds	r3, r3, r2
 8005ae6:	0018      	movs	r0, r3
 8005ae8:	f7fe ffa5 	bl	8004a36 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3301      	adds	r3, #1
 8005af0:	607b      	str	r3, [r7, #4]
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2b06      	cmp	r3, #6
 8005af6:	d9ef      	bls.n	8005ad8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005af8:	4b0f      	ldr	r3, [pc, #60]	; (8005b38 <prvInitialiseTaskLists+0x6c>)
 8005afa:	0018      	movs	r0, r3
 8005afc:	f7fe ff9b 	bl	8004a36 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b00:	4b0e      	ldr	r3, [pc, #56]	; (8005b3c <prvInitialiseTaskLists+0x70>)
 8005b02:	0018      	movs	r0, r3
 8005b04:	f7fe ff97 	bl	8004a36 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b08:	4b0d      	ldr	r3, [pc, #52]	; (8005b40 <prvInitialiseTaskLists+0x74>)
 8005b0a:	0018      	movs	r0, r3
 8005b0c:	f7fe ff93 	bl	8004a36 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b10:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <prvInitialiseTaskLists+0x78>)
 8005b12:	0018      	movs	r0, r3
 8005b14:	f7fe ff8f 	bl	8004a36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b18:	4b0b      	ldr	r3, [pc, #44]	; (8005b48 <prvInitialiseTaskLists+0x7c>)
 8005b1a:	0018      	movs	r0, r3
 8005b1c:	f7fe ff8b 	bl	8004a36 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b20:	4b0a      	ldr	r3, [pc, #40]	; (8005b4c <prvInitialiseTaskLists+0x80>)
 8005b22:	4a05      	ldr	r2, [pc, #20]	; (8005b38 <prvInitialiseTaskLists+0x6c>)
 8005b24:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b26:	4b0a      	ldr	r3, [pc, #40]	; (8005b50 <prvInitialiseTaskLists+0x84>)
 8005b28:	4a04      	ldr	r2, [pc, #16]	; (8005b3c <prvInitialiseTaskLists+0x70>)
 8005b2a:	601a      	str	r2, [r3, #0]
}
 8005b2c:	46c0      	nop			; (mov r8, r8)
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	b002      	add	sp, #8
 8005b32:	bd80      	pop	{r7, pc}
 8005b34:	20000074 	.word	0x20000074
 8005b38:	20000100 	.word	0x20000100
 8005b3c:	20000114 	.word	0x20000114
 8005b40:	20000130 	.word	0x20000130
 8005b44:	20000144 	.word	0x20000144
 8005b48:	2000015c 	.word	0x2000015c
 8005b4c:	20000128 	.word	0x20000128
 8005b50:	2000012c 	.word	0x2000012c

08005b54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b54:	b580      	push	{r7, lr}
 8005b56:	b082      	sub	sp, #8
 8005b58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b5a:	e01a      	b.n	8005b92 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8005b5c:	f000 f9c0 	bl	8005ee0 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8005b60:	4b10      	ldr	r3, [pc, #64]	; (8005ba4 <prvCheckTasksWaitingTermination+0x50>)
 8005b62:	68db      	ldr	r3, [r3, #12]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f7fe ffe3 	bl	8004b38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005b72:	4b0d      	ldr	r3, [pc, #52]	; (8005ba8 <prvCheckTasksWaitingTermination+0x54>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	1e5a      	subs	r2, r3, #1
 8005b78:	4b0b      	ldr	r3, [pc, #44]	; (8005ba8 <prvCheckTasksWaitingTermination+0x54>)
 8005b7a:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005b7c:	4b0b      	ldr	r3, [pc, #44]	; (8005bac <prvCheckTasksWaitingTermination+0x58>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	1e5a      	subs	r2, r3, #1
 8005b82:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <prvCheckTasksWaitingTermination+0x58>)
 8005b84:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8005b86:	f000 f9bd 	bl	8005f04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	0018      	movs	r0, r3
 8005b8e:	f000 f80f 	bl	8005bb0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b92:	4b06      	ldr	r3, [pc, #24]	; (8005bac <prvCheckTasksWaitingTermination+0x58>)
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d1e0      	bne.n	8005b5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005b9a:	46c0      	nop			; (mov r8, r8)
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	b002      	add	sp, #8
 8005ba0:	bd80      	pop	{r7, pc}
 8005ba2:	46c0      	nop			; (mov r8, r8)
 8005ba4:	20000144 	.word	0x20000144
 8005ba8:	20000170 	.word	0x20000170
 8005bac:	20000158 	.word	0x20000158

08005bb0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b082      	sub	sp, #8
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bbc:	0018      	movs	r0, r3
 8005bbe:	f000 facd 	bl	800615c <vPortFree>
			vPortFree( pxTCB );
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	0018      	movs	r0, r3
 8005bc6:	f000 fac9 	bl	800615c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005bca:	46c0      	nop			; (mov r8, r8)
 8005bcc:	46bd      	mov	sp, r7
 8005bce:	b002      	add	sp, #8
 8005bd0:	bd80      	pop	{r7, pc}
	...

08005bd4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005bda:	4b0e      	ldr	r3, [pc, #56]	; (8005c14 <prvResetNextTaskUnblockTime+0x40>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d101      	bne.n	8005be8 <prvResetNextTaskUnblockTime+0x14>
 8005be4:	2301      	movs	r3, #1
 8005be6:	e000      	b.n	8005bea <prvResetNextTaskUnblockTime+0x16>
 8005be8:	2300      	movs	r3, #0
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d004      	beq.n	8005bf8 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005bee:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <prvResetNextTaskUnblockTime+0x44>)
 8005bf0:	2201      	movs	r2, #1
 8005bf2:	4252      	negs	r2, r2
 8005bf4:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005bf6:	e008      	b.n	8005c0a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8005bf8:	4b06      	ldr	r3, [pc, #24]	; (8005c14 <prvResetNextTaskUnblockTime+0x40>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	68db      	ldr	r3, [r3, #12]
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	685a      	ldr	r2, [r3, #4]
 8005c06:	4b04      	ldr	r3, [pc, #16]	; (8005c18 <prvResetNextTaskUnblockTime+0x44>)
 8005c08:	601a      	str	r2, [r3, #0]
}
 8005c0a:	46c0      	nop			; (mov r8, r8)
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	b002      	add	sp, #8
 8005c10:	bd80      	pop	{r7, pc}
 8005c12:	46c0      	nop			; (mov r8, r8)
 8005c14:	20000128 	.word	0x20000128
 8005c18:	20000190 	.word	0x20000190

08005c1c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005c22:	4b0a      	ldr	r3, [pc, #40]	; (8005c4c <xTaskGetSchedulerState+0x30>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d102      	bne.n	8005c30 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005c2a:	2301      	movs	r3, #1
 8005c2c:	607b      	str	r3, [r7, #4]
 8005c2e:	e008      	b.n	8005c42 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005c30:	4b07      	ldr	r3, [pc, #28]	; (8005c50 <xTaskGetSchedulerState+0x34>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d102      	bne.n	8005c3e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005c38:	2302      	movs	r3, #2
 8005c3a:	607b      	str	r3, [r7, #4]
 8005c3c:	e001      	b.n	8005c42 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005c42:	687b      	ldr	r3, [r7, #4]
	}
 8005c44:	0018      	movs	r0, r3
 8005c46:	46bd      	mov	sp, r7
 8005c48:	b002      	add	sp, #8
 8005c4a:	bd80      	pop	{r7, pc}
 8005c4c:	2000017c 	.word	0x2000017c
 8005c50:	20000198 	.word	0x20000198

08005c54 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005c60:	2300      	movs	r3, #0
 8005c62:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d044      	beq.n	8005cf4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c6a:	4b25      	ldr	r3, [pc, #148]	; (8005d00 <xTaskPriorityDisinherit+0xac>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d001      	beq.n	8005c78 <xTaskPriorityDisinherit+0x24>
 8005c74:	b672      	cpsid	i
 8005c76:	e7fe      	b.n	8005c76 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c78:	68bb      	ldr	r3, [r7, #8]
 8005c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d101      	bne.n	8005c84 <xTaskPriorityDisinherit+0x30>
 8005c80:	b672      	cpsid	i
 8005c82:	e7fe      	b.n	8005c82 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8005c84:	68bb      	ldr	r3, [r7, #8]
 8005c86:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c88:	1e5a      	subs	r2, r3, #1
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005c8e:	68bb      	ldr	r3, [r7, #8]
 8005c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d02c      	beq.n	8005cf4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d128      	bne.n	8005cf4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	3304      	adds	r3, #4
 8005ca6:	0018      	movs	r0, r3
 8005ca8:	f7fe ff46 	bl	8004b38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005cac:	68bb      	ldr	r3, [r7, #8]
 8005cae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cb8:	2207      	movs	r2, #7
 8005cba:	1ad2      	subs	r2, r2, r3
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cc4:	4b0f      	ldr	r3, [pc, #60]	; (8005d04 <xTaskPriorityDisinherit+0xb0>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	429a      	cmp	r2, r3
 8005cca:	d903      	bls.n	8005cd4 <xTaskPriorityDisinherit+0x80>
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd0:	4b0c      	ldr	r3, [pc, #48]	; (8005d04 <xTaskPriorityDisinherit+0xb0>)
 8005cd2:	601a      	str	r2, [r3, #0]
 8005cd4:	68bb      	ldr	r3, [r7, #8]
 8005cd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cd8:	0013      	movs	r3, r2
 8005cda:	009b      	lsls	r3, r3, #2
 8005cdc:	189b      	adds	r3, r3, r2
 8005cde:	009b      	lsls	r3, r3, #2
 8005ce0:	4a09      	ldr	r2, [pc, #36]	; (8005d08 <xTaskPriorityDisinherit+0xb4>)
 8005ce2:	189a      	adds	r2, r3, r2
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	0019      	movs	r1, r3
 8005cea:	0010      	movs	r0, r2
 8005cec:	f7fe fecc 	bl	8004a88 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
	}
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	b004      	add	sp, #16
 8005cfc:	bd80      	pop	{r7, pc}
 8005cfe:	46c0      	nop			; (mov r8, r8)
 8005d00:	20000070 	.word	0x20000070
 8005d04:	20000178 	.word	0x20000178
 8005d08:	20000074 	.word	0x20000074

08005d0c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b084      	sub	sp, #16
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	6078      	str	r0, [r7, #4]
 8005d14:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005d16:	4b21      	ldr	r3, [pc, #132]	; (8005d9c <prvAddCurrentTaskToDelayedList+0x90>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d1c:	4b20      	ldr	r3, [pc, #128]	; (8005da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	3304      	adds	r3, #4
 8005d22:	0018      	movs	r0, r3
 8005d24:	f7fe ff08 	bl	8004b38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	d10b      	bne.n	8005d46 <prvAddCurrentTaskToDelayedList+0x3a>
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d008      	beq.n	8005d46 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d34:	4b1a      	ldr	r3, [pc, #104]	; (8005da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	1d1a      	adds	r2, r3, #4
 8005d3a:	4b1a      	ldr	r3, [pc, #104]	; (8005da4 <prvAddCurrentTaskToDelayedList+0x98>)
 8005d3c:	0011      	movs	r1, r2
 8005d3e:	0018      	movs	r0, r3
 8005d40:	f7fe fea2 	bl	8004a88 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005d44:	e026      	b.n	8005d94 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005d46:	68fa      	ldr	r2, [r7, #12]
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	18d3      	adds	r3, r2, r3
 8005d4c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005d4e:	4b14      	ldr	r3, [pc, #80]	; (8005da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005d56:	68ba      	ldr	r2, [r7, #8]
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d209      	bcs.n	8005d72 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d5e:	4b12      	ldr	r3, [pc, #72]	; (8005da8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005d60:	681a      	ldr	r2, [r3, #0]
 8005d62:	4b0f      	ldr	r3, [pc, #60]	; (8005da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	3304      	adds	r3, #4
 8005d68:	0019      	movs	r1, r3
 8005d6a:	0010      	movs	r0, r2
 8005d6c:	f7fe feae 	bl	8004acc <vListInsert>
}
 8005d70:	e010      	b.n	8005d94 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005d72:	4b0e      	ldr	r3, [pc, #56]	; (8005dac <prvAddCurrentTaskToDelayedList+0xa0>)
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	4b0a      	ldr	r3, [pc, #40]	; (8005da0 <prvAddCurrentTaskToDelayedList+0x94>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3304      	adds	r3, #4
 8005d7c:	0019      	movs	r1, r3
 8005d7e:	0010      	movs	r0, r2
 8005d80:	f7fe fea4 	bl	8004acc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005d84:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68ba      	ldr	r2, [r7, #8]
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d202      	bcs.n	8005d94 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005d8e:	4b08      	ldr	r3, [pc, #32]	; (8005db0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005d90:	68ba      	ldr	r2, [r7, #8]
 8005d92:	601a      	str	r2, [r3, #0]
}
 8005d94:	46c0      	nop			; (mov r8, r8)
 8005d96:	46bd      	mov	sp, r7
 8005d98:	b004      	add	sp, #16
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	20000174 	.word	0x20000174
 8005da0:	20000070 	.word	0x20000070
 8005da4:	2000015c 	.word	0x2000015c
 8005da8:	2000012c 	.word	0x2000012c
 8005dac:	20000128 	.word	0x20000128
 8005db0:	20000190 	.word	0x20000190

08005db4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b084      	sub	sp, #16
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	60f8      	str	r0, [r7, #12]
 8005dbc:	60b9      	str	r1, [r7, #8]
 8005dbe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3b04      	subs	r3, #4
 8005dc4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	2280      	movs	r2, #128	; 0x80
 8005dca:	0452      	lsls	r2, r2, #17
 8005dcc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3b04      	subs	r3, #4
 8005dd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8005dd4:	68ba      	ldr	r2, [r7, #8]
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	3b04      	subs	r3, #4
 8005dde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005de0:	4a08      	ldr	r2, [pc, #32]	; (8005e04 <pxPortInitialiseStack+0x50>)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3b14      	subs	r3, #20
 8005dea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005dec:	687a      	ldr	r2, [r7, #4]
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	3b20      	subs	r3, #32
 8005df6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005df8:	68fb      	ldr	r3, [r7, #12]
}
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	b004      	add	sp, #16
 8005e00:	bd80      	pop	{r7, pc}
 8005e02:	46c0      	nop			; (mov r8, r8)
 8005e04:	08005e09 	.word	0x08005e09

08005e08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b082      	sub	sp, #8
 8005e0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005e12:	4b07      	ldr	r3, [pc, #28]	; (8005e30 <prvTaskExitError+0x28>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	3301      	adds	r3, #1
 8005e18:	d001      	beq.n	8005e1e <prvTaskExitError+0x16>
 8005e1a:	b672      	cpsid	i
 8005e1c:	e7fe      	b.n	8005e1c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8005e1e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8005e20:	46c0      	nop			; (mov r8, r8)
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d0fc      	beq.n	8005e22 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005e28:	46c0      	nop			; (mov r8, r8)
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b002      	add	sp, #8
 8005e2e:	bd80      	pop	{r7, pc}
 8005e30:	20000040 	.word	0x20000040

08005e34 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8005e38:	46c0      	nop			; (mov r8, r8)
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
	...

08005e40 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8005e40:	4a0b      	ldr	r2, [pc, #44]	; (8005e70 <pxCurrentTCBConst2>)
 8005e42:	6813      	ldr	r3, [r2, #0]
 8005e44:	6818      	ldr	r0, [r3, #0]
 8005e46:	3020      	adds	r0, #32
 8005e48:	f380 8809 	msr	PSP, r0
 8005e4c:	2002      	movs	r0, #2
 8005e4e:	f380 8814 	msr	CONTROL, r0
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8005e58:	46ae      	mov	lr, r5
 8005e5a:	bc08      	pop	{r3}
 8005e5c:	bc04      	pop	{r2}
 8005e5e:	b662      	cpsie	i
 8005e60:	4718      	bx	r3
 8005e62:	46c0      	nop			; (mov r8, r8)
 8005e64:	46c0      	nop			; (mov r8, r8)
 8005e66:	46c0      	nop			; (mov r8, r8)
 8005e68:	46c0      	nop			; (mov r8, r8)
 8005e6a:	46c0      	nop			; (mov r8, r8)
 8005e6c:	46c0      	nop			; (mov r8, r8)
 8005e6e:	46c0      	nop			; (mov r8, r8)

08005e70 <pxCurrentTCBConst2>:
 8005e70:	20000070 	.word	0x20000070
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8005e74:	46c0      	nop			; (mov r8, r8)
 8005e76:	46c0      	nop			; (mov r8, r8)

08005e78 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8005e7c:	4b0e      	ldr	r3, [pc, #56]	; (8005eb8 <xPortStartScheduler+0x40>)
 8005e7e:	681a      	ldr	r2, [r3, #0]
 8005e80:	4b0d      	ldr	r3, [pc, #52]	; (8005eb8 <xPortStartScheduler+0x40>)
 8005e82:	21ff      	movs	r1, #255	; 0xff
 8005e84:	0409      	lsls	r1, r1, #16
 8005e86:	430a      	orrs	r2, r1
 8005e88:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8005e8a:	4b0b      	ldr	r3, [pc, #44]	; (8005eb8 <xPortStartScheduler+0x40>)
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	4b0a      	ldr	r3, [pc, #40]	; (8005eb8 <xPortStartScheduler+0x40>)
 8005e90:	21ff      	movs	r1, #255	; 0xff
 8005e92:	0609      	lsls	r1, r1, #24
 8005e94:	430a      	orrs	r2, r1
 8005e96:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8005e98:	f000 f898 	bl	8005fcc <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005e9c:	4b07      	ldr	r3, [pc, #28]	; (8005ebc <xPortStartScheduler+0x44>)
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8005ea2:	f7ff ffcd 	bl	8005e40 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005ea6:	f7ff fcc7 	bl	8005838 <vTaskSwitchContext>
	prvTaskExitError();
 8005eaa:	f7ff ffad 	bl	8005e08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005eae:	2300      	movs	r3, #0
}
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	46bd      	mov	sp, r7
 8005eb4:	bd80      	pop	{r7, pc}
 8005eb6:	46c0      	nop			; (mov r8, r8)
 8005eb8:	e000ed20 	.word	0xe000ed20
 8005ebc:	20000040 	.word	0x20000040

08005ec0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8005ec4:	4b05      	ldr	r3, [pc, #20]	; (8005edc <vPortYield+0x1c>)
 8005ec6:	2280      	movs	r2, #128	; 0x80
 8005ec8:	0552      	lsls	r2, r2, #21
 8005eca:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8005ecc:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005ed0:	f3bf 8f6f 	isb	sy
}
 8005ed4:	46c0      	nop			; (mov r8, r8)
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	46c0      	nop			; (mov r8, r8)
 8005edc:	e000ed04 	.word	0xe000ed04

08005ee0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005ee0:	b580      	push	{r7, lr}
 8005ee2:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8005ee4:	b672      	cpsid	i
    uxCriticalNesting++;
 8005ee6:	4b06      	ldr	r3, [pc, #24]	; (8005f00 <vPortEnterCritical+0x20>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	4b04      	ldr	r3, [pc, #16]	; (8005f00 <vPortEnterCritical+0x20>)
 8005eee:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8005ef0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8005ef4:	f3bf 8f6f 	isb	sy
}
 8005ef8:	46c0      	nop			; (mov r8, r8)
 8005efa:	46bd      	mov	sp, r7
 8005efc:	bd80      	pop	{r7, pc}
 8005efe:	46c0      	nop			; (mov r8, r8)
 8005f00:	20000040 	.word	0x20000040

08005f04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005f04:	b580      	push	{r7, lr}
 8005f06:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005f08:	4b09      	ldr	r3, [pc, #36]	; (8005f30 <vPortExitCritical+0x2c>)
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d101      	bne.n	8005f14 <vPortExitCritical+0x10>
 8005f10:	b672      	cpsid	i
 8005f12:	e7fe      	b.n	8005f12 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8005f14:	4b06      	ldr	r3, [pc, #24]	; (8005f30 <vPortExitCritical+0x2c>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	1e5a      	subs	r2, r3, #1
 8005f1a:	4b05      	ldr	r3, [pc, #20]	; (8005f30 <vPortExitCritical+0x2c>)
 8005f1c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8005f1e:	4b04      	ldr	r3, [pc, #16]	; (8005f30 <vPortExitCritical+0x2c>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d100      	bne.n	8005f28 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8005f26:	b662      	cpsie	i
    }
}
 8005f28:	46c0      	nop			; (mov r8, r8)
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	46c0      	nop			; (mov r8, r8)
 8005f30:	20000040 	.word	0x20000040

08005f34 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8005f34:	f3ef 8010 	mrs	r0, PRIMASK
 8005f38:	b672      	cpsid	i
 8005f3a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8005f3c:	46c0      	nop			; (mov r8, r8)
 8005f3e:	0018      	movs	r0, r3

08005f40 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8005f40:	f380 8810 	msr	PRIMASK, r0
 8005f44:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8005f46:	46c0      	nop			; (mov r8, r8)
	...

08005f50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005f50:	f3ef 8009 	mrs	r0, PSP
 8005f54:	4b0e      	ldr	r3, [pc, #56]	; (8005f90 <pxCurrentTCBConst>)
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	3820      	subs	r0, #32
 8005f5a:	6010      	str	r0, [r2, #0]
 8005f5c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005f5e:	4644      	mov	r4, r8
 8005f60:	464d      	mov	r5, r9
 8005f62:	4656      	mov	r6, sl
 8005f64:	465f      	mov	r7, fp
 8005f66:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8005f68:	b508      	push	{r3, lr}
 8005f6a:	b672      	cpsid	i
 8005f6c:	f7ff fc64 	bl	8005838 <vTaskSwitchContext>
 8005f70:	b662      	cpsie	i
 8005f72:	bc0c      	pop	{r2, r3}
 8005f74:	6811      	ldr	r1, [r2, #0]
 8005f76:	6808      	ldr	r0, [r1, #0]
 8005f78:	3010      	adds	r0, #16
 8005f7a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005f7c:	46a0      	mov	r8, r4
 8005f7e:	46a9      	mov	r9, r5
 8005f80:	46b2      	mov	sl, r6
 8005f82:	46bb      	mov	fp, r7
 8005f84:	f380 8809 	msr	PSP, r0
 8005f88:	3820      	subs	r0, #32
 8005f8a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8005f8c:	4718      	bx	r3
 8005f8e:	46c0      	nop			; (mov r8, r8)

08005f90 <pxCurrentTCBConst>:
 8005f90:	20000070 	.word	0x20000070
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8005f94:	46c0      	nop			; (mov r8, r8)
 8005f96:	46c0      	nop			; (mov r8, r8)

08005f98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f9e:	f7ff ffc9 	bl	8005f34 <ulSetInterruptMaskFromISR>
 8005fa2:	0003      	movs	r3, r0
 8005fa4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005fa6:	f7ff fb93 	bl	80056d0 <xTaskIncrementTick>
 8005faa:	1e03      	subs	r3, r0, #0
 8005fac:	d003      	beq.n	8005fb6 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8005fae:	4b06      	ldr	r3, [pc, #24]	; (8005fc8 <xPortSysTickHandler+0x30>)
 8005fb0:	2280      	movs	r2, #128	; 0x80
 8005fb2:	0552      	lsls	r2, r2, #21
 8005fb4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	0018      	movs	r0, r3
 8005fba:	f7ff ffc1 	bl	8005f40 <vClearInterruptMaskFromISR>
}
 8005fbe:	46c0      	nop			; (mov r8, r8)
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	b002      	add	sp, #8
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	46c0      	nop			; (mov r8, r8)
 8005fc8:	e000ed04 	.word	0xe000ed04

08005fcc <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8005fd0:	4b0b      	ldr	r3, [pc, #44]	; (8006000 <prvSetupTimerInterrupt+0x34>)
 8005fd2:	2200      	movs	r2, #0
 8005fd4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8005fd6:	4b0b      	ldr	r3, [pc, #44]	; (8006004 <prvSetupTimerInterrupt+0x38>)
 8005fd8:	2200      	movs	r2, #0
 8005fda:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005fdc:	4b0a      	ldr	r3, [pc, #40]	; (8006008 <prvSetupTimerInterrupt+0x3c>)
 8005fde:	681a      	ldr	r2, [r3, #0]
 8005fe0:	23fa      	movs	r3, #250	; 0xfa
 8005fe2:	0099      	lsls	r1, r3, #2
 8005fe4:	0010      	movs	r0, r2
 8005fe6:	f7fa f897 	bl	8000118 <__udivsi3>
 8005fea:	0003      	movs	r3, r0
 8005fec:	001a      	movs	r2, r3
 8005fee:	4b07      	ldr	r3, [pc, #28]	; (800600c <prvSetupTimerInterrupt+0x40>)
 8005ff0:	3a01      	subs	r2, #1
 8005ff2:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8005ff4:	4b02      	ldr	r3, [pc, #8]	; (8006000 <prvSetupTimerInterrupt+0x34>)
 8005ff6:	2207      	movs	r2, #7
 8005ff8:	601a      	str	r2, [r3, #0]
}
 8005ffa:	46c0      	nop			; (mov r8, r8)
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	e000e010 	.word	0xe000e010
 8006004:	e000e018 	.word	0xe000e018
 8006008:	20000000 	.word	0x20000000
 800600c:	e000e014 	.word	0xe000e014

08006010 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b086      	sub	sp, #24
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006018:	2300      	movs	r3, #0
 800601a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800601c:	f7ff fac0 	bl	80055a0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006020:	4b49      	ldr	r3, [pc, #292]	; (8006148 <pvPortMalloc+0x138>)
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d101      	bne.n	800602c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006028:	f000 f8e0 	bl	80061ec <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800602c:	4b47      	ldr	r3, [pc, #284]	; (800614c <pvPortMalloc+0x13c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	687a      	ldr	r2, [r7, #4]
 8006032:	4013      	ands	r3, r2
 8006034:	d000      	beq.n	8006038 <pvPortMalloc+0x28>
 8006036:	e079      	b.n	800612c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d012      	beq.n	8006064 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800603e:	2208      	movs	r2, #8
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	189b      	adds	r3, r3, r2
 8006044:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2207      	movs	r2, #7
 800604a:	4013      	ands	r3, r2
 800604c:	d00a      	beq.n	8006064 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2207      	movs	r2, #7
 8006052:	4393      	bics	r3, r2
 8006054:	3308      	adds	r3, #8
 8006056:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	2207      	movs	r2, #7
 800605c:	4013      	ands	r3, r2
 800605e:	d001      	beq.n	8006064 <pvPortMalloc+0x54>
 8006060:	b672      	cpsid	i
 8006062:	e7fe      	b.n	8006062 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d060      	beq.n	800612c <pvPortMalloc+0x11c>
 800606a:	4b39      	ldr	r3, [pc, #228]	; (8006150 <pvPortMalloc+0x140>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	687a      	ldr	r2, [r7, #4]
 8006070:	429a      	cmp	r2, r3
 8006072:	d85b      	bhi.n	800612c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006074:	4b37      	ldr	r3, [pc, #220]	; (8006154 <pvPortMalloc+0x144>)
 8006076:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8006078:	4b36      	ldr	r3, [pc, #216]	; (8006154 <pvPortMalloc+0x144>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800607e:	e004      	b.n	800608a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8006080:	697b      	ldr	r3, [r7, #20]
 8006082:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800608a:	697b      	ldr	r3, [r7, #20]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	429a      	cmp	r2, r3
 8006092:	d903      	bls.n	800609c <pvPortMalloc+0x8c>
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d1f1      	bne.n	8006080 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800609c:	4b2a      	ldr	r3, [pc, #168]	; (8006148 <pvPortMalloc+0x138>)
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	697a      	ldr	r2, [r7, #20]
 80060a2:	429a      	cmp	r2, r3
 80060a4:	d042      	beq.n	800612c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	2208      	movs	r2, #8
 80060ac:	189b      	adds	r3, r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80060b0:	697b      	ldr	r3, [r7, #20]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	693b      	ldr	r3, [r7, #16]
 80060b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	685a      	ldr	r2, [r3, #4]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	1ad2      	subs	r2, r2, r3
 80060c0:	2308      	movs	r3, #8
 80060c2:	005b      	lsls	r3, r3, #1
 80060c4:	429a      	cmp	r2, r3
 80060c6:	d916      	bls.n	80060f6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	18d3      	adds	r3, r2, r3
 80060ce:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2207      	movs	r2, #7
 80060d4:	4013      	ands	r3, r2
 80060d6:	d001      	beq.n	80060dc <pvPortMalloc+0xcc>
 80060d8:	b672      	cpsid	i
 80060da:	e7fe      	b.n	80060da <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80060dc:	697b      	ldr	r3, [r7, #20]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	1ad2      	subs	r2, r2, r3
 80060e4:	68bb      	ldr	r3, [r7, #8]
 80060e6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80060e8:	697b      	ldr	r3, [r7, #20]
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	0018      	movs	r0, r3
 80060f2:	f000 f8db 	bl	80062ac <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80060f6:	4b16      	ldr	r3, [pc, #88]	; (8006150 <pvPortMalloc+0x140>)
 80060f8:	681a      	ldr	r2, [r3, #0]
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	1ad2      	subs	r2, r2, r3
 8006100:	4b13      	ldr	r3, [pc, #76]	; (8006150 <pvPortMalloc+0x140>)
 8006102:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006104:	4b12      	ldr	r3, [pc, #72]	; (8006150 <pvPortMalloc+0x140>)
 8006106:	681a      	ldr	r2, [r3, #0]
 8006108:	4b13      	ldr	r3, [pc, #76]	; (8006158 <pvPortMalloc+0x148>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	429a      	cmp	r2, r3
 800610e:	d203      	bcs.n	8006118 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006110:	4b0f      	ldr	r3, [pc, #60]	; (8006150 <pvPortMalloc+0x140>)
 8006112:	681a      	ldr	r2, [r3, #0]
 8006114:	4b10      	ldr	r3, [pc, #64]	; (8006158 <pvPortMalloc+0x148>)
 8006116:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	685a      	ldr	r2, [r3, #4]
 800611c:	4b0b      	ldr	r3, [pc, #44]	; (800614c <pvPortMalloc+0x13c>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	431a      	orrs	r2, r3
 8006122:	697b      	ldr	r3, [r7, #20]
 8006124:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006126:	697b      	ldr	r3, [r7, #20]
 8006128:	2200      	movs	r2, #0
 800612a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800612c:	f7ff fa44 	bl	80055b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2207      	movs	r2, #7
 8006134:	4013      	ands	r3, r2
 8006136:	d001      	beq.n	800613c <pvPortMalloc+0x12c>
 8006138:	b672      	cpsid	i
 800613a:	e7fe      	b.n	800613a <pvPortMalloc+0x12a>
	return pvReturn;
 800613c:	68fb      	ldr	r3, [r7, #12]
}
 800613e:	0018      	movs	r0, r3
 8006140:	46bd      	mov	sp, r7
 8006142:	b006      	add	sp, #24
 8006144:	bd80      	pop	{r7, pc}
 8006146:	46c0      	nop			; (mov r8, r8)
 8006148:	200011a4 	.word	0x200011a4
 800614c:	200011b0 	.word	0x200011b0
 8006150:	200011a8 	.word	0x200011a8
 8006154:	2000119c 	.word	0x2000119c
 8006158:	200011ac 	.word	0x200011ac

0800615c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800615c:	b580      	push	{r7, lr}
 800615e:	b084      	sub	sp, #16
 8006160:	af00      	add	r7, sp, #0
 8006162:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2b00      	cmp	r3, #0
 800616c:	d035      	beq.n	80061da <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800616e:	2308      	movs	r3, #8
 8006170:	425b      	negs	r3, r3
 8006172:	68fa      	ldr	r2, [r7, #12]
 8006174:	18d3      	adds	r3, r2, r3
 8006176:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	685a      	ldr	r2, [r3, #4]
 8006180:	4b18      	ldr	r3, [pc, #96]	; (80061e4 <vPortFree+0x88>)
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4013      	ands	r3, r2
 8006186:	d101      	bne.n	800618c <vPortFree+0x30>
 8006188:	b672      	cpsid	i
 800618a:	e7fe      	b.n	800618a <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d001      	beq.n	8006198 <vPortFree+0x3c>
 8006194:	b672      	cpsid	i
 8006196:	e7fe      	b.n	8006196 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	685a      	ldr	r2, [r3, #4]
 800619c:	4b11      	ldr	r3, [pc, #68]	; (80061e4 <vPortFree+0x88>)
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	4013      	ands	r3, r2
 80061a2:	d01a      	beq.n	80061da <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d116      	bne.n	80061da <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80061ac:	68bb      	ldr	r3, [r7, #8]
 80061ae:	685a      	ldr	r2, [r3, #4]
 80061b0:	4b0c      	ldr	r3, [pc, #48]	; (80061e4 <vPortFree+0x88>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	43db      	mvns	r3, r3
 80061b6:	401a      	ands	r2, r3
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80061bc:	f7ff f9f0 	bl	80055a0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80061c0:	68bb      	ldr	r3, [r7, #8]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	4b08      	ldr	r3, [pc, #32]	; (80061e8 <vPortFree+0x8c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	18d2      	adds	r2, r2, r3
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <vPortFree+0x8c>)
 80061cc:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80061ce:	68bb      	ldr	r3, [r7, #8]
 80061d0:	0018      	movs	r0, r3
 80061d2:	f000 f86b 	bl	80062ac <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80061d6:	f7ff f9ef 	bl	80055b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80061da:	46c0      	nop			; (mov r8, r8)
 80061dc:	46bd      	mov	sp, r7
 80061de:	b004      	add	sp, #16
 80061e0:	bd80      	pop	{r7, pc}
 80061e2:	46c0      	nop			; (mov r8, r8)
 80061e4:	200011b0 	.word	0x200011b0
 80061e8:	200011a8 	.word	0x200011a8

080061ec <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80061f2:	2380      	movs	r3, #128	; 0x80
 80061f4:	015b      	lsls	r3, r3, #5
 80061f6:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80061f8:	4b26      	ldr	r3, [pc, #152]	; (8006294 <prvHeapInit+0xa8>)
 80061fa:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2207      	movs	r2, #7
 8006200:	4013      	ands	r3, r2
 8006202:	d00c      	beq.n	800621e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	3307      	adds	r3, #7
 8006208:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	2207      	movs	r2, #7
 800620e:	4393      	bics	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006212:	68ba      	ldr	r2, [r7, #8]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	1ad2      	subs	r2, r2, r3
 8006218:	4b1e      	ldr	r3, [pc, #120]	; (8006294 <prvHeapInit+0xa8>)
 800621a:	18d3      	adds	r3, r2, r3
 800621c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800621e:	68fb      	ldr	r3, [r7, #12]
 8006220:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006222:	4b1d      	ldr	r3, [pc, #116]	; (8006298 <prvHeapInit+0xac>)
 8006224:	687a      	ldr	r2, [r7, #4]
 8006226:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006228:	4b1b      	ldr	r3, [pc, #108]	; (8006298 <prvHeapInit+0xac>)
 800622a:	2200      	movs	r2, #0
 800622c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	68ba      	ldr	r2, [r7, #8]
 8006232:	18d3      	adds	r3, r2, r3
 8006234:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006236:	2208      	movs	r2, #8
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	1a9b      	subs	r3, r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2207      	movs	r2, #7
 8006242:	4393      	bics	r3, r2
 8006244:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006246:	68fa      	ldr	r2, [r7, #12]
 8006248:	4b14      	ldr	r3, [pc, #80]	; (800629c <prvHeapInit+0xb0>)
 800624a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800624c:	4b13      	ldr	r3, [pc, #76]	; (800629c <prvHeapInit+0xb0>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2200      	movs	r2, #0
 8006252:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006254:	4b11      	ldr	r3, [pc, #68]	; (800629c <prvHeapInit+0xb0>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	2200      	movs	r2, #0
 800625a:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006260:	683b      	ldr	r3, [r7, #0]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	1ad2      	subs	r2, r2, r3
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800626a:	4b0c      	ldr	r3, [pc, #48]	; (800629c <prvHeapInit+0xb0>)
 800626c:	681a      	ldr	r2, [r3, #0]
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	685a      	ldr	r2, [r3, #4]
 8006276:	4b0a      	ldr	r3, [pc, #40]	; (80062a0 <prvHeapInit+0xb4>)
 8006278:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	685a      	ldr	r2, [r3, #4]
 800627e:	4b09      	ldr	r3, [pc, #36]	; (80062a4 <prvHeapInit+0xb8>)
 8006280:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006282:	4b09      	ldr	r3, [pc, #36]	; (80062a8 <prvHeapInit+0xbc>)
 8006284:	2280      	movs	r2, #128	; 0x80
 8006286:	0612      	lsls	r2, r2, #24
 8006288:	601a      	str	r2, [r3, #0]
}
 800628a:	46c0      	nop			; (mov r8, r8)
 800628c:	46bd      	mov	sp, r7
 800628e:	b004      	add	sp, #16
 8006290:	bd80      	pop	{r7, pc}
 8006292:	46c0      	nop			; (mov r8, r8)
 8006294:	2000019c 	.word	0x2000019c
 8006298:	2000119c 	.word	0x2000119c
 800629c:	200011a4 	.word	0x200011a4
 80062a0:	200011ac 	.word	0x200011ac
 80062a4:	200011a8 	.word	0x200011a8
 80062a8:	200011b0 	.word	0x200011b0

080062ac <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b084      	sub	sp, #16
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80062b4:	4b27      	ldr	r3, [pc, #156]	; (8006354 <prvInsertBlockIntoFreeList+0xa8>)
 80062b6:	60fb      	str	r3, [r7, #12]
 80062b8:	e002      	b.n	80062c0 <prvInsertBlockIntoFreeList+0x14>
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	60fb      	str	r3, [r7, #12]
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	687a      	ldr	r2, [r7, #4]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d8f7      	bhi.n	80062ba <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	685b      	ldr	r3, [r3, #4]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	18d3      	adds	r3, r2, r3
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	429a      	cmp	r2, r3
 80062da:	d108      	bne.n	80062ee <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	685a      	ldr	r2, [r3, #4]
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	685b      	ldr	r3, [r3, #4]
 80062e4:	18d2      	adds	r2, r2, r3
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80062ea:	68fb      	ldr	r3, [r7, #12]
 80062ec:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	18d2      	adds	r2, r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	429a      	cmp	r2, r3
 8006300:	d118      	bne.n	8006334 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	4b14      	ldr	r3, [pc, #80]	; (8006358 <prvInsertBlockIntoFreeList+0xac>)
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	429a      	cmp	r2, r3
 800630c:	d00d      	beq.n	800632a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	685a      	ldr	r2, [r3, #4]
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	685b      	ldr	r3, [r3, #4]
 8006318:	18d2      	adds	r2, r2, r3
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	681a      	ldr	r2, [r3, #0]
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	601a      	str	r2, [r3, #0]
 8006328:	e008      	b.n	800633c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800632a:	4b0b      	ldr	r3, [pc, #44]	; (8006358 <prvInsertBlockIntoFreeList+0xac>)
 800632c:	681a      	ldr	r2, [r3, #0]
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
 8006332:	e003      	b.n	800633c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	429a      	cmp	r2, r3
 8006342:	d002      	beq.n	800634a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	687a      	ldr	r2, [r7, #4]
 8006348:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800634a:	46c0      	nop			; (mov r8, r8)
 800634c:	46bd      	mov	sp, r7
 800634e:	b004      	add	sp, #16
 8006350:	bd80      	pop	{r7, pc}
 8006352:	46c0      	nop			; (mov r8, r8)
 8006354:	2000119c 	.word	0x2000119c
 8006358:	200011a4 	.word	0x200011a4

0800635c <__libc_init_array>:
 800635c:	b570      	push	{r4, r5, r6, lr}
 800635e:	2600      	movs	r6, #0
 8006360:	4d0c      	ldr	r5, [pc, #48]	; (8006394 <__libc_init_array+0x38>)
 8006362:	4c0d      	ldr	r4, [pc, #52]	; (8006398 <__libc_init_array+0x3c>)
 8006364:	1b64      	subs	r4, r4, r5
 8006366:	10a4      	asrs	r4, r4, #2
 8006368:	42a6      	cmp	r6, r4
 800636a:	d109      	bne.n	8006380 <__libc_init_array+0x24>
 800636c:	2600      	movs	r6, #0
 800636e:	f000 f82b 	bl	80063c8 <_init>
 8006372:	4d0a      	ldr	r5, [pc, #40]	; (800639c <__libc_init_array+0x40>)
 8006374:	4c0a      	ldr	r4, [pc, #40]	; (80063a0 <__libc_init_array+0x44>)
 8006376:	1b64      	subs	r4, r4, r5
 8006378:	10a4      	asrs	r4, r4, #2
 800637a:	42a6      	cmp	r6, r4
 800637c:	d105      	bne.n	800638a <__libc_init_array+0x2e>
 800637e:	bd70      	pop	{r4, r5, r6, pc}
 8006380:	00b3      	lsls	r3, r6, #2
 8006382:	58eb      	ldr	r3, [r5, r3]
 8006384:	4798      	blx	r3
 8006386:	3601      	adds	r6, #1
 8006388:	e7ee      	b.n	8006368 <__libc_init_array+0xc>
 800638a:	00b3      	lsls	r3, r6, #2
 800638c:	58eb      	ldr	r3, [r5, r3]
 800638e:	4798      	blx	r3
 8006390:	3601      	adds	r6, #1
 8006392:	e7f2      	b.n	800637a <__libc_init_array+0x1e>
 8006394:	08006550 	.word	0x08006550
 8006398:	08006550 	.word	0x08006550
 800639c:	08006550 	.word	0x08006550
 80063a0:	08006554 	.word	0x08006554

080063a4 <memcpy>:
 80063a4:	2300      	movs	r3, #0
 80063a6:	b510      	push	{r4, lr}
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d100      	bne.n	80063ae <memcpy+0xa>
 80063ac:	bd10      	pop	{r4, pc}
 80063ae:	5ccc      	ldrb	r4, [r1, r3]
 80063b0:	54c4      	strb	r4, [r0, r3]
 80063b2:	3301      	adds	r3, #1
 80063b4:	e7f8      	b.n	80063a8 <memcpy+0x4>

080063b6 <memset>:
 80063b6:	0003      	movs	r3, r0
 80063b8:	1812      	adds	r2, r2, r0
 80063ba:	4293      	cmp	r3, r2
 80063bc:	d100      	bne.n	80063c0 <memset+0xa>
 80063be:	4770      	bx	lr
 80063c0:	7019      	strb	r1, [r3, #0]
 80063c2:	3301      	adds	r3, #1
 80063c4:	e7f9      	b.n	80063ba <memset+0x4>
	...

080063c8 <_init>:
 80063c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063ca:	46c0      	nop			; (mov r8, r8)
 80063cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ce:	bc08      	pop	{r3}
 80063d0:	469e      	mov	lr, r3
 80063d2:	4770      	bx	lr

080063d4 <_fini>:
 80063d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d6:	46c0      	nop			; (mov r8, r8)
 80063d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063da:	bc08      	pop	{r3}
 80063dc:	469e      	mov	lr, r3
 80063de:	4770      	bx	lr
