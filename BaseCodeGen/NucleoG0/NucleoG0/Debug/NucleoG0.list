
NucleoG0.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000b8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005270  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08005330  08005330  00015330  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800548c  0800548c  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  0800548c  0800548c  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800548c  0800548c  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800548c  0800548c  0001548c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005490  08005490  00015490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005494  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001254  20000010  080054a4  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001264  080054a4  00021264  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000104d8  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002d62  00000000  00000000  00030510  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000e48  00000000  00000000  00033278  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000cd0  00000000  00000000  000340c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000037f1  00000000  00000000  00034d90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000dfea  00000000  00000000  00038581  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008613a  00000000  00000000  0004656b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cc6a5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030c0  00000000  00000000  000cc720  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005318 	.word	0x08005318

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005318 	.word	0x08005318

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__udivsi3>:
 8000118:	2200      	movs	r2, #0
 800011a:	0843      	lsrs	r3, r0, #1
 800011c:	428b      	cmp	r3, r1
 800011e:	d374      	bcc.n	800020a <__udivsi3+0xf2>
 8000120:	0903      	lsrs	r3, r0, #4
 8000122:	428b      	cmp	r3, r1
 8000124:	d35f      	bcc.n	80001e6 <__udivsi3+0xce>
 8000126:	0a03      	lsrs	r3, r0, #8
 8000128:	428b      	cmp	r3, r1
 800012a:	d344      	bcc.n	80001b6 <__udivsi3+0x9e>
 800012c:	0b03      	lsrs	r3, r0, #12
 800012e:	428b      	cmp	r3, r1
 8000130:	d328      	bcc.n	8000184 <__udivsi3+0x6c>
 8000132:	0c03      	lsrs	r3, r0, #16
 8000134:	428b      	cmp	r3, r1
 8000136:	d30d      	bcc.n	8000154 <__udivsi3+0x3c>
 8000138:	22ff      	movs	r2, #255	; 0xff
 800013a:	0209      	lsls	r1, r1, #8
 800013c:	ba12      	rev	r2, r2
 800013e:	0c03      	lsrs	r3, r0, #16
 8000140:	428b      	cmp	r3, r1
 8000142:	d302      	bcc.n	800014a <__udivsi3+0x32>
 8000144:	1212      	asrs	r2, r2, #8
 8000146:	0209      	lsls	r1, r1, #8
 8000148:	d065      	beq.n	8000216 <__udivsi3+0xfe>
 800014a:	0b03      	lsrs	r3, r0, #12
 800014c:	428b      	cmp	r3, r1
 800014e:	d319      	bcc.n	8000184 <__udivsi3+0x6c>
 8000150:	e000      	b.n	8000154 <__udivsi3+0x3c>
 8000152:	0a09      	lsrs	r1, r1, #8
 8000154:	0bc3      	lsrs	r3, r0, #15
 8000156:	428b      	cmp	r3, r1
 8000158:	d301      	bcc.n	800015e <__udivsi3+0x46>
 800015a:	03cb      	lsls	r3, r1, #15
 800015c:	1ac0      	subs	r0, r0, r3
 800015e:	4152      	adcs	r2, r2
 8000160:	0b83      	lsrs	r3, r0, #14
 8000162:	428b      	cmp	r3, r1
 8000164:	d301      	bcc.n	800016a <__udivsi3+0x52>
 8000166:	038b      	lsls	r3, r1, #14
 8000168:	1ac0      	subs	r0, r0, r3
 800016a:	4152      	adcs	r2, r2
 800016c:	0b43      	lsrs	r3, r0, #13
 800016e:	428b      	cmp	r3, r1
 8000170:	d301      	bcc.n	8000176 <__udivsi3+0x5e>
 8000172:	034b      	lsls	r3, r1, #13
 8000174:	1ac0      	subs	r0, r0, r3
 8000176:	4152      	adcs	r2, r2
 8000178:	0b03      	lsrs	r3, r0, #12
 800017a:	428b      	cmp	r3, r1
 800017c:	d301      	bcc.n	8000182 <__udivsi3+0x6a>
 800017e:	030b      	lsls	r3, r1, #12
 8000180:	1ac0      	subs	r0, r0, r3
 8000182:	4152      	adcs	r2, r2
 8000184:	0ac3      	lsrs	r3, r0, #11
 8000186:	428b      	cmp	r3, r1
 8000188:	d301      	bcc.n	800018e <__udivsi3+0x76>
 800018a:	02cb      	lsls	r3, r1, #11
 800018c:	1ac0      	subs	r0, r0, r3
 800018e:	4152      	adcs	r2, r2
 8000190:	0a83      	lsrs	r3, r0, #10
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x82>
 8000196:	028b      	lsls	r3, r1, #10
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0a43      	lsrs	r3, r0, #9
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x8e>
 80001a2:	024b      	lsls	r3, r1, #9
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0a03      	lsrs	r3, r0, #8
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x9a>
 80001ae:	020b      	lsls	r3, r1, #8
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	d2cd      	bcs.n	8000152 <__udivsi3+0x3a>
 80001b6:	09c3      	lsrs	r3, r0, #7
 80001b8:	428b      	cmp	r3, r1
 80001ba:	d301      	bcc.n	80001c0 <__udivsi3+0xa8>
 80001bc:	01cb      	lsls	r3, r1, #7
 80001be:	1ac0      	subs	r0, r0, r3
 80001c0:	4152      	adcs	r2, r2
 80001c2:	0983      	lsrs	r3, r0, #6
 80001c4:	428b      	cmp	r3, r1
 80001c6:	d301      	bcc.n	80001cc <__udivsi3+0xb4>
 80001c8:	018b      	lsls	r3, r1, #6
 80001ca:	1ac0      	subs	r0, r0, r3
 80001cc:	4152      	adcs	r2, r2
 80001ce:	0943      	lsrs	r3, r0, #5
 80001d0:	428b      	cmp	r3, r1
 80001d2:	d301      	bcc.n	80001d8 <__udivsi3+0xc0>
 80001d4:	014b      	lsls	r3, r1, #5
 80001d6:	1ac0      	subs	r0, r0, r3
 80001d8:	4152      	adcs	r2, r2
 80001da:	0903      	lsrs	r3, r0, #4
 80001dc:	428b      	cmp	r3, r1
 80001de:	d301      	bcc.n	80001e4 <__udivsi3+0xcc>
 80001e0:	010b      	lsls	r3, r1, #4
 80001e2:	1ac0      	subs	r0, r0, r3
 80001e4:	4152      	adcs	r2, r2
 80001e6:	08c3      	lsrs	r3, r0, #3
 80001e8:	428b      	cmp	r3, r1
 80001ea:	d301      	bcc.n	80001f0 <__udivsi3+0xd8>
 80001ec:	00cb      	lsls	r3, r1, #3
 80001ee:	1ac0      	subs	r0, r0, r3
 80001f0:	4152      	adcs	r2, r2
 80001f2:	0883      	lsrs	r3, r0, #2
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xe4>
 80001f8:	008b      	lsls	r3, r1, #2
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0843      	lsrs	r3, r0, #1
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xf0>
 8000204:	004b      	lsls	r3, r1, #1
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	1a41      	subs	r1, r0, r1
 800020c:	d200      	bcs.n	8000210 <__udivsi3+0xf8>
 800020e:	4601      	mov	r1, r0
 8000210:	4152      	adcs	r2, r2
 8000212:	4610      	mov	r0, r2
 8000214:	4770      	bx	lr
 8000216:	e7ff      	b.n	8000218 <__udivsi3+0x100>
 8000218:	b501      	push	{r0, lr}
 800021a:	2000      	movs	r0, #0
 800021c:	f000 f8f0 	bl	8000400 <__aeabi_idiv0>
 8000220:	bd02      	pop	{r1, pc}
 8000222:	46c0      	nop			; (mov r8, r8)

08000224 <__aeabi_uidivmod>:
 8000224:	2900      	cmp	r1, #0
 8000226:	d0f7      	beq.n	8000218 <__udivsi3+0x100>
 8000228:	e776      	b.n	8000118 <__udivsi3>
 800022a:	4770      	bx	lr

0800022c <__divsi3>:
 800022c:	4603      	mov	r3, r0
 800022e:	430b      	orrs	r3, r1
 8000230:	d47f      	bmi.n	8000332 <__divsi3+0x106>
 8000232:	2200      	movs	r2, #0
 8000234:	0843      	lsrs	r3, r0, #1
 8000236:	428b      	cmp	r3, r1
 8000238:	d374      	bcc.n	8000324 <__divsi3+0xf8>
 800023a:	0903      	lsrs	r3, r0, #4
 800023c:	428b      	cmp	r3, r1
 800023e:	d35f      	bcc.n	8000300 <__divsi3+0xd4>
 8000240:	0a03      	lsrs	r3, r0, #8
 8000242:	428b      	cmp	r3, r1
 8000244:	d344      	bcc.n	80002d0 <__divsi3+0xa4>
 8000246:	0b03      	lsrs	r3, r0, #12
 8000248:	428b      	cmp	r3, r1
 800024a:	d328      	bcc.n	800029e <__divsi3+0x72>
 800024c:	0c03      	lsrs	r3, r0, #16
 800024e:	428b      	cmp	r3, r1
 8000250:	d30d      	bcc.n	800026e <__divsi3+0x42>
 8000252:	22ff      	movs	r2, #255	; 0xff
 8000254:	0209      	lsls	r1, r1, #8
 8000256:	ba12      	rev	r2, r2
 8000258:	0c03      	lsrs	r3, r0, #16
 800025a:	428b      	cmp	r3, r1
 800025c:	d302      	bcc.n	8000264 <__divsi3+0x38>
 800025e:	1212      	asrs	r2, r2, #8
 8000260:	0209      	lsls	r1, r1, #8
 8000262:	d065      	beq.n	8000330 <__divsi3+0x104>
 8000264:	0b03      	lsrs	r3, r0, #12
 8000266:	428b      	cmp	r3, r1
 8000268:	d319      	bcc.n	800029e <__divsi3+0x72>
 800026a:	e000      	b.n	800026e <__divsi3+0x42>
 800026c:	0a09      	lsrs	r1, r1, #8
 800026e:	0bc3      	lsrs	r3, r0, #15
 8000270:	428b      	cmp	r3, r1
 8000272:	d301      	bcc.n	8000278 <__divsi3+0x4c>
 8000274:	03cb      	lsls	r3, r1, #15
 8000276:	1ac0      	subs	r0, r0, r3
 8000278:	4152      	adcs	r2, r2
 800027a:	0b83      	lsrs	r3, r0, #14
 800027c:	428b      	cmp	r3, r1
 800027e:	d301      	bcc.n	8000284 <__divsi3+0x58>
 8000280:	038b      	lsls	r3, r1, #14
 8000282:	1ac0      	subs	r0, r0, r3
 8000284:	4152      	adcs	r2, r2
 8000286:	0b43      	lsrs	r3, r0, #13
 8000288:	428b      	cmp	r3, r1
 800028a:	d301      	bcc.n	8000290 <__divsi3+0x64>
 800028c:	034b      	lsls	r3, r1, #13
 800028e:	1ac0      	subs	r0, r0, r3
 8000290:	4152      	adcs	r2, r2
 8000292:	0b03      	lsrs	r3, r0, #12
 8000294:	428b      	cmp	r3, r1
 8000296:	d301      	bcc.n	800029c <__divsi3+0x70>
 8000298:	030b      	lsls	r3, r1, #12
 800029a:	1ac0      	subs	r0, r0, r3
 800029c:	4152      	adcs	r2, r2
 800029e:	0ac3      	lsrs	r3, r0, #11
 80002a0:	428b      	cmp	r3, r1
 80002a2:	d301      	bcc.n	80002a8 <__divsi3+0x7c>
 80002a4:	02cb      	lsls	r3, r1, #11
 80002a6:	1ac0      	subs	r0, r0, r3
 80002a8:	4152      	adcs	r2, r2
 80002aa:	0a83      	lsrs	r3, r0, #10
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x88>
 80002b0:	028b      	lsls	r3, r1, #10
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0a43      	lsrs	r3, r0, #9
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x94>
 80002bc:	024b      	lsls	r3, r1, #9
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0a03      	lsrs	r3, r0, #8
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0xa0>
 80002c8:	020b      	lsls	r3, r1, #8
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	d2cd      	bcs.n	800026c <__divsi3+0x40>
 80002d0:	09c3      	lsrs	r3, r0, #7
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d301      	bcc.n	80002da <__divsi3+0xae>
 80002d6:	01cb      	lsls	r3, r1, #7
 80002d8:	1ac0      	subs	r0, r0, r3
 80002da:	4152      	adcs	r2, r2
 80002dc:	0983      	lsrs	r3, r0, #6
 80002de:	428b      	cmp	r3, r1
 80002e0:	d301      	bcc.n	80002e6 <__divsi3+0xba>
 80002e2:	018b      	lsls	r3, r1, #6
 80002e4:	1ac0      	subs	r0, r0, r3
 80002e6:	4152      	adcs	r2, r2
 80002e8:	0943      	lsrs	r3, r0, #5
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d301      	bcc.n	80002f2 <__divsi3+0xc6>
 80002ee:	014b      	lsls	r3, r1, #5
 80002f0:	1ac0      	subs	r0, r0, r3
 80002f2:	4152      	adcs	r2, r2
 80002f4:	0903      	lsrs	r3, r0, #4
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d301      	bcc.n	80002fe <__divsi3+0xd2>
 80002fa:	010b      	lsls	r3, r1, #4
 80002fc:	1ac0      	subs	r0, r0, r3
 80002fe:	4152      	adcs	r2, r2
 8000300:	08c3      	lsrs	r3, r0, #3
 8000302:	428b      	cmp	r3, r1
 8000304:	d301      	bcc.n	800030a <__divsi3+0xde>
 8000306:	00cb      	lsls	r3, r1, #3
 8000308:	1ac0      	subs	r0, r0, r3
 800030a:	4152      	adcs	r2, r2
 800030c:	0883      	lsrs	r3, r0, #2
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xea>
 8000312:	008b      	lsls	r3, r1, #2
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0843      	lsrs	r3, r0, #1
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xf6>
 800031e:	004b      	lsls	r3, r1, #1
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	1a41      	subs	r1, r0, r1
 8000326:	d200      	bcs.n	800032a <__divsi3+0xfe>
 8000328:	4601      	mov	r1, r0
 800032a:	4152      	adcs	r2, r2
 800032c:	4610      	mov	r0, r2
 800032e:	4770      	bx	lr
 8000330:	e05d      	b.n	80003ee <__divsi3+0x1c2>
 8000332:	0fca      	lsrs	r2, r1, #31
 8000334:	d000      	beq.n	8000338 <__divsi3+0x10c>
 8000336:	4249      	negs	r1, r1
 8000338:	1003      	asrs	r3, r0, #32
 800033a:	d300      	bcc.n	800033e <__divsi3+0x112>
 800033c:	4240      	negs	r0, r0
 800033e:	4053      	eors	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	469c      	mov	ip, r3
 8000344:	0903      	lsrs	r3, r0, #4
 8000346:	428b      	cmp	r3, r1
 8000348:	d32d      	bcc.n	80003a6 <__divsi3+0x17a>
 800034a:	0a03      	lsrs	r3, r0, #8
 800034c:	428b      	cmp	r3, r1
 800034e:	d312      	bcc.n	8000376 <__divsi3+0x14a>
 8000350:	22fc      	movs	r2, #252	; 0xfc
 8000352:	0189      	lsls	r1, r1, #6
 8000354:	ba12      	rev	r2, r2
 8000356:	0a03      	lsrs	r3, r0, #8
 8000358:	428b      	cmp	r3, r1
 800035a:	d30c      	bcc.n	8000376 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	1192      	asrs	r2, r2, #6
 8000360:	428b      	cmp	r3, r1
 8000362:	d308      	bcc.n	8000376 <__divsi3+0x14a>
 8000364:	0189      	lsls	r1, r1, #6
 8000366:	1192      	asrs	r2, r2, #6
 8000368:	428b      	cmp	r3, r1
 800036a:	d304      	bcc.n	8000376 <__divsi3+0x14a>
 800036c:	0189      	lsls	r1, r1, #6
 800036e:	d03a      	beq.n	80003e6 <__divsi3+0x1ba>
 8000370:	1192      	asrs	r2, r2, #6
 8000372:	e000      	b.n	8000376 <__divsi3+0x14a>
 8000374:	0989      	lsrs	r1, r1, #6
 8000376:	09c3      	lsrs	r3, r0, #7
 8000378:	428b      	cmp	r3, r1
 800037a:	d301      	bcc.n	8000380 <__divsi3+0x154>
 800037c:	01cb      	lsls	r3, r1, #7
 800037e:	1ac0      	subs	r0, r0, r3
 8000380:	4152      	adcs	r2, r2
 8000382:	0983      	lsrs	r3, r0, #6
 8000384:	428b      	cmp	r3, r1
 8000386:	d301      	bcc.n	800038c <__divsi3+0x160>
 8000388:	018b      	lsls	r3, r1, #6
 800038a:	1ac0      	subs	r0, r0, r3
 800038c:	4152      	adcs	r2, r2
 800038e:	0943      	lsrs	r3, r0, #5
 8000390:	428b      	cmp	r3, r1
 8000392:	d301      	bcc.n	8000398 <__divsi3+0x16c>
 8000394:	014b      	lsls	r3, r1, #5
 8000396:	1ac0      	subs	r0, r0, r3
 8000398:	4152      	adcs	r2, r2
 800039a:	0903      	lsrs	r3, r0, #4
 800039c:	428b      	cmp	r3, r1
 800039e:	d301      	bcc.n	80003a4 <__divsi3+0x178>
 80003a0:	010b      	lsls	r3, r1, #4
 80003a2:	1ac0      	subs	r0, r0, r3
 80003a4:	4152      	adcs	r2, r2
 80003a6:	08c3      	lsrs	r3, r0, #3
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d301      	bcc.n	80003b0 <__divsi3+0x184>
 80003ac:	00cb      	lsls	r3, r1, #3
 80003ae:	1ac0      	subs	r0, r0, r3
 80003b0:	4152      	adcs	r2, r2
 80003b2:	0883      	lsrs	r3, r0, #2
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x190>
 80003b8:	008b      	lsls	r3, r1, #2
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	d2d9      	bcs.n	8000374 <__divsi3+0x148>
 80003c0:	0843      	lsrs	r3, r0, #1
 80003c2:	428b      	cmp	r3, r1
 80003c4:	d301      	bcc.n	80003ca <__divsi3+0x19e>
 80003c6:	004b      	lsls	r3, r1, #1
 80003c8:	1ac0      	subs	r0, r0, r3
 80003ca:	4152      	adcs	r2, r2
 80003cc:	1a41      	subs	r1, r0, r1
 80003ce:	d200      	bcs.n	80003d2 <__divsi3+0x1a6>
 80003d0:	4601      	mov	r1, r0
 80003d2:	4663      	mov	r3, ip
 80003d4:	4152      	adcs	r2, r2
 80003d6:	105b      	asrs	r3, r3, #1
 80003d8:	4610      	mov	r0, r2
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x1b4>
 80003dc:	4240      	negs	r0, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d500      	bpl.n	80003e4 <__divsi3+0x1b8>
 80003e2:	4249      	negs	r1, r1
 80003e4:	4770      	bx	lr
 80003e6:	4663      	mov	r3, ip
 80003e8:	105b      	asrs	r3, r3, #1
 80003ea:	d300      	bcc.n	80003ee <__divsi3+0x1c2>
 80003ec:	4240      	negs	r0, r0
 80003ee:	b501      	push	{r0, lr}
 80003f0:	2000      	movs	r0, #0
 80003f2:	f000 f805 	bl	8000400 <__aeabi_idiv0>
 80003f6:	bd02      	pop	{r1, pc}

080003f8 <__aeabi_idivmod>:
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d0f8      	beq.n	80003ee <__divsi3+0x1c2>
 80003fc:	e716      	b.n	800022c <__divsi3>
 80003fe:	4770      	bx	lr

08000400 <__aeabi_idiv0>:
 8000400:	4770      	bx	lr
 8000402:	46c0      	nop			; (mov r8, r8)

08000404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000404:	b590      	push	{r4, r7, lr}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800040a:	f000 fdbd 	bl	8000f88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800040e:	f000 f81b 	bl	8000448 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000412:	f000 f8c7 	bl	80005a4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000416:	f000 f877 	bl	8000508 <MX_USART2_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 800041a:	1d3b      	adds	r3, r7, #4
 800041c:	4a08      	ldr	r2, [pc, #32]	; (8000440 <main+0x3c>)
 800041e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000420:	c313      	stmia	r3!, {r0, r1, r4}
 8000422:	ca03      	ldmia	r2!, {r0, r1}
 8000424:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	2100      	movs	r1, #0
 800042a:	0018      	movs	r0, r3
 800042c:	f003 fa6f 	bl	800390e <osThreadCreate>
 8000430:	0002      	movs	r2, r0
 8000432:	4b04      	ldr	r3, [pc, #16]	; (8000444 <main+0x40>)
 8000434:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  application();
 8000436:	f000 f9d1 	bl	80007dc <application>
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800043a:	f003 fa60 	bl	80038fe <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800043e:	e7fe      	b.n	800043e <main+0x3a>
 8000440:	0800533c 	.word	0x0800533c
 8000444:	200011a8 	.word	0x200011a8

08000448 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000448:	b590      	push	{r4, r7, lr}
 800044a:	b099      	sub	sp, #100	; 0x64
 800044c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800044e:	242c      	movs	r4, #44	; 0x2c
 8000450:	193b      	adds	r3, r7, r4
 8000452:	0018      	movs	r0, r3
 8000454:	2334      	movs	r3, #52	; 0x34
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f004 ff54 	bl	8005306 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800045e:	231c      	movs	r3, #28
 8000460:	18fb      	adds	r3, r7, r3
 8000462:	0018      	movs	r0, r3
 8000464:	2310      	movs	r3, #16
 8000466:	001a      	movs	r2, r3
 8000468:	2100      	movs	r1, #0
 800046a:	f004 ff4c 	bl	8005306 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800046e:	003b      	movs	r3, r7
 8000470:	0018      	movs	r0, r3
 8000472:	231c      	movs	r3, #28
 8000474:	001a      	movs	r2, r3
 8000476:	2100      	movs	r1, #0
 8000478:	f004 ff45 	bl	8005306 <memset>

  /** Configure the main internal regulator output voltage 
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 800047c:	2380      	movs	r3, #128	; 0x80
 800047e:	009b      	lsls	r3, r3, #2
 8000480:	0018      	movs	r0, r3
 8000482:	f001 f8fb 	bl	800167c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000486:	193b      	adds	r3, r7, r4
 8000488:	2202      	movs	r2, #2
 800048a:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800048c:	193b      	adds	r3, r7, r4
 800048e:	2280      	movs	r2, #128	; 0x80
 8000490:	0052      	lsls	r2, r2, #1
 8000492:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000494:	193b      	adds	r3, r7, r4
 8000496:	2200      	movs	r2, #0
 8000498:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800049a:	193b      	adds	r3, r7, r4
 800049c:	2240      	movs	r2, #64	; 0x40
 800049e:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004a0:	193b      	adds	r3, r7, r4
 80004a2:	2200      	movs	r2, #0
 80004a4:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004a6:	193b      	adds	r3, r7, r4
 80004a8:	0018      	movs	r0, r3
 80004aa:	f001 f933 	bl	8001714 <HAL_RCC_OscConfig>
 80004ae:	1e03      	subs	r3, r0, #0
 80004b0:	d001      	beq.n	80004b6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 80004b2:	f000 f8e3 	bl	800067c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004b6:	211c      	movs	r1, #28
 80004b8:	187b      	adds	r3, r7, r1
 80004ba:	2207      	movs	r2, #7
 80004bc:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004be:	187b      	adds	r3, r7, r1
 80004c0:	2200      	movs	r2, #0
 80004c2:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004c4:	187b      	adds	r3, r7, r1
 80004c6:	2200      	movs	r2, #0
 80004c8:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004ca:	187b      	adds	r3, r7, r1
 80004cc:	2200      	movs	r2, #0
 80004ce:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2100      	movs	r1, #0
 80004d4:	0018      	movs	r0, r3
 80004d6:	f001 fc33 	bl	8001d40 <HAL_RCC_ClockConfig>
 80004da:	1e03      	subs	r3, r0, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80004de:	f000 f8cd 	bl	800067c <Error_Handler>
  }
  /** Initializes the peripherals clocks 
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80004e2:	003b      	movs	r3, r7
 80004e4:	2202      	movs	r2, #2
 80004e6:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80004e8:	003b      	movs	r3, r7
 80004ea:	2200      	movs	r2, #0
 80004ec:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004ee:	003b      	movs	r3, r7
 80004f0:	0018      	movs	r0, r3
 80004f2:	f001 fdcf 	bl	8002094 <HAL_RCCEx_PeriphCLKConfig>
 80004f6:	1e03      	subs	r3, r0, #0
 80004f8:	d001      	beq.n	80004fe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80004fa:	f000 f8bf 	bl	800067c <Error_Handler>
  }
}
 80004fe:	46c0      	nop			; (mov r8, r8)
 8000500:	46bd      	mov	sp, r7
 8000502:	b019      	add	sp, #100	; 0x64
 8000504:	bd90      	pop	{r4, r7, pc}
	...

08000508 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800050c:	4b23      	ldr	r3, [pc, #140]	; (800059c <MX_USART2_UART_Init+0x94>)
 800050e:	4a24      	ldr	r2, [pc, #144]	; (80005a0 <MX_USART2_UART_Init+0x98>)
 8000510:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000512:	4b22      	ldr	r3, [pc, #136]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000514:	22e1      	movs	r2, #225	; 0xe1
 8000516:	0252      	lsls	r2, r2, #9
 8000518:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800051a:	4b20      	ldr	r3, [pc, #128]	; (800059c <MX_USART2_UART_Init+0x94>)
 800051c:	2200      	movs	r2, #0
 800051e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000520:	4b1e      	ldr	r3, [pc, #120]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000522:	2200      	movs	r2, #0
 8000524:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000526:	4b1d      	ldr	r3, [pc, #116]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800052c:	4b1b      	ldr	r3, [pc, #108]	; (800059c <MX_USART2_UART_Init+0x94>)
 800052e:	220c      	movs	r2, #12
 8000530:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000532:	4b1a      	ldr	r3, [pc, #104]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000538:	4b18      	ldr	r3, [pc, #96]	; (800059c <MX_USART2_UART_Init+0x94>)
 800053a:	2200      	movs	r2, #0
 800053c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800053e:	4b17      	ldr	r3, [pc, #92]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000540:	2200      	movs	r2, #0
 8000542:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000544:	4b15      	ldr	r3, [pc, #84]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800054a:	4b14      	ldr	r3, [pc, #80]	; (800059c <MX_USART2_UART_Init+0x94>)
 800054c:	2200      	movs	r2, #0
 800054e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000550:	4b12      	ldr	r3, [pc, #72]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000552:	0018      	movs	r0, r3
 8000554:	f001 fed4 	bl	8002300 <HAL_UART_Init>
 8000558:	1e03      	subs	r3, r0, #0
 800055a:	d001      	beq.n	8000560 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 800055c:	f000 f88e 	bl	800067c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000560:	4b0e      	ldr	r3, [pc, #56]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000562:	2100      	movs	r1, #0
 8000564:	0018      	movs	r0, r3
 8000566:	f003 f8c5 	bl	80036f4 <HAL_UARTEx_SetTxFifoThreshold>
 800056a:	1e03      	subs	r3, r0, #0
 800056c:	d001      	beq.n	8000572 <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800056e:	f000 f885 	bl	800067c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000572:	4b0a      	ldr	r3, [pc, #40]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000574:	2100      	movs	r1, #0
 8000576:	0018      	movs	r0, r3
 8000578:	f003 f8fc 	bl	8003774 <HAL_UARTEx_SetRxFifoThreshold>
 800057c:	1e03      	subs	r3, r0, #0
 800057e:	d001      	beq.n	8000584 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000580:	f000 f87c 	bl	800067c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000584:	4b05      	ldr	r3, [pc, #20]	; (800059c <MX_USART2_UART_Init+0x94>)
 8000586:	0018      	movs	r0, r3
 8000588:	f003 f87a 	bl	8003680 <HAL_UARTEx_DisableFifoMode>
 800058c:	1e03      	subs	r3, r0, #0
 800058e:	d001      	beq.n	8000594 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000590:	f000 f874 	bl	800067c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000594:	46c0      	nop			; (mov r8, r8)
 8000596:	46bd      	mov	sp, r7
 8000598:	bd80      	pop	{r7, pc}
 800059a:	46c0      	nop			; (mov r8, r8)
 800059c:	200011ac 	.word	0x200011ac
 80005a0:	40004400 	.word	0x40004400

080005a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005a4:	b590      	push	{r4, r7, lr}
 80005a6:	b089      	sub	sp, #36	; 0x24
 80005a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005aa:	240c      	movs	r4, #12
 80005ac:	193b      	adds	r3, r7, r4
 80005ae:	0018      	movs	r0, r3
 80005b0:	2314      	movs	r3, #20
 80005b2:	001a      	movs	r2, r3
 80005b4:	2100      	movs	r1, #0
 80005b6:	f004 fea6 	bl	8005306 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ba:	4b29      	ldr	r3, [pc, #164]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005bc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005be:	4b28      	ldr	r3, [pc, #160]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005c0:	2104      	movs	r1, #4
 80005c2:	430a      	orrs	r2, r1
 80005c4:	635a      	str	r2, [r3, #52]	; 0x34
 80005c6:	4b26      	ldr	r3, [pc, #152]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ca:	2204      	movs	r2, #4
 80005cc:	4013      	ands	r3, r2
 80005ce:	60bb      	str	r3, [r7, #8]
 80005d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005d2:	4b23      	ldr	r3, [pc, #140]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005d6:	4b22      	ldr	r3, [pc, #136]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005d8:	2120      	movs	r1, #32
 80005da:	430a      	orrs	r2, r1
 80005dc:	635a      	str	r2, [r3, #52]	; 0x34
 80005de:	4b20      	ldr	r3, [pc, #128]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005e2:	2220      	movs	r2, #32
 80005e4:	4013      	ands	r3, r2
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005ea:	4b1d      	ldr	r3, [pc, #116]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005ee:	4b1c      	ldr	r3, [pc, #112]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005f0:	2101      	movs	r1, #1
 80005f2:	430a      	orrs	r2, r1
 80005f4:	635a      	str	r2, [r3, #52]	; 0x34
 80005f6:	4b1a      	ldr	r3, [pc, #104]	; (8000660 <MX_GPIO_Init+0xbc>)
 80005f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005fa:	2201      	movs	r2, #1
 80005fc:	4013      	ands	r3, r2
 80005fe:	603b      	str	r3, [r7, #0]
 8000600:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000602:	23a0      	movs	r3, #160	; 0xa0
 8000604:	05db      	lsls	r3, r3, #23
 8000606:	2200      	movs	r2, #0
 8000608:	2120      	movs	r1, #32
 800060a:	0018      	movs	r0, r3
 800060c:	f001 f819 	bl	8001642 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000610:	193b      	adds	r3, r7, r4
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	0192      	lsls	r2, r2, #6
 8000616:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	2200      	movs	r2, #0
 800061c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	2200      	movs	r2, #0
 8000622:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000624:	193b      	adds	r3, r7, r4
 8000626:	4a0f      	ldr	r2, [pc, #60]	; (8000664 <MX_GPIO_Init+0xc0>)
 8000628:	0019      	movs	r1, r3
 800062a:	0010      	movs	r0, r2
 800062c:	f000 fe88 	bl	8001340 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000630:	0021      	movs	r1, r4
 8000632:	187b      	adds	r3, r7, r1
 8000634:	2220      	movs	r2, #32
 8000636:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000638:	187b      	adds	r3, r7, r1
 800063a:	2201      	movs	r2, #1
 800063c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	187b      	adds	r3, r7, r1
 8000640:	2200      	movs	r2, #0
 8000642:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	187b      	adds	r3, r7, r1
 8000646:	2200      	movs	r2, #0
 8000648:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	187a      	adds	r2, r7, r1
 800064c:	23a0      	movs	r3, #160	; 0xa0
 800064e:	05db      	lsls	r3, r3, #23
 8000650:	0011      	movs	r1, r2
 8000652:	0018      	movs	r0, r3
 8000654:	f000 fe74 	bl	8001340 <HAL_GPIO_Init>

}
 8000658:	46c0      	nop			; (mov r8, r8)
 800065a:	46bd      	mov	sp, r7
 800065c:	b009      	add	sp, #36	; 0x24
 800065e:	bd90      	pop	{r4, r7, pc}
 8000660:	40021000 	.word	0x40021000
 8000664:	50000800 	.word	0x50000800

08000668 <StartDefaultTask>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  for(;;)
  {
//		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
//		osDelay(500);
//		HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
		osDelay(500);
 8000670:	23fa      	movs	r3, #250	; 0xfa
 8000672:	005b      	lsls	r3, r3, #1
 8000674:	0018      	movs	r0, r3
 8000676:	f003 f972 	bl	800395e <osDelay>
 800067a:	e7f9      	b.n	8000670 <StartDefaultTask+0x8>

0800067c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000680:	46c0      	nop			; (mov r8, r8)
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
	...

08000688 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <HAL_MspInit+0x50>)
 8000690:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <HAL_MspInit+0x50>)
 8000694:	2101      	movs	r1, #1
 8000696:	430a      	orrs	r2, r1
 8000698:	641a      	str	r2, [r3, #64]	; 0x40
 800069a:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <HAL_MspInit+0x50>)
 800069c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800069e:	2201      	movs	r2, #1
 80006a0:	4013      	ands	r3, r2
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a6:	4b0c      	ldr	r3, [pc, #48]	; (80006d8 <HAL_MspInit+0x50>)
 80006a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006aa:	4b0b      	ldr	r3, [pc, #44]	; (80006d8 <HAL_MspInit+0x50>)
 80006ac:	2180      	movs	r1, #128	; 0x80
 80006ae:	0549      	lsls	r1, r1, #21
 80006b0:	430a      	orrs	r2, r1
 80006b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80006b4:	4b08      	ldr	r3, [pc, #32]	; (80006d8 <HAL_MspInit+0x50>)
 80006b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80006b8:	2380      	movs	r3, #128	; 0x80
 80006ba:	055b      	lsls	r3, r3, #21
 80006bc:	4013      	ands	r3, r2
 80006be:	603b      	str	r3, [r7, #0]
 80006c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 80006c2:	2302      	movs	r3, #2
 80006c4:	425b      	negs	r3, r3
 80006c6:	2200      	movs	r2, #0
 80006c8:	2103      	movs	r1, #3
 80006ca:	0018      	movs	r0, r3
 80006cc:	f000 fd8c 	bl	80011e8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d0:	46c0      	nop			; (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	b002      	add	sp, #8
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	40021000 	.word	0x40021000

080006dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b08a      	sub	sp, #40	; 0x28
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006e4:	2314      	movs	r3, #20
 80006e6:	18fb      	adds	r3, r7, r3
 80006e8:	0018      	movs	r0, r3
 80006ea:	2314      	movs	r3, #20
 80006ec:	001a      	movs	r2, r3
 80006ee:	2100      	movs	r1, #0
 80006f0:	f004 fe09 	bl	8005306 <memset>
  if(huart->Instance==USART2)
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a1f      	ldr	r2, [pc, #124]	; (8000778 <HAL_UART_MspInit+0x9c>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d138      	bne.n	8000770 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006fe:	4b1f      	ldr	r3, [pc, #124]	; (800077c <HAL_UART_MspInit+0xa0>)
 8000700:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000702:	4b1e      	ldr	r3, [pc, #120]	; (800077c <HAL_UART_MspInit+0xa0>)
 8000704:	2180      	movs	r1, #128	; 0x80
 8000706:	0289      	lsls	r1, r1, #10
 8000708:	430a      	orrs	r2, r1
 800070a:	63da      	str	r2, [r3, #60]	; 0x3c
 800070c:	4b1b      	ldr	r3, [pc, #108]	; (800077c <HAL_UART_MspInit+0xa0>)
 800070e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000710:	2380      	movs	r3, #128	; 0x80
 8000712:	029b      	lsls	r3, r3, #10
 8000714:	4013      	ands	r3, r2
 8000716:	613b      	str	r3, [r7, #16]
 8000718:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	4b18      	ldr	r3, [pc, #96]	; (800077c <HAL_UART_MspInit+0xa0>)
 800071c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <HAL_UART_MspInit+0xa0>)
 8000720:	2101      	movs	r1, #1
 8000722:	430a      	orrs	r2, r1
 8000724:	635a      	str	r2, [r3, #52]	; 0x34
 8000726:	4b15      	ldr	r3, [pc, #84]	; (800077c <HAL_UART_MspInit+0xa0>)
 8000728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800072a:	2201      	movs	r2, #1
 800072c:	4013      	ands	r3, r2
 800072e:	60fb      	str	r3, [r7, #12]
 8000730:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000732:	2114      	movs	r1, #20
 8000734:	187b      	adds	r3, r7, r1
 8000736:	220c      	movs	r2, #12
 8000738:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800073a:	187b      	adds	r3, r7, r1
 800073c:	2202      	movs	r2, #2
 800073e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	187b      	adds	r3, r7, r1
 8000742:	2200      	movs	r2, #0
 8000744:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000746:	187b      	adds	r3, r7, r1
 8000748:	2200      	movs	r2, #0
 800074a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 800074c:	187b      	adds	r3, r7, r1
 800074e:	2201      	movs	r2, #1
 8000750:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000752:	187a      	adds	r2, r7, r1
 8000754:	23a0      	movs	r3, #160	; 0xa0
 8000756:	05db      	lsls	r3, r3, #23
 8000758:	0011      	movs	r1, r2
 800075a:	0018      	movs	r0, r3
 800075c:	f000 fdf0 	bl	8001340 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2103      	movs	r1, #3
 8000764:	201c      	movs	r0, #28
 8000766:	f000 fd3f 	bl	80011e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800076a:	201c      	movs	r0, #28
 800076c:	f000 fd51 	bl	8001212 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000770:	46c0      	nop			; (mov r8, r8)
 8000772:	46bd      	mov	sp, r7
 8000774:	b00a      	add	sp, #40	; 0x28
 8000776:	bd80      	pop	{r7, pc}
 8000778:	40004400 	.word	0x40004400
 800077c:	40021000 	.word	0x40021000

08000780 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000784:	46c0      	nop			; (mov r8, r8)
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}

0800078a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800078a:	b580      	push	{r7, lr}
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800078e:	e7fe      	b.n	800078e <HardFault_Handler+0x4>

08000790 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000794:	f000 fc62 	bl	800105c <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8000798:	f004 f9e8 	bl	8004b6c <xTaskGetSchedulerState>
 800079c:	0003      	movs	r3, r0
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d001      	beq.n	80007a6 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80007a2:	f004 fba1 	bl	8004ee8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}

080007ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007b0:	4b03      	ldr	r3, [pc, #12]	; (80007c0 <USART2_IRQHandler+0x14>)
 80007b2:	0018      	movs	r0, r3
 80007b4:	f001 fe94 	bl	80024e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007b8:	46c0      	nop			; (mov r8, r8)
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	46c0      	nop			; (mov r8, r8)
 80007c0:	200011ac 	.word	0x200011ac

080007c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80007c8:	4b03      	ldr	r3, [pc, #12]	; (80007d8 <SystemInit+0x14>)
 80007ca:	2280      	movs	r2, #128	; 0x80
 80007cc:	0512      	lsls	r2, r2, #20
 80007ce:	609a      	str	r2, [r3, #8]
#endif
}
 80007d0:	46c0      	nop			; (mov r8, r8)
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	e000ed00 	.word	0xe000ed00

080007dc <application>:

TaskHandle_t xHandle = NULL;


void application(void)
{
 80007dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007de:	b085      	sub	sp, #20
 80007e0:	af02      	add	r7, sp, #8
    volatile uint8_t i = 0;
 80007e2:	1dfb      	adds	r3, r7, #7
 80007e4:	2200      	movs	r2, #0
 80007e6:	701a      	strb	r2, [r3, #0]
    volatile uint8_t TaskStatus = 0;
 80007e8:	1dbb      	adds	r3, r7, #6
 80007ea:	2200      	movs	r2, #0
 80007ec:	701a      	strb	r2, [r3, #0]

    for( i = 0; i< MAXMUM_TASK; i++)
 80007ee:	1dfb      	adds	r3, r7, #7
 80007f0:	2200      	movs	r2, #0
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	e05e      	b.n	80008b4 <application+0xd8>
    {
        if( pdPASS !=  xTaskCreate(sysTask[i].vTaskfunPtr, sysTask[i].vTaskName, sysTask[i].stacksize, sysTask[i].VTaskparaeter, sysTask[i].VtaskPriority, sysTask[i].pxCreatedTask) )
 80007f6:	1dfb      	adds	r3, r7, #7
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	b2db      	uxtb	r3, r3
 80007fc:	0019      	movs	r1, r3
 80007fe:	4a3f      	ldr	r2, [pc, #252]	; (80008fc <application+0x120>)
 8000800:	000b      	movs	r3, r1
 8000802:	00db      	lsls	r3, r3, #3
 8000804:	185b      	adds	r3, r3, r1
 8000806:	009b      	lsls	r3, r3, #2
 8000808:	589c      	ldr	r4, [r3, r2]
 800080a:	1dfb      	adds	r3, r7, #7
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	b2db      	uxtb	r3, r3
 8000810:	001a      	movs	r2, r3
 8000812:	0013      	movs	r3, r2
 8000814:	00db      	lsls	r3, r3, #3
 8000816:	189b      	adds	r3, r3, r2
 8000818:	009b      	lsls	r3, r3, #2
 800081a:	4a38      	ldr	r2, [pc, #224]	; (80008fc <application+0x120>)
 800081c:	189b      	adds	r3, r3, r2
 800081e:	1d1d      	adds	r5, r3, #4
 8000820:	1dfb      	adds	r3, r7, #7
 8000822:	781b      	ldrb	r3, [r3, #0]
 8000824:	b2db      	uxtb	r3, r3
 8000826:	0019      	movs	r1, r3
 8000828:	4a34      	ldr	r2, [pc, #208]	; (80008fc <application+0x120>)
 800082a:	000b      	movs	r3, r1
 800082c:	00db      	lsls	r3, r3, #3
 800082e:	185b      	adds	r3, r3, r1
 8000830:	009b      	lsls	r3, r3, #2
 8000832:	18d3      	adds	r3, r2, r3
 8000834:	3314      	adds	r3, #20
 8000836:	881e      	ldrh	r6, [r3, #0]
 8000838:	1dfb      	adds	r3, r7, #7
 800083a:	781b      	ldrb	r3, [r3, #0]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	0019      	movs	r1, r3
 8000840:	4a2e      	ldr	r2, [pc, #184]	; (80008fc <application+0x120>)
 8000842:	000b      	movs	r3, r1
 8000844:	00db      	lsls	r3, r3, #3
 8000846:	185b      	adds	r3, r3, r1
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	18d3      	adds	r3, r2, r3
 800084c:	3318      	adds	r3, #24
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	469c      	mov	ip, r3
 8000852:	1dfb      	adds	r3, r7, #7
 8000854:	781b      	ldrb	r3, [r3, #0]
 8000856:	b2db      	uxtb	r3, r3
 8000858:	0019      	movs	r1, r3
 800085a:	4a28      	ldr	r2, [pc, #160]	; (80008fc <application+0x120>)
 800085c:	000b      	movs	r3, r1
 800085e:	00db      	lsls	r3, r3, #3
 8000860:	185b      	adds	r3, r3, r1
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	18d3      	adds	r3, r2, r3
 8000866:	331c      	adds	r3, #28
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	1dfb      	adds	r3, r7, #7
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	0018      	movs	r0, r3
 8000872:	4922      	ldr	r1, [pc, #136]	; (80008fc <application+0x120>)
 8000874:	0003      	movs	r3, r0
 8000876:	00db      	lsls	r3, r3, #3
 8000878:	181b      	adds	r3, r3, r0
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	18cb      	adds	r3, r1, r3
 800087e:	3320      	adds	r3, #32
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	9301      	str	r3, [sp, #4]
 8000884:	9200      	str	r2, [sp, #0]
 8000886:	4663      	mov	r3, ip
 8000888:	0032      	movs	r2, r6
 800088a:	0029      	movs	r1, r5
 800088c:	0020      	movs	r0, r4
 800088e:	f003 fcac 	bl	80041ea <xTaskCreate>
 8000892:	0003      	movs	r3, r0
 8000894:	2b01      	cmp	r3, #1
 8000896:	d006      	beq.n	80008a6 <application+0xca>
        {
            TaskStatus++;
 8000898:	1dbb      	adds	r3, r7, #6
 800089a:	781b      	ldrb	r3, [r3, #0]
 800089c:	b2db      	uxtb	r3, r3
 800089e:	3301      	adds	r3, #1
 80008a0:	b2da      	uxtb	r2, r3
 80008a2:	1dbb      	adds	r3, r7, #6
 80008a4:	701a      	strb	r2, [r3, #0]
    for( i = 0; i< MAXMUM_TASK; i++)
 80008a6:	1dfb      	adds	r3, r7, #7
 80008a8:	781b      	ldrb	r3, [r3, #0]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	3301      	adds	r3, #1
 80008ae:	b2da      	uxtb	r2, r3
 80008b0:	1dfb      	adds	r3, r7, #7
 80008b2:	701a      	strb	r2, [r3, #0]
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	2b02      	cmp	r3, #2
 80008bc:	d99b      	bls.n	80007f6 <application+0x1a>
        }
    }

    if( 0 != TaskStatus )       //!< If any of the task not created successfully, freeze here !
 80008be:	1dbb      	adds	r3, r7, #6
 80008c0:	781b      	ldrb	r3, [r3, #0]
 80008c2:	b2db      	uxtb	r3, r3
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d000      	beq.n	80008ca <application+0xee>
    {
        while(1);
 80008c8:	e7fe      	b.n	80008c8 <application+0xec>
    }

    gKeyDetectQ = xQueueCreate( 3, sizeof(keyReadStatus_t));    //!< 3 number of keys can stored inside.
 80008ca:	2200      	movs	r2, #0
 80008cc:	2114      	movs	r1, #20
 80008ce:	2003      	movs	r0, #3
 80008d0:	f003 f956 	bl	8003b80 <xQueueGenericCreate>
 80008d4:	0002      	movs	r2, r0
 80008d6:	4b0a      	ldr	r3, [pc, #40]	; (8000900 <application+0x124>)
 80008d8:	601a      	str	r2, [r3, #0]
    if( NULL == gKeyDetectQ )
 80008da:	4b09      	ldr	r3, [pc, #36]	; (8000900 <application+0x124>)
 80008dc:	681b      	ldr	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d100      	bne.n	80008e4 <application+0x108>
    {
        while(1);
 80008e2:	e7fe      	b.n	80008e2 <application+0x106>
    }

    xMutexDebugUart = xSemaphoreCreateMutex();
 80008e4:	2001      	movs	r0, #1
 80008e6:	f003 f9b9 	bl	8003c5c <xQueueCreateMutex>
 80008ea:	0002      	movs	r2, r0
 80008ec:	4b05      	ldr	r3, [pc, #20]	; (8000904 <application+0x128>)
 80008ee:	601a      	str	r2, [r3, #0]
        // TURN ON ERROR LED;
    }


    /* Start scheduler */
    osKernelStart();
 80008f0:	f003 f805 	bl	80038fe <osKernelStart>
}
 80008f4:	46c0      	nop			; (mov r8, r8)
 80008f6:	46bd      	mov	sp, r7
 80008f8:	b003      	add	sp, #12
 80008fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008fc:	080053e8 	.word	0x080053e8
 8000900:	20001238 	.word	0x20001238
 8000904:	2000002c 	.word	0x2000002c

08000908 <buttonTask>:
 *Para1:- argument
 *Return:-N/A
 *Details:-  Main task body for button..
 **********************************************************************************/
void buttonTask(void const * argument)
{
 8000908:	b590      	push	{r4, r7, lr}
 800090a:	b085      	sub	sp, #20
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    uint8_t i = 0;
 8000910:	230f      	movs	r3, #15
 8000912:	18fb      	adds	r3, r7, r3
 8000914:	2200      	movs	r2, #0
 8000916:	701a      	strb	r2, [r3, #0]
    bool tempPinStatus;

    (void) argument;            //!< Just ignore the parameter.
    intiButton();               //!< Initialize button
 8000918:	f000 f8a6 	bl	8000a68 <intiButton>

    for ( ;; )
    {
        mKeyStatus.newStatus = 0;      //!< Reset before read all key
 800091c:	4b4e      	ldr	r3, [pc, #312]	; (8000a58 <buttonTask+0x150>)
 800091e:	2200      	movs	r2, #0
 8000920:	605a      	str	r2, [r3, #4]

        for ( i = CLEAR; i < MAXIMUM_BUTTON; i++ )      //!< Read all the keys one-by-one.
 8000922:	230f      	movs	r3, #15
 8000924:	18fb      	adds	r3, r7, r3
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]
 800092a:	e08a      	b.n	8000a42 <buttonTask+0x13a>
        {
            tempPinStatus = READ_PIN(key [ i ].port, key [ i ].pinConfig.Pin);
 800092c:	240f      	movs	r4, #15
 800092e:	193b      	adds	r3, r7, r4
 8000930:	781a      	ldrb	r2, [r3, #0]
 8000932:	494a      	ldr	r1, [pc, #296]	; (8000a5c <buttonTask+0x154>)
 8000934:	0013      	movs	r3, r2
 8000936:	00db      	lsls	r3, r3, #3
 8000938:	1a9b      	subs	r3, r3, r2
 800093a:	009b      	lsls	r3, r3, #2
 800093c:	5858      	ldr	r0, [r3, r1]
 800093e:	193b      	adds	r3, r7, r4
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	4946      	ldr	r1, [pc, #280]	; (8000a5c <buttonTask+0x154>)
 8000944:	0013      	movs	r3, r2
 8000946:	00db      	lsls	r3, r3, #3
 8000948:	1a9b      	subs	r3, r3, r2
 800094a:	009b      	lsls	r3, r3, #2
 800094c:	18cb      	adds	r3, r1, r3
 800094e:	3304      	adds	r3, #4
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	b29b      	uxth	r3, r3
 8000954:	0019      	movs	r1, r3
 8000956:	f000 fe57 	bl	8001608 <HAL_GPIO_ReadPin>
 800095a:	0003      	movs	r3, r0
 800095c:	001a      	movs	r2, r3
 800095e:	200e      	movs	r0, #14
 8000960:	183b      	adds	r3, r7, r0
 8000962:	1e51      	subs	r1, r2, #1
 8000964:	418a      	sbcs	r2, r1
 8000966:	701a      	strb	r2, [r3, #0]

            if ( tempPinStatus )           //!< Update pin status / voltage level on corresponding bit.
 8000968:	183b      	adds	r3, r7, r0
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b00      	cmp	r3, #0
 800096e:	d009      	beq.n	8000984 <buttonTask+0x7c>
            {
                mKeyStatus.newStatus = (SET << i);
 8000970:	230f      	movs	r3, #15
 8000972:	18fb      	adds	r3, r7, r3
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2201      	movs	r2, #1
 8000978:	409a      	lsls	r2, r3
 800097a:	0013      	movs	r3, r2
 800097c:	001a      	movs	r2, r3
 800097e:	4b36      	ldr	r3, [pc, #216]	; (8000a58 <buttonTask+0x150>)
 8000980:	605a      	str	r2, [r3, #4]
 8000982:	e00b      	b.n	800099c <buttonTask+0x94>
            }
            else
            {
                mKeyStatus.newStatus &= ~(SET << i);
 8000984:	4b34      	ldr	r3, [pc, #208]	; (8000a58 <buttonTask+0x150>)
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	220f      	movs	r2, #15
 800098a:	18ba      	adds	r2, r7, r2
 800098c:	7812      	ldrb	r2, [r2, #0]
 800098e:	2101      	movs	r1, #1
 8000990:	4091      	lsls	r1, r2
 8000992:	000a      	movs	r2, r1
 8000994:	43d2      	mvns	r2, r2
 8000996:	401a      	ands	r2, r3
 8000998:	4b2f      	ldr	r3, [pc, #188]	; (8000a58 <buttonTask+0x150>)
 800099a:	605a      	str	r2, [r3, #4]
            }



			if ( mKeyStatus.newStatus != mKeyStatus.currentStatus )             //!< Some key pressed now !
 800099c:	4b2e      	ldr	r3, [pc, #184]	; (8000a58 <buttonTask+0x150>)
 800099e:	685a      	ldr	r2, [r3, #4]
 80009a0:	4b2d      	ldr	r3, [pc, #180]	; (8000a58 <buttonTask+0x150>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	429a      	cmp	r2, r3
 80009a6:	d046      	beq.n	8000a36 <buttonTask+0x12e>
			{
				if ( mKeyStatus.latchedStatus == mKeyStatus.newStatus )          //!< if it was detected before
 80009a8:	4b2b      	ldr	r3, [pc, #172]	; (8000a58 <buttonTask+0x150>)
 80009aa:	689a      	ldr	r2, [r3, #8]
 80009ac:	4b2a      	ldr	r3, [pc, #168]	; (8000a58 <buttonTask+0x150>)
 80009ae:	685b      	ldr	r3, [r3, #4]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d13c      	bne.n	8000a2e <buttonTask+0x126>
				{
					if ( KEY_DEBOUNCE_CNT <= mKeyStatus.debounceCnt++ )
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <buttonTask+0x150>)
 80009b6:	7c1b      	ldrb	r3, [r3, #16]
 80009b8:	1c5a      	adds	r2, r3, #1
 80009ba:	b2d1      	uxtb	r1, r2
 80009bc:	4a26      	ldr	r2, [pc, #152]	; (8000a58 <buttonTask+0x150>)
 80009be:	7411      	strb	r1, [r2, #16]
 80009c0:	2b02      	cmp	r3, #2
 80009c2:	d938      	bls.n	8000a36 <buttonTask+0x12e>
					{
						mKeyStatus.whichKey = mKeyStatus.currentStatus ^ mKeyStatus.newStatus;
 80009c4:	4b24      	ldr	r3, [pc, #144]	; (8000a58 <buttonTask+0x150>)
 80009c6:	681a      	ldr	r2, [r3, #0]
 80009c8:	4b23      	ldr	r3, [pc, #140]	; (8000a58 <buttonTask+0x150>)
 80009ca:	685b      	ldr	r3, [r3, #4]
 80009cc:	405a      	eors	r2, r3
 80009ce:	4b22      	ldr	r3, [pc, #136]	; (8000a58 <buttonTask+0x150>)
 80009d0:	60da      	str	r2, [r3, #12]
						mKeyStatus.currentStatus = mKeyStatus.latchedStatus;        //!< Update detected/accepted key
 80009d2:	4b21      	ldr	r3, [pc, #132]	; (8000a58 <buttonTask+0x150>)
 80009d4:	689a      	ldr	r2, [r3, #8]
 80009d6:	4b20      	ldr	r3, [pc, #128]	; (8000a58 <buttonTask+0x150>)
 80009d8:	601a      	str	r2, [r3, #0]


						//mKeyStatus.keyStat = (tempPinStatus == key[i].defaultState ) ? PRESSED : RELEASED;

						if ( key[i].keyDetectStat == tempPinStatus )
 80009da:	230f      	movs	r3, #15
 80009dc:	18fb      	adds	r3, r7, r3
 80009de:	781a      	ldrb	r2, [r3, #0]
 80009e0:	491e      	ldr	r1, [pc, #120]	; (8000a5c <buttonTask+0x154>)
 80009e2:	0013      	movs	r3, r2
 80009e4:	00db      	lsls	r3, r3, #3
 80009e6:	1a9b      	subs	r3, r3, r2
 80009e8:	009b      	lsls	r3, r3, #2
 80009ea:	18cb      	adds	r3, r1, r3
 80009ec:	3319      	adds	r3, #25
 80009ee:	781a      	ldrb	r2, [r3, #0]
 80009f0:	230e      	movs	r3, #14
 80009f2:	18fb      	adds	r3, r7, r3
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	429a      	cmp	r2, r3
 80009f8:	d112      	bne.n	8000a20 <buttonTask+0x118>
						{
							keyMsgData.whichKey = 0;
 80009fa:	4b19      	ldr	r3, [pc, #100]	; (8000a60 <buttonTask+0x158>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	711a      	strb	r2, [r3, #4]

								do
								{
									mKeyStatus.whichKey>>=1;
 8000a00:	4b15      	ldr	r3, [pc, #84]	; (8000a58 <buttonTask+0x150>)
 8000a02:	68db      	ldr	r3, [r3, #12]
 8000a04:	085a      	lsrs	r2, r3, #1
 8000a06:	4b14      	ldr	r3, [pc, #80]	; (8000a58 <buttonTask+0x150>)
 8000a08:	60da      	str	r2, [r3, #12]
								}while ( RESET != mKeyStatus.whichKey );
 8000a0a:	4b13      	ldr	r3, [pc, #76]	; (8000a58 <buttonTask+0x150>)
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d1f6      	bne.n	8000a00 <buttonTask+0xf8>

							// SEND RELEASE MESSAGE
							xQueueSend( gKeyDetectQ, &mKeyStatus, CLEAR);       //!< Send Message immediately
 8000a12:	4b14      	ldr	r3, [pc, #80]	; (8000a64 <buttonTask+0x15c>)
 8000a14:	6818      	ldr	r0, [r3, #0]
 8000a16:	4910      	ldr	r1, [pc, #64]	; (8000a58 <buttonTask+0x150>)
 8000a18:	2300      	movs	r3, #0
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f003 f93a 	bl	8003c94 <xQueueGenericSend>
						}

						mKeyStatus.debounceCnt = 0;
 8000a20:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <buttonTask+0x150>)
 8000a22:	2200      	movs	r2, #0
 8000a24:	741a      	strb	r2, [r3, #16]
						mKeyStatus.latchedStatus = 0;
 8000a26:	4b0c      	ldr	r3, [pc, #48]	; (8000a58 <buttonTask+0x150>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
 8000a2c:	e003      	b.n	8000a36 <buttonTask+0x12e>
					}
				}
				else
				{
					mKeyStatus.latchedStatus = mKeyStatus.newStatus;        //!< first change detected.
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <buttonTask+0x150>)
 8000a30:	685a      	ldr	r2, [r3, #4]
 8000a32:	4b09      	ldr	r3, [pc, #36]	; (8000a58 <buttonTask+0x150>)
 8000a34:	609a      	str	r2, [r3, #8]
        for ( i = CLEAR; i < MAXIMUM_BUTTON; i++ )      //!< Read all the keys one-by-one.
 8000a36:	210f      	movs	r1, #15
 8000a38:	187b      	adds	r3, r7, r1
 8000a3a:	781a      	ldrb	r2, [r3, #0]
 8000a3c:	187b      	adds	r3, r7, r1
 8000a3e:	3201      	adds	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
 8000a42:	230f      	movs	r3, #15
 8000a44:	18fb      	adds	r3, r7, r3
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d100      	bne.n	8000a4e <buttonTask+0x146>
 8000a4c:	e76e      	b.n	800092c <buttonTask+0x24>
				}
			}

        }

        vTaskDelay(KEY_POLLING_INTERVEL);
 8000a4e:	200a      	movs	r0, #10
 8000a50:	f003 fcf2 	bl	8004438 <vTaskDelay>
        mKeyStatus.newStatus = 0;      //!< Reset before read all key
 8000a54:	e762      	b.n	800091c <buttonTask+0x14>
 8000a56:	46c0      	nop			; (mov r8, r8)
 8000a58:	2000123c 	.word	0x2000123c
 8000a5c:	08005454 	.word	0x08005454
 8000a60:	20001250 	.word	0x20001250
 8000a64:	20001238 	.word	0x20001238

08000a68 <intiButton>:
 *Return:-N/A
 *Details:-  Initialize all the button gpio pins as per the configuration structure data.
 *NOTE : THIS INITIALIZATION BLOCK MAY BE NEED CHANGE FOR DIFFERENT PLATFORM/DRIVER
 **********************************************************************************/
void intiButton(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b082      	sub	sp, #8
 8000a6c:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]

    for ( i = 0; i < MAXIMUM_BUTTON; i++ )
 8000a74:	1dfb      	adds	r3, r7, #7
 8000a76:	2200      	movs	r2, #0
 8000a78:	701a      	strb	r2, [r3, #0]
 8000a7a:	e018      	b.n	8000aae <intiButton+0x46>
    {
        PIN_INIT( (key [ i ].port), &(key[i].pinConfig));      //!< Macro defined in buttonWrapper.h. May be need to change if required.
 8000a7c:	1dfb      	adds	r3, r7, #7
 8000a7e:	781a      	ldrb	r2, [r3, #0]
 8000a80:	490f      	ldr	r1, [pc, #60]	; (8000ac0 <intiButton+0x58>)
 8000a82:	0013      	movs	r3, r2
 8000a84:	00db      	lsls	r3, r3, #3
 8000a86:	1a9b      	subs	r3, r3, r2
 8000a88:	009b      	lsls	r3, r3, #2
 8000a8a:	5858      	ldr	r0, [r3, r1]
 8000a8c:	1dfb      	adds	r3, r7, #7
 8000a8e:	781a      	ldrb	r2, [r3, #0]
 8000a90:	0013      	movs	r3, r2
 8000a92:	00db      	lsls	r3, r3, #3
 8000a94:	1a9b      	subs	r3, r3, r2
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	4a09      	ldr	r2, [pc, #36]	; (8000ac0 <intiButton+0x58>)
 8000a9a:	189b      	adds	r3, r3, r2
 8000a9c:	3304      	adds	r3, #4
 8000a9e:	0019      	movs	r1, r3
 8000aa0:	f000 fc4e 	bl	8001340 <HAL_GPIO_Init>
    for ( i = 0; i < MAXIMUM_BUTTON; i++ )
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	781a      	ldrb	r2, [r3, #0]
 8000aa8:	1dfb      	adds	r3, r7, #7
 8000aaa:	3201      	adds	r2, #1
 8000aac:	701a      	strb	r2, [r3, #0]
 8000aae:	1dfb      	adds	r3, r7, #7
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d0e2      	beq.n	8000a7c <intiButton+0x14>
    }
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	b002      	add	sp, #8
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	08005454 	.word	0x08005454

08000ac4 <debugconsoleTask>:
bool mDebugConInit = false;
uint8_t name[] = "Jithu...";


void debugconsoleTask(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0


    if( ! debugConsoleInit() )
 8000ac8:	f000 f816 	bl	8000af8 <debugConsoleInit>
 8000acc:	0003      	movs	r3, r0
 8000ace:	001a      	movs	r2, r3
 8000ad0:	2301      	movs	r3, #1
 8000ad2:	4053      	eors	r3, r2
 8000ad4:	b2db      	uxtb	r3, r3
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d000      	beq.n	8000adc <debugconsoleTask+0x18>
    {
        while(1);           ///!< If uart initialization failed, don't run the task
 8000ada:	e7fe      	b.n	8000ada <debugconsoleTask+0x16>
    }

    for (;;)
    {
        debugTextValue("\nNOW I CAN PRINT TEST & VALUES\t", 157, DECIMAL );
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <debugconsoleTask+0x30>)
 8000ade:	220a      	movs	r2, #10
 8000ae0:	219d      	movs	r1, #157	; 0x9d
 8000ae2:	0018      	movs	r0, r3
 8000ae4:	f000 f88e 	bl	8000c04 <debugTextValue>
        vTaskDelay(2000);
 8000ae8:	23fa      	movs	r3, #250	; 0xfa
 8000aea:	00db      	lsls	r3, r3, #3
 8000aec:	0018      	movs	r0, r3
 8000aee:	f003 fca3 	bl	8004438 <vTaskDelay>
        debugTextValue("\nNOW I CAN PRINT TEST & VALUES\t", 157, DECIMAL );
 8000af2:	e7f3      	b.n	8000adc <debugconsoleTask+0x18>
 8000af4:	08005350 	.word	0x08005350

08000af8 <debugConsoleInit>:
 *Para1:- N/A
 *Return:-N/A
 *Details:-  Initialize the uart used for debug.
 **********************************************************************************/
static bool debugConsoleInit( void )
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af00      	add	r7, sp, #0

    bool returnValue = true;
 8000afe:	1dfb      	adds	r3, r7, #7
 8000b00:	2201      	movs	r2, #1
 8000b02:	701a      	strb	r2, [r3, #0]
     /* USER CODE END USART2_Init  */
     huart2.Instance = USART2;
 8000b04:	4b1a      	ldr	r3, [pc, #104]	; (8000b70 <debugConsoleInit+0x78>)
 8000b06:	4a1b      	ldr	r2, [pc, #108]	; (8000b74 <debugConsoleInit+0x7c>)
 8000b08:	601a      	str	r2, [r3, #0]
     huart2.Init.BaudRate = 115200;
 8000b0a:	4b19      	ldr	r3, [pc, #100]	; (8000b70 <debugConsoleInit+0x78>)
 8000b0c:	22e1      	movs	r2, #225	; 0xe1
 8000b0e:	0252      	lsls	r2, r2, #9
 8000b10:	605a      	str	r2, [r3, #4]
     huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b12:	4b17      	ldr	r3, [pc, #92]	; (8000b70 <debugConsoleInit+0x78>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	609a      	str	r2, [r3, #8]
     huart2.Init.StopBits = UART_STOPBITS_1;
 8000b18:	4b15      	ldr	r3, [pc, #84]	; (8000b70 <debugConsoleInit+0x78>)
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	60da      	str	r2, [r3, #12]
     huart2.Init.Parity = UART_PARITY_NONE;
 8000b1e:	4b14      	ldr	r3, [pc, #80]	; (8000b70 <debugConsoleInit+0x78>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	611a      	str	r2, [r3, #16]
     huart2.Init.Mode = UART_MODE_TX_RX;
 8000b24:	4b12      	ldr	r3, [pc, #72]	; (8000b70 <debugConsoleInit+0x78>)
 8000b26:	220c      	movs	r2, #12
 8000b28:	615a      	str	r2, [r3, #20]
     huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b2a:	4b11      	ldr	r3, [pc, #68]	; (8000b70 <debugConsoleInit+0x78>)
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	619a      	str	r2, [r3, #24]
     huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b30:	4b0f      	ldr	r3, [pc, #60]	; (8000b70 <debugConsoleInit+0x78>)
 8000b32:	2200      	movs	r2, #0
 8000b34:	61da      	str	r2, [r3, #28]
     if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b36:	4b0e      	ldr	r3, [pc, #56]	; (8000b70 <debugConsoleInit+0x78>)
 8000b38:	0018      	movs	r0, r3
 8000b3a:	f001 fbe1 	bl	8002300 <HAL_UART_Init>
 8000b3e:	1e03      	subs	r3, r0, #0
 8000b40:	d003      	beq.n	8000b4a <debugConsoleInit+0x52>
     {
         returnValue = false;
 8000b42:	1dfb      	adds	r3, r7, #7
 8000b44:	2200      	movs	r2, #0
 8000b46:	701a      	strb	r2, [r3, #0]
 8000b48:	e007      	b.n	8000b5a <debugConsoleInit+0x62>
       // Error_Handler(); NEED TO ADD error handling function.
     }else
     {
         __HAL_UART_ENABLE_IT(&huart2, UART_IT_TC);
 8000b4a:	4b09      	ldr	r3, [pc, #36]	; (8000b70 <debugConsoleInit+0x78>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	681a      	ldr	r2, [r3, #0]
 8000b50:	4b07      	ldr	r3, [pc, #28]	; (8000b70 <debugConsoleInit+0x78>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	2140      	movs	r1, #64	; 0x40
 8000b56:	430a      	orrs	r2, r1
 8000b58:	601a      	str	r2, [r3, #0]
     }



     mDebugConInit = returnValue;
 8000b5a:	4b07      	ldr	r3, [pc, #28]	; (8000b78 <debugConsoleInit+0x80>)
 8000b5c:	1dfa      	adds	r2, r7, #7
 8000b5e:	7812      	ldrb	r2, [r2, #0]
 8000b60:	701a      	strb	r2, [r3, #0]
     return ( returnValue );
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	781b      	ldrb	r3, [r3, #0]

}
 8000b66:	0018      	movs	r0, r3
 8000b68:	46bd      	mov	sp, r7
 8000b6a:	b002      	add	sp, #8
 8000b6c:	bd80      	pop	{r7, pc}
 8000b6e:	46c0      	nop			; (mov r8, r8)
 8000b70:	200011ac 	.word	0x200011ac
 8000b74:	40004400 	.word	0x40004400
 8000b78:	20000062 	.word	0x20000062

08000b7c <debugText>:
 *Para1:- debugMsg
 *Return:-N/A
 *Details:-
 **********************************************************************************/
bool debugText( const char *debugMsg )
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
    char *msg =(char*) debugMsg;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	60bb      	str	r3, [r7, #8]
    bool returnValue = false;
 8000b88:	230f      	movs	r3, #15
 8000b8a:	18fb      	adds	r3, r7, r3
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	701a      	strb	r2, [r3, #0]

    if( mDebugConInit )
 8000b90:	4b0d      	ldr	r3, [pc, #52]	; (8000bc8 <debugText+0x4c>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	2b00      	cmp	r3, #0
 8000b96:	d010      	beq.n	8000bba <debugText+0x3e>
    {
        if( HAL_OK == HAL_UART_Transmit_IT(&huart2, (uint8_t *)msg, strlen(msg)) )
 8000b98:	68bb      	ldr	r3, [r7, #8]
 8000b9a:	0018      	movs	r0, r3
 8000b9c:	f7ff fab4 	bl	8000108 <strlen>
 8000ba0:	0003      	movs	r3, r0
 8000ba2:	b29a      	uxth	r2, r3
 8000ba4:	68b9      	ldr	r1, [r7, #8]
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <debugText+0x50>)
 8000ba8:	0018      	movs	r0, r3
 8000baa:	f001 fbff 	bl	80023ac <HAL_UART_Transmit_IT>
 8000bae:	1e03      	subs	r3, r0, #0
 8000bb0:	d103      	bne.n	8000bba <debugText+0x3e>
        {
            returnValue = true;
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	18fb      	adds	r3, r7, r3
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
        }
    }

    return ( returnValue );
 8000bba:	230f      	movs	r3, #15
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	781b      	ldrb	r3, [r3, #0]
}
 8000bc0:	0018      	movs	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	b004      	add	sp, #16
 8000bc6:	bd80      	pop	{r7, pc}
 8000bc8:	20000062 	.word	0x20000062
 8000bcc:	200011ac 	.word	0x200011ac

08000bd0 <debugValue>:
 *Para3:- baseValue
 *Return:- PASS / FAIL
 *Details:-
 **********************************************************************************/
bool debugValue( uint32_t value, uint8_t baseValue)
{
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b082      	sub	sp, #8
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
 8000bd8:	000a      	movs	r2, r1
 8000bda:	1cfb      	adds	r3, r7, #3
 8000bdc:	701a      	strb	r2, [r3, #0]

    IntToText(value, baseValue, tempBuff);
 8000bde:	4a08      	ldr	r2, [pc, #32]	; (8000c00 <debugValue+0x30>)
 8000be0:	1cfb      	adds	r3, r7, #3
 8000be2:	7819      	ldrb	r1, [r3, #0]
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	0018      	movs	r0, r3
 8000be8:	f000 f82e 	bl	8000c48 <IntToText>
    debugText( tempBuff );
 8000bec:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <debugValue+0x30>)
 8000bee:	0018      	movs	r0, r3
 8000bf0:	f7ff ffc4 	bl	8000b7c <debugText>

    return 1;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	0018      	movs	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	b002      	add	sp, #8
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	46c0      	nop			; (mov r8, r8)
 8000c00:	20000030 	.word	0x20000030

08000c04 <debugTextValue>:
 *Para3:- baseValue
 *Return:-N/A
 *Details:-
 **********************************************************************************/
bool debugTextValue( const char *debugMsg, uint32_t value, uint8_t baseValue )
{
 8000c04:	b5b0      	push	{r4, r5, r7, lr}
 8000c06:	b086      	sub	sp, #24
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	60f8      	str	r0, [r7, #12]
 8000c0c:	60b9      	str	r1, [r7, #8]
 8000c0e:	1dfb      	adds	r3, r7, #7
 8000c10:	701a      	strb	r2, [r3, #0]
    bool returnValue = false;
 8000c12:	2517      	movs	r5, #23
 8000c14:	197b      	adds	r3, r7, r5
 8000c16:	2200      	movs	r2, #0
 8000c18:	701a      	strb	r2, [r3, #0]

    returnValue = debugText( debugMsg );
 8000c1a:	197c      	adds	r4, r7, r5
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	0018      	movs	r0, r3
 8000c20:	f7ff ffac 	bl	8000b7c <debugText>
 8000c24:	0003      	movs	r3, r0
 8000c26:	7023      	strb	r3, [r4, #0]
    vTaskDelay(100);
 8000c28:	2064      	movs	r0, #100	; 0x64
 8000c2a:	f003 fc05 	bl	8004438 <vTaskDelay>
    debugValue( value, baseValue );
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781a      	ldrb	r2, [r3, #0]
 8000c32:	68bb      	ldr	r3, [r7, #8]
 8000c34:	0011      	movs	r1, r2
 8000c36:	0018      	movs	r0, r3
 8000c38:	f7ff ffca 	bl	8000bd0 <debugValue>

    return returnValue;
 8000c3c:	197b      	adds	r3, r7, r5
 8000c3e:	781b      	ldrb	r3, [r3, #0]
}
 8000c40:	0018      	movs	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	b006      	add	sp, #24
 8000c46:	bdb0      	pop	{r4, r5, r7, pc}

08000c48 <IntToText>:
 *Para3:- str  ( pointer to buffer )
 *Return:-N/A
 *Details:-
 **********************************************************************************/
bool IntToText(uint32_t value, uint8_t base, char * str )
{
 8000c48:	b590      	push	{r4, r7, lr}
 8000c4a:	b089      	sub	sp, #36	; 0x24
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	60f8      	str	r0, [r7, #12]
 8000c50:	607a      	str	r2, [r7, #4]
 8000c52:	230b      	movs	r3, #11
 8000c54:	18fb      	adds	r3, r7, r3
 8000c56:	1c0a      	adds	r2, r1, #0
 8000c58:	701a      	strb	r2, [r3, #0]
    uint32_t temp = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	617b      	str	r3, [r7, #20]
    uint8_t i = 0;
 8000c5e:	231f      	movs	r3, #31
 8000c60:	18fb      	adds	r3, r7, r3
 8000c62:	2200      	movs	r2, #0
 8000c64:	701a      	strb	r2, [r3, #0]
    uint32_t division = value;
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	61bb      	str	r3, [r7, #24]

    if( 0 == division )
 8000c6a:	69bb      	ldr	r3, [r7, #24]
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d146      	bne.n	8000cfe <IntToText+0xb6>
    {
        *(str+i++) = temp|0x30;
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	b2da      	uxtb	r2, r3
 8000c74:	211f      	movs	r1, #31
 8000c76:	187b      	adds	r3, r7, r1
 8000c78:	781b      	ldrb	r3, [r3, #0]
 8000c7a:	1879      	adds	r1, r7, r1
 8000c7c:	1c58      	adds	r0, r3, #1
 8000c7e:	7008      	strb	r0, [r1, #0]
 8000c80:	0019      	movs	r1, r3
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	185b      	adds	r3, r3, r1
 8000c86:	2130      	movs	r1, #48	; 0x30
 8000c88:	430a      	orrs	r2, r1
 8000c8a:	b2d2      	uxtb	r2, r2
 8000c8c:	701a      	strb	r2, [r3, #0]
 8000c8e:	e039      	b.n	8000d04 <IntToText+0xbc>
    }else
    {
        while ( 0 != division )
        {
            temp = division%base;
 8000c90:	240b      	movs	r4, #11
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	781a      	ldrb	r2, [r3, #0]
 8000c96:	69bb      	ldr	r3, [r7, #24]
 8000c98:	0011      	movs	r1, r2
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f7ff fac2 	bl	8000224 <__aeabi_uidivmod>
 8000ca0:	000b      	movs	r3, r1
 8000ca2:	617b      	str	r3, [r7, #20]
            division /= base;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	0019      	movs	r1, r3
 8000caa:	69b8      	ldr	r0, [r7, #24]
 8000cac:	f7ff fa34 	bl	8000118 <__udivsi3>
 8000cb0:	0003      	movs	r3, r0
 8000cb2:	61bb      	str	r3, [r7, #24]

            if( ( base == HEX ) && (temp >= DECIMAL) )
 8000cb4:	193b      	adds	r3, r7, r4
 8000cb6:	781b      	ldrb	r3, [r3, #0]
 8000cb8:	2b10      	cmp	r3, #16
 8000cba:	d111      	bne.n	8000ce0 <IntToText+0x98>
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	2b09      	cmp	r3, #9
 8000cc0:	d90e      	bls.n	8000ce0 <IntToText+0x98>
                *(str+i++) = (temp - DECIMAL ) + 'A';
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	b2da      	uxtb	r2, r3
 8000cc6:	211f      	movs	r1, #31
 8000cc8:	187b      	adds	r3, r7, r1
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	1879      	adds	r1, r7, r1
 8000cce:	1c58      	adds	r0, r3, #1
 8000cd0:	7008      	strb	r0, [r1, #0]
 8000cd2:	0019      	movs	r1, r3
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	185b      	adds	r3, r3, r1
 8000cd8:	3237      	adds	r2, #55	; 0x37
 8000cda:	b2d2      	uxtb	r2, r2
 8000cdc:	701a      	strb	r2, [r3, #0]
 8000cde:	e00e      	b.n	8000cfe <IntToText+0xb6>
            else
                *(str+i++) = temp|0x30;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	b2da      	uxtb	r2, r3
 8000ce4:	211f      	movs	r1, #31
 8000ce6:	187b      	adds	r3, r7, r1
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	1879      	adds	r1, r7, r1
 8000cec:	1c58      	adds	r0, r3, #1
 8000cee:	7008      	strb	r0, [r1, #0]
 8000cf0:	0019      	movs	r1, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	185b      	adds	r3, r3, r1
 8000cf6:	2130      	movs	r1, #48	; 0x30
 8000cf8:	430a      	orrs	r2, r1
 8000cfa:	b2d2      	uxtb	r2, r2
 8000cfc:	701a      	strb	r2, [r3, #0]
        while ( 0 != division )
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d1c5      	bne.n	8000c90 <IntToText+0x48>
        }
    }

    *(str+i) = '\0';
 8000d04:	211f      	movs	r1, #31
 8000d06:	187b      	adds	r3, r7, r1
 8000d08:	781b      	ldrb	r3, [r3, #0]
 8000d0a:	687a      	ldr	r2, [r7, #4]
 8000d0c:	18d3      	adds	r3, r2, r3
 8000d0e:	2200      	movs	r2, #0
 8000d10:	701a      	strb	r2, [r3, #0]

    reverseStr(str, i);
 8000d12:	187b      	adds	r3, r7, r1
 8000d14:	781a      	ldrb	r2, [r3, #0]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	0011      	movs	r1, r2
 8000d1a:	0018      	movs	r0, r3
 8000d1c:	f000 f805 	bl	8000d2a <reverseStr>
    return true;
 8000d20:	2301      	movs	r3, #1
}
 8000d22:	0018      	movs	r0, r3
 8000d24:	46bd      	mov	sp, r7
 8000d26:	b009      	add	sp, #36	; 0x24
 8000d28:	bd90      	pop	{r4, r7, pc}

08000d2a <reverseStr>:
 *Para2:- size of the string.
 *Return:-N/A
 *Details:-
 **********************************************************************************/
void reverseStr(char *str, uint8_t size)
{
 8000d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000d2c:	b085      	sub	sp, #20
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
 8000d32:	000a      	movs	r2, r1
 8000d34:	1cfb      	adds	r3, r7, #3
 8000d36:	701a      	strb	r2, [r3, #0]
    uint8_t i = size-1;
 8000d38:	210f      	movs	r1, #15
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	1cfa      	adds	r2, r7, #3
 8000d3e:	7812      	ldrb	r2, [r2, #0]
 8000d40:	3a01      	subs	r2, #1
 8000d42:	701a      	strb	r2, [r3, #0]
    uint8_t j = 0;
 8000d44:	230e      	movs	r3, #14
 8000d46:	18fb      	adds	r3, r7, r3
 8000d48:	2200      	movs	r2, #0
 8000d4a:	701a      	strb	r2, [r3, #0]
    uint8_t temp = i;
 8000d4c:	230d      	movs	r3, #13
 8000d4e:	18fb      	adds	r3, r7, r3
 8000d50:	187a      	adds	r2, r7, r1
 8000d52:	7812      	ldrb	r2, [r2, #0]
 8000d54:	701a      	strb	r2, [r3, #0]

    do
    {
        temp     = *(str+j);
 8000d56:	250e      	movs	r5, #14
 8000d58:	197b      	adds	r3, r7, r5
 8000d5a:	781b      	ldrb	r3, [r3, #0]
 8000d5c:	687a      	ldr	r2, [r7, #4]
 8000d5e:	18d2      	adds	r2, r2, r3
 8000d60:	260d      	movs	r6, #13
 8000d62:	19bb      	adds	r3, r7, r6
 8000d64:	7812      	ldrb	r2, [r2, #0]
 8000d66:	701a      	strb	r2, [r3, #0]
        *(str+j++) = *(str+i);
 8000d68:	240f      	movs	r4, #15
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	781b      	ldrb	r3, [r3, #0]
 8000d6e:	687a      	ldr	r2, [r7, #4]
 8000d70:	18d2      	adds	r2, r2, r3
 8000d72:	197b      	adds	r3, r7, r5
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	1979      	adds	r1, r7, r5
 8000d78:	1c58      	adds	r0, r3, #1
 8000d7a:	7008      	strb	r0, [r1, #0]
 8000d7c:	0019      	movs	r1, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	185b      	adds	r3, r3, r1
 8000d82:	7812      	ldrb	r2, [r2, #0]
 8000d84:	701a      	strb	r2, [r3, #0]
        *(str+i--) = temp;
 8000d86:	193b      	adds	r3, r7, r4
 8000d88:	781b      	ldrb	r3, [r3, #0]
 8000d8a:	193a      	adds	r2, r7, r4
 8000d8c:	1e59      	subs	r1, r3, #1
 8000d8e:	7011      	strb	r1, [r2, #0]
 8000d90:	001a      	movs	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	189b      	adds	r3, r3, r2
 8000d96:	19ba      	adds	r2, r7, r6
 8000d98:	7812      	ldrb	r2, [r2, #0]
 8000d9a:	701a      	strb	r2, [r3, #0]
        temp = i/2;
 8000d9c:	19bb      	adds	r3, r7, r6
 8000d9e:	193a      	adds	r2, r7, r4
 8000da0:	7812      	ldrb	r2, [r2, #0]
 8000da2:	0852      	lsrs	r2, r2, #1
 8000da4:	701a      	strb	r2, [r3, #0]
    }while( i > j );
 8000da6:	193a      	adds	r2, r7, r4
 8000da8:	197b      	adds	r3, r7, r5
 8000daa:	7812      	ldrb	r2, [r2, #0]
 8000dac:	781b      	ldrb	r3, [r3, #0]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d8d1      	bhi.n	8000d56 <reverseStr+0x2c>

}
 8000db2:	46c0      	nop			; (mov r8, r8)
 8000db4:	46bd      	mov	sp, r7
 8000db6:	b005      	add	sp, #20
 8000db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08000dbc <ledTask>:
void ledTurnOff(  eLedName_t ledName  );

keyMsgData_t mkeyDetectedPtr;

void ledTask(void const * argument)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b082      	sub	sp, #8
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
    static char status = 0;
    (void) argument;            //!< Just ignore the parameter.

    intLed();               //!< Initialize Led
 8000dc4:	f000 f828 	bl	8000e18 <intLed>


  for(;;)
  {
      while( 0 != uxQueueMessagesWaiting( gKeyDetectQ ))
 8000dc8:	e018      	b.n	8000dfc <ledTask+0x40>
      {
          if( pdPASS == xQueueReceive( gKeyDetectQ, &mkeyDetectedPtr, 0) )
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <ledTask+0x50>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	4910      	ldr	r1, [pc, #64]	; (8000e10 <ledTask+0x54>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	0018      	movs	r0, r3
 8000dd4:	f003 f822 	bl	8003e1c <xQueueReceive>
 8000dd8:	0003      	movs	r3, r0
 8000dda:	2b01      	cmp	r3, #1
 8000ddc:	d10e      	bne.n	8000dfc <ledTask+0x40>
          {

              if( 0 == status )
 8000dde:	4b0d      	ldr	r3, [pc, #52]	; (8000e14 <ledTask+0x58>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d105      	bne.n	8000df2 <ledTask+0x36>
              {
                  status = 1;
 8000de6:	4b0b      	ldr	r3, [pc, #44]	; (8000e14 <ledTask+0x58>)
 8000de8:	2201      	movs	r2, #1
 8000dea:	701a      	strb	r2, [r3, #0]
                  ledTurnOnAll();
 8000dec:	f000 f842 	bl	8000e74 <ledTurnOnAll>
 8000df0:	e004      	b.n	8000dfc <ledTask+0x40>
              }else
              {
                  status = 0;
 8000df2:	4b08      	ldr	r3, [pc, #32]	; (8000e14 <ledTask+0x58>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	701a      	strb	r2, [r3, #0]
                  ledTurnOffAll();
 8000df8:	f000 f86c 	bl	8000ed4 <ledTurnOffAll>
      while( 0 != uxQueueMessagesWaiting( gKeyDetectQ ))
 8000dfc:	4b03      	ldr	r3, [pc, #12]	; (8000e0c <ledTask+0x50>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	0018      	movs	r0, r3
 8000e02:	f003 f8c0 	bl	8003f86 <uxQueueMessagesWaiting>
 8000e06:	1e03      	subs	r3, r0, #0
 8000e08:	d1df      	bne.n	8000dca <ledTask+0xe>
 8000e0a:	e7f7      	b.n	8000dfc <ledTask+0x40>
 8000e0c:	20001238 	.word	0x20001238
 8000e10:	20001258 	.word	0x20001258
 8000e14:	20000063 	.word	0x20000063

08000e18 <intLed>:
 *Para1 :N/A
 *Return:N/A
 *Note: Initialize all LED pins configured on 'led' structure.
 ************************************************************************************/
void intLed(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8000e1e:	1dfb      	adds	r3, r7, #7
 8000e20:	2200      	movs	r2, #0
 8000e22:	701a      	strb	r2, [r3, #0]

    for ( i = 0; i < MAXIMUM_LED; i++ )
 8000e24:	1dfb      	adds	r3, r7, #7
 8000e26:	2200      	movs	r2, #0
 8000e28:	701a      	strb	r2, [r3, #0]
 8000e2a:	e018      	b.n	8000e5e <intLed+0x46>
    {
        PIN_INIT( (led[ i ].port), &(led[i].pinConfig));      //!< Macro defined in buttonWrapper.h. May be need to change if required.
 8000e2c:	1dfb      	adds	r3, r7, #7
 8000e2e:	781a      	ldrb	r2, [r3, #0]
 8000e30:	490f      	ldr	r1, [pc, #60]	; (8000e70 <intLed+0x58>)
 8000e32:	0013      	movs	r3, r2
 8000e34:	00db      	lsls	r3, r3, #3
 8000e36:	1a9b      	subs	r3, r3, r2
 8000e38:	009b      	lsls	r3, r3, #2
 8000e3a:	5858      	ldr	r0, [r3, r1]
 8000e3c:	1dfb      	adds	r3, r7, #7
 8000e3e:	781a      	ldrb	r2, [r3, #0]
 8000e40:	0013      	movs	r3, r2
 8000e42:	00db      	lsls	r3, r3, #3
 8000e44:	1a9b      	subs	r3, r3, r2
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	4a09      	ldr	r2, [pc, #36]	; (8000e70 <intLed+0x58>)
 8000e4a:	189b      	adds	r3, r3, r2
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	0019      	movs	r1, r3
 8000e50:	f000 fa76 	bl	8001340 <HAL_GPIO_Init>
    for ( i = 0; i < MAXIMUM_LED; i++ )
 8000e54:	1dfb      	adds	r3, r7, #7
 8000e56:	781a      	ldrb	r2, [r3, #0]
 8000e58:	1dfb      	adds	r3, r7, #7
 8000e5a:	3201      	adds	r2, #1
 8000e5c:	701a      	strb	r2, [r3, #0]
 8000e5e:	1dfb      	adds	r3, r7, #7
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d0e2      	beq.n	8000e2c <intLed+0x14>
    }
}
 8000e66:	46c0      	nop			; (mov r8, r8)
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	b002      	add	sp, #8
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	46c0      	nop			; (mov r8, r8)
 8000e70:	08005470 	.word	0x08005470

08000e74 <ledTurnOnAll>:
 *Para1 :N/A
 *Return:N/A
 *Note: Turn ON all LEDs
 ************************************************************************************/
void ledTurnOnAll( void )
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8000e7a:	1dfb      	adds	r3, r7, #7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	701a      	strb	r2, [r3, #0]

    for ( i = 0; i < MAXIMUM_LED; i++ )
 8000e80:	1dfb      	adds	r3, r7, #7
 8000e82:	2200      	movs	r2, #0
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	e01b      	b.n	8000ec0 <ledTurnOnAll+0x4c>
    {
        WRITE_PIN((led[ i ].port), led[i].pinConfig.Pin, LED_ON );
 8000e88:	1dfb      	adds	r3, r7, #7
 8000e8a:	781a      	ldrb	r2, [r3, #0]
 8000e8c:	4910      	ldr	r1, [pc, #64]	; (8000ed0 <ledTurnOnAll+0x5c>)
 8000e8e:	0013      	movs	r3, r2
 8000e90:	00db      	lsls	r3, r3, #3
 8000e92:	1a9b      	subs	r3, r3, r2
 8000e94:	009b      	lsls	r3, r3, #2
 8000e96:	5858      	ldr	r0, [r3, r1]
 8000e98:	1dfb      	adds	r3, r7, #7
 8000e9a:	781a      	ldrb	r2, [r3, #0]
 8000e9c:	490c      	ldr	r1, [pc, #48]	; (8000ed0 <ledTurnOnAll+0x5c>)
 8000e9e:	0013      	movs	r3, r2
 8000ea0:	00db      	lsls	r3, r3, #3
 8000ea2:	1a9b      	subs	r3, r3, r2
 8000ea4:	009b      	lsls	r3, r3, #2
 8000ea6:	18cb      	adds	r3, r1, r3
 8000ea8:	3304      	adds	r3, #4
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	b29b      	uxth	r3, r3
 8000eae:	2201      	movs	r2, #1
 8000eb0:	0019      	movs	r1, r3
 8000eb2:	f000 fbc6 	bl	8001642 <HAL_GPIO_WritePin>
    for ( i = 0; i < MAXIMUM_LED; i++ )
 8000eb6:	1dfb      	adds	r3, r7, #7
 8000eb8:	781a      	ldrb	r2, [r3, #0]
 8000eba:	1dfb      	adds	r3, r7, #7
 8000ebc:	3201      	adds	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
 8000ec0:	1dfb      	adds	r3, r7, #7
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0df      	beq.n	8000e88 <ledTurnOnAll+0x14>
    }
}
 8000ec8:	46c0      	nop			; (mov r8, r8)
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	b002      	add	sp, #8
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	08005470 	.word	0x08005470

08000ed4 <ledTurnOffAll>:
 *Para1 :N/A
 *Return:N/A
 *Note: Turn OFF all LEDs
 ************************************************************************************/
void ledTurnOffAll( void )
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b082      	sub	sp, #8
 8000ed8:	af00      	add	r7, sp, #0
    uint8_t i = 0;
 8000eda:	1dfb      	adds	r3, r7, #7
 8000edc:	2200      	movs	r2, #0
 8000ede:	701a      	strb	r2, [r3, #0]

    for ( i = 0; i < MAXIMUM_LED; i++ )
 8000ee0:	1dfb      	adds	r3, r7, #7
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	701a      	strb	r2, [r3, #0]
 8000ee6:	e01b      	b.n	8000f20 <ledTurnOffAll+0x4c>
    {
        WRITE_PIN((led[i].port), led[i].pinConfig.Pin, LED_OFF );
 8000ee8:	1dfb      	adds	r3, r7, #7
 8000eea:	781a      	ldrb	r2, [r3, #0]
 8000eec:	4910      	ldr	r1, [pc, #64]	; (8000f30 <ledTurnOffAll+0x5c>)
 8000eee:	0013      	movs	r3, r2
 8000ef0:	00db      	lsls	r3, r3, #3
 8000ef2:	1a9b      	subs	r3, r3, r2
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	5858      	ldr	r0, [r3, r1]
 8000ef8:	1dfb      	adds	r3, r7, #7
 8000efa:	781a      	ldrb	r2, [r3, #0]
 8000efc:	490c      	ldr	r1, [pc, #48]	; (8000f30 <ledTurnOffAll+0x5c>)
 8000efe:	0013      	movs	r3, r2
 8000f00:	00db      	lsls	r3, r3, #3
 8000f02:	1a9b      	subs	r3, r3, r2
 8000f04:	009b      	lsls	r3, r3, #2
 8000f06:	18cb      	adds	r3, r1, r3
 8000f08:	3304      	adds	r3, #4
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	2200      	movs	r2, #0
 8000f10:	0019      	movs	r1, r3
 8000f12:	f000 fb96 	bl	8001642 <HAL_GPIO_WritePin>
    for ( i = 0; i < MAXIMUM_LED; i++ )
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	781a      	ldrb	r2, [r3, #0]
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	3201      	adds	r2, #1
 8000f1e:	701a      	strb	r2, [r3, #0]
 8000f20:	1dfb      	adds	r3, r7, #7
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	2b00      	cmp	r3, #0
 8000f26:	d0df      	beq.n	8000ee8 <ledTurnOffAll+0x14>
    }
}
 8000f28:	46c0      	nop			; (mov r8, r8)
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	b002      	add	sp, #8
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	08005470 	.word	0x08005470

08000f34 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f34:	480d      	ldr	r0, [pc, #52]	; (8000f6c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f36:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000f38:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000f3a:	e003      	b.n	8000f44 <LoopCopyDataInit>

08000f3c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000f3c:	4b0c      	ldr	r3, [pc, #48]	; (8000f70 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000f3e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000f40:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000f42:	3104      	adds	r1, #4

08000f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000f44:	480b      	ldr	r0, [pc, #44]	; (8000f74 <LoopForever+0xa>)
  ldr r3, =_edata
 8000f46:	4b0c      	ldr	r3, [pc, #48]	; (8000f78 <LoopForever+0xe>)
  adds r2, r0, r1
 8000f48:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000f4a:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000f4c:	d3f6      	bcc.n	8000f3c <CopyDataInit>
  ldr r2, =_sbss
 8000f4e:	4a0b      	ldr	r2, [pc, #44]	; (8000f7c <LoopForever+0x12>)
  b LoopFillZerobss
 8000f50:	e002      	b.n	8000f58 <LoopFillZerobss>

08000f52 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000f52:	2300      	movs	r3, #0
  str  r3, [r2]
 8000f54:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f56:	3204      	adds	r2, #4

08000f58 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000f58:	4b09      	ldr	r3, [pc, #36]	; (8000f80 <LoopForever+0x16>)
  cmp r2, r3
 8000f5a:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000f5c:	d3f9      	bcc.n	8000f52 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000f5e:	f7ff fc31 	bl	80007c4 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000f62:	f004 f9a3 	bl	80052ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000f66:	f7ff fa4d 	bl	8000404 <main>

08000f6a <LoopForever>:

LoopForever:
    b LoopForever
 8000f6a:	e7fe      	b.n	8000f6a <LoopForever>
  ldr   r0, =_estack
 8000f6c:	20009000 	.word	0x20009000
  ldr r3, =_sidata
 8000f70:	08005494 	.word	0x08005494
  ldr r0, =_sdata
 8000f74:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000f78:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 8000f7c:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 8000f80:	20001264 	.word	0x20001264

08000f84 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000f84:	e7fe      	b.n	8000f84 <ADC1_IRQHandler>
	...

08000f88 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b082      	sub	sp, #8
 8000f8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f8e:	1dfb      	adds	r3, r7, #7
 8000f90:	2200      	movs	r2, #0
 8000f92:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f94:	4b0b      	ldr	r3, [pc, #44]	; (8000fc4 <HAL_Init+0x3c>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_Init+0x3c>)
 8000f9a:	2180      	movs	r1, #128	; 0x80
 8000f9c:	0049      	lsls	r1, r1, #1
 8000f9e:	430a      	orrs	r2, r1
 8000fa0:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fa2:	2003      	movs	r0, #3
 8000fa4:	f000 f810 	bl	8000fc8 <HAL_InitTick>
 8000fa8:	1e03      	subs	r3, r0, #0
 8000faa:	d003      	beq.n	8000fb4 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000fac:	1dfb      	adds	r3, r7, #7
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e001      	b.n	8000fb8 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000fb4:	f7ff fb68 	bl	8000688 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000fb8:	1dfb      	adds	r3, r7, #7
 8000fba:	781b      	ldrb	r3, [r3, #0]
}
 8000fbc:	0018      	movs	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	b002      	add	sp, #8
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	40022000 	.word	0x40022000

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b590      	push	{r4, r7, lr}
 8000fca:	b085      	sub	sp, #20
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000fd0:	230f      	movs	r3, #15
 8000fd2:	18fb      	adds	r3, r7, r3
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	701a      	strb	r2, [r3, #0]

  if (uwTickFreq != 0U)
 8000fd8:	4b1d      	ldr	r3, [pc, #116]	; (8001050 <HAL_InitTick+0x88>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d02b      	beq.n	8001038 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /uwTickFreq)) == 0U)
 8000fe0:	4b1c      	ldr	r3, [pc, #112]	; (8001054 <HAL_InitTick+0x8c>)
 8000fe2:	681c      	ldr	r4, [r3, #0]
 8000fe4:	4b1a      	ldr	r3, [pc, #104]	; (8001050 <HAL_InitTick+0x88>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	0019      	movs	r1, r3
 8000fea:	23fa      	movs	r3, #250	; 0xfa
 8000fec:	0098      	lsls	r0, r3, #2
 8000fee:	f7ff f893 	bl	8000118 <__udivsi3>
 8000ff2:	0003      	movs	r3, r0
 8000ff4:	0019      	movs	r1, r3
 8000ff6:	0020      	movs	r0, r4
 8000ff8:	f7ff f88e 	bl	8000118 <__udivsi3>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	0018      	movs	r0, r3
 8001000:	f000 f917 	bl	8001232 <HAL_SYSTICK_Config>
 8001004:	1e03      	subs	r3, r0, #0
 8001006:	d112      	bne.n	800102e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2b03      	cmp	r3, #3
 800100c:	d80a      	bhi.n	8001024 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800100e:	6879      	ldr	r1, [r7, #4]
 8001010:	2301      	movs	r3, #1
 8001012:	425b      	negs	r3, r3
 8001014:	2200      	movs	r2, #0
 8001016:	0018      	movs	r0, r3
 8001018:	f000 f8e6 	bl	80011e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800101c:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_InitTick+0x90>)
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	e00d      	b.n	8001040 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001024:	230f      	movs	r3, #15
 8001026:	18fb      	adds	r3, r7, r3
 8001028:	2201      	movs	r2, #1
 800102a:	701a      	strb	r2, [r3, #0]
 800102c:	e008      	b.n	8001040 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800102e:	230f      	movs	r3, #15
 8001030:	18fb      	adds	r3, r7, r3
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e003      	b.n	8001040 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001038:	230f      	movs	r3, #15
 800103a:	18fb      	adds	r3, r7, r3
 800103c:	2201      	movs	r2, #1
 800103e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001040:	230f      	movs	r3, #15
 8001042:	18fb      	adds	r3, r7, r3
 8001044:	781b      	ldrb	r3, [r3, #0]
}
 8001046:	0018      	movs	r0, r3
 8001048:	46bd      	mov	sp, r7
 800104a:	b005      	add	sp, #20
 800104c:	bd90      	pop	{r4, r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	20000008 	.word	0x20000008
 8001054:	20000000 	.word	0x20000000
 8001058:	20000004 	.word	0x20000004

0800105c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001060:	4b04      	ldr	r3, [pc, #16]	; (8001074 <HAL_IncTick+0x18>)
 8001062:	681a      	ldr	r2, [r3, #0]
 8001064:	4b04      	ldr	r3, [pc, #16]	; (8001078 <HAL_IncTick+0x1c>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	18d2      	adds	r2, r2, r3
 800106a:	4b02      	ldr	r3, [pc, #8]	; (8001074 <HAL_IncTick+0x18>)
 800106c:	601a      	str	r2, [r3, #0]
}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20001260 	.word	0x20001260
 8001078:	20000008 	.word	0x20000008

0800107c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	af00      	add	r7, sp, #0
  return uwTick;
 8001080:	4b02      	ldr	r3, [pc, #8]	; (800108c <HAL_GetTick+0x10>)
 8001082:	681b      	ldr	r3, [r3, #0]
}
 8001084:	0018      	movs	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	46c0      	nop			; (mov r8, r8)
 800108c:	20001260 	.word	0x20001260

08001090 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	0002      	movs	r2, r0
 8001098:	1dfb      	adds	r3, r7, #7
 800109a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800109c:	1dfb      	adds	r3, r7, #7
 800109e:	781b      	ldrb	r3, [r3, #0]
 80010a0:	2b7f      	cmp	r3, #127	; 0x7f
 80010a2:	d809      	bhi.n	80010b8 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010a4:	1dfb      	adds	r3, r7, #7
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	001a      	movs	r2, r3
 80010aa:	231f      	movs	r3, #31
 80010ac:	401a      	ands	r2, r3
 80010ae:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <__NVIC_EnableIRQ+0x30>)
 80010b0:	2101      	movs	r1, #1
 80010b2:	4091      	lsls	r1, r2
 80010b4:	000a      	movs	r2, r1
 80010b6:	601a      	str	r2, [r3, #0]
  }
}
 80010b8:	46c0      	nop			; (mov r8, r8)
 80010ba:	46bd      	mov	sp, r7
 80010bc:	b002      	add	sp, #8
 80010be:	bd80      	pop	{r7, pc}
 80010c0:	e000e100 	.word	0xe000e100

080010c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010c4:	b590      	push	{r4, r7, lr}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	0002      	movs	r2, r0
 80010cc:	6039      	str	r1, [r7, #0]
 80010ce:	1dfb      	adds	r3, r7, #7
 80010d0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	2b7f      	cmp	r3, #127	; 0x7f
 80010d8:	d828      	bhi.n	800112c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010da:	4a2f      	ldr	r2, [pc, #188]	; (8001198 <__NVIC_SetPriority+0xd4>)
 80010dc:	1dfb      	adds	r3, r7, #7
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	b25b      	sxtb	r3, r3
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	33c0      	adds	r3, #192	; 0xc0
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	589b      	ldr	r3, [r3, r2]
 80010ea:	1dfa      	adds	r2, r7, #7
 80010ec:	7812      	ldrb	r2, [r2, #0]
 80010ee:	0011      	movs	r1, r2
 80010f0:	2203      	movs	r2, #3
 80010f2:	400a      	ands	r2, r1
 80010f4:	00d2      	lsls	r2, r2, #3
 80010f6:	21ff      	movs	r1, #255	; 0xff
 80010f8:	4091      	lsls	r1, r2
 80010fa:	000a      	movs	r2, r1
 80010fc:	43d2      	mvns	r2, r2
 80010fe:	401a      	ands	r2, r3
 8001100:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	019b      	lsls	r3, r3, #6
 8001106:	22ff      	movs	r2, #255	; 0xff
 8001108:	401a      	ands	r2, r3
 800110a:	1dfb      	adds	r3, r7, #7
 800110c:	781b      	ldrb	r3, [r3, #0]
 800110e:	0018      	movs	r0, r3
 8001110:	2303      	movs	r3, #3
 8001112:	4003      	ands	r3, r0
 8001114:	00db      	lsls	r3, r3, #3
 8001116:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001118:	481f      	ldr	r0, [pc, #124]	; (8001198 <__NVIC_SetPriority+0xd4>)
 800111a:	1dfb      	adds	r3, r7, #7
 800111c:	781b      	ldrb	r3, [r3, #0]
 800111e:	b25b      	sxtb	r3, r3
 8001120:	089b      	lsrs	r3, r3, #2
 8001122:	430a      	orrs	r2, r1
 8001124:	33c0      	adds	r3, #192	; 0xc0
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800112a:	e031      	b.n	8001190 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800112c:	4a1b      	ldr	r2, [pc, #108]	; (800119c <__NVIC_SetPriority+0xd8>)
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	0019      	movs	r1, r3
 8001134:	230f      	movs	r3, #15
 8001136:	400b      	ands	r3, r1
 8001138:	3b08      	subs	r3, #8
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	3306      	adds	r3, #6
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	18d3      	adds	r3, r2, r3
 8001142:	3304      	adds	r3, #4
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	1dfa      	adds	r2, r7, #7
 8001148:	7812      	ldrb	r2, [r2, #0]
 800114a:	0011      	movs	r1, r2
 800114c:	2203      	movs	r2, #3
 800114e:	400a      	ands	r2, r1
 8001150:	00d2      	lsls	r2, r2, #3
 8001152:	21ff      	movs	r1, #255	; 0xff
 8001154:	4091      	lsls	r1, r2
 8001156:	000a      	movs	r2, r1
 8001158:	43d2      	mvns	r2, r2
 800115a:	401a      	ands	r2, r3
 800115c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	019b      	lsls	r3, r3, #6
 8001162:	22ff      	movs	r2, #255	; 0xff
 8001164:	401a      	ands	r2, r3
 8001166:	1dfb      	adds	r3, r7, #7
 8001168:	781b      	ldrb	r3, [r3, #0]
 800116a:	0018      	movs	r0, r3
 800116c:	2303      	movs	r3, #3
 800116e:	4003      	ands	r3, r0
 8001170:	00db      	lsls	r3, r3, #3
 8001172:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001174:	4809      	ldr	r0, [pc, #36]	; (800119c <__NVIC_SetPriority+0xd8>)
 8001176:	1dfb      	adds	r3, r7, #7
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	001c      	movs	r4, r3
 800117c:	230f      	movs	r3, #15
 800117e:	4023      	ands	r3, r4
 8001180:	3b08      	subs	r3, #8
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	430a      	orrs	r2, r1
 8001186:	3306      	adds	r3, #6
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	18c3      	adds	r3, r0, r3
 800118c:	3304      	adds	r3, #4
 800118e:	601a      	str	r2, [r3, #0]
}
 8001190:	46c0      	nop			; (mov r8, r8)
 8001192:	46bd      	mov	sp, r7
 8001194:	b003      	add	sp, #12
 8001196:	bd90      	pop	{r4, r7, pc}
 8001198:	e000e100 	.word	0xe000e100
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3b01      	subs	r3, #1
 80011ac:	4a0c      	ldr	r2, [pc, #48]	; (80011e0 <SysTick_Config+0x40>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d901      	bls.n	80011b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011b2:	2301      	movs	r3, #1
 80011b4:	e010      	b.n	80011d8 <SysTick_Config+0x38>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011b6:	4b0b      	ldr	r3, [pc, #44]	; (80011e4 <SysTick_Config+0x44>)
 80011b8:	687a      	ldr	r2, [r7, #4]
 80011ba:	3a01      	subs	r2, #1
 80011bc:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011be:	2301      	movs	r3, #1
 80011c0:	425b      	negs	r3, r3
 80011c2:	2103      	movs	r1, #3
 80011c4:	0018      	movs	r0, r3
 80011c6:	f7ff ff7d 	bl	80010c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011ca:	4b06      	ldr	r3, [pc, #24]	; (80011e4 <SysTick_Config+0x44>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <SysTick_Config+0x44>)
 80011d2:	2207      	movs	r2, #7
 80011d4:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011d6:	2300      	movs	r3, #0
}
 80011d8:	0018      	movs	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	b002      	add	sp, #8
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	00ffffff 	.word	0x00ffffff
 80011e4:	e000e010 	.word	0xe000e010

080011e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
 80011f2:	210f      	movs	r1, #15
 80011f4:	187b      	adds	r3, r7, r1
 80011f6:	1c02      	adds	r2, r0, #0
 80011f8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011fa:	68ba      	ldr	r2, [r7, #8]
 80011fc:	187b      	adds	r3, r7, r1
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	b25b      	sxtb	r3, r3
 8001202:	0011      	movs	r1, r2
 8001204:	0018      	movs	r0, r3
 8001206:	f7ff ff5d 	bl	80010c4 <__NVIC_SetPriority>
}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	46bd      	mov	sp, r7
 800120e:	b004      	add	sp, #16
 8001210:	bd80      	pop	{r7, pc}

08001212 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	b082      	sub	sp, #8
 8001216:	af00      	add	r7, sp, #0
 8001218:	0002      	movs	r2, r0
 800121a:	1dfb      	adds	r3, r7, #7
 800121c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800121e:	1dfb      	adds	r3, r7, #7
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	b25b      	sxtb	r3, r3
 8001224:	0018      	movs	r0, r3
 8001226:	f7ff ff33 	bl	8001090 <__NVIC_EnableIRQ>
}
 800122a:	46c0      	nop			; (mov r8, r8)
 800122c:	46bd      	mov	sp, r7
 800122e:	b002      	add	sp, #8
 8001230:	bd80      	pop	{r7, pc}

08001232 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	0018      	movs	r0, r3
 800123e:	f7ff ffaf 	bl	80011a0 <SysTick_Config>
 8001242:	0003      	movs	r3, r0
}
 8001244:	0018      	movs	r0, r3
 8001246:	46bd      	mov	sp, r7
 8001248:	b002      	add	sp, #8
 800124a:	bd80      	pop	{r7, pc}

0800124c <HAL_DMA_Abort_IT>:
  * @param  hdma    pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b084      	sub	sp, #16
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001254:	230f      	movs	r3, #15
 8001256:	18fb      	adds	r3, r7, r3
 8001258:	2200      	movs	r2, #0
 800125a:	701a      	strb	r2, [r3, #0]

  /* Process Unlocked/locked */
  __HAL_UNLOCK(hdma);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	2224      	movs	r2, #36	; 0x24
 8001260:	2100      	movs	r1, #0
 8001262:	5499      	strb	r1, [r3, r2]
  __HAL_LOCK(hdma);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2224      	movs	r2, #36	; 0x24
 8001268:	5c9b      	ldrb	r3, [r3, r2]
 800126a:	2b01      	cmp	r3, #1
 800126c:	d101      	bne.n	8001272 <HAL_DMA_Abort_IT+0x26>
 800126e:	2302      	movs	r3, #2
 8001270:	e05e      	b.n	8001330 <HAL_DMA_Abort_IT+0xe4>
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2224      	movs	r2, #36	; 0x24
 8001276:	2101      	movs	r1, #1
 8001278:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2225      	movs	r2, #37	; 0x25
 800127e:	5c9b      	ldrb	r3, [r3, r2]
 8001280:	b2db      	uxtb	r3, r3
 8001282:	2b02      	cmp	r3, #2
 8001284:	d007      	beq.n	8001296 <HAL_DMA_Abort_IT+0x4a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2204      	movs	r2, #4
 800128a:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800128c:	230f      	movs	r3, #15
 800128e:	18fb      	adds	r3, r7, r3
 8001290:	2201      	movs	r2, #1
 8001292:	701a      	strb	r2, [r3, #0]
 8001294:	e049      	b.n	800132a <HAL_DMA_Abort_IT+0xde>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	681a      	ldr	r2, [r3, #0]
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	210e      	movs	r1, #14
 80012a2:	438a      	bics	r2, r1
 80012a4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	2101      	movs	r1, #1
 80012b2:	438a      	bics	r2, r1
 80012b4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ba:	681a      	ldr	r2, [r3, #0]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c0:	491d      	ldr	r1, [pc, #116]	; (8001338 <HAL_DMA_Abort_IT+0xec>)
 80012c2:	400a      	ands	r2, r1
 80012c4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1cU)));
 80012c6:	4b1d      	ldr	r3, [pc, #116]	; (800133c <HAL_DMA_Abort_IT+0xf0>)
 80012c8:	6859      	ldr	r1, [r3, #4]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	221c      	movs	r2, #28
 80012d0:	4013      	ands	r3, r2
 80012d2:	2201      	movs	r2, #1
 80012d4:	409a      	lsls	r2, r3
 80012d6:	4b19      	ldr	r3, [pc, #100]	; (800133c <HAL_DMA_Abort_IT+0xf0>)
 80012d8:	430a      	orrs	r2, r1
 80012da:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80012e0:	687a      	ldr	r2, [r7, #4]
 80012e2:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80012e4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d00c      	beq.n	8001308 <HAL_DMA_Abort_IT+0xbc>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f2:	681a      	ldr	r2, [r3, #0]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80012f8:	490f      	ldr	r1, [pc, #60]	; (8001338 <HAL_DMA_Abort_IT+0xec>)
 80012fa:	400a      	ands	r2, r1
 80012fc:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001302:	687a      	ldr	r2, [r7, #4]
 8001304:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001306:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2225      	movs	r2, #37	; 0x25
 800130c:	2101      	movs	r1, #1
 800130e:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2224      	movs	r2, #36	; 0x24
 8001314:	2100      	movs	r1, #0
 8001316:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800131c:	2b00      	cmp	r3, #0
 800131e:	d004      	beq.n	800132a <HAL_DMA_Abort_IT+0xde>
    {
      hdma->XferAbortCallback(hdma);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	0010      	movs	r0, r2
 8001328:	4798      	blx	r3
    }
  }
  return status;
 800132a:	230f      	movs	r3, #15
 800132c:	18fb      	adds	r3, r7, r3
 800132e:	781b      	ldrb	r3, [r3, #0]
}
 8001330:	0018      	movs	r0, r3
 8001332:	46bd      	mov	sp, r7
 8001334:	b004      	add	sp, #16
 8001336:	bd80      	pop	{r7, pc}
 8001338:	fffffeff 	.word	0xfffffeff
 800133c:	40020000 	.word	0x40020000

08001340 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800134a:	2300      	movs	r3, #0
 800134c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800134e:	e147      	b.n	80015e0 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	2101      	movs	r1, #1
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4091      	lsls	r1, r2
 800135a:	000a      	movs	r2, r1
 800135c:	4013      	ands	r3, r2
 800135e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001360:	68fb      	ldr	r3, [r7, #12]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d100      	bne.n	8001368 <HAL_GPIO_Init+0x28>
 8001366:	e138      	b.n	80015da <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001368:	683b      	ldr	r3, [r7, #0]
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	2b02      	cmp	r3, #2
 800136e:	d003      	beq.n	8001378 <HAL_GPIO_Init+0x38>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b12      	cmp	r3, #18
 8001376:	d123      	bne.n	80013c0 <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	0092      	lsls	r2, r2, #2
 8001382:	58d3      	ldr	r3, [r2, r3]
 8001384:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2207      	movs	r2, #7
 800138a:	4013      	ands	r3, r2
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	220f      	movs	r2, #15
 8001390:	409a      	lsls	r2, r3
 8001392:	0013      	movs	r3, r2
 8001394:	43da      	mvns	r2, r3
 8001396:	693b      	ldr	r3, [r7, #16]
 8001398:	4013      	ands	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	691a      	ldr	r2, [r3, #16]
 80013a0:	697b      	ldr	r3, [r7, #20]
 80013a2:	2107      	movs	r1, #7
 80013a4:	400b      	ands	r3, r1
 80013a6:	009b      	lsls	r3, r3, #2
 80013a8:	409a      	lsls	r2, r3
 80013aa:	0013      	movs	r3, r2
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4313      	orrs	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80013b2:	697b      	ldr	r3, [r7, #20]
 80013b4:	08da      	lsrs	r2, r3, #3
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	3208      	adds	r2, #8
 80013ba:	0092      	lsls	r2, r2, #2
 80013bc:	6939      	ldr	r1, [r7, #16]
 80013be:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	2203      	movs	r2, #3
 80013cc:	409a      	lsls	r2, r3
 80013ce:	0013      	movs	r3, r2
 80013d0:	43da      	mvns	r2, r3
 80013d2:	693b      	ldr	r3, [r7, #16]
 80013d4:	4013      	ands	r3, r2
 80013d6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2203      	movs	r2, #3
 80013de:	401a      	ands	r2, r3
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	409a      	lsls	r2, r3
 80013e6:	0013      	movs	r3, r2
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d00b      	beq.n	8001414 <HAL_GPIO_Init+0xd4>
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b02      	cmp	r3, #2
 8001402:	d007      	beq.n	8001414 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001408:	2b11      	cmp	r3, #17
 800140a:	d003      	beq.n	8001414 <HAL_GPIO_Init+0xd4>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	2b12      	cmp	r3, #18
 8001412:	d130      	bne.n	8001476 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800141a:	697b      	ldr	r3, [r7, #20]
 800141c:	005b      	lsls	r3, r3, #1
 800141e:	2203      	movs	r2, #3
 8001420:	409a      	lsls	r2, r3
 8001422:	0013      	movs	r3, r2
 8001424:	43da      	mvns	r2, r3
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	4013      	ands	r3, r2
 800142a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	697b      	ldr	r3, [r7, #20]
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	409a      	lsls	r2, r3
 8001436:	0013      	movs	r3, r2
 8001438:	693a      	ldr	r2, [r7, #16]
 800143a:	4313      	orrs	r3, r2
 800143c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	693a      	ldr	r2, [r7, #16]
 8001442:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800144a:	2201      	movs	r2, #1
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
 8001450:	0013      	movs	r3, r2
 8001452:	43da      	mvns	r2, r3
 8001454:	693b      	ldr	r3, [r7, #16]
 8001456:	4013      	ands	r3, r2
 8001458:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	685b      	ldr	r3, [r3, #4]
 800145e:	091b      	lsrs	r3, r3, #4
 8001460:	2201      	movs	r2, #1
 8001462:	401a      	ands	r2, r3
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	409a      	lsls	r2, r3
 8001468:	0013      	movs	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	4313      	orrs	r3, r2
 800146e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	693a      	ldr	r2, [r7, #16]
 8001474:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	68db      	ldr	r3, [r3, #12]
 800147a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	005b      	lsls	r3, r3, #1
 8001480:	2203      	movs	r2, #3
 8001482:	409a      	lsls	r2, r3
 8001484:	0013      	movs	r3, r2
 8001486:	43da      	mvns	r2, r3
 8001488:	693b      	ldr	r3, [r7, #16]
 800148a:	4013      	ands	r3, r2
 800148c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689a      	ldr	r2, [r3, #8]
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	409a      	lsls	r2, r3
 8001498:	0013      	movs	r3, r2
 800149a:	693a      	ldr	r2, [r7, #16]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014a6:	683b      	ldr	r3, [r7, #0]
 80014a8:	685a      	ldr	r2, [r3, #4]
 80014aa:	2380      	movs	r3, #128	; 0x80
 80014ac:	055b      	lsls	r3, r3, #21
 80014ae:	4013      	ands	r3, r2
 80014b0:	d100      	bne.n	80014b4 <HAL_GPIO_Init+0x174>
 80014b2:	e092      	b.n	80015da <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80014b4:	4a50      	ldr	r2, [pc, #320]	; (80015f8 <HAL_GPIO_Init+0x2b8>)
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	089b      	lsrs	r3, r3, #2
 80014ba:	3318      	adds	r3, #24
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	589b      	ldr	r3, [r3, r2]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80014c2:	697b      	ldr	r3, [r7, #20]
 80014c4:	2203      	movs	r2, #3
 80014c6:	4013      	ands	r3, r2
 80014c8:	00db      	lsls	r3, r3, #3
 80014ca:	220f      	movs	r2, #15
 80014cc:	409a      	lsls	r2, r3
 80014ce:	0013      	movs	r3, r2
 80014d0:	43da      	mvns	r2, r3
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	4013      	ands	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	23a0      	movs	r3, #160	; 0xa0
 80014dc:	05db      	lsls	r3, r3, #23
 80014de:	429a      	cmp	r2, r3
 80014e0:	d013      	beq.n	800150a <HAL_GPIO_Init+0x1ca>
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a45      	ldr	r2, [pc, #276]	; (80015fc <HAL_GPIO_Init+0x2bc>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d00d      	beq.n	8001506 <HAL_GPIO_Init+0x1c6>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a44      	ldr	r2, [pc, #272]	; (8001600 <HAL_GPIO_Init+0x2c0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d007      	beq.n	8001502 <HAL_GPIO_Init+0x1c2>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a43      	ldr	r2, [pc, #268]	; (8001604 <HAL_GPIO_Init+0x2c4>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d101      	bne.n	80014fe <HAL_GPIO_Init+0x1be>
 80014fa:	2303      	movs	r3, #3
 80014fc:	e006      	b.n	800150c <HAL_GPIO_Init+0x1cc>
 80014fe:	2305      	movs	r3, #5
 8001500:	e004      	b.n	800150c <HAL_GPIO_Init+0x1cc>
 8001502:	2302      	movs	r3, #2
 8001504:	e002      	b.n	800150c <HAL_GPIO_Init+0x1cc>
 8001506:	2301      	movs	r3, #1
 8001508:	e000      	b.n	800150c <HAL_GPIO_Init+0x1cc>
 800150a:	2300      	movs	r3, #0
 800150c:	697a      	ldr	r2, [r7, #20]
 800150e:	2103      	movs	r1, #3
 8001510:	400a      	ands	r2, r1
 8001512:	00d2      	lsls	r2, r2, #3
 8001514:	4093      	lsls	r3, r2
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	4313      	orrs	r3, r2
 800151a:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 800151c:	4936      	ldr	r1, [pc, #216]	; (80015f8 <HAL_GPIO_Init+0x2b8>)
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	089b      	lsrs	r3, r3, #2
 8001522:	3318      	adds	r3, #24
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800152a:	4a33      	ldr	r2, [pc, #204]	; (80015f8 <HAL_GPIO_Init+0x2b8>)
 800152c:	2380      	movs	r3, #128	; 0x80
 800152e:	58d3      	ldr	r3, [r2, r3]
 8001530:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	43da      	mvns	r2, r3
 8001536:	693b      	ldr	r3, [r7, #16]
 8001538:	4013      	ands	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800153c:	683b      	ldr	r3, [r7, #0]
 800153e:	685a      	ldr	r2, [r3, #4]
 8001540:	2380      	movs	r3, #128	; 0x80
 8001542:	025b      	lsls	r3, r3, #9
 8001544:	4013      	ands	r3, r2
 8001546:	d003      	beq.n	8001550 <HAL_GPIO_Init+0x210>
        {
          temp |= iocurrent;
 8001548:	693a      	ldr	r2, [r7, #16]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	4313      	orrs	r3, r2
 800154e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001550:	4929      	ldr	r1, [pc, #164]	; (80015f8 <HAL_GPIO_Init+0x2b8>)
 8001552:	2280      	movs	r2, #128	; 0x80
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	508b      	str	r3, [r1, r2]

        temp = EXTI->EMR1;
 8001558:	4a27      	ldr	r2, [pc, #156]	; (80015f8 <HAL_GPIO_Init+0x2b8>)
 800155a:	2384      	movs	r3, #132	; 0x84
 800155c:	58d3      	ldr	r3, [r2, r3]
 800155e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	43da      	mvns	r2, r3
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	685a      	ldr	r2, [r3, #4]
 800156e:	2380      	movs	r3, #128	; 0x80
 8001570:	029b      	lsls	r3, r3, #10
 8001572:	4013      	ands	r3, r2
 8001574:	d003      	beq.n	800157e <HAL_GPIO_Init+0x23e>
        {
          temp |= iocurrent;
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4313      	orrs	r3, r2
 800157c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800157e:	491e      	ldr	r1, [pc, #120]	; (80015f8 <HAL_GPIO_Init+0x2b8>)
 8001580:	2284      	movs	r2, #132	; 0x84
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001586:	4b1c      	ldr	r3, [pc, #112]	; (80015f8 <HAL_GPIO_Init+0x2b8>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	43da      	mvns	r2, r3
 8001590:	693b      	ldr	r3, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685a      	ldr	r2, [r3, #4]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	035b      	lsls	r3, r3, #13
 800159e:	4013      	ands	r3, r2
 80015a0:	d003      	beq.n	80015aa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	4313      	orrs	r3, r2
 80015a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80015aa:	4b13      	ldr	r3, [pc, #76]	; (80015f8 <HAL_GPIO_Init+0x2b8>)
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80015b0:	4b11      	ldr	r3, [pc, #68]	; (80015f8 <HAL_GPIO_Init+0x2b8>)
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	43da      	mvns	r2, r3
 80015ba:	693b      	ldr	r3, [r7, #16]
 80015bc:	4013      	ands	r3, r2
 80015be:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685a      	ldr	r2, [r3, #4]
 80015c4:	2380      	movs	r3, #128	; 0x80
 80015c6:	039b      	lsls	r3, r3, #14
 80015c8:	4013      	ands	r3, r2
 80015ca:	d003      	beq.n	80015d4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015d4:	4b08      	ldr	r3, [pc, #32]	; (80015f8 <HAL_GPIO_Init+0x2b8>)
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	3301      	adds	r3, #1
 80015de:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	40da      	lsrs	r2, r3
 80015e8:	1e13      	subs	r3, r2, #0
 80015ea:	d000      	beq.n	80015ee <HAL_GPIO_Init+0x2ae>
 80015ec:	e6b0      	b.n	8001350 <HAL_GPIO_Init+0x10>
  }
}
 80015ee:	46c0      	nop			; (mov r8, r8)
 80015f0:	46bd      	mov	sp, r7
 80015f2:	b006      	add	sp, #24
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	40021800 	.word	0x40021800
 80015fc:	50000400 	.word	0x50000400
 8001600:	50000800 	.word	0x50000800
 8001604:	50000c00 	.word	0x50000c00

08001608 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b084      	sub	sp, #16
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
 8001610:	000a      	movs	r2, r1
 8001612:	1cbb      	adds	r3, r7, #2
 8001614:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	691b      	ldr	r3, [r3, #16]
 800161a:	1cba      	adds	r2, r7, #2
 800161c:	8812      	ldrh	r2, [r2, #0]
 800161e:	4013      	ands	r3, r2
 8001620:	d004      	beq.n	800162c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001622:	230f      	movs	r3, #15
 8001624:	18fb      	adds	r3, r7, r3
 8001626:	2201      	movs	r2, #1
 8001628:	701a      	strb	r2, [r3, #0]
 800162a:	e003      	b.n	8001634 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800162c:	230f      	movs	r3, #15
 800162e:	18fb      	adds	r3, r7, r3
 8001630:	2200      	movs	r2, #0
 8001632:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001634:	230f      	movs	r3, #15
 8001636:	18fb      	adds	r3, r7, r3
 8001638:	781b      	ldrb	r3, [r3, #0]
}
 800163a:	0018      	movs	r0, r3
 800163c:	46bd      	mov	sp, r7
 800163e:	b004      	add	sp, #16
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001642:	b580      	push	{r7, lr}
 8001644:	b082      	sub	sp, #8
 8001646:	af00      	add	r7, sp, #0
 8001648:	6078      	str	r0, [r7, #4]
 800164a:	0008      	movs	r0, r1
 800164c:	0011      	movs	r1, r2
 800164e:	1cbb      	adds	r3, r7, #2
 8001650:	1c02      	adds	r2, r0, #0
 8001652:	801a      	strh	r2, [r3, #0]
 8001654:	1c7b      	adds	r3, r7, #1
 8001656:	1c0a      	adds	r2, r1, #0
 8001658:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800165a:	1c7b      	adds	r3, r7, #1
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d004      	beq.n	800166c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001662:	1cbb      	adds	r3, r7, #2
 8001664:	881a      	ldrh	r2, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800166a:	e003      	b.n	8001674 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800166c:	1cbb      	adds	r3, r7, #2
 800166e:	881a      	ldrh	r2, [r3, #0]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b002      	add	sp, #8
 800167a:	bd80      	pop	{r7, pc}

0800167c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001684:	4b19      	ldr	r3, [pc, #100]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a19      	ldr	r2, [pc, #100]	; (80016f0 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800168a:	4013      	ands	r3, r2
 800168c:	0019      	movs	r1, r3
 800168e:	4b17      	ldr	r3, [pc, #92]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	430a      	orrs	r2, r1
 8001694:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if(VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	009b      	lsls	r3, r3, #2
 800169c:	429a      	cmp	r2, r3
 800169e:	d11f      	bne.n	80016e0 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock ) / 1000000U) + 1U;
 80016a0:	4b14      	ldr	r3, [pc, #80]	; (80016f4 <HAL_PWREx_ControlVoltageScaling+0x78>)
 80016a2:	681a      	ldr	r2, [r3, #0]
 80016a4:	0013      	movs	r3, r2
 80016a6:	005b      	lsls	r3, r3, #1
 80016a8:	189b      	adds	r3, r3, r2
 80016aa:	005b      	lsls	r3, r3, #1
 80016ac:	4912      	ldr	r1, [pc, #72]	; (80016f8 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 80016ae:	0018      	movs	r0, r3
 80016b0:	f7fe fd32 	bl	8000118 <__udivsi3>
 80016b4:	0003      	movs	r3, r0
 80016b6:	3301      	adds	r3, #1
 80016b8:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ba:	e008      	b.n	80016ce <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if(wait_loop_index != 0U)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d003      	beq.n	80016ca <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	3b01      	subs	r3, #1
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	e001      	b.n	80016ce <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e009      	b.n	80016e2 <HAL_PWREx_ControlVoltageScaling+0x66>
    while(HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016ce:	4b07      	ldr	r3, [pc, #28]	; (80016ec <HAL_PWREx_ControlVoltageScaling+0x70>)
 80016d0:	695a      	ldr	r2, [r3, #20]
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	00db      	lsls	r3, r3, #3
 80016d6:	401a      	ands	r2, r3
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	00db      	lsls	r3, r3, #3
 80016dc:	429a      	cmp	r2, r3
 80016de:	d0ed      	beq.n	80016bc <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	0018      	movs	r0, r3
 80016e4:	46bd      	mov	sp, r7
 80016e6:	b004      	add	sp, #16
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	40007000 	.word	0x40007000
 80016f0:	fffff9ff 	.word	0xfffff9ff
 80016f4:	20000000 	.word	0x20000000
 80016f8:	000f4240 	.word	0x000f4240

080016fc <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001700:	4b03      	ldr	r3, [pc, #12]	; (8001710 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001702:	689a      	ldr	r2, [r3, #8]
 8001704:	23e0      	movs	r3, #224	; 0xe0
 8001706:	01db      	lsls	r3, r3, #7
 8001708:	4013      	ands	r3, r2
}
 800170a:	0018      	movs	r0, r3
 800170c:	46bd      	mov	sp, r7
 800170e:	bd80      	pop	{r7, pc}
 8001710:	40021000 	.word	0x40021000

08001714 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b088      	sub	sp, #32
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d101      	bne.n	8001726 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
 8001724:	e2f9      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	2201      	movs	r2, #1
 800172c:	4013      	ands	r3, r2
 800172e:	d100      	bne.n	8001732 <HAL_RCC_OscConfig+0x1e>
 8001730:	e07c      	b.n	800182c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001732:	4bc3      	ldr	r3, [pc, #780]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	2238      	movs	r2, #56	; 0x38
 8001738:	4013      	ands	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800173c:	4bc0      	ldr	r3, [pc, #768]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	2203      	movs	r2, #3
 8001742:	4013      	ands	r3, r2
 8001744:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	2b10      	cmp	r3, #16
 800174a:	d102      	bne.n	8001752 <HAL_RCC_OscConfig+0x3e>
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	2b03      	cmp	r3, #3
 8001750:	d002      	beq.n	8001758 <HAL_RCC_OscConfig+0x44>
 8001752:	69bb      	ldr	r3, [r7, #24]
 8001754:	2b08      	cmp	r3, #8
 8001756:	d10b      	bne.n	8001770 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001758:	4bb9      	ldr	r3, [pc, #740]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	2380      	movs	r3, #128	; 0x80
 800175e:	029b      	lsls	r3, r3, #10
 8001760:	4013      	ands	r3, r2
 8001762:	d062      	beq.n	800182a <HAL_RCC_OscConfig+0x116>
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	2b00      	cmp	r3, #0
 800176a:	d15e      	bne.n	800182a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e2d4      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	685a      	ldr	r2, [r3, #4]
 8001774:	2380      	movs	r3, #128	; 0x80
 8001776:	025b      	lsls	r3, r3, #9
 8001778:	429a      	cmp	r2, r3
 800177a:	d107      	bne.n	800178c <HAL_RCC_OscConfig+0x78>
 800177c:	4bb0      	ldr	r3, [pc, #704]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800177e:	681a      	ldr	r2, [r3, #0]
 8001780:	4baf      	ldr	r3, [pc, #700]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001782:	2180      	movs	r1, #128	; 0x80
 8001784:	0249      	lsls	r1, r1, #9
 8001786:	430a      	orrs	r2, r1
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	e020      	b.n	80017ce <HAL_RCC_OscConfig+0xba>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685a      	ldr	r2, [r3, #4]
 8001790:	23a0      	movs	r3, #160	; 0xa0
 8001792:	02db      	lsls	r3, r3, #11
 8001794:	429a      	cmp	r2, r3
 8001796:	d10e      	bne.n	80017b6 <HAL_RCC_OscConfig+0xa2>
 8001798:	4ba9      	ldr	r3, [pc, #676]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	4ba8      	ldr	r3, [pc, #672]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800179e:	2180      	movs	r1, #128	; 0x80
 80017a0:	02c9      	lsls	r1, r1, #11
 80017a2:	430a      	orrs	r2, r1
 80017a4:	601a      	str	r2, [r3, #0]
 80017a6:	4ba6      	ldr	r3, [pc, #664]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	4ba5      	ldr	r3, [pc, #660]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80017ac:	2180      	movs	r1, #128	; 0x80
 80017ae:	0249      	lsls	r1, r1, #9
 80017b0:	430a      	orrs	r2, r1
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	e00b      	b.n	80017ce <HAL_RCC_OscConfig+0xba>
 80017b6:	4ba2      	ldr	r3, [pc, #648]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80017b8:	681a      	ldr	r2, [r3, #0]
 80017ba:	4ba1      	ldr	r3, [pc, #644]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80017bc:	49a1      	ldr	r1, [pc, #644]	; (8001a44 <HAL_RCC_OscConfig+0x330>)
 80017be:	400a      	ands	r2, r1
 80017c0:	601a      	str	r2, [r3, #0]
 80017c2:	4b9f      	ldr	r3, [pc, #636]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	4b9e      	ldr	r3, [pc, #632]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80017c8:	499f      	ldr	r1, [pc, #636]	; (8001a48 <HAL_RCC_OscConfig+0x334>)
 80017ca:	400a      	ands	r2, r1
 80017cc:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d014      	beq.n	8001800 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff fc51 	bl	800107c <HAL_GetTick>
 80017da:	0003      	movs	r3, r0
 80017dc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017de:	e008      	b.n	80017f2 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80017e0:	f7ff fc4c 	bl	800107c <HAL_GetTick>
 80017e4:	0002      	movs	r2, r0
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	2b64      	cmp	r3, #100	; 0x64
 80017ec:	d901      	bls.n	80017f2 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 80017ee:	2303      	movs	r3, #3
 80017f0:	e293      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80017f2:	4b93      	ldr	r3, [pc, #588]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80017f4:	681a      	ldr	r2, [r3, #0]
 80017f6:	2380      	movs	r3, #128	; 0x80
 80017f8:	029b      	lsls	r3, r3, #10
 80017fa:	4013      	ands	r3, r2
 80017fc:	d0f0      	beq.n	80017e0 <HAL_RCC_OscConfig+0xcc>
 80017fe:	e015      	b.n	800182c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001800:	f7ff fc3c 	bl	800107c <HAL_GetTick>
 8001804:	0003      	movs	r3, r0
 8001806:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001808:	e008      	b.n	800181c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800180a:	f7ff fc37 	bl	800107c <HAL_GetTick>
 800180e:	0002      	movs	r2, r0
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	2b64      	cmp	r3, #100	; 0x64
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e27e      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800181c:	4b88      	ldr	r3, [pc, #544]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	2380      	movs	r3, #128	; 0x80
 8001822:	029b      	lsls	r3, r3, #10
 8001824:	4013      	ands	r3, r2
 8001826:	d1f0      	bne.n	800180a <HAL_RCC_OscConfig+0xf6>
 8001828:	e000      	b.n	800182c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800182a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	2202      	movs	r2, #2
 8001832:	4013      	ands	r3, r2
 8001834:	d100      	bne.n	8001838 <HAL_RCC_OscConfig+0x124>
 8001836:	e099      	b.n	800196c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001838:	4b81      	ldr	r3, [pc, #516]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800183a:	689b      	ldr	r3, [r3, #8]
 800183c:	2238      	movs	r2, #56	; 0x38
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001842:	4b7f      	ldr	r3, [pc, #508]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001844:	68db      	ldr	r3, [r3, #12]
 8001846:	2203      	movs	r2, #3
 8001848:	4013      	ands	r3, r2
 800184a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	2b10      	cmp	r3, #16
 8001850:	d102      	bne.n	8001858 <HAL_RCC_OscConfig+0x144>
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	2b02      	cmp	r3, #2
 8001856:	d002      	beq.n	800185e <HAL_RCC_OscConfig+0x14a>
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d135      	bne.n	80018ca <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800185e:	4b78      	ldr	r3, [pc, #480]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001860:	681a      	ldr	r2, [r3, #0]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	4013      	ands	r3, r2
 8001868:	d005      	beq.n	8001876 <HAL_RCC_OscConfig+0x162>
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	68db      	ldr	r3, [r3, #12]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d101      	bne.n	8001876 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001872:	2301      	movs	r3, #1
 8001874:	e251      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001876:	4b72      	ldr	r3, [pc, #456]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	4a74      	ldr	r2, [pc, #464]	; (8001a4c <HAL_RCC_OscConfig+0x338>)
 800187c:	4013      	ands	r3, r2
 800187e:	0019      	movs	r1, r3
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	695b      	ldr	r3, [r3, #20]
 8001884:	021a      	lsls	r2, r3, #8
 8001886:	4b6e      	ldr	r3, [pc, #440]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001888:	430a      	orrs	r2, r1
 800188a:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d112      	bne.n	80018b8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001892:	4b6b      	ldr	r3, [pc, #428]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4a6e      	ldr	r2, [pc, #440]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 8001898:	4013      	ands	r3, r2
 800189a:	0019      	movs	r1, r3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	691a      	ldr	r2, [r3, #16]
 80018a0:	4b67      	ldr	r3, [pc, #412]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80018a2:	430a      	orrs	r2, r1
 80018a4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80018a6:	4b66      	ldr	r3, [pc, #408]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	0adb      	lsrs	r3, r3, #11
 80018ac:	2207      	movs	r2, #7
 80018ae:	4013      	ands	r3, r2
 80018b0:	4a68      	ldr	r2, [pc, #416]	; (8001a54 <HAL_RCC_OscConfig+0x340>)
 80018b2:	40da      	lsrs	r2, r3
 80018b4:	4b68      	ldr	r3, [pc, #416]	; (8001a58 <HAL_RCC_OscConfig+0x344>)
 80018b6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80018b8:	4b68      	ldr	r3, [pc, #416]	; (8001a5c <HAL_RCC_OscConfig+0x348>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	0018      	movs	r0, r3
 80018be:	f7ff fb83 	bl	8000fc8 <HAL_InitTick>
 80018c2:	1e03      	subs	r3, r0, #0
 80018c4:	d051      	beq.n	800196a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 80018c6:	2301      	movs	r3, #1
 80018c8:	e227      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d030      	beq.n	8001934 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80018d2:	4b5b      	ldr	r3, [pc, #364]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	4a5e      	ldr	r2, [pc, #376]	; (8001a50 <HAL_RCC_OscConfig+0x33c>)
 80018d8:	4013      	ands	r3, r2
 80018da:	0019      	movs	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	691a      	ldr	r2, [r3, #16]
 80018e0:	4b57      	ldr	r3, [pc, #348]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80018e2:	430a      	orrs	r2, r1
 80018e4:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80018e6:	4b56      	ldr	r3, [pc, #344]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80018e8:	681a      	ldr	r2, [r3, #0]
 80018ea:	4b55      	ldr	r3, [pc, #340]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80018ec:	2180      	movs	r1, #128	; 0x80
 80018ee:	0049      	lsls	r1, r1, #1
 80018f0:	430a      	orrs	r2, r1
 80018f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f4:	f7ff fbc2 	bl	800107c <HAL_GetTick>
 80018f8:	0003      	movs	r3, r0
 80018fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018fc:	e008      	b.n	8001910 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018fe:	f7ff fbbd 	bl	800107c <HAL_GetTick>
 8001902:	0002      	movs	r2, r0
 8001904:	693b      	ldr	r3, [r7, #16]
 8001906:	1ad3      	subs	r3, r2, r3
 8001908:	2b02      	cmp	r3, #2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e204      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001910:	4b4b      	ldr	r3, [pc, #300]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	2380      	movs	r3, #128	; 0x80
 8001916:	00db      	lsls	r3, r3, #3
 8001918:	4013      	ands	r3, r2
 800191a:	d0f0      	beq.n	80018fe <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800191c:	4b48      	ldr	r3, [pc, #288]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	4a4a      	ldr	r2, [pc, #296]	; (8001a4c <HAL_RCC_OscConfig+0x338>)
 8001922:	4013      	ands	r3, r2
 8001924:	0019      	movs	r1, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	695b      	ldr	r3, [r3, #20]
 800192a:	021a      	lsls	r2, r3, #8
 800192c:	4b44      	ldr	r3, [pc, #272]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800192e:	430a      	orrs	r2, r1
 8001930:	605a      	str	r2, [r3, #4]
 8001932:	e01b      	b.n	800196c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001934:	4b42      	ldr	r3, [pc, #264]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001936:	681a      	ldr	r2, [r3, #0]
 8001938:	4b41      	ldr	r3, [pc, #260]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800193a:	4949      	ldr	r1, [pc, #292]	; (8001a60 <HAL_RCC_OscConfig+0x34c>)
 800193c:	400a      	ands	r2, r1
 800193e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001940:	f7ff fb9c 	bl	800107c <HAL_GetTick>
 8001944:	0003      	movs	r3, r0
 8001946:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001948:	e008      	b.n	800195c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800194a:	f7ff fb97 	bl	800107c <HAL_GetTick>
 800194e:	0002      	movs	r2, r0
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	1ad3      	subs	r3, r2, r3
 8001954:	2b02      	cmp	r3, #2
 8001956:	d901      	bls.n	800195c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001958:	2303      	movs	r3, #3
 800195a:	e1de      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800195c:	4b38      	ldr	r3, [pc, #224]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 800195e:	681a      	ldr	r2, [r3, #0]
 8001960:	2380      	movs	r3, #128	; 0x80
 8001962:	00db      	lsls	r3, r3, #3
 8001964:	4013      	ands	r3, r2
 8001966:	d1f0      	bne.n	800194a <HAL_RCC_OscConfig+0x236>
 8001968:	e000      	b.n	800196c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800196a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	2208      	movs	r2, #8
 8001972:	4013      	ands	r3, r2
 8001974:	d047      	beq.n	8001a06 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001976:	4b32      	ldr	r3, [pc, #200]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	2238      	movs	r2, #56	; 0x38
 800197c:	4013      	ands	r3, r2
 800197e:	2b18      	cmp	r3, #24
 8001980:	d10a      	bne.n	8001998 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001982:	4b2f      	ldr	r3, [pc, #188]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001984:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001986:	2202      	movs	r2, #2
 8001988:	4013      	ands	r3, r2
 800198a:	d03c      	beq.n	8001a06 <HAL_RCC_OscConfig+0x2f2>
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	699b      	ldr	r3, [r3, #24]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d138      	bne.n	8001a06 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001994:	2301      	movs	r3, #1
 8001996:	e1c0      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	699b      	ldr	r3, [r3, #24]
 800199c:	2b00      	cmp	r3, #0
 800199e:	d019      	beq.n	80019d4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80019a0:	4b27      	ldr	r3, [pc, #156]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80019a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019a4:	4b26      	ldr	r3, [pc, #152]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80019a6:	2101      	movs	r1, #1
 80019a8:	430a      	orrs	r2, r1
 80019aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ac:	f7ff fb66 	bl	800107c <HAL_GetTick>
 80019b0:	0003      	movs	r3, r0
 80019b2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019b6:	f7ff fb61 	bl	800107c <HAL_GetTick>
 80019ba:	0002      	movs	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e1a8      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019c8:	4b1d      	ldr	r3, [pc, #116]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80019ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80019cc:	2202      	movs	r2, #2
 80019ce:	4013      	ands	r3, r2
 80019d0:	d0f1      	beq.n	80019b6 <HAL_RCC_OscConfig+0x2a2>
 80019d2:	e018      	b.n	8001a06 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80019d4:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80019d6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80019d8:	4b19      	ldr	r3, [pc, #100]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80019da:	2101      	movs	r1, #1
 80019dc:	438a      	bics	r2, r1
 80019de:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019e0:	f7ff fb4c 	bl	800107c <HAL_GetTick>
 80019e4:	0003      	movs	r3, r0
 80019e6:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ea:	f7ff fb47 	bl	800107c <HAL_GetTick>
 80019ee:	0002      	movs	r2, r0
 80019f0:	693b      	ldr	r3, [r7, #16]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b02      	cmp	r3, #2
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e18e      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019fc:	4b10      	ldr	r3, [pc, #64]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 80019fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a00:	2202      	movs	r2, #2
 8001a02:	4013      	ands	r3, r2
 8001a04:	d1f1      	bne.n	80019ea <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	2204      	movs	r2, #4
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d100      	bne.n	8001a12 <HAL_RCC_OscConfig+0x2fe>
 8001a10:	e0c6      	b.n	8001ba0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a12:	231f      	movs	r3, #31
 8001a14:	18fb      	adds	r3, r7, r3
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001a1a:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001a1c:	689b      	ldr	r3, [r3, #8]
 8001a1e:	2238      	movs	r2, #56	; 0x38
 8001a20:	4013      	ands	r3, r2
 8001a22:	2b20      	cmp	r3, #32
 8001a24:	d11e      	bne.n	8001a64 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001a26:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <HAL_RCC_OscConfig+0x32c>)
 8001a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d100      	bne.n	8001a32 <HAL_RCC_OscConfig+0x31e>
 8001a30:	e0b6      	b.n	8001ba0 <HAL_RCC_OscConfig+0x48c>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d000      	beq.n	8001a3c <HAL_RCC_OscConfig+0x328>
 8001a3a:	e0b1      	b.n	8001ba0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001a3c:	2301      	movs	r3, #1
 8001a3e:	e16c      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
 8001a40:	40021000 	.word	0x40021000
 8001a44:	fffeffff 	.word	0xfffeffff
 8001a48:	fffbffff 	.word	0xfffbffff
 8001a4c:	ffff80ff 	.word	0xffff80ff
 8001a50:	ffffc7ff 	.word	0xffffc7ff
 8001a54:	00f42400 	.word	0x00f42400
 8001a58:	20000000 	.word	0x20000000
 8001a5c:	20000004 	.word	0x20000004
 8001a60:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001a64:	4baf      	ldr	r3, [pc, #700]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001a66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a68:	2380      	movs	r3, #128	; 0x80
 8001a6a:	055b      	lsls	r3, r3, #21
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	d101      	bne.n	8001a74 <HAL_RCC_OscConfig+0x360>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_RCC_OscConfig+0x362>
 8001a74:	2300      	movs	r3, #0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d011      	beq.n	8001a9e <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001a7a:	4baa      	ldr	r3, [pc, #680]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001a7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a7e:	4ba9      	ldr	r3, [pc, #676]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001a80:	2180      	movs	r1, #128	; 0x80
 8001a82:	0549      	lsls	r1, r1, #21
 8001a84:	430a      	orrs	r2, r1
 8001a86:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a88:	4ba6      	ldr	r3, [pc, #664]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001a8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001a8c:	2380      	movs	r3, #128	; 0x80
 8001a8e:	055b      	lsls	r3, r3, #21
 8001a90:	4013      	ands	r3, r2
 8001a92:	60fb      	str	r3, [r7, #12]
 8001a94:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001a96:	231f      	movs	r3, #31
 8001a98:	18fb      	adds	r3, r7, r3
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9e:	4ba2      	ldr	r3, [pc, #648]	; (8001d28 <HAL_RCC_OscConfig+0x614>)
 8001aa0:	681a      	ldr	r2, [r3, #0]
 8001aa2:	2380      	movs	r3, #128	; 0x80
 8001aa4:	005b      	lsls	r3, r3, #1
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d11a      	bne.n	8001ae0 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aaa:	4b9f      	ldr	r3, [pc, #636]	; (8001d28 <HAL_RCC_OscConfig+0x614>)
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	4b9e      	ldr	r3, [pc, #632]	; (8001d28 <HAL_RCC_OscConfig+0x614>)
 8001ab0:	2180      	movs	r1, #128	; 0x80
 8001ab2:	0049      	lsls	r1, r1, #1
 8001ab4:	430a      	orrs	r2, r1
 8001ab6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001ab8:	f7ff fae0 	bl	800107c <HAL_GetTick>
 8001abc:	0003      	movs	r3, r0
 8001abe:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac0:	e008      	b.n	8001ad4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ac2:	f7ff fadb 	bl	800107c <HAL_GetTick>
 8001ac6:	0002      	movs	r2, r0
 8001ac8:	693b      	ldr	r3, [r7, #16]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	2b02      	cmp	r3, #2
 8001ace:	d901      	bls.n	8001ad4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001ad0:	2303      	movs	r3, #3
 8001ad2:	e122      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ad4:	4b94      	ldr	r3, [pc, #592]	; (8001d28 <HAL_RCC_OscConfig+0x614>)
 8001ad6:	681a      	ldr	r2, [r3, #0]
 8001ad8:	2380      	movs	r3, #128	; 0x80
 8001ada:	005b      	lsls	r3, r3, #1
 8001adc:	4013      	ands	r3, r2
 8001ade:	d0f0      	beq.n	8001ac2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	2b01      	cmp	r3, #1
 8001ae6:	d106      	bne.n	8001af6 <HAL_RCC_OscConfig+0x3e2>
 8001ae8:	4b8e      	ldr	r3, [pc, #568]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001aea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001aec:	4b8d      	ldr	r3, [pc, #564]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001aee:	2101      	movs	r1, #1
 8001af0:	430a      	orrs	r2, r1
 8001af2:	65da      	str	r2, [r3, #92]	; 0x5c
 8001af4:	e01c      	b.n	8001b30 <HAL_RCC_OscConfig+0x41c>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	2b05      	cmp	r3, #5
 8001afc:	d10c      	bne.n	8001b18 <HAL_RCC_OscConfig+0x404>
 8001afe:	4b89      	ldr	r3, [pc, #548]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001b00:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b02:	4b88      	ldr	r3, [pc, #544]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001b04:	2104      	movs	r1, #4
 8001b06:	430a      	orrs	r2, r1
 8001b08:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b0a:	4b86      	ldr	r3, [pc, #536]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001b0c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b0e:	4b85      	ldr	r3, [pc, #532]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001b10:	2101      	movs	r1, #1
 8001b12:	430a      	orrs	r2, r1
 8001b14:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b16:	e00b      	b.n	8001b30 <HAL_RCC_OscConfig+0x41c>
 8001b18:	4b82      	ldr	r3, [pc, #520]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001b1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b1c:	4b81      	ldr	r3, [pc, #516]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001b1e:	2101      	movs	r1, #1
 8001b20:	438a      	bics	r2, r1
 8001b22:	65da      	str	r2, [r3, #92]	; 0x5c
 8001b24:	4b7f      	ldr	r3, [pc, #508]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001b26:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001b28:	4b7e      	ldr	r3, [pc, #504]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001b2a:	2104      	movs	r1, #4
 8001b2c:	438a      	bics	r2, r1
 8001b2e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d014      	beq.n	8001b62 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b38:	f7ff faa0 	bl	800107c <HAL_GetTick>
 8001b3c:	0003      	movs	r3, r0
 8001b3e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b40:	e009      	b.n	8001b56 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b42:	f7ff fa9b 	bl	800107c <HAL_GetTick>
 8001b46:	0002      	movs	r2, r0
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	4a77      	ldr	r2, [pc, #476]	; (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001b4e:	4293      	cmp	r3, r2
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e0e1      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b56:	4b73      	ldr	r3, [pc, #460]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001b58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b5a:	2202      	movs	r2, #2
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	d0f0      	beq.n	8001b42 <HAL_RCC_OscConfig+0x42e>
 8001b60:	e013      	b.n	8001b8a <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b62:	f7ff fa8b 	bl	800107c <HAL_GetTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b6a:	e009      	b.n	8001b80 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6c:	f7ff fa86 	bl	800107c <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	4a6d      	ldr	r2, [pc, #436]	; (8001d2c <HAL_RCC_OscConfig+0x618>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e0cc      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b80:	4b68      	ldr	r3, [pc, #416]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b84:	2202      	movs	r2, #2
 8001b86:	4013      	ands	r3, r2
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001b8a:	231f      	movs	r3, #31
 8001b8c:	18fb      	adds	r3, r7, r3
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001b94:	4b63      	ldr	r3, [pc, #396]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001b98:	4b62      	ldr	r3, [pc, #392]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001b9a:	4965      	ldr	r1, [pc, #404]	; (8001d30 <HAL_RCC_OscConfig+0x61c>)
 8001b9c:	400a      	ands	r2, r1
 8001b9e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	69db      	ldr	r3, [r3, #28]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d100      	bne.n	8001baa <HAL_RCC_OscConfig+0x496>
 8001ba8:	e0b6      	b.n	8001d18 <HAL_RCC_OscConfig+0x604>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001baa:	4b5e      	ldr	r3, [pc, #376]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001bac:	689b      	ldr	r3, [r3, #8]
 8001bae:	2238      	movs	r2, #56	; 0x38
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	2b10      	cmp	r3, #16
 8001bb4:	d100      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x4a4>
 8001bb6:	e07e      	b.n	8001cb6 <HAL_RCC_OscConfig+0x5a2>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	2b02      	cmp	r3, #2
 8001bbe:	d153      	bne.n	8001c68 <HAL_RCC_OscConfig+0x554>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc0:	4b58      	ldr	r3, [pc, #352]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001bc2:	681a      	ldr	r2, [r3, #0]
 8001bc4:	4b57      	ldr	r3, [pc, #348]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001bc6:	495b      	ldr	r1, [pc, #364]	; (8001d34 <HAL_RCC_OscConfig+0x620>)
 8001bc8:	400a      	ands	r2, r1
 8001bca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bcc:	f7ff fa56 	bl	800107c <HAL_GetTick>
 8001bd0:	0003      	movs	r3, r0
 8001bd2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bd4:	e008      	b.n	8001be8 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd6:	f7ff fa51 	bl	800107c <HAL_GetTick>
 8001bda:	0002      	movs	r2, r0
 8001bdc:	693b      	ldr	r3, [r7, #16]
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e098      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be8:	4b4e      	ldr	r3, [pc, #312]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001bea:	681a      	ldr	r2, [r3, #0]
 8001bec:	2380      	movs	r3, #128	; 0x80
 8001bee:	049b      	lsls	r3, r3, #18
 8001bf0:	4013      	ands	r3, r2
 8001bf2:	d1f0      	bne.n	8001bd6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bf4:	4b4b      	ldr	r3, [pc, #300]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	4a4f      	ldr	r2, [pc, #316]	; (8001d38 <HAL_RCC_OscConfig+0x624>)
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	0019      	movs	r1, r3
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6a1a      	ldr	r2, [r3, #32]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c0c:	021b      	lsls	r3, r3, #8
 8001c0e:	431a      	orrs	r2, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c14:	431a      	orrs	r2, r3
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c1a:	431a      	orrs	r2, r3
 8001c1c:	4b41      	ldr	r3, [pc, #260]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001c1e:	430a      	orrs	r2, r1
 8001c20:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLQ,
#endif
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c22:	4b40      	ldr	r3, [pc, #256]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001c24:	681a      	ldr	r2, [r3, #0]
 8001c26:	4b3f      	ldr	r3, [pc, #252]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001c28:	2180      	movs	r1, #128	; 0x80
 8001c2a:	0449      	lsls	r1, r1, #17
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8001c30:	4b3c      	ldr	r3, [pc, #240]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001c32:	68da      	ldr	r2, [r3, #12]
 8001c34:	4b3b      	ldr	r3, [pc, #236]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001c36:	2180      	movs	r1, #128	; 0x80
 8001c38:	0549      	lsls	r1, r1, #21
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c3e:	f7ff fa1d 	bl	800107c <HAL_GetTick>
 8001c42:	0003      	movs	r3, r0
 8001c44:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c46:	e008      	b.n	8001c5a <HAL_RCC_OscConfig+0x546>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c48:	f7ff fa18 	bl	800107c <HAL_GetTick>
 8001c4c:	0002      	movs	r2, r0
 8001c4e:	693b      	ldr	r3, [r7, #16]
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	2b02      	cmp	r3, #2
 8001c54:	d901      	bls.n	8001c5a <HAL_RCC_OscConfig+0x546>
          {
            return HAL_TIMEOUT;
 8001c56:	2303      	movs	r3, #3
 8001c58:	e05f      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c5a:	4b32      	ldr	r3, [pc, #200]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	2380      	movs	r3, #128	; 0x80
 8001c60:	049b      	lsls	r3, r3, #18
 8001c62:	4013      	ands	r3, r2
 8001c64:	d0f0      	beq.n	8001c48 <HAL_RCC_OscConfig+0x534>
 8001c66:	e057      	b.n	8001d18 <HAL_RCC_OscConfig+0x604>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c68:	4b2e      	ldr	r3, [pc, #184]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001c6a:	681a      	ldr	r2, [r3, #0]
 8001c6c:	4b2d      	ldr	r3, [pc, #180]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001c6e:	4931      	ldr	r1, [pc, #196]	; (8001d34 <HAL_RCC_OscConfig+0x620>)
 8001c70:	400a      	ands	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

        /* Disable all PLL outputs to save power */
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PLLSOURCE_NONE);
 8001c74:	4b2b      	ldr	r3, [pc, #172]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	4b2a      	ldr	r3, [pc, #168]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001c7a:	2103      	movs	r1, #3
 8001c7c:	438a      	bics	r2, r1
 8001c7e:	60da      	str	r2, [r3, #12]

#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLREN);
 8001c80:	4b28      	ldr	r3, [pc, #160]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001c82:	68da      	ldr	r2, [r3, #12]
 8001c84:	4b27      	ldr	r3, [pc, #156]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001c86:	492d      	ldr	r1, [pc, #180]	; (8001d3c <HAL_RCC_OscConfig+0x628>)
 8001c88:	400a      	ands	r2, r1
 8001c8a:	60da      	str	r2, [r3, #12]
#endif

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c8c:	f7ff f9f6 	bl	800107c <HAL_GetTick>
 8001c90:	0003      	movs	r3, r0
 8001c92:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x594>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c96:	f7ff f9f1 	bl	800107c <HAL_GetTick>
 8001c9a:	0002      	movs	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x594>
          {
            return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e038      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	2380      	movs	r3, #128	; 0x80
 8001cae:	049b      	lsls	r3, r3, #18
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	d1f0      	bne.n	8001c96 <HAL_RCC_OscConfig+0x582>
 8001cb4:	e030      	b.n	8001d18 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69db      	ldr	r3, [r3, #28]
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_RCC_OscConfig+0x5ae>
      {
        return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e02b      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
      }
      else
      {   
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8001cc2:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_RCC_OscConfig+0x610>)
 8001cc4:	68db      	ldr	r3, [r3, #12]
 8001cc6:	617b      	str	r3, [r7, #20]
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cc8:	697b      	ldr	r3, [r7, #20]
 8001cca:	2203      	movs	r2, #3
 8001ccc:	401a      	ands	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6a1b      	ldr	r3, [r3, #32]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d11e      	bne.n	8001d14 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cd6:	697b      	ldr	r3, [r7, #20]
 8001cd8:	2270      	movs	r2, #112	; 0x70
 8001cda:	401a      	ands	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d117      	bne.n	8001d14 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001ce4:	697a      	ldr	r2, [r7, #20]
 8001ce6:	23fe      	movs	r3, #254	; 0xfe
 8001ce8:	01db      	lsls	r3, r3, #7
 8001cea:	401a      	ands	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cf0:	021b      	lsls	r3, r3, #8
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d10e      	bne.n	8001d14 <HAL_RCC_OscConfig+0x600>
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001cf6:	697a      	ldr	r2, [r7, #20]
 8001cf8:	23f8      	movs	r3, #248	; 0xf8
 8001cfa:	039b      	lsls	r3, r3, #14
 8001cfc:	401a      	ands	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d106      	bne.n	8001d14 <HAL_RCC_OscConfig+0x600>
#if defined (RCC_PLLQ_SUPPORT)
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
#endif
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	0f5b      	lsrs	r3, r3, #29
 8001d0a:	075a      	lsls	r2, r3, #29
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d001      	beq.n	8001d18 <HAL_RCC_OscConfig+0x604>
        {
          return HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	e000      	b.n	8001d1a <HAL_RCC_OscConfig+0x606>
        }
      }
    }
  }
  return HAL_OK;
 8001d18:	2300      	movs	r3, #0
}
 8001d1a:	0018      	movs	r0, r3
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	b008      	add	sp, #32
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	46c0      	nop			; (mov r8, r8)
 8001d24:	40021000 	.word	0x40021000
 8001d28:	40007000 	.word	0x40007000
 8001d2c:	00001388 	.word	0x00001388
 8001d30:	efffffff 	.word	0xefffffff
 8001d34:	feffffff 	.word	0xfeffffff
 8001d38:	1fc1808c 	.word	0x1fc1808c
 8001d3c:	effeffff 	.word	0xeffeffff

08001d40 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d101      	bne.n	8001d54 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d50:	2301      	movs	r3, #1
 8001d52:	e0e9      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d54:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2207      	movs	r2, #7
 8001d5a:	4013      	ands	r3, r2
 8001d5c:	683a      	ldr	r2, [r7, #0]
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d91e      	bls.n	8001da0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d62:	4b73      	ldr	r3, [pc, #460]	; (8001f30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	2207      	movs	r2, #7
 8001d68:	4393      	bics	r3, r2
 8001d6a:	0019      	movs	r1, r3
 8001d6c:	4b70      	ldr	r3, [pc, #448]	; (8001f30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d6e:	683a      	ldr	r2, [r7, #0]
 8001d70:	430a      	orrs	r2, r1
 8001d72:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d74:	f7ff f982 	bl	800107c <HAL_GetTick>
 8001d78:	0003      	movs	r3, r0
 8001d7a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d7c:	e009      	b.n	8001d92 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d7e:	f7ff f97d 	bl	800107c <HAL_GetTick>
 8001d82:	0002      	movs	r2, r0
 8001d84:	68fb      	ldr	r3, [r7, #12]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	4a6a      	ldr	r2, [pc, #424]	; (8001f34 <HAL_RCC_ClockConfig+0x1f4>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d901      	bls.n	8001d92 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	e0ca      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d92:	4b67      	ldr	r3, [pc, #412]	; (8001f30 <HAL_RCC_ClockConfig+0x1f0>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	2207      	movs	r2, #7
 8001d98:	4013      	ands	r3, r2
 8001d9a:	683a      	ldr	r2, [r7, #0]
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d1ee      	bne.n	8001d7e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2202      	movs	r2, #2
 8001da6:	4013      	ands	r3, r2
 8001da8:	d015      	beq.n	8001dd6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2204      	movs	r2, #4
 8001db0:	4013      	ands	r3, r2
 8001db2:	d006      	beq.n	8001dc2 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001db4:	4b60      	ldr	r3, [pc, #384]	; (8001f38 <HAL_RCC_ClockConfig+0x1f8>)
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	4b5f      	ldr	r3, [pc, #380]	; (8001f38 <HAL_RCC_ClockConfig+0x1f8>)
 8001dba:	21e0      	movs	r1, #224	; 0xe0
 8001dbc:	01c9      	lsls	r1, r1, #7
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dc2:	4b5d      	ldr	r3, [pc, #372]	; (8001f38 <HAL_RCC_ClockConfig+0x1f8>)
 8001dc4:	689b      	ldr	r3, [r3, #8]
 8001dc6:	4a5d      	ldr	r2, [pc, #372]	; (8001f3c <HAL_RCC_ClockConfig+0x1fc>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	0019      	movs	r1, r3
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	4b59      	ldr	r3, [pc, #356]	; (8001f38 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd2:	430a      	orrs	r2, r1
 8001dd4:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	2201      	movs	r2, #1
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d057      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	685b      	ldr	r3, [r3, #4]
 8001de4:	2b01      	cmp	r3, #1
 8001de6:	d107      	bne.n	8001df8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001de8:	4b53      	ldr	r3, [pc, #332]	; (8001f38 <HAL_RCC_ClockConfig+0x1f8>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	2380      	movs	r3, #128	; 0x80
 8001dee:	029b      	lsls	r3, r3, #10
 8001df0:	4013      	ands	r3, r2
 8001df2:	d12b      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e097      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	2b02      	cmp	r3, #2
 8001dfe:	d107      	bne.n	8001e10 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e00:	4b4d      	ldr	r3, [pc, #308]	; (8001f38 <HAL_RCC_ClockConfig+0x1f8>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	2380      	movs	r3, #128	; 0x80
 8001e06:	049b      	lsls	r3, r3, #18
 8001e08:	4013      	ands	r3, r2
 8001e0a:	d11f      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e08b      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d107      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e18:	4b47      	ldr	r3, [pc, #284]	; (8001f38 <HAL_RCC_ClockConfig+0x1f8>)
 8001e1a:	681a      	ldr	r2, [r3, #0]
 8001e1c:	2380      	movs	r3, #128	; 0x80
 8001e1e:	00db      	lsls	r3, r3, #3
 8001e20:	4013      	ands	r3, r2
 8001e22:	d113      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e07f      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2b03      	cmp	r3, #3
 8001e2e:	d106      	bne.n	8001e3e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001e30:	4b41      	ldr	r3, [pc, #260]	; (8001f38 <HAL_RCC_ClockConfig+0x1f8>)
 8001e32:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001e34:	2202      	movs	r2, #2
 8001e36:	4013      	ands	r3, r2
 8001e38:	d108      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e3a:	2301      	movs	r3, #1
 8001e3c:	e074      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e3e:	4b3e      	ldr	r3, [pc, #248]	; (8001f38 <HAL_RCC_ClockConfig+0x1f8>)
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	2202      	movs	r2, #2
 8001e44:	4013      	ands	r3, r2
 8001e46:	d101      	bne.n	8001e4c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e06d      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e4c:	4b3a      	ldr	r3, [pc, #232]	; (8001f38 <HAL_RCC_ClockConfig+0x1f8>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	2207      	movs	r2, #7
 8001e52:	4393      	bics	r3, r2
 8001e54:	0019      	movs	r1, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685a      	ldr	r2, [r3, #4]
 8001e5a:	4b37      	ldr	r3, [pc, #220]	; (8001f38 <HAL_RCC_ClockConfig+0x1f8>)
 8001e5c:	430a      	orrs	r2, r1
 8001e5e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e60:	f7ff f90c 	bl	800107c <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e68:	e009      	b.n	8001e7e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e6a:	f7ff f907 	bl	800107c <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	4a2f      	ldr	r2, [pc, #188]	; (8001f34 <HAL_RCC_ClockConfig+0x1f4>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d901      	bls.n	8001e7e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e7a:	2303      	movs	r3, #3
 8001e7c:	e054      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e7e:	4b2e      	ldr	r3, [pc, #184]	; (8001f38 <HAL_RCC_ClockConfig+0x1f8>)
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	2238      	movs	r2, #56	; 0x38
 8001e84:	401a      	ands	r2, r3
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	685b      	ldr	r3, [r3, #4]
 8001e8a:	00db      	lsls	r3, r3, #3
 8001e8c:	429a      	cmp	r2, r3
 8001e8e:	d1ec      	bne.n	8001e6a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e90:	4b27      	ldr	r3, [pc, #156]	; (8001f30 <HAL_RCC_ClockConfig+0x1f0>)
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2207      	movs	r2, #7
 8001e96:	4013      	ands	r3, r2
 8001e98:	683a      	ldr	r2, [r7, #0]
 8001e9a:	429a      	cmp	r2, r3
 8001e9c:	d21e      	bcs.n	8001edc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e9e:	4b24      	ldr	r3, [pc, #144]	; (8001f30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2207      	movs	r2, #7
 8001ea4:	4393      	bics	r3, r2
 8001ea6:	0019      	movs	r1, r3
 8001ea8:	4b21      	ldr	r3, [pc, #132]	; (8001f30 <HAL_RCC_ClockConfig+0x1f0>)
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	430a      	orrs	r2, r1
 8001eae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001eb0:	f7ff f8e4 	bl	800107c <HAL_GetTick>
 8001eb4:	0003      	movs	r3, r0
 8001eb6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001eb8:	e009      	b.n	8001ece <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eba:	f7ff f8df 	bl	800107c <HAL_GetTick>
 8001ebe:	0002      	movs	r2, r0
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	1ad3      	subs	r3, r2, r3
 8001ec4:	4a1b      	ldr	r2, [pc, #108]	; (8001f34 <HAL_RCC_ClockConfig+0x1f4>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d901      	bls.n	8001ece <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	e02c      	b.n	8001f28 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <HAL_RCC_ClockConfig+0x1f0>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2207      	movs	r2, #7
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d1ee      	bne.n	8001eba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	2204      	movs	r2, #4
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d009      	beq.n	8001efa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee6:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <HAL_RCC_ClockConfig+0x1f8>)
 8001ee8:	689b      	ldr	r3, [r3, #8]
 8001eea:	4a15      	ldr	r2, [pc, #84]	; (8001f40 <HAL_RCC_ClockConfig+0x200>)
 8001eec:	4013      	ands	r3, r2
 8001eee:	0019      	movs	r1, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68da      	ldr	r2, [r3, #12]
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <HAL_RCC_ClockConfig+0x1f8>)
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001efa:	f000 f829 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8001efe:	0001      	movs	r1, r0
 8001f00:	4b0d      	ldr	r3, [pc, #52]	; (8001f38 <HAL_RCC_ClockConfig+0x1f8>)
 8001f02:	689b      	ldr	r3, [r3, #8]
 8001f04:	0a1b      	lsrs	r3, r3, #8
 8001f06:	220f      	movs	r2, #15
 8001f08:	401a      	ands	r2, r3
 8001f0a:	4b0e      	ldr	r3, [pc, #56]	; (8001f44 <HAL_RCC_ClockConfig+0x204>)
 8001f0c:	0092      	lsls	r2, r2, #2
 8001f0e:	58d3      	ldr	r3, [r2, r3]
 8001f10:	221f      	movs	r2, #31
 8001f12:	4013      	ands	r3, r2
 8001f14:	000a      	movs	r2, r1
 8001f16:	40da      	lsrs	r2, r3
 8001f18:	4b0b      	ldr	r3, [pc, #44]	; (8001f48 <HAL_RCC_ClockConfig+0x208>)
 8001f1a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001f1c:	4b0b      	ldr	r3, [pc, #44]	; (8001f4c <HAL_RCC_ClockConfig+0x20c>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0018      	movs	r0, r3
 8001f22:	f7ff f851 	bl	8000fc8 <HAL_InitTick>
 8001f26:	0003      	movs	r3, r0
}
 8001f28:	0018      	movs	r0, r3
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	b004      	add	sp, #16
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40022000 	.word	0x40022000
 8001f34:	00001388 	.word	0x00001388
 8001f38:	40021000 	.word	0x40021000
 8001f3c:	fffff0ff 	.word	0xfffff0ff
 8001f40:	ffff8fff 	.word	0xffff8fff
 8001f44:	08005388 	.word	0x08005388
 8001f48:	20000000 	.word	0x20000000
 8001f4c:	20000004 	.word	0x20000004

08001f50 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f56:	4b3c      	ldr	r3, [pc, #240]	; (8002048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	2238      	movs	r2, #56	; 0x38
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	d10f      	bne.n	8001f80 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f60:	4b39      	ldr	r3, [pc, #228]	; (8002048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	0adb      	lsrs	r3, r3, #11
 8001f66:	2207      	movs	r2, #7
 8001f68:	4013      	ands	r3, r2
 8001f6a:	2201      	movs	r2, #1
 8001f6c:	409a      	lsls	r2, r3
 8001f6e:	0013      	movs	r3, r2
 8001f70:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f72:	6839      	ldr	r1, [r7, #0]
 8001f74:	4835      	ldr	r0, [pc, #212]	; (800204c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001f76:	f7fe f8cf 	bl	8000118 <__udivsi3>
 8001f7a:	0003      	movs	r3, r0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	e05d      	b.n	800203c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f80:	4b31      	ldr	r3, [pc, #196]	; (8002048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f82:	689b      	ldr	r3, [r3, #8]
 8001f84:	2238      	movs	r2, #56	; 0x38
 8001f86:	4013      	ands	r3, r2
 8001f88:	2b08      	cmp	r3, #8
 8001f8a:	d102      	bne.n	8001f92 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f8c:	4b30      	ldr	r3, [pc, #192]	; (8002050 <HAL_RCC_GetSysClockFreq+0x100>)
 8001f8e:	613b      	str	r3, [r7, #16]
 8001f90:	e054      	b.n	800203c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8001f92:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2238      	movs	r2, #56	; 0x38
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b10      	cmp	r3, #16
 8001f9c:	d138      	bne.n	8002010 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8001f9e:	4b2a      	ldr	r3, [pc, #168]	; (8002048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	2203      	movs	r2, #3
 8001fa4:	4013      	ands	r3, r2
 8001fa6:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fa8:	4b27      	ldr	r3, [pc, #156]	; (8002048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001faa:	68db      	ldr	r3, [r3, #12]
 8001fac:	091b      	lsrs	r3, r3, #4
 8001fae:	2207      	movs	r2, #7
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	2b03      	cmp	r3, #3
 8001fba:	d10d      	bne.n	8001fd8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco =  (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001fbc:	68b9      	ldr	r1, [r7, #8]
 8001fbe:	4824      	ldr	r0, [pc, #144]	; (8002050 <HAL_RCC_GetSysClockFreq+0x100>)
 8001fc0:	f7fe f8aa 	bl	8000118 <__udivsi3>
 8001fc4:	0003      	movs	r3, r0
 8001fc6:	0019      	movs	r1, r3
 8001fc8:	4b1f      	ldr	r3, [pc, #124]	; (8002048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	0a1b      	lsrs	r3, r3, #8
 8001fce:	227f      	movs	r2, #127	; 0x7f
 8001fd0:	4013      	ands	r3, r2
 8001fd2:	434b      	muls	r3, r1
 8001fd4:	617b      	str	r3, [r7, #20]
        break;
 8001fd6:	e00d      	b.n	8001ff4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8001fd8:	68b9      	ldr	r1, [r7, #8]
 8001fda:	481c      	ldr	r0, [pc, #112]	; (800204c <HAL_RCC_GetSysClockFreq+0xfc>)
 8001fdc:	f7fe f89c 	bl	8000118 <__udivsi3>
 8001fe0:	0003      	movs	r3, r0
 8001fe2:	0019      	movs	r1, r3
 8001fe4:	4b18      	ldr	r3, [pc, #96]	; (8002048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	0a1b      	lsrs	r3, r3, #8
 8001fea:	227f      	movs	r2, #127	; 0x7f
 8001fec:	4013      	ands	r3, r2
 8001fee:	434b      	muls	r3, r1
 8001ff0:	617b      	str	r3, [r7, #20]
        break;
 8001ff2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8001ff4:	4b14      	ldr	r3, [pc, #80]	; (8002048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	0f5b      	lsrs	r3, r3, #29
 8001ffa:	2207      	movs	r2, #7
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	3301      	adds	r3, #1
 8002000:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	6978      	ldr	r0, [r7, #20]
 8002006:	f7fe f887 	bl	8000118 <__udivsi3>
 800200a:	0003      	movs	r3, r0
 800200c:	613b      	str	r3, [r7, #16]
 800200e:	e015      	b.n	800203c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002010:	4b0d      	ldr	r3, [pc, #52]	; (8002048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002012:	689b      	ldr	r3, [r3, #8]
 8002014:	2238      	movs	r2, #56	; 0x38
 8002016:	4013      	ands	r3, r2
 8002018:	2b20      	cmp	r3, #32
 800201a:	d103      	bne.n	8002024 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800201c:	2380      	movs	r3, #128	; 0x80
 800201e:	021b      	lsls	r3, r3, #8
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	e00b      	b.n	800203c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002024:	4b08      	ldr	r3, [pc, #32]	; (8002048 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002026:	689b      	ldr	r3, [r3, #8]
 8002028:	2238      	movs	r2, #56	; 0x38
 800202a:	4013      	ands	r3, r2
 800202c:	2b18      	cmp	r3, #24
 800202e:	d103      	bne.n	8002038 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002030:	23fa      	movs	r3, #250	; 0xfa
 8002032:	01db      	lsls	r3, r3, #7
 8002034:	613b      	str	r3, [r7, #16]
 8002036:	e001      	b.n	800203c <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800203c:	693b      	ldr	r3, [r7, #16]
}
 800203e:	0018      	movs	r0, r3
 8002040:	46bd      	mov	sp, r7
 8002042:	b006      	add	sp, #24
 8002044:	bd80      	pop	{r7, pc}
 8002046:	46c0      	nop			; (mov r8, r8)
 8002048:	40021000 	.word	0x40021000
 800204c:	00f42400 	.word	0x00f42400
 8002050:	007a1200 	.word	0x007a1200

08002054 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002058:	4b02      	ldr	r3, [pc, #8]	; (8002064 <HAL_RCC_GetHCLKFreq+0x10>)
 800205a:	681b      	ldr	r3, [r3, #0]
}
 800205c:	0018      	movs	r0, r3
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	20000000 	.word	0x20000000

08002068 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002068:	b5b0      	push	{r4, r5, r7, lr}
 800206a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800206c:	f7ff fff2 	bl	8002054 <HAL_RCC_GetHCLKFreq>
 8002070:	0004      	movs	r4, r0
 8002072:	f7ff fb43 	bl	80016fc <LL_RCC_GetAPB1Prescaler>
 8002076:	0003      	movs	r3, r0
 8002078:	0b1a      	lsrs	r2, r3, #12
 800207a:	4b05      	ldr	r3, [pc, #20]	; (8002090 <HAL_RCC_GetPCLK1Freq+0x28>)
 800207c:	0092      	lsls	r2, r2, #2
 800207e:	58d3      	ldr	r3, [r2, r3]
 8002080:	221f      	movs	r2, #31
 8002082:	4013      	ands	r3, r2
 8002084:	40dc      	lsrs	r4, r3
 8002086:	0023      	movs	r3, r4
}
 8002088:	0018      	movs	r0, r3
 800208a:	46bd      	mov	sp, r7
 800208c:	bdb0      	pop	{r4, r5, r7, pc}
 800208e:	46c0      	nop			; (mov r8, r8)
 8002090:	080053c8 	.word	0x080053c8

08002094 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b086      	sub	sp, #24
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800209c:	2313      	movs	r3, #19
 800209e:	18fb      	adds	r3, r7, r3
 80020a0:	2200      	movs	r2, #0
 80020a2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80020a4:	2312      	movs	r3, #18
 80020a6:	18fb      	adds	r3, r7, r3
 80020a8:	2200      	movs	r2, #0
 80020aa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681a      	ldr	r2, [r3, #0]
 80020b0:	2380      	movs	r3, #128	; 0x80
 80020b2:	029b      	lsls	r3, r3, #10
 80020b4:	4013      	ands	r3, r2
 80020b6:	d100      	bne.n	80020ba <HAL_RCCEx_PeriphCLKConfig+0x26>
 80020b8:	e0a4      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020ba:	2311      	movs	r3, #17
 80020bc:	18fb      	adds	r3, r7, r3
 80020be:	2200      	movs	r2, #0
 80020c0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020c2:	4b87      	ldr	r3, [pc, #540]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020c6:	2380      	movs	r3, #128	; 0x80
 80020c8:	055b      	lsls	r3, r3, #21
 80020ca:	4013      	ands	r3, r2
 80020cc:	d111      	bne.n	80020f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ce:	4b84      	ldr	r3, [pc, #528]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020d2:	4b83      	ldr	r3, [pc, #524]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020d4:	2180      	movs	r1, #128	; 0x80
 80020d6:	0549      	lsls	r1, r1, #21
 80020d8:	430a      	orrs	r2, r1
 80020da:	63da      	str	r2, [r3, #60]	; 0x3c
 80020dc:	4b80      	ldr	r3, [pc, #512]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80020de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	055b      	lsls	r3, r3, #21
 80020e4:	4013      	ands	r3, r2
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020ea:	2311      	movs	r3, #17
 80020ec:	18fb      	adds	r3, r7, r3
 80020ee:	2201      	movs	r2, #1
 80020f0:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020f2:	4b7c      	ldr	r3, [pc, #496]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	4b7b      	ldr	r3, [pc, #492]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	0049      	lsls	r1, r1, #1
 80020fc:	430a      	orrs	r2, r1
 80020fe:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002100:	f7fe ffbc 	bl	800107c <HAL_GetTick>
 8002104:	0003      	movs	r3, r0
 8002106:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002108:	e00b      	b.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800210a:	f7fe ffb7 	bl	800107c <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	2b02      	cmp	r3, #2
 8002116:	d904      	bls.n	8002122 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        ret = HAL_TIMEOUT;
 8002118:	2313      	movs	r3, #19
 800211a:	18fb      	adds	r3, r7, r3
 800211c:	2203      	movs	r2, #3
 800211e:	701a      	strb	r2, [r3, #0]
        break;
 8002120:	e005      	b.n	800212e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002122:	4b70      	ldr	r3, [pc, #448]	; (80022e4 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	2380      	movs	r3, #128	; 0x80
 8002128:	005b      	lsls	r3, r3, #1
 800212a:	4013      	ands	r3, r2
 800212c:	d0ed      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }

    if (ret == HAL_OK)
 800212e:	2313      	movs	r3, #19
 8002130:	18fb      	adds	r3, r7, r3
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	2b00      	cmp	r3, #0
 8002136:	d154      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002138:	4b69      	ldr	r3, [pc, #420]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800213a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800213c:	23c0      	movs	r3, #192	; 0xc0
 800213e:	009b      	lsls	r3, r3, #2
 8002140:	4013      	ands	r3, r2
 8002142:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002144:	697b      	ldr	r3, [r7, #20]
 8002146:	2b00      	cmp	r3, #0
 8002148:	d019      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0xea>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	699b      	ldr	r3, [r3, #24]
 800214e:	697a      	ldr	r2, [r7, #20]
 8002150:	429a      	cmp	r2, r3
 8002152:	d014      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002154:	4b62      	ldr	r3, [pc, #392]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002158:	4a63      	ldr	r2, [pc, #396]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 800215a:	4013      	ands	r3, r2
 800215c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800215e:	4b60      	ldr	r3, [pc, #384]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002160:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002162:	4b5f      	ldr	r3, [pc, #380]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002164:	2180      	movs	r1, #128	; 0x80
 8002166:	0249      	lsls	r1, r1, #9
 8002168:	430a      	orrs	r2, r1
 800216a:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800216c:	4b5c      	ldr	r3, [pc, #368]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800216e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002170:	4b5b      	ldr	r3, [pc, #364]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002172:	495e      	ldr	r1, [pc, #376]	; (80022ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002174:	400a      	ands	r2, r1
 8002176:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002178:	4b59      	ldr	r3, [pc, #356]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800217e:	697b      	ldr	r3, [r7, #20]
 8002180:	2201      	movs	r2, #1
 8002182:	4013      	ands	r3, r2
 8002184:	d016      	beq.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe ff79 	bl	800107c <HAL_GetTick>
 800218a:	0003      	movs	r3, r0
 800218c:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800218e:	e00c      	b.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002190:	f7fe ff74 	bl	800107c <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	4a55      	ldr	r2, [pc, #340]	; (80022f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d904      	bls.n	80021aa <HAL_RCCEx_PeriphCLKConfig+0x116>
          {
            ret = HAL_TIMEOUT;
 80021a0:	2313      	movs	r3, #19
 80021a2:	18fb      	adds	r3, r7, r3
 80021a4:	2203      	movs	r2, #3
 80021a6:	701a      	strb	r2, [r3, #0]
            break;
 80021a8:	e004      	b.n	80021b4 <HAL_RCCEx_PeriphCLKConfig+0x120>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80021aa:	4b4d      	ldr	r3, [pc, #308]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ae:	2202      	movs	r2, #2
 80021b0:	4013      	ands	r3, r2
 80021b2:	d0ed      	beq.n	8002190 <HAL_RCCEx_PeriphCLKConfig+0xfc>
          }
        }
      }

      if (ret == HAL_OK)
 80021b4:	2313      	movs	r3, #19
 80021b6:	18fb      	adds	r3, r7, r3
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10a      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021be:	4b48      	ldr	r3, [pc, #288]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c2:	4a49      	ldr	r2, [pc, #292]	; (80022e8 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 80021c4:	4013      	ands	r3, r2
 80021c6:	0019      	movs	r1, r3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	699a      	ldr	r2, [r3, #24]
 80021cc:	4b44      	ldr	r3, [pc, #272]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021ce:	430a      	orrs	r2, r1
 80021d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80021d2:	e00c      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021d4:	2312      	movs	r3, #18
 80021d6:	18fb      	adds	r3, r7, r3
 80021d8:	2213      	movs	r2, #19
 80021da:	18ba      	adds	r2, r7, r2
 80021dc:	7812      	ldrb	r2, [r2, #0]
 80021de:	701a      	strb	r2, [r3, #0]
 80021e0:	e005      	b.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e2:	2312      	movs	r3, #18
 80021e4:	18fb      	adds	r3, r7, r3
 80021e6:	2213      	movs	r2, #19
 80021e8:	18ba      	adds	r2, r7, r2
 80021ea:	7812      	ldrb	r2, [r2, #0]
 80021ec:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80021ee:	2311      	movs	r3, #17
 80021f0:	18fb      	adds	r3, r7, r3
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d105      	bne.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x170>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021f8:	4b39      	ldr	r3, [pc, #228]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80021fc:	4b38      	ldr	r3, [pc, #224]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80021fe:	493d      	ldr	r1, [pc, #244]	; (80022f4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002200:	400a      	ands	r2, r1
 8002202:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	2201      	movs	r2, #1
 800220a:	4013      	ands	r3, r2
 800220c:	d009      	beq.n	8002222 <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800220e:	4b34      	ldr	r3, [pc, #208]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002210:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002212:	2203      	movs	r2, #3
 8002214:	4393      	bics	r3, r2
 8002216:	0019      	movs	r1, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4b30      	ldr	r3, [pc, #192]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800221e:	430a      	orrs	r2, r1
 8002220:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	2202      	movs	r2, #2
 8002228:	4013      	ands	r3, r2
 800222a:	d009      	beq.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800222c:	4b2c      	ldr	r3, [pc, #176]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800222e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002230:	220c      	movs	r2, #12
 8002232:	4393      	bics	r3, r2
 8002234:	0019      	movs	r1, r3
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	689a      	ldr	r2, [r3, #8]
 800223a:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800223c:	430a      	orrs	r2, r1
 800223e:	655a      	str	r2, [r3, #84]	; 0x54
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2240      	movs	r2, #64	; 0x40
 8002246:	4013      	ands	r3, r2
 8002248:	d009      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800224a:	4b25      	ldr	r3, [pc, #148]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800224c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800224e:	4a2a      	ldr	r2, [pc, #168]	; (80022f8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8002250:	4013      	ands	r3, r2
 8002252:	0019      	movs	r1, r3
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	68da      	ldr	r2, [r3, #12]
 8002258:	4b21      	ldr	r3, [pc, #132]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800225a:	430a      	orrs	r2, r1
 800225c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RCC_CCIPR_RNGSEL */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	2380      	movs	r3, #128	; 0x80
 8002264:	01db      	lsls	r3, r3, #7
 8002266:	4013      	ands	r3, r2
 8002268:	d015      	beq.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x202>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800226a:	4b1d      	ldr	r3, [pc, #116]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800226c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800226e:	009b      	lsls	r3, r3, #2
 8002270:	0899      	lsrs	r1, r3, #2
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	695a      	ldr	r2, [r3, #20]
 8002276:	4b1a      	ldr	r3, [pc, #104]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002278:	430a      	orrs	r2, r1
 800227a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	695a      	ldr	r2, [r3, #20]
 8002280:	2380      	movs	r3, #128	; 0x80
 8002282:	05db      	lsls	r3, r3, #23
 8002284:	429a      	cmp	r2, r3
 8002286:	d106      	bne.n	8002296 <HAL_RCCEx_PeriphCLKConfig+0x202>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002288:	4b15      	ldr	r3, [pc, #84]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800228a:	68da      	ldr	r2, [r3, #12]
 800228c:	4b14      	ldr	r3, [pc, #80]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800228e:	2180      	movs	r1, #128	; 0x80
 8002290:	0249      	lsls	r1, r1, #9
 8002292:	430a      	orrs	r2, r1
 8002294:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681a      	ldr	r2, [r3, #0]
 800229a:	2380      	movs	r3, #128	; 0x80
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	4013      	ands	r3, r2
 80022a0:	d016      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80022a2:	4b0f      	ldr	r3, [pc, #60]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80022a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022a6:	4a15      	ldr	r2, [pc, #84]	; (80022fc <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80022a8:	4013      	ands	r3, r2
 80022aa:	0019      	movs	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	691a      	ldr	r2, [r3, #16]
 80022b0:	4b0b      	ldr	r3, [pc, #44]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80022b2:	430a      	orrs	r2, r1
 80022b4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	2380      	movs	r3, #128	; 0x80
 80022bc:	01db      	lsls	r3, r3, #7
 80022be:	429a      	cmp	r2, r3
 80022c0:	d106      	bne.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80022c2:	4b07      	ldr	r3, [pc, #28]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80022c8:	2180      	movs	r1, #128	; 0x80
 80022ca:	0249      	lsls	r1, r1, #9
 80022cc:	430a      	orrs	r2, r1
 80022ce:	60da      	str	r2, [r3, #12]
    }
  }

  return status;
 80022d0:	2312      	movs	r3, #18
 80022d2:	18fb      	adds	r3, r7, r3
 80022d4:	781b      	ldrb	r3, [r3, #0]
}
 80022d6:	0018      	movs	r0, r3
 80022d8:	46bd      	mov	sp, r7
 80022da:	b006      	add	sp, #24
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	46c0      	nop			; (mov r8, r8)
 80022e0:	40021000 	.word	0x40021000
 80022e4:	40007000 	.word	0x40007000
 80022e8:	fffffcff 	.word	0xfffffcff
 80022ec:	fffeffff 	.word	0xfffeffff
 80022f0:	00001388 	.word	0x00001388
 80022f4:	efffffff 	.word	0xefffffff
 80022f8:	ffffcfff 	.word	0xffffcfff
 80022fc:	ffff3fff 	.word	0xffff3fff

08002300 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2b00      	cmp	r3, #0
 800230c:	d101      	bne.n	8002312 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800230e:	2301      	movs	r3, #1
 8002310:	e046      	b.n	80023a0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	2280      	movs	r2, #128	; 0x80
 8002316:	589b      	ldr	r3, [r3, r2]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d107      	bne.n	800232c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	227c      	movs	r2, #124	; 0x7c
 8002320:	2100      	movs	r1, #0
 8002322:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	0018      	movs	r0, r3
 8002328:	f7fe f9d8 	bl	80006dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2280      	movs	r2, #128	; 0x80
 8002330:	2124      	movs	r1, #36	; 0x24
 8002332:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2101      	movs	r1, #1
 8002340:	438a      	bics	r2, r1
 8002342:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	0018      	movs	r0, r3
 8002348:	f000 fa38 	bl	80027bc <UART_SetConfig>
 800234c:	0003      	movs	r3, r0
 800234e:	2b01      	cmp	r3, #1
 8002350:	d101      	bne.n	8002356 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8002352:	2301      	movs	r3, #1
 8002354:	e024      	b.n	80023a0 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235a:	2b00      	cmp	r3, #0
 800235c:	d003      	beq.n	8002366 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	0018      	movs	r0, r3
 8002362:	f000 feb3 	bl	80030cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	685a      	ldr	r2, [r3, #4]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	490d      	ldr	r1, [pc, #52]	; (80023a8 <HAL_UART_Init+0xa8>)
 8002372:	400a      	ands	r2, r1
 8002374:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	689a      	ldr	r2, [r3, #8]
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	212a      	movs	r1, #42	; 0x2a
 8002382:	438a      	bics	r2, r1
 8002384:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	681a      	ldr	r2, [r3, #0]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2101      	movs	r1, #1
 8002392:	430a      	orrs	r2, r1
 8002394:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	0018      	movs	r0, r3
 800239a:	f000 ff4b 	bl	8003234 <UART_CheckIdleState>
 800239e:	0003      	movs	r3, r0
}
 80023a0:	0018      	movs	r0, r3
 80023a2:	46bd      	mov	sp, r7
 80023a4:	b002      	add	sp, #8
 80023a6:	bd80      	pop	{r7, pc}
 80023a8:	ffffb7ff 	.word	0xffffb7ff

080023ac <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b084      	sub	sp, #16
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	60f8      	str	r0, [r7, #12]
 80023b4:	60b9      	str	r1, [r7, #8]
 80023b6:	1dbb      	adds	r3, r7, #6
 80023b8:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2280      	movs	r2, #128	; 0x80
 80023be:	589b      	ldr	r3, [r3, r2]
 80023c0:	2b20      	cmp	r3, #32
 80023c2:	d000      	beq.n	80023c6 <HAL_UART_Transmit_IT+0x1a>
 80023c4:	e07f      	b.n	80024c6 <HAL_UART_Transmit_IT+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <HAL_UART_Transmit_IT+0x28>
 80023cc:	1dbb      	adds	r3, r7, #6
 80023ce:	881b      	ldrh	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d101      	bne.n	80023d8 <HAL_UART_Transmit_IT+0x2c>
    {
      return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e077      	b.n	80024c8 <HAL_UART_Transmit_IT+0x11c>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	689a      	ldr	r2, [r3, #8]
 80023dc:	2380      	movs	r3, #128	; 0x80
 80023de:	015b      	lsls	r3, r3, #5
 80023e0:	429a      	cmp	r2, r3
 80023e2:	d109      	bne.n	80023f8 <HAL_UART_Transmit_IT+0x4c>
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	691b      	ldr	r3, [r3, #16]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d105      	bne.n	80023f8 <HAL_UART_Transmit_IT+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80023ec:	68bb      	ldr	r3, [r7, #8]
 80023ee:	2201      	movs	r2, #1
 80023f0:	4013      	ands	r3, r2
 80023f2:	d001      	beq.n	80023f8 <HAL_UART_Transmit_IT+0x4c>
      {
        return  HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e067      	b.n	80024c8 <HAL_UART_Transmit_IT+0x11c>
      }
    }

    __HAL_LOCK(huart);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	227c      	movs	r2, #124	; 0x7c
 80023fc:	5c9b      	ldrb	r3, [r3, r2]
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d101      	bne.n	8002406 <HAL_UART_Transmit_IT+0x5a>
 8002402:	2302      	movs	r3, #2
 8002404:	e060      	b.n	80024c8 <HAL_UART_Transmit_IT+0x11c>
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	227c      	movs	r2, #124	; 0x7c
 800240a:	2101      	movs	r1, #1
 800240c:	5499      	strb	r1, [r3, r2]

    huart->pTxBuffPtr  = pData;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	68ba      	ldr	r2, [r7, #8]
 8002412:	651a      	str	r2, [r3, #80]	; 0x50
    huart->TxXferSize  = Size;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	1dba      	adds	r2, r7, #6
 8002418:	2154      	movs	r1, #84	; 0x54
 800241a:	8812      	ldrh	r2, [r2, #0]
 800241c:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	1dba      	adds	r2, r7, #6
 8002422:	2156      	movs	r1, #86	; 0x56
 8002424:	8812      	ldrh	r2, [r2, #0]
 8002426:	525a      	strh	r2, [r3, r1]
    huart->TxISR       = NULL;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2200      	movs	r2, #0
 800242c:	671a      	str	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	2288      	movs	r2, #136	; 0x88
 8002432:	2100      	movs	r1, #0
 8002434:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	2280      	movs	r2, #128	; 0x80
 800243a:	2121      	movs	r1, #33	; 0x21
 800243c:	5099      	str	r1, [r3, r2]

    /* Configure Tx interrupt processing */
    if (huart->FifoMode == UART_FIFOMODE_ENABLE)
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	059b      	lsls	r3, r3, #22
 8002446:	429a      	cmp	r2, r3
 8002448:	d11e      	bne.n	8002488 <HAL_UART_Transmit_IT+0xdc>
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	689a      	ldr	r2, [r3, #8]
 800244e:	2380      	movs	r3, #128	; 0x80
 8002450:	015b      	lsls	r3, r3, #5
 8002452:	429a      	cmp	r2, r3
 8002454:	d107      	bne.n	8002466 <HAL_UART_Transmit_IT+0xba>
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	691b      	ldr	r3, [r3, #16]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d103      	bne.n	8002466 <HAL_UART_Transmit_IT+0xba>
      {
        huart->TxISR = UART_TxISR_16BIT_FIFOEN;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	4a1b      	ldr	r2, [pc, #108]	; (80024d0 <HAL_UART_Transmit_IT+0x124>)
 8002462:	671a      	str	r2, [r3, #112]	; 0x70
 8002464:	e002      	b.n	800246c <HAL_UART_Transmit_IT+0xc0>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT_FIFOEN;
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <HAL_UART_Transmit_IT+0x128>)
 800246a:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	227c      	movs	r2, #124	; 0x7c
 8002470:	2100      	movs	r1, #0
 8002472:	5499      	strb	r1, [r3, r2]

      /* Enable the TX FIFO threshold interrupt */
      SET_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	689a      	ldr	r2, [r3, #8]
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	2180      	movs	r1, #128	; 0x80
 8002480:	0409      	lsls	r1, r1, #16
 8002482:	430a      	orrs	r2, r1
 8002484:	609a      	str	r2, [r3, #8]
 8002486:	e01c      	b.n	80024c2 <HAL_UART_Transmit_IT+0x116>
    }
    else
    {
      /* Set the Tx ISR function pointer according to the data word length */
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	689a      	ldr	r2, [r3, #8]
 800248c:	2380      	movs	r3, #128	; 0x80
 800248e:	015b      	lsls	r3, r3, #5
 8002490:	429a      	cmp	r2, r3
 8002492:	d107      	bne.n	80024a4 <HAL_UART_Transmit_IT+0xf8>
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	691b      	ldr	r3, [r3, #16]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d103      	bne.n	80024a4 <HAL_UART_Transmit_IT+0xf8>
      {
        huart->TxISR = UART_TxISR_16BIT;
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <HAL_UART_Transmit_IT+0x12c>)
 80024a0:	671a      	str	r2, [r3, #112]	; 0x70
 80024a2:	e002      	b.n	80024aa <HAL_UART_Transmit_IT+0xfe>
      }
      else
      {
        huart->TxISR = UART_TxISR_8BIT;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <HAL_UART_Transmit_IT+0x130>)
 80024a8:	671a      	str	r2, [r3, #112]	; 0x70
      }

      __HAL_UNLOCK(huart);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	227c      	movs	r2, #124	; 0x7c
 80024ae:	2100      	movs	r1, #0
 80024b0:	5499      	strb	r1, [r3, r2]

      /* Enable the Transmit Data Register Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	681a      	ldr	r2, [r3, #0]
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	430a      	orrs	r2, r1
 80024c0:	601a      	str	r2, [r3, #0]
    }

    return HAL_OK;
 80024c2:	2300      	movs	r3, #0
 80024c4:	e000      	b.n	80024c8 <HAL_UART_Transmit_IT+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80024c6:	2302      	movs	r3, #2
  }
}
 80024c8:	0018      	movs	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	b004      	add	sp, #16
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	08003569 	.word	0x08003569
 80024d4:	080034c1 	.word	0x080034c1
 80024d8:	08003447 	.word	0x08003447
 80024dc:	080033d7 	.word	0x080033d7

080024e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	69db      	ldr	r3, [r3, #28]
 80024ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 8002500:	69fb      	ldr	r3, [r7, #28]
 8002502:	220f      	movs	r2, #15
 8002504:	4013      	ands	r3, r2
 8002506:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	2b00      	cmp	r3, #0
 800250c:	d117      	bne.n	800253e <HAL_UART_IRQHandler+0x5e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	2220      	movs	r2, #32
 8002512:	4013      	ands	r3, r2
 8002514:	d013      	beq.n	800253e <HAL_UART_IRQHandler+0x5e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	2220      	movs	r2, #32
 800251a:	4013      	ands	r3, r2
 800251c:	d104      	bne.n	8002528 <HAL_UART_IRQHandler+0x48>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800251e:	697a      	ldr	r2, [r7, #20]
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	055b      	lsls	r3, r3, #21
 8002524:	4013      	ands	r3, r2
 8002526:	d00a      	beq.n	800253e <HAL_UART_IRQHandler+0x5e>
    {
      if (huart->RxISR != NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800252c:	2b00      	cmp	r3, #0
 800252e:	d100      	bne.n	8002532 <HAL_UART_IRQHandler+0x52>
 8002530:	e127      	b.n	8002782 <HAL_UART_IRQHandler+0x2a2>
      {
        huart->RxISR(huart);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	0010      	movs	r0, r2
 800253a:	4798      	blx	r3
      }
      return;
 800253c:	e121      	b.n	8002782 <HAL_UART_IRQHandler+0x2a2>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d100      	bne.n	8002546 <HAL_UART_IRQHandler+0x66>
 8002544:	e0c8      	b.n	80026d8 <HAL_UART_IRQHandler+0x1f8>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002546:	697b      	ldr	r3, [r7, #20]
 8002548:	4a92      	ldr	r2, [pc, #584]	; (8002794 <HAL_UART_IRQHandler+0x2b4>)
 800254a:	4013      	ands	r3, r2
 800254c:	d105      	bne.n	800255a <HAL_UART_IRQHandler+0x7a>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U))))
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	2390      	movs	r3, #144	; 0x90
 8002552:	005b      	lsls	r3, r3, #1
 8002554:	4013      	ands	r3, r2
 8002556:	d100      	bne.n	800255a <HAL_UART_IRQHandler+0x7a>
 8002558:	e0be      	b.n	80026d8 <HAL_UART_IRQHandler+0x1f8>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	2201      	movs	r2, #1
 800255e:	4013      	ands	r3, r2
 8002560:	d010      	beq.n	8002584 <HAL_UART_IRQHandler+0xa4>
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4013      	ands	r3, r2
 800256a:	d00b      	beq.n	8002584 <HAL_UART_IRQHandler+0xa4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2201      	movs	r2, #1
 8002572:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2288      	movs	r2, #136	; 0x88
 8002578:	589b      	ldr	r3, [r3, r2]
 800257a:	2201      	movs	r2, #1
 800257c:	431a      	orrs	r2, r3
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2188      	movs	r1, #136	; 0x88
 8002582:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002584:	69fb      	ldr	r3, [r7, #28]
 8002586:	2202      	movs	r2, #2
 8002588:	4013      	ands	r3, r2
 800258a:	d00f      	beq.n	80025ac <HAL_UART_IRQHandler+0xcc>
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	2201      	movs	r2, #1
 8002590:	4013      	ands	r3, r2
 8002592:	d00b      	beq.n	80025ac <HAL_UART_IRQHandler+0xcc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	2202      	movs	r2, #2
 800259a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2288      	movs	r2, #136	; 0x88
 80025a0:	589b      	ldr	r3, [r3, r2]
 80025a2:	2204      	movs	r2, #4
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2188      	movs	r1, #136	; 0x88
 80025aa:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80025ac:	69fb      	ldr	r3, [r7, #28]
 80025ae:	2204      	movs	r2, #4
 80025b0:	4013      	ands	r3, r2
 80025b2:	d00f      	beq.n	80025d4 <HAL_UART_IRQHandler+0xf4>
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	2201      	movs	r2, #1
 80025b8:	4013      	ands	r3, r2
 80025ba:	d00b      	beq.n	80025d4 <HAL_UART_IRQHandler+0xf4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	2204      	movs	r2, #4
 80025c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2288      	movs	r2, #136	; 0x88
 80025c8:	589b      	ldr	r3, [r3, r2]
 80025ca:	2202      	movs	r2, #2
 80025cc:	431a      	orrs	r2, r3
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2188      	movs	r1, #136	; 0x88
 80025d2:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	2208      	movs	r2, #8
 80025d8:	4013      	ands	r3, r2
 80025da:	d013      	beq.n	8002604 <HAL_UART_IRQHandler+0x124>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80025dc:	69bb      	ldr	r3, [r7, #24]
 80025de:	2220      	movs	r2, #32
 80025e0:	4013      	ands	r3, r2
 80025e2:	d103      	bne.n	80025ec <HAL_UART_IRQHandler+0x10c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	4a6b      	ldr	r2, [pc, #428]	; (8002794 <HAL_UART_IRQHandler+0x2b4>)
 80025e8:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80025ea:	d00b      	beq.n	8002604 <HAL_UART_IRQHandler+0x124>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	2208      	movs	r2, #8
 80025f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2288      	movs	r2, #136	; 0x88
 80025f8:	589b      	ldr	r3, [r3, r2]
 80025fa:	2208      	movs	r2, #8
 80025fc:	431a      	orrs	r2, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	2188      	movs	r1, #136	; 0x88
 8002602:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2288      	movs	r2, #136	; 0x88
 8002608:	589b      	ldr	r3, [r3, r2]
 800260a:	2b00      	cmp	r3, #0
 800260c:	d100      	bne.n	8002610 <HAL_UART_IRQHandler+0x130>
 800260e:	e0ba      	b.n	8002786 <HAL_UART_IRQHandler+0x2a6>
    {
      /* UART in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002610:	69fb      	ldr	r3, [r7, #28]
 8002612:	2220      	movs	r2, #32
 8002614:	4013      	ands	r3, r2
 8002616:	d011      	beq.n	800263c <HAL_UART_IRQHandler+0x15c>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002618:	69bb      	ldr	r3, [r7, #24]
 800261a:	2220      	movs	r2, #32
 800261c:	4013      	ands	r3, r2
 800261e:	d104      	bne.n	800262a <HAL_UART_IRQHandler+0x14a>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	2380      	movs	r3, #128	; 0x80
 8002624:	055b      	lsls	r3, r3, #21
 8002626:	4013      	ands	r3, r2
 8002628:	d008      	beq.n	800263c <HAL_UART_IRQHandler+0x15c>
      {
        if (huart->RxISR != NULL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800262e:	2b00      	cmp	r3, #0
 8002630:	d004      	beq.n	800263c <HAL_UART_IRQHandler+0x15c>
        {
          huart->RxISR(huart);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002636:	687a      	ldr	r2, [r7, #4]
 8002638:	0010      	movs	r0, r2
 800263a:	4798      	blx	r3
        }
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = huart->ErrorCode;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2288      	movs	r2, #136	; 0x88
 8002640:	589b      	ldr	r3, [r3, r2]
 8002642:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	2240      	movs	r2, #64	; 0x40
 800264c:	4013      	ands	r3, r2
 800264e:	2b40      	cmp	r3, #64	; 0x40
 8002650:	d003      	beq.n	800265a <HAL_UART_IRQHandler+0x17a>
          ((errorcode & HAL_UART_ERROR_ORE) != 0U))
 8002652:	68fb      	ldr	r3, [r7, #12]
 8002654:	2208      	movs	r2, #8
 8002656:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002658:	d033      	beq.n	80026c2 <HAL_UART_IRQHandler+0x1e2>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	0018      	movs	r0, r3
 800265e:	f000 fe7f 	bl	8003360 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2240      	movs	r2, #64	; 0x40
 800266a:	4013      	ands	r3, r2
 800266c:	2b40      	cmp	r3, #64	; 0x40
 800266e:	d123      	bne.n	80026b8 <HAL_UART_IRQHandler+0x1d8>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	2140      	movs	r1, #64	; 0x40
 800267c:	438a      	bics	r2, r1
 800267e:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002684:	2b00      	cmp	r3, #0
 8002686:	d012      	beq.n	80026ae <HAL_UART_IRQHandler+0x1ce>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800268c:	4a42      	ldr	r2, [pc, #264]	; (8002798 <HAL_UART_IRQHandler+0x2b8>)
 800268e:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002694:	0018      	movs	r0, r3
 8002696:	f7fe fdd9 	bl	800124c <HAL_DMA_Abort_IT>
 800269a:	1e03      	subs	r3, r0, #0
 800269c:	d01a      	beq.n	80026d4 <HAL_UART_IRQHandler+0x1f4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a8:	0018      	movs	r0, r3
 80026aa:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026ac:	e012      	b.n	80026d4 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	0018      	movs	r0, r3
 80026b2:	f000 f87b 	bl	80027ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026b6:	e00d      	b.n	80026d4 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	0018      	movs	r0, r3
 80026bc:	f000 f876 	bl	80027ac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026c0:	e008      	b.n	80026d4 <HAL_UART_IRQHandler+0x1f4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	0018      	movs	r0, r3
 80026c6:	f000 f871 	bl	80027ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2288      	movs	r2, #136	; 0x88
 80026ce:	2100      	movs	r1, #0
 80026d0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80026d2:	e058      	b.n	8002786 <HAL_UART_IRQHandler+0x2a6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80026d4:	46c0      	nop			; (mov r8, r8)
    return;
 80026d6:	e056      	b.n	8002786 <HAL_UART_IRQHandler+0x2a6>

  } /* End if some error occurs */

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80026d8:	69fa      	ldr	r2, [r7, #28]
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	035b      	lsls	r3, r3, #13
 80026de:	4013      	ands	r3, r2
 80026e0:	d00e      	beq.n	8002700 <HAL_UART_IRQHandler+0x220>
 80026e2:	697a      	ldr	r2, [r7, #20]
 80026e4:	2380      	movs	r3, #128	; 0x80
 80026e6:	03db      	lsls	r3, r3, #15
 80026e8:	4013      	ands	r3, r2
 80026ea:	d009      	beq.n	8002700 <HAL_UART_IRQHandler+0x220>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2280      	movs	r2, #128	; 0x80
 80026f2:	0352      	lsls	r2, r2, #13
 80026f4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	0018      	movs	r0, r3
 80026fa:	f000 ffa8 	bl	800364e <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80026fe:	e045      	b.n	800278c <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	2280      	movs	r2, #128	; 0x80
 8002704:	4013      	ands	r3, r2
 8002706:	d012      	beq.n	800272e <HAL_UART_IRQHandler+0x24e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	2280      	movs	r2, #128	; 0x80
 800270c:	4013      	ands	r3, r2
 800270e:	d104      	bne.n	800271a <HAL_UART_IRQHandler+0x23a>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8002710:	697a      	ldr	r2, [r7, #20]
 8002712:	2380      	movs	r3, #128	; 0x80
 8002714:	041b      	lsls	r3, r3, #16
 8002716:	4013      	ands	r3, r2
 8002718:	d009      	beq.n	800272e <HAL_UART_IRQHandler+0x24e>
  {
    if (huart->TxISR != NULL)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271e:	2b00      	cmp	r3, #0
 8002720:	d033      	beq.n	800278a <HAL_UART_IRQHandler+0x2aa>
    {
      huart->TxISR(huart);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	0010      	movs	r0, r2
 800272a:	4798      	blx	r3
    }
    return;
 800272c:	e02d      	b.n	800278a <HAL_UART_IRQHandler+0x2aa>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	2240      	movs	r2, #64	; 0x40
 8002732:	4013      	ands	r3, r2
 8002734:	d008      	beq.n	8002748 <HAL_UART_IRQHandler+0x268>
 8002736:	69bb      	ldr	r3, [r7, #24]
 8002738:	2240      	movs	r2, #64	; 0x40
 800273a:	4013      	ands	r3, r2
 800273c:	d004      	beq.n	8002748 <HAL_UART_IRQHandler+0x268>
  {
    UART_EndTransmit_IT(huart);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	0018      	movs	r0, r3
 8002742:	f000 ff69 	bl	8003618 <UART_EndTransmit_IT>
    return;
 8002746:	e021      	b.n	800278c <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8002748:	69fa      	ldr	r2, [r7, #28]
 800274a:	2380      	movs	r3, #128	; 0x80
 800274c:	041b      	lsls	r3, r3, #16
 800274e:	4013      	ands	r3, r2
 8002750:	d009      	beq.n	8002766 <HAL_UART_IRQHandler+0x286>
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	05db      	lsls	r3, r3, #23
 8002758:	4013      	ands	r3, r2
 800275a:	d004      	beq.n	8002766 <HAL_UART_IRQHandler+0x286>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	0018      	movs	r0, r3
 8002760:	f000 ff85 	bl	800366e <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002764:	e012      	b.n	800278c <HAL_UART_IRQHandler+0x2ac>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8002766:	69fa      	ldr	r2, [r7, #28]
 8002768:	2380      	movs	r3, #128	; 0x80
 800276a:	045b      	lsls	r3, r3, #17
 800276c:	4013      	ands	r3, r2
 800276e:	d00d      	beq.n	800278c <HAL_UART_IRQHandler+0x2ac>
 8002770:	69bb      	ldr	r3, [r7, #24]
 8002772:	2b00      	cmp	r3, #0
 8002774:	da0a      	bge.n	800278c <HAL_UART_IRQHandler+0x2ac>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f000 ff70 	bl	800365e <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800277e:	46c0      	nop			; (mov r8, r8)
 8002780:	e004      	b.n	800278c <HAL_UART_IRQHandler+0x2ac>
      return;
 8002782:	46c0      	nop			; (mov r8, r8)
 8002784:	e002      	b.n	800278c <HAL_UART_IRQHandler+0x2ac>
    return;
 8002786:	46c0      	nop			; (mov r8, r8)
 8002788:	e000      	b.n	800278c <HAL_UART_IRQHandler+0x2ac>
    return;
 800278a:	46c0      	nop			; (mov r8, r8)
  }
}
 800278c:	46bd      	mov	sp, r7
 800278e:	b008      	add	sp, #32
 8002790:	bd80      	pop	{r7, pc}
 8002792:	46c0      	nop			; (mov r8, r8)
 8002794:	10000001 	.word	0x10000001
 8002798:	080033a9 	.word	0x080033a9

0800279c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80027a4:	46c0      	nop			; (mov r8, r8)
 80027a6:	46bd      	mov	sp, r7
 80027a8:	b002      	add	sp, #8
 80027aa:	bd80      	pop	{r7, pc}

080027ac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	b082      	sub	sp, #8
 80027b0:	af00      	add	r7, sp, #0
 80027b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80027b4:	46c0      	nop			; (mov r8, r8)
 80027b6:	46bd      	mov	sp, r7
 80027b8:	b002      	add	sp, #8
 80027ba:	bd80      	pop	{r7, pc}

080027bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b088      	sub	sp, #32
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 80027c4:	2300      	movs	r3, #0
 80027c6:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80027c8:	231e      	movs	r3, #30
 80027ca:	18fb      	adds	r3, r7, r3
 80027cc:	2200      	movs	r2, #0
 80027ce:	701a      	strb	r2, [r3, #0]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	689a      	ldr	r2, [r3, #8]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691b      	ldr	r3, [r3, #16]
 80027dc:	431a      	orrs	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	695b      	ldr	r3, [r3, #20]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	69db      	ldr	r3, [r3, #28]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	61bb      	str	r3, [r7, #24]
  tmpreg |= (uint32_t)huart->FifoMode;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80027f0:	69ba      	ldr	r2, [r7, #24]
 80027f2:	4313      	orrs	r3, r2
 80027f4:	61bb      	str	r3, [r7, #24]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4aba      	ldr	r2, [pc, #744]	; (8002ae8 <UART_SetConfig+0x32c>)
 80027fe:	4013      	ands	r3, r2
 8002800:	0019      	movs	r1, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	430a      	orrs	r2, r1
 800280a:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	4ab6      	ldr	r2, [pc, #728]	; (8002aec <UART_SetConfig+0x330>)
 8002814:	4013      	ands	r3, r2
 8002816:	0019      	movs	r1, r3
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	68da      	ldr	r2, [r3, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	430a      	orrs	r2, r1
 8002822:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	699b      	ldr	r3, [r3, #24]
 8002828:	61bb      	str	r3, [r7, #24]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
  {
    tmpreg |= huart->Init.OneBitSampling;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6a1b      	ldr	r3, [r3, #32]
 800282e:	69ba      	ldr	r2, [r7, #24]
 8002830:	4313      	orrs	r3, r2
 8002832:	61bb      	str	r3, [r7, #24]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	4aad      	ldr	r2, [pc, #692]	; (8002af0 <UART_SetConfig+0x334>)
 800283c:	4013      	ands	r3, r2
 800283e:	0019      	movs	r1, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	69ba      	ldr	r2, [r7, #24]
 8002846:	430a      	orrs	r2, r1
 8002848:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002850:	220f      	movs	r2, #15
 8002852:	4393      	bics	r3, r2
 8002854:	0019      	movs	r1, r3
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	430a      	orrs	r2, r1
 8002860:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4aa3      	ldr	r2, [pc, #652]	; (8002af4 <UART_SetConfig+0x338>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d125      	bne.n	80028b8 <UART_SetConfig+0xfc>
 800286c:	4ba2      	ldr	r3, [pc, #648]	; (8002af8 <UART_SetConfig+0x33c>)
 800286e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002870:	2203      	movs	r2, #3
 8002872:	4013      	ands	r3, r2
 8002874:	2b01      	cmp	r3, #1
 8002876:	d00f      	beq.n	8002898 <UART_SetConfig+0xdc>
 8002878:	d304      	bcc.n	8002884 <UART_SetConfig+0xc8>
 800287a:	2b02      	cmp	r3, #2
 800287c:	d007      	beq.n	800288e <UART_SetConfig+0xd2>
 800287e:	2b03      	cmp	r3, #3
 8002880:	d00f      	beq.n	80028a2 <UART_SetConfig+0xe6>
 8002882:	e013      	b.n	80028ac <UART_SetConfig+0xf0>
 8002884:	231f      	movs	r3, #31
 8002886:	18fb      	adds	r3, r7, r3
 8002888:	2200      	movs	r2, #0
 800288a:	701a      	strb	r2, [r3, #0]
 800288c:	e05a      	b.n	8002944 <UART_SetConfig+0x188>
 800288e:	231f      	movs	r3, #31
 8002890:	18fb      	adds	r3, r7, r3
 8002892:	2202      	movs	r2, #2
 8002894:	701a      	strb	r2, [r3, #0]
 8002896:	e055      	b.n	8002944 <UART_SetConfig+0x188>
 8002898:	231f      	movs	r3, #31
 800289a:	18fb      	adds	r3, r7, r3
 800289c:	2204      	movs	r2, #4
 800289e:	701a      	strb	r2, [r3, #0]
 80028a0:	e050      	b.n	8002944 <UART_SetConfig+0x188>
 80028a2:	231f      	movs	r3, #31
 80028a4:	18fb      	adds	r3, r7, r3
 80028a6:	2208      	movs	r2, #8
 80028a8:	701a      	strb	r2, [r3, #0]
 80028aa:	e04b      	b.n	8002944 <UART_SetConfig+0x188>
 80028ac:	231f      	movs	r3, #31
 80028ae:	18fb      	adds	r3, r7, r3
 80028b0:	2210      	movs	r2, #16
 80028b2:	701a      	strb	r2, [r3, #0]
 80028b4:	46c0      	nop			; (mov r8, r8)
 80028b6:	e045      	b.n	8002944 <UART_SetConfig+0x188>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a8f      	ldr	r2, [pc, #572]	; (8002afc <UART_SetConfig+0x340>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d128      	bne.n	8002914 <UART_SetConfig+0x158>
 80028c2:	4b8d      	ldr	r3, [pc, #564]	; (8002af8 <UART_SetConfig+0x33c>)
 80028c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028c6:	220c      	movs	r2, #12
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d012      	beq.n	80028f4 <UART_SetConfig+0x138>
 80028ce:	d802      	bhi.n	80028d6 <UART_SetConfig+0x11a>
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <UART_SetConfig+0x124>
 80028d4:	e018      	b.n	8002908 <UART_SetConfig+0x14c>
 80028d6:	2b08      	cmp	r3, #8
 80028d8:	d007      	beq.n	80028ea <UART_SetConfig+0x12e>
 80028da:	2b0c      	cmp	r3, #12
 80028dc:	d00f      	beq.n	80028fe <UART_SetConfig+0x142>
 80028de:	e013      	b.n	8002908 <UART_SetConfig+0x14c>
 80028e0:	231f      	movs	r3, #31
 80028e2:	18fb      	adds	r3, r7, r3
 80028e4:	2200      	movs	r2, #0
 80028e6:	701a      	strb	r2, [r3, #0]
 80028e8:	e02c      	b.n	8002944 <UART_SetConfig+0x188>
 80028ea:	231f      	movs	r3, #31
 80028ec:	18fb      	adds	r3, r7, r3
 80028ee:	2202      	movs	r2, #2
 80028f0:	701a      	strb	r2, [r3, #0]
 80028f2:	e027      	b.n	8002944 <UART_SetConfig+0x188>
 80028f4:	231f      	movs	r3, #31
 80028f6:	18fb      	adds	r3, r7, r3
 80028f8:	2204      	movs	r2, #4
 80028fa:	701a      	strb	r2, [r3, #0]
 80028fc:	e022      	b.n	8002944 <UART_SetConfig+0x188>
 80028fe:	231f      	movs	r3, #31
 8002900:	18fb      	adds	r3, r7, r3
 8002902:	2208      	movs	r2, #8
 8002904:	701a      	strb	r2, [r3, #0]
 8002906:	e01d      	b.n	8002944 <UART_SetConfig+0x188>
 8002908:	231f      	movs	r3, #31
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	2210      	movs	r2, #16
 800290e:	701a      	strb	r2, [r3, #0]
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	e017      	b.n	8002944 <UART_SetConfig+0x188>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a79      	ldr	r2, [pc, #484]	; (8002b00 <UART_SetConfig+0x344>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d104      	bne.n	8002928 <UART_SetConfig+0x16c>
 800291e:	231f      	movs	r3, #31
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	2200      	movs	r2, #0
 8002924:	701a      	strb	r2, [r3, #0]
 8002926:	e00d      	b.n	8002944 <UART_SetConfig+0x188>
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	4a75      	ldr	r2, [pc, #468]	; (8002b04 <UART_SetConfig+0x348>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d104      	bne.n	800293c <UART_SetConfig+0x180>
 8002932:	231f      	movs	r3, #31
 8002934:	18fb      	adds	r3, r7, r3
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	e003      	b.n	8002944 <UART_SetConfig+0x188>
 800293c:	231f      	movs	r3, #31
 800293e:	18fb      	adds	r3, r7, r3
 8002940:	2210      	movs	r2, #16
 8002942:	701a      	strb	r2, [r3, #0]
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	69da      	ldr	r2, [r3, #28]
 8002948:	2380      	movs	r3, #128	; 0x80
 800294a:	021b      	lsls	r3, r3, #8
 800294c:	429a      	cmp	r2, r3
 800294e:	d000      	beq.n	8002952 <UART_SetConfig+0x196>
 8002950:	e1de      	b.n	8002d10 <UART_SetConfig+0x554>
  {
    switch (clocksource)
 8002952:	231f      	movs	r3, #31
 8002954:	18fb      	adds	r3, r7, r3
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	2b02      	cmp	r3, #2
 800295a:	d100      	bne.n	800295e <UART_SetConfig+0x1a2>
 800295c:	e06c      	b.n	8002a38 <UART_SetConfig+0x27c>
 800295e:	dc02      	bgt.n	8002966 <UART_SetConfig+0x1aa>
 8002960:	2b00      	cmp	r3, #0
 8002962:	d007      	beq.n	8002974 <UART_SetConfig+0x1b8>
 8002964:	e1ab      	b.n	8002cbe <UART_SetConfig+0x502>
 8002966:	2b04      	cmp	r3, #4
 8002968:	d100      	bne.n	800296c <UART_SetConfig+0x1b0>
 800296a:	e0e5      	b.n	8002b38 <UART_SetConfig+0x37c>
 800296c:	2b08      	cmp	r3, #8
 800296e:	d100      	bne.n	8002972 <UART_SetConfig+0x1b6>
 8002970:	e144      	b.n	8002bfc <UART_SetConfig+0x440>
 8002972:	e1a4      	b.n	8002cbe <UART_SetConfig+0x502>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002974:	f7ff fb78 	bl	8002068 <HAL_RCC_GetPCLK1Freq>
 8002978:	0003      	movs	r3, r0
 800297a:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	2b00      	cmp	r3, #0
 8002982:	d044      	beq.n	8002a0e <UART_SetConfig+0x252>
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002988:	2b01      	cmp	r3, #1
 800298a:	d03e      	beq.n	8002a0a <UART_SetConfig+0x24e>
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002990:	2b02      	cmp	r3, #2
 8002992:	d038      	beq.n	8002a06 <UART_SetConfig+0x24a>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002998:	2b03      	cmp	r3, #3
 800299a:	d032      	beq.n	8002a02 <UART_SetConfig+0x246>
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d02c      	beq.n	80029fe <UART_SetConfig+0x242>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029a8:	2b05      	cmp	r3, #5
 80029aa:	d026      	beq.n	80029fa <UART_SetConfig+0x23e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b0:	2b06      	cmp	r3, #6
 80029b2:	d020      	beq.n	80029f6 <UART_SetConfig+0x23a>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029b8:	2b07      	cmp	r3, #7
 80029ba:	d01a      	beq.n	80029f2 <UART_SetConfig+0x236>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c0:	2b08      	cmp	r3, #8
 80029c2:	d014      	beq.n	80029ee <UART_SetConfig+0x232>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	2b09      	cmp	r3, #9
 80029ca:	d00e      	beq.n	80029ea <UART_SetConfig+0x22e>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d0:	2b0a      	cmp	r3, #10
 80029d2:	d008      	beq.n	80029e6 <UART_SetConfig+0x22a>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d8:	2b0b      	cmp	r3, #11
 80029da:	d102      	bne.n	80029e2 <UART_SetConfig+0x226>
 80029dc:	2380      	movs	r3, #128	; 0x80
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	e016      	b.n	8002a10 <UART_SetConfig+0x254>
 80029e2:	2301      	movs	r3, #1
 80029e4:	e014      	b.n	8002a10 <UART_SetConfig+0x254>
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	e012      	b.n	8002a10 <UART_SetConfig+0x254>
 80029ea:	2340      	movs	r3, #64	; 0x40
 80029ec:	e010      	b.n	8002a10 <UART_SetConfig+0x254>
 80029ee:	2320      	movs	r3, #32
 80029f0:	e00e      	b.n	8002a10 <UART_SetConfig+0x254>
 80029f2:	2310      	movs	r3, #16
 80029f4:	e00c      	b.n	8002a10 <UART_SetConfig+0x254>
 80029f6:	230c      	movs	r3, #12
 80029f8:	e00a      	b.n	8002a10 <UART_SetConfig+0x254>
 80029fa:	230a      	movs	r3, #10
 80029fc:	e008      	b.n	8002a10 <UART_SetConfig+0x254>
 80029fe:	2308      	movs	r3, #8
 8002a00:	e006      	b.n	8002a10 <UART_SetConfig+0x254>
 8002a02:	2306      	movs	r3, #6
 8002a04:	e004      	b.n	8002a10 <UART_SetConfig+0x254>
 8002a06:	2304      	movs	r3, #4
 8002a08:	e002      	b.n	8002a10 <UART_SetConfig+0x254>
 8002a0a:	2302      	movs	r3, #2
 8002a0c:	e000      	b.n	8002a10 <UART_SetConfig+0x254>
 8002a0e:	2301      	movs	r3, #1
 8002a10:	0019      	movs	r1, r3
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7fd fb80 	bl	8000118 <__udivsi3>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	005a      	lsls	r2, r3, #1
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	18d2      	adds	r2, r2, r3
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	0019      	movs	r1, r3
 8002a2a:	0010      	movs	r0, r2
 8002a2c:	f7fd fb74 	bl	8000118 <__udivsi3>
 8002a30:	0003      	movs	r3, r0
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	617b      	str	r3, [r7, #20]
        break;
 8002a36:	e147      	b.n	8002cc8 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d043      	beq.n	8002ac8 <UART_SetConfig+0x30c>
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d03d      	beq.n	8002ac4 <UART_SetConfig+0x308>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a4c:	2b02      	cmp	r3, #2
 8002a4e:	d037      	beq.n	8002ac0 <UART_SetConfig+0x304>
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a54:	2b03      	cmp	r3, #3
 8002a56:	d031      	beq.n	8002abc <UART_SetConfig+0x300>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a5c:	2b04      	cmp	r3, #4
 8002a5e:	d02b      	beq.n	8002ab8 <UART_SetConfig+0x2fc>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	2b05      	cmp	r3, #5
 8002a66:	d025      	beq.n	8002ab4 <UART_SetConfig+0x2f8>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a6c:	2b06      	cmp	r3, #6
 8002a6e:	d01f      	beq.n	8002ab0 <UART_SetConfig+0x2f4>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a74:	2b07      	cmp	r3, #7
 8002a76:	d019      	beq.n	8002aac <UART_SetConfig+0x2f0>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7c:	2b08      	cmp	r3, #8
 8002a7e:	d013      	beq.n	8002aa8 <UART_SetConfig+0x2ec>
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a84:	2b09      	cmp	r3, #9
 8002a86:	d00d      	beq.n	8002aa4 <UART_SetConfig+0x2e8>
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a8c:	2b0a      	cmp	r3, #10
 8002a8e:	d007      	beq.n	8002aa0 <UART_SetConfig+0x2e4>
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a94:	2b0b      	cmp	r3, #11
 8002a96:	d101      	bne.n	8002a9c <UART_SetConfig+0x2e0>
 8002a98:	4b1b      	ldr	r3, [pc, #108]	; (8002b08 <UART_SetConfig+0x34c>)
 8002a9a:	e016      	b.n	8002aca <UART_SetConfig+0x30e>
 8002a9c:	4b1b      	ldr	r3, [pc, #108]	; (8002b0c <UART_SetConfig+0x350>)
 8002a9e:	e014      	b.n	8002aca <UART_SetConfig+0x30e>
 8002aa0:	4b1b      	ldr	r3, [pc, #108]	; (8002b10 <UART_SetConfig+0x354>)
 8002aa2:	e012      	b.n	8002aca <UART_SetConfig+0x30e>
 8002aa4:	4b1b      	ldr	r3, [pc, #108]	; (8002b14 <UART_SetConfig+0x358>)
 8002aa6:	e010      	b.n	8002aca <UART_SetConfig+0x30e>
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <UART_SetConfig+0x35c>)
 8002aaa:	e00e      	b.n	8002aca <UART_SetConfig+0x30e>
 8002aac:	4b1b      	ldr	r3, [pc, #108]	; (8002b1c <UART_SetConfig+0x360>)
 8002aae:	e00c      	b.n	8002aca <UART_SetConfig+0x30e>
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <UART_SetConfig+0x364>)
 8002ab2:	e00a      	b.n	8002aca <UART_SetConfig+0x30e>
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	; (8002b24 <UART_SetConfig+0x368>)
 8002ab6:	e008      	b.n	8002aca <UART_SetConfig+0x30e>
 8002ab8:	4b1b      	ldr	r3, [pc, #108]	; (8002b28 <UART_SetConfig+0x36c>)
 8002aba:	e006      	b.n	8002aca <UART_SetConfig+0x30e>
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <UART_SetConfig+0x370>)
 8002abe:	e004      	b.n	8002aca <UART_SetConfig+0x30e>
 8002ac0:	4b1b      	ldr	r3, [pc, #108]	; (8002b30 <UART_SetConfig+0x374>)
 8002ac2:	e002      	b.n	8002aca <UART_SetConfig+0x30e>
 8002ac4:	4b1b      	ldr	r3, [pc, #108]	; (8002b34 <UART_SetConfig+0x378>)
 8002ac6:	e000      	b.n	8002aca <UART_SetConfig+0x30e>
 8002ac8:	4b10      	ldr	r3, [pc, #64]	; (8002b0c <UART_SetConfig+0x350>)
 8002aca:	687a      	ldr	r2, [r7, #4]
 8002acc:	6852      	ldr	r2, [r2, #4]
 8002ace:	0852      	lsrs	r2, r2, #1
 8002ad0:	189a      	adds	r2, r3, r2
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	0019      	movs	r1, r3
 8002ad8:	0010      	movs	r0, r2
 8002ada:	f7fd fb1d 	bl	8000118 <__udivsi3>
 8002ade:	0003      	movs	r3, r0
 8002ae0:	b29b      	uxth	r3, r3
 8002ae2:	617b      	str	r3, [r7, #20]
        break;
 8002ae4:	e0f0      	b.n	8002cc8 <UART_SetConfig+0x50c>
 8002ae6:	46c0      	nop			; (mov r8, r8)
 8002ae8:	cfff69f3 	.word	0xcfff69f3
 8002aec:	ffffcfff 	.word	0xffffcfff
 8002af0:	11fff4ff 	.word	0x11fff4ff
 8002af4:	40013800 	.word	0x40013800
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40004400 	.word	0x40004400
 8002b00:	40004800 	.word	0x40004800
 8002b04:	40004c00 	.word	0x40004c00
 8002b08:	0001e848 	.word	0x0001e848
 8002b0c:	01e84800 	.word	0x01e84800
 8002b10:	0003d090 	.word	0x0003d090
 8002b14:	0007a120 	.word	0x0007a120
 8002b18:	000f4240 	.word	0x000f4240
 8002b1c:	001e8480 	.word	0x001e8480
 8002b20:	0028b0aa 	.word	0x0028b0aa
 8002b24:	0030d400 	.word	0x0030d400
 8002b28:	003d0900 	.word	0x003d0900
 8002b2c:	00516154 	.word	0x00516154
 8002b30:	007a1200 	.word	0x007a1200
 8002b34:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b38:	f7ff fa0a 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8002b3c:	0003      	movs	r3, r0
 8002b3e:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d044      	beq.n	8002bd2 <UART_SetConfig+0x416>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b4c:	2b01      	cmp	r3, #1
 8002b4e:	d03e      	beq.n	8002bce <UART_SetConfig+0x412>
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b54:	2b02      	cmp	r3, #2
 8002b56:	d038      	beq.n	8002bca <UART_SetConfig+0x40e>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d032      	beq.n	8002bc6 <UART_SetConfig+0x40a>
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b64:	2b04      	cmp	r3, #4
 8002b66:	d02c      	beq.n	8002bc2 <UART_SetConfig+0x406>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b6c:	2b05      	cmp	r3, #5
 8002b6e:	d026      	beq.n	8002bbe <UART_SetConfig+0x402>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b74:	2b06      	cmp	r3, #6
 8002b76:	d020      	beq.n	8002bba <UART_SetConfig+0x3fe>
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7c:	2b07      	cmp	r3, #7
 8002b7e:	d01a      	beq.n	8002bb6 <UART_SetConfig+0x3fa>
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b84:	2b08      	cmp	r3, #8
 8002b86:	d014      	beq.n	8002bb2 <UART_SetConfig+0x3f6>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	2b09      	cmp	r3, #9
 8002b8e:	d00e      	beq.n	8002bae <UART_SetConfig+0x3f2>
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b94:	2b0a      	cmp	r3, #10
 8002b96:	d008      	beq.n	8002baa <UART_SetConfig+0x3ee>
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	2b0b      	cmp	r3, #11
 8002b9e:	d102      	bne.n	8002ba6 <UART_SetConfig+0x3ea>
 8002ba0:	2380      	movs	r3, #128	; 0x80
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	e016      	b.n	8002bd4 <UART_SetConfig+0x418>
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e014      	b.n	8002bd4 <UART_SetConfig+0x418>
 8002baa:	2380      	movs	r3, #128	; 0x80
 8002bac:	e012      	b.n	8002bd4 <UART_SetConfig+0x418>
 8002bae:	2340      	movs	r3, #64	; 0x40
 8002bb0:	e010      	b.n	8002bd4 <UART_SetConfig+0x418>
 8002bb2:	2320      	movs	r3, #32
 8002bb4:	e00e      	b.n	8002bd4 <UART_SetConfig+0x418>
 8002bb6:	2310      	movs	r3, #16
 8002bb8:	e00c      	b.n	8002bd4 <UART_SetConfig+0x418>
 8002bba:	230c      	movs	r3, #12
 8002bbc:	e00a      	b.n	8002bd4 <UART_SetConfig+0x418>
 8002bbe:	230a      	movs	r3, #10
 8002bc0:	e008      	b.n	8002bd4 <UART_SetConfig+0x418>
 8002bc2:	2308      	movs	r3, #8
 8002bc4:	e006      	b.n	8002bd4 <UART_SetConfig+0x418>
 8002bc6:	2306      	movs	r3, #6
 8002bc8:	e004      	b.n	8002bd4 <UART_SetConfig+0x418>
 8002bca:	2304      	movs	r3, #4
 8002bcc:	e002      	b.n	8002bd4 <UART_SetConfig+0x418>
 8002bce:	2302      	movs	r3, #2
 8002bd0:	e000      	b.n	8002bd4 <UART_SetConfig+0x418>
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	0019      	movs	r1, r3
 8002bd6:	68f8      	ldr	r0, [r7, #12]
 8002bd8:	f7fd fa9e 	bl	8000118 <__udivsi3>
 8002bdc:	0003      	movs	r3, r0
 8002bde:	005a      	lsls	r2, r3, #1
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	085b      	lsrs	r3, r3, #1
 8002be6:	18d2      	adds	r2, r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	685b      	ldr	r3, [r3, #4]
 8002bec:	0019      	movs	r1, r3
 8002bee:	0010      	movs	r0, r2
 8002bf0:	f7fd fa92 	bl	8000118 <__udivsi3>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	617b      	str	r3, [r7, #20]
        break;
 8002bfa:	e065      	b.n	8002cc8 <UART_SetConfig+0x50c>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d04c      	beq.n	8002c9e <UART_SetConfig+0x4e2>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d045      	beq.n	8002c98 <UART_SetConfig+0x4dc>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d03e      	beq.n	8002c92 <UART_SetConfig+0x4d6>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d038      	beq.n	8002c8e <UART_SetConfig+0x4d2>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c20:	2b04      	cmp	r3, #4
 8002c22:	d031      	beq.n	8002c88 <UART_SetConfig+0x4cc>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c28:	2b05      	cmp	r3, #5
 8002c2a:	d02b      	beq.n	8002c84 <UART_SetConfig+0x4c8>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	2b06      	cmp	r3, #6
 8002c32:	d025      	beq.n	8002c80 <UART_SetConfig+0x4c4>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c38:	2b07      	cmp	r3, #7
 8002c3a:	d01e      	beq.n	8002c7a <UART_SetConfig+0x4be>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c40:	2b08      	cmp	r3, #8
 8002c42:	d017      	beq.n	8002c74 <UART_SetConfig+0x4b8>
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	2b09      	cmp	r3, #9
 8002c4a:	d010      	beq.n	8002c6e <UART_SetConfig+0x4b2>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c50:	2b0a      	cmp	r3, #10
 8002c52:	d009      	beq.n	8002c68 <UART_SetConfig+0x4ac>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c58:	2b0b      	cmp	r3, #11
 8002c5a:	d102      	bne.n	8002c62 <UART_SetConfig+0x4a6>
 8002c5c:	2380      	movs	r3, #128	; 0x80
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	e01f      	b.n	8002ca2 <UART_SetConfig+0x4e6>
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	025b      	lsls	r3, r3, #9
 8002c66:	e01c      	b.n	8002ca2 <UART_SetConfig+0x4e6>
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	e019      	b.n	8002ca2 <UART_SetConfig+0x4e6>
 8002c6e:	2380      	movs	r3, #128	; 0x80
 8002c70:	00db      	lsls	r3, r3, #3
 8002c72:	e016      	b.n	8002ca2 <UART_SetConfig+0x4e6>
 8002c74:	2380      	movs	r3, #128	; 0x80
 8002c76:	011b      	lsls	r3, r3, #4
 8002c78:	e013      	b.n	8002ca2 <UART_SetConfig+0x4e6>
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	015b      	lsls	r3, r3, #5
 8002c7e:	e010      	b.n	8002ca2 <UART_SetConfig+0x4e6>
 8002c80:	4bb9      	ldr	r3, [pc, #740]	; (8002f68 <UART_SetConfig+0x7ac>)
 8002c82:	e00e      	b.n	8002ca2 <UART_SetConfig+0x4e6>
 8002c84:	4bb9      	ldr	r3, [pc, #740]	; (8002f6c <UART_SetConfig+0x7b0>)
 8002c86:	e00c      	b.n	8002ca2 <UART_SetConfig+0x4e6>
 8002c88:	2380      	movs	r3, #128	; 0x80
 8002c8a:	019b      	lsls	r3, r3, #6
 8002c8c:	e009      	b.n	8002ca2 <UART_SetConfig+0x4e6>
 8002c8e:	4bb8      	ldr	r3, [pc, #736]	; (8002f70 <UART_SetConfig+0x7b4>)
 8002c90:	e007      	b.n	8002ca2 <UART_SetConfig+0x4e6>
 8002c92:	2380      	movs	r3, #128	; 0x80
 8002c94:	01db      	lsls	r3, r3, #7
 8002c96:	e004      	b.n	8002ca2 <UART_SetConfig+0x4e6>
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	021b      	lsls	r3, r3, #8
 8002c9c:	e001      	b.n	8002ca2 <UART_SetConfig+0x4e6>
 8002c9e:	2380      	movs	r3, #128	; 0x80
 8002ca0:	025b      	lsls	r3, r3, #9
 8002ca2:	687a      	ldr	r2, [r7, #4]
 8002ca4:	6852      	ldr	r2, [r2, #4]
 8002ca6:	0852      	lsrs	r2, r2, #1
 8002ca8:	189a      	adds	r2, r3, r2
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	0019      	movs	r1, r3
 8002cb0:	0010      	movs	r0, r2
 8002cb2:	f7fd fa31 	bl	8000118 <__udivsi3>
 8002cb6:	0003      	movs	r3, r0
 8002cb8:	b29b      	uxth	r3, r3
 8002cba:	617b      	str	r3, [r7, #20]
        break;
 8002cbc:	e004      	b.n	8002cc8 <UART_SetConfig+0x50c>
      default:
        ret = HAL_ERROR;
 8002cbe:	231e      	movs	r3, #30
 8002cc0:	18fb      	adds	r3, r7, r3
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	701a      	strb	r2, [r3, #0]
        break;
 8002cc6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	2b0f      	cmp	r3, #15
 8002ccc:	d91b      	bls.n	8002d06 <UART_SetConfig+0x54a>
 8002cce:	697b      	ldr	r3, [r7, #20]
 8002cd0:	4aa8      	ldr	r2, [pc, #672]	; (8002f74 <UART_SetConfig+0x7b8>)
 8002cd2:	4293      	cmp	r3, r2
 8002cd4:	d817      	bhi.n	8002d06 <UART_SetConfig+0x54a>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002cd6:	697b      	ldr	r3, [r7, #20]
 8002cd8:	b29a      	uxth	r2, r3
 8002cda:	200a      	movs	r0, #10
 8002cdc:	183b      	adds	r3, r7, r0
 8002cde:	210f      	movs	r1, #15
 8002ce0:	438a      	bics	r2, r1
 8002ce2:	801a      	strh	r2, [r3, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002ce4:	697b      	ldr	r3, [r7, #20]
 8002ce6:	085b      	lsrs	r3, r3, #1
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	2207      	movs	r2, #7
 8002cec:	4013      	ands	r3, r2
 8002cee:	b299      	uxth	r1, r3
 8002cf0:	183b      	adds	r3, r7, r0
 8002cf2:	183a      	adds	r2, r7, r0
 8002cf4:	8812      	ldrh	r2, [r2, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	801a      	strh	r2, [r3, #0]
      huart->Instance->BRR = brrtemp;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	183a      	adds	r2, r7, r0
 8002d00:	8812      	ldrh	r2, [r2, #0]
 8002d02:	60da      	str	r2, [r3, #12]
 8002d04:	e1c5      	b.n	8003092 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 8002d06:	231e      	movs	r3, #30
 8002d08:	18fb      	adds	r3, r7, r3
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
 8002d0e:	e1c0      	b.n	8003092 <UART_SetConfig+0x8d6>
    }
  }
  else
  {
    switch (clocksource)
 8002d10:	231f      	movs	r3, #31
 8002d12:	18fb      	adds	r3, r7, r3
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	2b02      	cmp	r3, #2
 8002d18:	d100      	bne.n	8002d1c <UART_SetConfig+0x560>
 8002d1a:	e06c      	b.n	8002df6 <UART_SetConfig+0x63a>
 8002d1c:	dc02      	bgt.n	8002d24 <UART_SetConfig+0x568>
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d007      	beq.n	8002d32 <UART_SetConfig+0x576>
 8002d22:	e1a1      	b.n	8003068 <UART_SetConfig+0x8ac>
 8002d24:	2b04      	cmp	r3, #4
 8002d26:	d100      	bne.n	8002d2a <UART_SetConfig+0x56e>
 8002d28:	e0bc      	b.n	8002ea4 <UART_SetConfig+0x6e8>
 8002d2a:	2b08      	cmp	r3, #8
 8002d2c:	d100      	bne.n	8002d30 <UART_SetConfig+0x574>
 8002d2e:	e13b      	b.n	8002fa8 <UART_SetConfig+0x7ec>
 8002d30:	e19a      	b.n	8003068 <UART_SetConfig+0x8ac>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002d32:	f7ff f999 	bl	8002068 <HAL_RCC_GetPCLK1Freq>
 8002d36:	0003      	movs	r3, r0
 8002d38:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d044      	beq.n	8002dcc <UART_SetConfig+0x610>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d03e      	beq.n	8002dc8 <UART_SetConfig+0x60c>
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d038      	beq.n	8002dc4 <UART_SetConfig+0x608>
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d56:	2b03      	cmp	r3, #3
 8002d58:	d032      	beq.n	8002dc0 <UART_SetConfig+0x604>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	2b04      	cmp	r3, #4
 8002d60:	d02c      	beq.n	8002dbc <UART_SetConfig+0x600>
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	2b05      	cmp	r3, #5
 8002d68:	d026      	beq.n	8002db8 <UART_SetConfig+0x5fc>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	2b06      	cmp	r3, #6
 8002d70:	d020      	beq.n	8002db4 <UART_SetConfig+0x5f8>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d76:	2b07      	cmp	r3, #7
 8002d78:	d01a      	beq.n	8002db0 <UART_SetConfig+0x5f4>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d7e:	2b08      	cmp	r3, #8
 8002d80:	d014      	beq.n	8002dac <UART_SetConfig+0x5f0>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d86:	2b09      	cmp	r3, #9
 8002d88:	d00e      	beq.n	8002da8 <UART_SetConfig+0x5ec>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d8e:	2b0a      	cmp	r3, #10
 8002d90:	d008      	beq.n	8002da4 <UART_SetConfig+0x5e8>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d96:	2b0b      	cmp	r3, #11
 8002d98:	d102      	bne.n	8002da0 <UART_SetConfig+0x5e4>
 8002d9a:	2380      	movs	r3, #128	; 0x80
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	e016      	b.n	8002dce <UART_SetConfig+0x612>
 8002da0:	2301      	movs	r3, #1
 8002da2:	e014      	b.n	8002dce <UART_SetConfig+0x612>
 8002da4:	2380      	movs	r3, #128	; 0x80
 8002da6:	e012      	b.n	8002dce <UART_SetConfig+0x612>
 8002da8:	2340      	movs	r3, #64	; 0x40
 8002daa:	e010      	b.n	8002dce <UART_SetConfig+0x612>
 8002dac:	2320      	movs	r3, #32
 8002dae:	e00e      	b.n	8002dce <UART_SetConfig+0x612>
 8002db0:	2310      	movs	r3, #16
 8002db2:	e00c      	b.n	8002dce <UART_SetConfig+0x612>
 8002db4:	230c      	movs	r3, #12
 8002db6:	e00a      	b.n	8002dce <UART_SetConfig+0x612>
 8002db8:	230a      	movs	r3, #10
 8002dba:	e008      	b.n	8002dce <UART_SetConfig+0x612>
 8002dbc:	2308      	movs	r3, #8
 8002dbe:	e006      	b.n	8002dce <UART_SetConfig+0x612>
 8002dc0:	2306      	movs	r3, #6
 8002dc2:	e004      	b.n	8002dce <UART_SetConfig+0x612>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	e002      	b.n	8002dce <UART_SetConfig+0x612>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e000      	b.n	8002dce <UART_SetConfig+0x612>
 8002dcc:	2301      	movs	r3, #1
 8002dce:	0019      	movs	r1, r3
 8002dd0:	68f8      	ldr	r0, [r7, #12]
 8002dd2:	f7fd f9a1 	bl	8000118 <__udivsi3>
 8002dd6:	0003      	movs	r3, r0
 8002dd8:	001a      	movs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	085b      	lsrs	r3, r3, #1
 8002de0:	18d2      	adds	r2, r2, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685b      	ldr	r3, [r3, #4]
 8002de6:	0019      	movs	r1, r3
 8002de8:	0010      	movs	r0, r2
 8002dea:	f7fd f995 	bl	8000118 <__udivsi3>
 8002dee:	0003      	movs	r3, r0
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	617b      	str	r3, [r7, #20]
        break;
 8002df4:	e13d      	b.n	8003072 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d043      	beq.n	8002e86 <UART_SetConfig+0x6ca>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d03d      	beq.n	8002e82 <UART_SetConfig+0x6c6>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e0a:	2b02      	cmp	r3, #2
 8002e0c:	d037      	beq.n	8002e7e <UART_SetConfig+0x6c2>
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e12:	2b03      	cmp	r3, #3
 8002e14:	d031      	beq.n	8002e7a <UART_SetConfig+0x6be>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	2b04      	cmp	r3, #4
 8002e1c:	d02b      	beq.n	8002e76 <UART_SetConfig+0x6ba>
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e22:	2b05      	cmp	r3, #5
 8002e24:	d025      	beq.n	8002e72 <UART_SetConfig+0x6b6>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	2b06      	cmp	r3, #6
 8002e2c:	d01f      	beq.n	8002e6e <UART_SetConfig+0x6b2>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e32:	2b07      	cmp	r3, #7
 8002e34:	d019      	beq.n	8002e6a <UART_SetConfig+0x6ae>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	2b08      	cmp	r3, #8
 8002e3c:	d013      	beq.n	8002e66 <UART_SetConfig+0x6aa>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e42:	2b09      	cmp	r3, #9
 8002e44:	d00d      	beq.n	8002e62 <UART_SetConfig+0x6a6>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e4a:	2b0a      	cmp	r3, #10
 8002e4c:	d007      	beq.n	8002e5e <UART_SetConfig+0x6a2>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e52:	2b0b      	cmp	r3, #11
 8002e54:	d101      	bne.n	8002e5a <UART_SetConfig+0x69e>
 8002e56:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <UART_SetConfig+0x7bc>)
 8002e58:	e016      	b.n	8002e88 <UART_SetConfig+0x6cc>
 8002e5a:	4b48      	ldr	r3, [pc, #288]	; (8002f7c <UART_SetConfig+0x7c0>)
 8002e5c:	e014      	b.n	8002e88 <UART_SetConfig+0x6cc>
 8002e5e:	4b48      	ldr	r3, [pc, #288]	; (8002f80 <UART_SetConfig+0x7c4>)
 8002e60:	e012      	b.n	8002e88 <UART_SetConfig+0x6cc>
 8002e62:	4b48      	ldr	r3, [pc, #288]	; (8002f84 <UART_SetConfig+0x7c8>)
 8002e64:	e010      	b.n	8002e88 <UART_SetConfig+0x6cc>
 8002e66:	4b48      	ldr	r3, [pc, #288]	; (8002f88 <UART_SetConfig+0x7cc>)
 8002e68:	e00e      	b.n	8002e88 <UART_SetConfig+0x6cc>
 8002e6a:	4b48      	ldr	r3, [pc, #288]	; (8002f8c <UART_SetConfig+0x7d0>)
 8002e6c:	e00c      	b.n	8002e88 <UART_SetConfig+0x6cc>
 8002e6e:	4b48      	ldr	r3, [pc, #288]	; (8002f90 <UART_SetConfig+0x7d4>)
 8002e70:	e00a      	b.n	8002e88 <UART_SetConfig+0x6cc>
 8002e72:	4b48      	ldr	r3, [pc, #288]	; (8002f94 <UART_SetConfig+0x7d8>)
 8002e74:	e008      	b.n	8002e88 <UART_SetConfig+0x6cc>
 8002e76:	4b48      	ldr	r3, [pc, #288]	; (8002f98 <UART_SetConfig+0x7dc>)
 8002e78:	e006      	b.n	8002e88 <UART_SetConfig+0x6cc>
 8002e7a:	4b48      	ldr	r3, [pc, #288]	; (8002f9c <UART_SetConfig+0x7e0>)
 8002e7c:	e004      	b.n	8002e88 <UART_SetConfig+0x6cc>
 8002e7e:	4b48      	ldr	r3, [pc, #288]	; (8002fa0 <UART_SetConfig+0x7e4>)
 8002e80:	e002      	b.n	8002e88 <UART_SetConfig+0x6cc>
 8002e82:	4b48      	ldr	r3, [pc, #288]	; (8002fa4 <UART_SetConfig+0x7e8>)
 8002e84:	e000      	b.n	8002e88 <UART_SetConfig+0x6cc>
 8002e86:	4b3d      	ldr	r3, [pc, #244]	; (8002f7c <UART_SetConfig+0x7c0>)
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	6852      	ldr	r2, [r2, #4]
 8002e8c:	0852      	lsrs	r2, r2, #1
 8002e8e:	189a      	adds	r2, r3, r2
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	0019      	movs	r1, r3
 8002e96:	0010      	movs	r0, r2
 8002e98:	f7fd f93e 	bl	8000118 <__udivsi3>
 8002e9c:	0003      	movs	r3, r0
 8002e9e:	b29b      	uxth	r3, r3
 8002ea0:	617b      	str	r3, [r7, #20]
        break;
 8002ea2:	e0e6      	b.n	8003072 <UART_SetConfig+0x8b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ea4:	f7ff f854 	bl	8001f50 <HAL_RCC_GetSysClockFreq>
 8002ea8:	0003      	movs	r3, r0
 8002eaa:	60fb      	str	r3, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d044      	beq.n	8002f3e <UART_SetConfig+0x782>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eb8:	2b01      	cmp	r3, #1
 8002eba:	d03e      	beq.n	8002f3a <UART_SetConfig+0x77e>
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d038      	beq.n	8002f36 <UART_SetConfig+0x77a>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ec8:	2b03      	cmp	r3, #3
 8002eca:	d032      	beq.n	8002f32 <UART_SetConfig+0x776>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed0:	2b04      	cmp	r3, #4
 8002ed2:	d02c      	beq.n	8002f2e <UART_SetConfig+0x772>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ed8:	2b05      	cmp	r3, #5
 8002eda:	d026      	beq.n	8002f2a <UART_SetConfig+0x76e>
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee0:	2b06      	cmp	r3, #6
 8002ee2:	d020      	beq.n	8002f26 <UART_SetConfig+0x76a>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ee8:	2b07      	cmp	r3, #7
 8002eea:	d01a      	beq.n	8002f22 <UART_SetConfig+0x766>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef0:	2b08      	cmp	r3, #8
 8002ef2:	d014      	beq.n	8002f1e <UART_SetConfig+0x762>
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef8:	2b09      	cmp	r3, #9
 8002efa:	d00e      	beq.n	8002f1a <UART_SetConfig+0x75e>
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f00:	2b0a      	cmp	r3, #10
 8002f02:	d008      	beq.n	8002f16 <UART_SetConfig+0x75a>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	2b0b      	cmp	r3, #11
 8002f0a:	d102      	bne.n	8002f12 <UART_SetConfig+0x756>
 8002f0c:	2380      	movs	r3, #128	; 0x80
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	e016      	b.n	8002f40 <UART_SetConfig+0x784>
 8002f12:	2301      	movs	r3, #1
 8002f14:	e014      	b.n	8002f40 <UART_SetConfig+0x784>
 8002f16:	2380      	movs	r3, #128	; 0x80
 8002f18:	e012      	b.n	8002f40 <UART_SetConfig+0x784>
 8002f1a:	2340      	movs	r3, #64	; 0x40
 8002f1c:	e010      	b.n	8002f40 <UART_SetConfig+0x784>
 8002f1e:	2320      	movs	r3, #32
 8002f20:	e00e      	b.n	8002f40 <UART_SetConfig+0x784>
 8002f22:	2310      	movs	r3, #16
 8002f24:	e00c      	b.n	8002f40 <UART_SetConfig+0x784>
 8002f26:	230c      	movs	r3, #12
 8002f28:	e00a      	b.n	8002f40 <UART_SetConfig+0x784>
 8002f2a:	230a      	movs	r3, #10
 8002f2c:	e008      	b.n	8002f40 <UART_SetConfig+0x784>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	e006      	b.n	8002f40 <UART_SetConfig+0x784>
 8002f32:	2306      	movs	r3, #6
 8002f34:	e004      	b.n	8002f40 <UART_SetConfig+0x784>
 8002f36:	2304      	movs	r3, #4
 8002f38:	e002      	b.n	8002f40 <UART_SetConfig+0x784>
 8002f3a:	2302      	movs	r3, #2
 8002f3c:	e000      	b.n	8002f40 <UART_SetConfig+0x784>
 8002f3e:	2301      	movs	r3, #1
 8002f40:	0019      	movs	r1, r3
 8002f42:	68f8      	ldr	r0, [r7, #12]
 8002f44:	f7fd f8e8 	bl	8000118 <__udivsi3>
 8002f48:	0003      	movs	r3, r0
 8002f4a:	001a      	movs	r2, r3
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	085b      	lsrs	r3, r3, #1
 8002f52:	18d2      	adds	r2, r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	0019      	movs	r1, r3
 8002f5a:	0010      	movs	r0, r2
 8002f5c:	f7fd f8dc 	bl	8000118 <__udivsi3>
 8002f60:	0003      	movs	r3, r0
 8002f62:	b29b      	uxth	r3, r3
 8002f64:	617b      	str	r3, [r7, #20]
        break;
 8002f66:	e084      	b.n	8003072 <UART_SetConfig+0x8b6>
 8002f68:	00001554 	.word	0x00001554
 8002f6c:	00001998 	.word	0x00001998
 8002f70:	00002aaa 	.word	0x00002aaa
 8002f74:	0000ffff 	.word	0x0000ffff
 8002f78:	0000f424 	.word	0x0000f424
 8002f7c:	00f42400 	.word	0x00f42400
 8002f80:	0001e848 	.word	0x0001e848
 8002f84:	0003d090 	.word	0x0003d090
 8002f88:	0007a120 	.word	0x0007a120
 8002f8c:	000f4240 	.word	0x000f4240
 8002f90:	00145855 	.word	0x00145855
 8002f94:	00186a00 	.word	0x00186a00
 8002f98:	001e8480 	.word	0x001e8480
 8002f9c:	0028b0aa 	.word	0x0028b0aa
 8002fa0:	003d0900 	.word	0x003d0900
 8002fa4:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d04b      	beq.n	8003048 <UART_SetConfig+0x88c>
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d044      	beq.n	8003042 <UART_SetConfig+0x886>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d03d      	beq.n	800303c <UART_SetConfig+0x880>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fc4:	2b03      	cmp	r3, #3
 8002fc6:	d037      	beq.n	8003038 <UART_SetConfig+0x87c>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fcc:	2b04      	cmp	r3, #4
 8002fce:	d030      	beq.n	8003032 <UART_SetConfig+0x876>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fd4:	2b05      	cmp	r3, #5
 8002fd6:	d02a      	beq.n	800302e <UART_SetConfig+0x872>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fdc:	2b06      	cmp	r3, #6
 8002fde:	d024      	beq.n	800302a <UART_SetConfig+0x86e>
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fe4:	2b07      	cmp	r3, #7
 8002fe6:	d01d      	beq.n	8003024 <UART_SetConfig+0x868>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002fec:	2b08      	cmp	r3, #8
 8002fee:	d016      	beq.n	800301e <UART_SetConfig+0x862>
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff4:	2b09      	cmp	r3, #9
 8002ff6:	d00f      	beq.n	8003018 <UART_SetConfig+0x85c>
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ffc:	2b0a      	cmp	r3, #10
 8002ffe:	d008      	beq.n	8003012 <UART_SetConfig+0x856>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003004:	2b0b      	cmp	r3, #11
 8003006:	d101      	bne.n	800300c <UART_SetConfig+0x850>
 8003008:	2380      	movs	r3, #128	; 0x80
 800300a:	e01f      	b.n	800304c <UART_SetConfig+0x890>
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	021b      	lsls	r3, r3, #8
 8003010:	e01c      	b.n	800304c <UART_SetConfig+0x890>
 8003012:	2380      	movs	r3, #128	; 0x80
 8003014:	005b      	lsls	r3, r3, #1
 8003016:	e019      	b.n	800304c <UART_SetConfig+0x890>
 8003018:	2380      	movs	r3, #128	; 0x80
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	e016      	b.n	800304c <UART_SetConfig+0x890>
 800301e:	2380      	movs	r3, #128	; 0x80
 8003020:	00db      	lsls	r3, r3, #3
 8003022:	e013      	b.n	800304c <UART_SetConfig+0x890>
 8003024:	2380      	movs	r3, #128	; 0x80
 8003026:	011b      	lsls	r3, r3, #4
 8003028:	e010      	b.n	800304c <UART_SetConfig+0x890>
 800302a:	4b24      	ldr	r3, [pc, #144]	; (80030bc <UART_SetConfig+0x900>)
 800302c:	e00e      	b.n	800304c <UART_SetConfig+0x890>
 800302e:	4b24      	ldr	r3, [pc, #144]	; (80030c0 <UART_SetConfig+0x904>)
 8003030:	e00c      	b.n	800304c <UART_SetConfig+0x890>
 8003032:	2380      	movs	r3, #128	; 0x80
 8003034:	015b      	lsls	r3, r3, #5
 8003036:	e009      	b.n	800304c <UART_SetConfig+0x890>
 8003038:	4b22      	ldr	r3, [pc, #136]	; (80030c4 <UART_SetConfig+0x908>)
 800303a:	e007      	b.n	800304c <UART_SetConfig+0x890>
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	019b      	lsls	r3, r3, #6
 8003040:	e004      	b.n	800304c <UART_SetConfig+0x890>
 8003042:	2380      	movs	r3, #128	; 0x80
 8003044:	01db      	lsls	r3, r3, #7
 8003046:	e001      	b.n	800304c <UART_SetConfig+0x890>
 8003048:	2380      	movs	r3, #128	; 0x80
 800304a:	021b      	lsls	r3, r3, #8
 800304c:	687a      	ldr	r2, [r7, #4]
 800304e:	6852      	ldr	r2, [r2, #4]
 8003050:	0852      	lsrs	r2, r2, #1
 8003052:	189a      	adds	r2, r3, r2
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	0019      	movs	r1, r3
 800305a:	0010      	movs	r0, r2
 800305c:	f7fd f85c 	bl	8000118 <__udivsi3>
 8003060:	0003      	movs	r3, r0
 8003062:	b29b      	uxth	r3, r3
 8003064:	617b      	str	r3, [r7, #20]
        break;
 8003066:	e004      	b.n	8003072 <UART_SetConfig+0x8b6>
      default:
        ret = HAL_ERROR;
 8003068:	231e      	movs	r3, #30
 800306a:	18fb      	adds	r3, r7, r3
 800306c:	2201      	movs	r2, #1
 800306e:	701a      	strb	r2, [r3, #0]
        break;
 8003070:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	2b0f      	cmp	r3, #15
 8003076:	d908      	bls.n	800308a <UART_SetConfig+0x8ce>
 8003078:	697b      	ldr	r3, [r7, #20]
 800307a:	4a13      	ldr	r2, [pc, #76]	; (80030c8 <UART_SetConfig+0x90c>)
 800307c:	4293      	cmp	r3, r2
 800307e:	d804      	bhi.n	800308a <UART_SetConfig+0x8ce>
    {
      huart->Instance->BRR = usartdiv;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	60da      	str	r2, [r3, #12]
 8003088:	e003      	b.n	8003092 <UART_SetConfig+0x8d6>
    }
    else
    {
      ret = HAL_ERROR;
 800308a:	231e      	movs	r3, #30
 800308c:	18fb      	adds	r3, r7, r3
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	226a      	movs	r2, #106	; 0x6a
 8003096:	2101      	movs	r1, #1
 8003098:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2268      	movs	r2, #104	; 0x68
 800309e:	2101      	movs	r1, #1
 80030a0:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2200      	movs	r2, #0
 80030ac:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80030ae:	231e      	movs	r3, #30
 80030b0:	18fb      	adds	r3, r7, r3
 80030b2:	781b      	ldrb	r3, [r3, #0]
}
 80030b4:	0018      	movs	r0, r3
 80030b6:	46bd      	mov	sp, r7
 80030b8:	b008      	add	sp, #32
 80030ba:	bd80      	pop	{r7, pc}
 80030bc:	00000aaa 	.word	0x00000aaa
 80030c0:	00000ccc 	.word	0x00000ccc
 80030c4:	00001555 	.word	0x00001555
 80030c8:	0000ffff 	.word	0x0000ffff

080030cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030cc:	b580      	push	{r7, lr}
 80030ce:	b082      	sub	sp, #8
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030d8:	2201      	movs	r2, #1
 80030da:	4013      	ands	r3, r2
 80030dc:	d00b      	beq.n	80030f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	4a4a      	ldr	r2, [pc, #296]	; (8003210 <UART_AdvFeatureConfig+0x144>)
 80030e6:	4013      	ands	r3, r2
 80030e8:	0019      	movs	r1, r3
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	430a      	orrs	r2, r1
 80030f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fa:	2202      	movs	r2, #2
 80030fc:	4013      	ands	r3, r2
 80030fe:	d00b      	beq.n	8003118 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	685b      	ldr	r3, [r3, #4]
 8003106:	4a43      	ldr	r2, [pc, #268]	; (8003214 <UART_AdvFeatureConfig+0x148>)
 8003108:	4013      	ands	r3, r2
 800310a:	0019      	movs	r1, r3
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800311c:	2204      	movs	r2, #4
 800311e:	4013      	ands	r3, r2
 8003120:	d00b      	beq.n	800313a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	4a3b      	ldr	r2, [pc, #236]	; (8003218 <UART_AdvFeatureConfig+0x14c>)
 800312a:	4013      	ands	r3, r2
 800312c:	0019      	movs	r1, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	430a      	orrs	r2, r1
 8003138:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800313e:	2208      	movs	r2, #8
 8003140:	4013      	ands	r3, r2
 8003142:	d00b      	beq.n	800315c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	4a34      	ldr	r2, [pc, #208]	; (800321c <UART_AdvFeatureConfig+0x150>)
 800314c:	4013      	ands	r3, r2
 800314e:	0019      	movs	r1, r3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	430a      	orrs	r2, r1
 800315a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003160:	2210      	movs	r2, #16
 8003162:	4013      	ands	r3, r2
 8003164:	d00b      	beq.n	800317e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	4a2c      	ldr	r2, [pc, #176]	; (8003220 <UART_AdvFeatureConfig+0x154>)
 800316e:	4013      	ands	r3, r2
 8003170:	0019      	movs	r1, r3
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003182:	2220      	movs	r2, #32
 8003184:	4013      	ands	r3, r2
 8003186:	d00b      	beq.n	80031a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	689b      	ldr	r3, [r3, #8]
 800318e:	4a25      	ldr	r2, [pc, #148]	; (8003224 <UART_AdvFeatureConfig+0x158>)
 8003190:	4013      	ands	r3, r2
 8003192:	0019      	movs	r1, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	430a      	orrs	r2, r1
 800319e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031a4:	2240      	movs	r2, #64	; 0x40
 80031a6:	4013      	ands	r3, r2
 80031a8:	d01d      	beq.n	80031e6 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <UART_AdvFeatureConfig+0x15c>)
 80031b2:	4013      	ands	r3, r2
 80031b4:	0019      	movs	r1, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031c6:	2380      	movs	r3, #128	; 0x80
 80031c8:	035b      	lsls	r3, r3, #13
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d10b      	bne.n	80031e6 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	4a15      	ldr	r2, [pc, #84]	; (800322c <UART_AdvFeatureConfig+0x160>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	0019      	movs	r1, r3
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	430a      	orrs	r2, r1
 80031e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ea:	2280      	movs	r2, #128	; 0x80
 80031ec:	4013      	ands	r3, r2
 80031ee:	d00b      	beq.n	8003208 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	4a0e      	ldr	r2, [pc, #56]	; (8003230 <UART_AdvFeatureConfig+0x164>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	0019      	movs	r1, r3
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	605a      	str	r2, [r3, #4]
  }
}
 8003208:	46c0      	nop			; (mov r8, r8)
 800320a:	46bd      	mov	sp, r7
 800320c:	b002      	add	sp, #8
 800320e:	bd80      	pop	{r7, pc}
 8003210:	fffdffff 	.word	0xfffdffff
 8003214:	fffeffff 	.word	0xfffeffff
 8003218:	fffbffff 	.word	0xfffbffff
 800321c:	ffff7fff 	.word	0xffff7fff
 8003220:	ffffefff 	.word	0xffffefff
 8003224:	ffffdfff 	.word	0xffffdfff
 8003228:	ffefffff 	.word	0xffefffff
 800322c:	ff9fffff 	.word	0xff9fffff
 8003230:	fff7ffff 	.word	0xfff7ffff

08003234 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af02      	add	r7, sp, #8
 800323a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2288      	movs	r2, #136	; 0x88
 8003240:	2100      	movs	r1, #0
 8003242:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003244:	f7fd ff1a 	bl	800107c <HAL_GetTick>
 8003248:	0003      	movs	r3, r0
 800324a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2208      	movs	r2, #8
 8003254:	4013      	ands	r3, r2
 8003256:	2b08      	cmp	r3, #8
 8003258:	d10d      	bne.n	8003276 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800325a:	68fa      	ldr	r2, [r7, #12]
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	0399      	lsls	r1, r3, #14
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	4b18      	ldr	r3, [pc, #96]	; (80032c4 <UART_CheckIdleState+0x90>)
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	0013      	movs	r3, r2
 8003268:	2200      	movs	r2, #0
 800326a:	f000 f82d 	bl	80032c8 <UART_WaitOnFlagUntilTimeout>
 800326e:	1e03      	subs	r3, r0, #0
 8003270:	d001      	beq.n	8003276 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e021      	b.n	80032ba <UART_CheckIdleState+0x86>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2204      	movs	r2, #4
 800327e:	4013      	ands	r3, r2
 8003280:	2b04      	cmp	r3, #4
 8003282:	d10d      	bne.n	80032a0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003284:	68fa      	ldr	r2, [r7, #12]
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	03d9      	lsls	r1, r3, #15
 800328a:	6878      	ldr	r0, [r7, #4]
 800328c:	4b0d      	ldr	r3, [pc, #52]	; (80032c4 <UART_CheckIdleState+0x90>)
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	0013      	movs	r3, r2
 8003292:	2200      	movs	r2, #0
 8003294:	f000 f818 	bl	80032c8 <UART_WaitOnFlagUntilTimeout>
 8003298:	1e03      	subs	r3, r0, #0
 800329a:	d001      	beq.n	80032a0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e00c      	b.n	80032ba <UART_CheckIdleState+0x86>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2280      	movs	r2, #128	; 0x80
 80032a4:	2120      	movs	r1, #32
 80032a6:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2284      	movs	r2, #132	; 0x84
 80032ac:	2120      	movs	r1, #32
 80032ae:	5099      	str	r1, [r3, r2]

  __HAL_UNLOCK(huart);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	227c      	movs	r2, #124	; 0x7c
 80032b4:	2100      	movs	r1, #0
 80032b6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032b8:	2300      	movs	r3, #0
}
 80032ba:	0018      	movs	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	b004      	add	sp, #16
 80032c0:	bd80      	pop	{r7, pc}
 80032c2:	46c0      	nop			; (mov r8, r8)
 80032c4:	01ffffff 	.word	0x01ffffff

080032c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b084      	sub	sp, #16
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	603b      	str	r3, [r7, #0]
 80032d4:	1dfb      	adds	r3, r7, #7
 80032d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032d8:	e02b      	b.n	8003332 <UART_WaitOnFlagUntilTimeout+0x6a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80032da:	69bb      	ldr	r3, [r7, #24]
 80032dc:	3301      	adds	r3, #1
 80032de:	d028      	beq.n	8003332 <UART_WaitOnFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80032e0:	f7fd fecc 	bl	800107c <HAL_GetTick>
 80032e4:	0002      	movs	r2, r0
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	1ad3      	subs	r3, r2, r3
 80032ea:	69ba      	ldr	r2, [r7, #24]
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d302      	bcc.n	80032f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80032f0:	69bb      	ldr	r3, [r7, #24]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d11d      	bne.n	8003332 <UART_WaitOnFlagUntilTimeout+0x6a>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681a      	ldr	r2, [r3, #0]
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4916      	ldr	r1, [pc, #88]	; (800335c <UART_WaitOnFlagUntilTimeout+0x94>)
 8003302:	400a      	ands	r2, r1
 8003304:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689a      	ldr	r2, [r3, #8]
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	2101      	movs	r1, #1
 8003312:	438a      	bics	r2, r1
 8003314:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2280      	movs	r2, #128	; 0x80
 800331a:	2120      	movs	r1, #32
 800331c:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2284      	movs	r2, #132	; 0x84
 8003322:	2120      	movs	r1, #32
 8003324:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	227c      	movs	r2, #124	; 0x7c
 800332a:	2100      	movs	r1, #0
 800332c:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800332e:	2303      	movs	r3, #3
 8003330:	e00f      	b.n	8003352 <UART_WaitOnFlagUntilTimeout+0x8a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	69db      	ldr	r3, [r3, #28]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	4013      	ands	r3, r2
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	1ad3      	subs	r3, r2, r3
 8003340:	425a      	negs	r2, r3
 8003342:	4153      	adcs	r3, r2
 8003344:	b2db      	uxtb	r3, r3
 8003346:	001a      	movs	r2, r3
 8003348:	1dfb      	adds	r3, r7, #7
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	429a      	cmp	r2, r3
 800334e:	d0c4      	beq.n	80032da <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	0018      	movs	r0, r3
 8003354:	46bd      	mov	sp, r7
 8003356:	b004      	add	sp, #16
 8003358:	bd80      	pop	{r7, pc}
 800335a:	46c0      	nop			; (mov r8, r8)
 800335c:	fffffe5f 	.word	0xfffffe5f

08003360 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	b082      	sub	sp, #8
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	681a      	ldr	r2, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	490b      	ldr	r1, [pc, #44]	; (80033a0 <UART_EndRxTransfer+0x40>)
 8003374:	400a      	ands	r2, r1
 8003376:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	689a      	ldr	r2, [r3, #8]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4908      	ldr	r1, [pc, #32]	; (80033a4 <UART_EndRxTransfer+0x44>)
 8003384:	400a      	ands	r2, r1
 8003386:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2284      	movs	r2, #132	; 0x84
 800338c:	2120      	movs	r1, #32
 800338e:	5099      	str	r1, [r3, r2]

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2200      	movs	r2, #0
 8003394:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003396:	46c0      	nop			; (mov r8, r8)
 8003398:	46bd      	mov	sp, r7
 800339a:	b002      	add	sp, #8
 800339c:	bd80      	pop	{r7, pc}
 800339e:	46c0      	nop			; (mov r8, r8)
 80033a0:	fffffedf 	.word	0xfffffedf
 80033a4:	effffffe 	.word	0xeffffffe

080033a8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033b4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	225e      	movs	r2, #94	; 0x5e
 80033ba:	2100      	movs	r1, #0
 80033bc:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2256      	movs	r2, #86	; 0x56
 80033c2:	2100      	movs	r1, #0
 80033c4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	0018      	movs	r0, r3
 80033ca:	f7ff f9ef 	bl	80027ac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80033ce:	46c0      	nop			; (mov r8, r8)
 80033d0:	46bd      	mov	sp, r7
 80033d2:	b004      	add	sp, #16
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2280      	movs	r2, #128	; 0x80
 80033e2:	589b      	ldr	r3, [r3, r2]
 80033e4:	2b21      	cmp	r3, #33	; 0x21
 80033e6:	d12a      	bne.n	800343e <UART_TxISR_8BIT+0x68>
  {
    if (huart->TxXferCount == 0U)
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2256      	movs	r2, #86	; 0x56
 80033ec:	5a9b      	ldrh	r3, [r3, r2]
 80033ee:	b29b      	uxth	r3, r3
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d110      	bne.n	8003416 <UART_TxISR_8BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681a      	ldr	r2, [r3, #0]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2180      	movs	r1, #128	; 0x80
 8003400:	438a      	bics	r2, r1
 8003402:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681a      	ldr	r2, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	2140      	movs	r1, #64	; 0x40
 8003410:	430a      	orrs	r2, r1
 8003412:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8003414:	e013      	b.n	800343e <UART_TxISR_8BIT+0x68>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800341a:	781a      	ldrb	r2, [r3, #0]
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003426:	1c5a      	adds	r2, r3, #1
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2256      	movs	r2, #86	; 0x56
 8003430:	5a9b      	ldrh	r3, [r3, r2]
 8003432:	b29b      	uxth	r3, r3
 8003434:	3b01      	subs	r3, #1
 8003436:	b299      	uxth	r1, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2256      	movs	r2, #86	; 0x56
 800343c:	5299      	strh	r1, [r3, r2]
}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	46bd      	mov	sp, r7
 8003442:	b002      	add	sp, #8
 8003444:	bd80      	pop	{r7, pc}

08003446 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8003446:	b580      	push	{r7, lr}
 8003448:	b084      	sub	sp, #16
 800344a:	af00      	add	r7, sp, #0
 800344c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2280      	movs	r2, #128	; 0x80
 8003452:	589b      	ldr	r3, [r3, r2]
 8003454:	2b21      	cmp	r3, #33	; 0x21
 8003456:	d12f      	bne.n	80034b8 <UART_TxISR_16BIT+0x72>
  {
    if (huart->TxXferCount == 0U)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2256      	movs	r2, #86	; 0x56
 800345c:	5a9b      	ldrh	r3, [r3, r2]
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d110      	bne.n	8003486 <UART_TxISR_16BIT+0x40>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681a      	ldr	r2, [r3, #0]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2180      	movs	r1, #128	; 0x80
 8003470:	438a      	bics	r2, r1
 8003472:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	2140      	movs	r1, #64	; 0x40
 8003480:	430a      	orrs	r2, r1
 8003482:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8003484:	e018      	b.n	80034b8 <UART_TxISR_16BIT+0x72>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800348a:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	881b      	ldrh	r3, [r3, #0]
 8003490:	001a      	movs	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	05d2      	lsls	r2, r2, #23
 8003498:	0dd2      	lsrs	r2, r2, #23
 800349a:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034a0:	1c9a      	adds	r2, r3, #2
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	651a      	str	r2, [r3, #80]	; 0x50
      huart->TxXferCount--;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2256      	movs	r2, #86	; 0x56
 80034aa:	5a9b      	ldrh	r3, [r3, r2]
 80034ac:	b29b      	uxth	r3, r3
 80034ae:	3b01      	subs	r3, #1
 80034b0:	b299      	uxth	r1, r3
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2256      	movs	r2, #86	; 0x56
 80034b6:	5299      	strh	r1, [r3, r2]
}
 80034b8:	46c0      	nop			; (mov r8, r8)
 80034ba:	46bd      	mov	sp, r7
 80034bc:	b004      	add	sp, #16
 80034be:	bd80      	pop	{r7, pc}

080034c0 <UART_TxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2280      	movs	r2, #128	; 0x80
 80034cc:	589b      	ldr	r3, [r3, r2]
 80034ce:	2b21      	cmp	r3, #33	; 0x21
 80034d0:	d143      	bne.n	800355a <UART_TxISR_8BIT_FIFOEN+0x9a>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80034d2:	230e      	movs	r3, #14
 80034d4:	18fb      	adds	r3, r7, r3
 80034d6:	687a      	ldr	r2, [r7, #4]
 80034d8:	216a      	movs	r1, #106	; 0x6a
 80034da:	5a52      	ldrh	r2, [r2, r1]
 80034dc:	801a      	strh	r2, [r3, #0]
 80034de:	e037      	b.n	8003550 <UART_TxISR_8BIT_FIFOEN+0x90>
    {
      if (huart->TxXferCount == 0U)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2256      	movs	r2, #86	; 0x56
 80034e4:	5a9b      	ldrh	r3, [r3, r2]
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d111      	bne.n	8003510 <UART_TxISR_8BIT_FIFOEN+0x50>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	689a      	ldr	r2, [r3, #8]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	491b      	ldr	r1, [pc, #108]	; (8003564 <UART_TxISR_8BIT_FIFOEN+0xa4>)
 80034f8:	400a      	ands	r2, r1
 80034fa:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	681a      	ldr	r2, [r3, #0]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2140      	movs	r1, #64	; 0x40
 8003508:	430a      	orrs	r2, r1
 800350a:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 800350c:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 800350e:	e024      	b.n	800355a <UART_TxISR_8BIT_FIFOEN+0x9a>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	69db      	ldr	r3, [r3, #28]
 8003516:	2280      	movs	r2, #128	; 0x80
 8003518:	4013      	ands	r3, r2
 800351a:	d013      	beq.n	8003544 <UART_TxISR_8BIT_FIFOEN+0x84>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003520:	781a      	ldrb	r2, [r3, #0]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr++;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800352c:	1c5a      	adds	r2, r3, #1
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2256      	movs	r2, #86	; 0x56
 8003536:	5a9b      	ldrh	r3, [r3, r2]
 8003538:	b29b      	uxth	r3, r3
 800353a:	3b01      	subs	r3, #1
 800353c:	b299      	uxth	r1, r3
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2256      	movs	r2, #86	; 0x56
 8003542:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 8003544:	210e      	movs	r1, #14
 8003546:	187b      	adds	r3, r7, r1
 8003548:	881a      	ldrh	r2, [r3, #0]
 800354a:	187b      	adds	r3, r7, r1
 800354c:	3a01      	subs	r2, #1
 800354e:	801a      	strh	r2, [r3, #0]
 8003550:	230e      	movs	r3, #14
 8003552:	18fb      	adds	r3, r7, r3
 8003554:	881b      	ldrh	r3, [r3, #0]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d1c2      	bne.n	80034e0 <UART_TxISR_8BIT_FIFOEN+0x20>
}
 800355a:	46c0      	nop			; (mov r8, r8)
 800355c:	46bd      	mov	sp, r7
 800355e:	b004      	add	sp, #16
 8003560:	bd80      	pop	{r7, pc}
 8003562:	46c0      	nop			; (mov r8, r8)
 8003564:	ff7fffff 	.word	0xff7fffff

08003568 <UART_TxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  nb_tx_data;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2280      	movs	r2, #128	; 0x80
 8003574:	589b      	ldr	r3, [r3, r2]
 8003576:	2b21      	cmp	r3, #33	; 0x21
 8003578:	d148      	bne.n	800360c <UART_TxISR_16BIT_FIFOEN+0xa4>
  {
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 800357a:	230e      	movs	r3, #14
 800357c:	18fb      	adds	r3, r7, r3
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	216a      	movs	r1, #106	; 0x6a
 8003582:	5a52      	ldrh	r2, [r2, r1]
 8003584:	801a      	strh	r2, [r3, #0]
 8003586:	e03c      	b.n	8003602 <UART_TxISR_16BIT_FIFOEN+0x9a>
    {
      if (huart->TxXferCount == 0U)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2256      	movs	r2, #86	; 0x56
 800358c:	5a9b      	ldrh	r3, [r3, r2]
 800358e:	b29b      	uxth	r3, r3
 8003590:	2b00      	cmp	r3, #0
 8003592:	d111      	bne.n	80035b8 <UART_TxISR_16BIT_FIFOEN+0x50>
      {
        /* Disable the TX FIFO threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_TXFTIE);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	689a      	ldr	r2, [r3, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	491d      	ldr	r1, [pc, #116]	; (8003614 <UART_TxISR_16BIT_FIFOEN+0xac>)
 80035a0:	400a      	ands	r2, r1
 80035a2:	609a      	str	r2, [r3, #8]

        /* Enable the UART Transmit Complete Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2140      	movs	r1, #64	; 0x40
 80035b0:	430a      	orrs	r2, r1
 80035b2:	601a      	str	r2, [r3, #0]

        break; /* force exit loop */
 80035b4:	46c0      	nop			; (mov r8, r8)
      {
        /* Nothing to do */
      }
    }
  }
}
 80035b6:	e029      	b.n	800360c <UART_TxISR_16BIT_FIFOEN+0xa4>
      else if (READ_BIT(huart->Instance->ISR, USART_ISR_TXE_TXFNF) != 0U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	2280      	movs	r2, #128	; 0x80
 80035c0:	4013      	ands	r3, r2
 80035c2:	d018      	beq.n	80035f6 <UART_TxISR_16BIT_FIFOEN+0x8e>
        tmp = (uint16_t *) huart->pTxBuffPtr;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c8:	60bb      	str	r3, [r7, #8]
        huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	881b      	ldrh	r3, [r3, #0]
 80035ce:	001a      	movs	r2, r3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	05d2      	lsls	r2, r2, #23
 80035d6:	0dd2      	lsrs	r2, r2, #23
 80035d8:	629a      	str	r2, [r3, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035de:	1c9a      	adds	r2, r3, #2
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	651a      	str	r2, [r3, #80]	; 0x50
        huart->TxXferCount--;
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2256      	movs	r2, #86	; 0x56
 80035e8:	5a9b      	ldrh	r3, [r3, r2]
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b299      	uxth	r1, r3
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2256      	movs	r2, #86	; 0x56
 80035f4:	5299      	strh	r1, [r3, r2]
    for (nb_tx_data = huart->NbTxDataToProcess ; nb_tx_data > 0U ; nb_tx_data--)
 80035f6:	210e      	movs	r1, #14
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	881a      	ldrh	r2, [r3, #0]
 80035fc:	187b      	adds	r3, r7, r1
 80035fe:	3a01      	subs	r2, #1
 8003600:	801a      	strh	r2, [r3, #0]
 8003602:	230e      	movs	r3, #14
 8003604:	18fb      	adds	r3, r7, r3
 8003606:	881b      	ldrh	r3, [r3, #0]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d1bd      	bne.n	8003588 <UART_TxISR_16BIT_FIFOEN+0x20>
}
 800360c:	46c0      	nop			; (mov r8, r8)
 800360e:	46bd      	mov	sp, r7
 8003610:	b004      	add	sp, #16
 8003612:	bd80      	pop	{r7, pc}
 8003614:	ff7fffff 	.word	0xff7fffff

08003618 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0
 800361e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2140      	movs	r1, #64	; 0x40
 800362c:	438a      	bics	r2, r1
 800362e:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2280      	movs	r2, #128	; 0x80
 8003634:	2120      	movs	r1, #32
 8003636:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	2200      	movs	r2, #0
 800363c:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	0018      	movs	r0, r3
 8003642:	f7ff f8ab 	bl	800279c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003646:	46c0      	nop			; (mov r8, r8)
 8003648:	46bd      	mov	sp, r7
 800364a:	b002      	add	sp, #8
 800364c:	bd80      	pop	{r7, pc}

0800364e <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800364e:	b580      	push	{r7, lr}
 8003650:	b082      	sub	sp, #8
 8003652:	af00      	add	r7, sp, #0
 8003654:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003656:	46c0      	nop			; (mov r8, r8)
 8003658:	46bd      	mov	sp, r7
 800365a:	b002      	add	sp, #8
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b082      	sub	sp, #8
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8003666:	46c0      	nop			; (mov r8, r8)
 8003668:	46bd      	mov	sp, r7
 800366a:	b002      	add	sp, #8
 800366c:	bd80      	pop	{r7, pc}

0800366e <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b082      	sub	sp, #8
 8003672:	af00      	add	r7, sp, #0
 8003674:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	46bd      	mov	sp, r7
 800367a:	b002      	add	sp, #8
 800367c:	bd80      	pop	{r7, pc}
	...

08003680 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	227c      	movs	r2, #124	; 0x7c
 800368c:	5c9b      	ldrb	r3, [r3, r2]
 800368e:	2b01      	cmp	r3, #1
 8003690:	d101      	bne.n	8003696 <HAL_UARTEx_DisableFifoMode+0x16>
 8003692:	2302      	movs	r3, #2
 8003694:	e027      	b.n	80036e6 <HAL_UARTEx_DisableFifoMode+0x66>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	227c      	movs	r2, #124	; 0x7c
 800369a:	2101      	movs	r1, #1
 800369c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2280      	movs	r2, #128	; 0x80
 80036a2:	2124      	movs	r1, #36	; 0x24
 80036a4:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	681a      	ldr	r2, [r3, #0]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2101      	movs	r1, #1
 80036ba:	438a      	bics	r2, r1
 80036bc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4a0b      	ldr	r2, [pc, #44]	; (80036f0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80036c2:	4013      	ands	r3, r2
 80036c4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68fa      	ldr	r2, [r7, #12]
 80036d2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2280      	movs	r2, #128	; 0x80
 80036d8:	2120      	movs	r1, #32
 80036da:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	227c      	movs	r2, #124	; 0x7c
 80036e0:	2100      	movs	r1, #0
 80036e2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	0018      	movs	r0, r3
 80036e8:	46bd      	mov	sp, r7
 80036ea:	b004      	add	sp, #16
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	46c0      	nop			; (mov r8, r8)
 80036f0:	dfffffff 	.word	0xdfffffff

080036f4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b084      	sub	sp, #16
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
 80036fc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	227c      	movs	r2, #124	; 0x7c
 8003702:	5c9b      	ldrb	r3, [r3, r2]
 8003704:	2b01      	cmp	r3, #1
 8003706:	d101      	bne.n	800370c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003708:	2302      	movs	r3, #2
 800370a:	e02e      	b.n	800376a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	227c      	movs	r2, #124	; 0x7c
 8003710:	2101      	movs	r1, #1
 8003712:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2280      	movs	r2, #128	; 0x80
 8003718:	2124      	movs	r1, #36	; 0x24
 800371a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	2101      	movs	r1, #1
 8003730:	438a      	bics	r2, r1
 8003732:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	00db      	lsls	r3, r3, #3
 800373c:	08d9      	lsrs	r1, r3, #3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	683a      	ldr	r2, [r7, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	0018      	movs	r0, r3
 800374c:	f000 f854 	bl	80037f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	68fa      	ldr	r2, [r7, #12]
 8003756:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2280      	movs	r2, #128	; 0x80
 800375c:	2120      	movs	r1, #32
 800375e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	227c      	movs	r2, #124	; 0x7c
 8003764:	2100      	movs	r1, #0
 8003766:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	0018      	movs	r0, r3
 800376c:	46bd      	mov	sp, r7
 800376e:	b004      	add	sp, #16
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	227c      	movs	r2, #124	; 0x7c
 8003782:	5c9b      	ldrb	r3, [r3, r2]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d101      	bne.n	800378c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003788:	2302      	movs	r3, #2
 800378a:	e02f      	b.n	80037ec <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	227c      	movs	r2, #124	; 0x7c
 8003790:	2101      	movs	r1, #1
 8003792:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2280      	movs	r2, #128	; 0x80
 8003798:	2124      	movs	r1, #36	; 0x24
 800379a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	2101      	movs	r1, #1
 80037b0:	438a      	bics	r2, r1
 80037b2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	689b      	ldr	r3, [r3, #8]
 80037ba:	4a0e      	ldr	r2, [pc, #56]	; (80037f4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80037bc:	4013      	ands	r3, r2
 80037be:	0019      	movs	r1, r3
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	0018      	movs	r0, r3
 80037ce:	f000 f813 	bl	80037f8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68fa      	ldr	r2, [r7, #12]
 80037d8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	2280      	movs	r2, #128	; 0x80
 80037de:	2120      	movs	r1, #32
 80037e0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	227c      	movs	r2, #124	; 0x7c
 80037e6:	2100      	movs	r1, #0
 80037e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	0018      	movs	r0, r3
 80037ee:	46bd      	mov	sp, r7
 80037f0:	b004      	add	sp, #16
 80037f2:	bd80      	pop	{r7, pc}
 80037f4:	f1ffffff 	.word	0xf1ffffff

080037f8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80037f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80037fa:	b089      	sub	sp, #36	; 0x24
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8003800:	2314      	movs	r3, #20
 8003802:	18fb      	adds	r3, r7, r3
 8003804:	4a2f      	ldr	r2, [pc, #188]	; (80038c4 <UARTEx_SetNbDataToProcess+0xcc>)
 8003806:	ca03      	ldmia	r2!, {r0, r1}
 8003808:	c303      	stmia	r3!, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 800380a:	230c      	movs	r3, #12
 800380c:	18fb      	adds	r3, r7, r3
 800380e:	4a2e      	ldr	r2, [pc, #184]	; (80038c8 <UARTEx_SetNbDataToProcess+0xd0>)
 8003810:	ca03      	ldmia	r2!, {r0, r1}
 8003812:	c303      	stmia	r3!, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003818:	2b00      	cmp	r3, #0
 800381a:	d108      	bne.n	800382e <UARTEx_SetNbDataToProcess+0x36>
  {
    huart->NbTxDataToProcess = 1U;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	226a      	movs	r2, #106	; 0x6a
 8003820:	2101      	movs	r1, #1
 8003822:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2268      	movs	r2, #104	; 0x68
 8003828:	2101      	movs	r1, #1
 800382a:	5299      	strh	r1, [r3, r2]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800382c:	e046      	b.n	80038bc <UARTEx_SetNbDataToProcess+0xc4>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800382e:	261f      	movs	r6, #31
 8003830:	19bb      	adds	r3, r7, r6
 8003832:	2208      	movs	r2, #8
 8003834:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003836:	201e      	movs	r0, #30
 8003838:	183b      	adds	r3, r7, r0
 800383a:	2208      	movs	r2, #8
 800383c:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	0e5b      	lsrs	r3, r3, #25
 8003846:	b2da      	uxtb	r2, r3
 8003848:	241d      	movs	r4, #29
 800384a:	193b      	adds	r3, r7, r4
 800384c:	2107      	movs	r1, #7
 800384e:	400a      	ands	r2, r1
 8003850:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	0f5b      	lsrs	r3, r3, #29
 800385a:	b2da      	uxtb	r2, r3
 800385c:	251c      	movs	r5, #28
 800385e:	197b      	adds	r3, r7, r5
 8003860:	2107      	movs	r1, #7
 8003862:	400a      	ands	r2, r1
 8003864:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 8003866:	183b      	adds	r3, r7, r0
 8003868:	781b      	ldrb	r3, [r3, #0]
 800386a:	197a      	adds	r2, r7, r5
 800386c:	7812      	ldrb	r2, [r2, #0]
 800386e:	2114      	movs	r1, #20
 8003870:	1879      	adds	r1, r7, r1
 8003872:	5c8a      	ldrb	r2, [r1, r2]
 8003874:	435a      	muls	r2, r3
 8003876:	0010      	movs	r0, r2
 8003878:	197b      	adds	r3, r7, r5
 800387a:	781b      	ldrb	r3, [r3, #0]
 800387c:	250c      	movs	r5, #12
 800387e:	197a      	adds	r2, r7, r5
 8003880:	5cd3      	ldrb	r3, [r2, r3]
 8003882:	0019      	movs	r1, r3
 8003884:	f7fc fcd2 	bl	800022c <__divsi3>
 8003888:	0003      	movs	r3, r0
 800388a:	b299      	uxth	r1, r3
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	226a      	movs	r2, #106	; 0x6a
 8003890:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 8003892:	19bb      	adds	r3, r7, r6
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	193a      	adds	r2, r7, r4
 8003898:	7812      	ldrb	r2, [r2, #0]
 800389a:	2114      	movs	r1, #20
 800389c:	1879      	adds	r1, r7, r1
 800389e:	5c8a      	ldrb	r2, [r1, r2]
 80038a0:	435a      	muls	r2, r3
 80038a2:	0010      	movs	r0, r2
 80038a4:	193b      	adds	r3, r7, r4
 80038a6:	781b      	ldrb	r3, [r3, #0]
 80038a8:	197a      	adds	r2, r7, r5
 80038aa:	5cd3      	ldrb	r3, [r2, r3]
 80038ac:	0019      	movs	r1, r3
 80038ae:	f7fc fcbd 	bl	800022c <__divsi3>
 80038b2:	0003      	movs	r3, r0
 80038b4:	b299      	uxth	r1, r3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	2268      	movs	r2, #104	; 0x68
 80038ba:	5299      	strh	r1, [r3, r2]
}
 80038bc:	46c0      	nop			; (mov r8, r8)
 80038be:	46bd      	mov	sp, r7
 80038c0:	b009      	add	sp, #36	; 0x24
 80038c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80038c4:	08005370 	.word	0x08005370
 80038c8:	08005378 	.word	0x08005378

080038cc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	0002      	movs	r2, r0
 80038d4:	1dbb      	adds	r3, r7, #6
 80038d6:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80038d8:	2300      	movs	r3, #0
 80038da:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80038dc:	1dbb      	adds	r3, r7, #6
 80038de:	2200      	movs	r2, #0
 80038e0:	5e9b      	ldrsh	r3, [r3, r2]
 80038e2:	2b84      	cmp	r3, #132	; 0x84
 80038e4:	d006      	beq.n	80038f4 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 80038e6:	1dbb      	adds	r3, r7, #6
 80038e8:	2200      	movs	r2, #0
 80038ea:	5e9a      	ldrsh	r2, [r3, r2]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	18d3      	adds	r3, r2, r3
 80038f0:	3303      	adds	r3, #3
 80038f2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80038f4:	68fb      	ldr	r3, [r7, #12]
}
 80038f6:	0018      	movs	r0, r3
 80038f8:	46bd      	mov	sp, r7
 80038fa:	b004      	add	sp, #16
 80038fc:	bd80      	pop	{r7, pc}

080038fe <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80038fe:	b580      	push	{r7, lr}
 8003900:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003902:	f000 fdbf 	bl	8004484 <vTaskStartScheduler>
  
  return osOK;
 8003906:	2300      	movs	r3, #0
}
 8003908:	0018      	movs	r0, r3
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}

0800390e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800390e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003910:	b087      	sub	sp, #28
 8003912:	af02      	add	r7, sp, #8
 8003914:	6078      	str	r0, [r7, #4]
 8003916:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685c      	ldr	r4, [r3, #4]
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8003924:	b29e      	uxth	r6, r3
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	2208      	movs	r2, #8
 800392a:	5e9b      	ldrsh	r3, [r3, r2]
 800392c:	0018      	movs	r0, r3
 800392e:	f7ff ffcd 	bl	80038cc <makeFreeRtosPriority>
 8003932:	0001      	movs	r1, r0
 8003934:	683a      	ldr	r2, [r7, #0]
 8003936:	230c      	movs	r3, #12
 8003938:	18fb      	adds	r3, r7, r3
 800393a:	9301      	str	r3, [sp, #4]
 800393c:	9100      	str	r1, [sp, #0]
 800393e:	0013      	movs	r3, r2
 8003940:	0032      	movs	r2, r6
 8003942:	0029      	movs	r1, r5
 8003944:	0020      	movs	r0, r4
 8003946:	f000 fc50 	bl	80041ea <xTaskCreate>
 800394a:	0003      	movs	r3, r0
 800394c:	2b01      	cmp	r3, #1
 800394e:	d001      	beq.n	8003954 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8003950:	2300      	movs	r3, #0
 8003952:	e000      	b.n	8003956 <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8003954:	68fb      	ldr	r3, [r7, #12]
}
 8003956:	0018      	movs	r0, r3
 8003958:	46bd      	mov	sp, r7
 800395a:	b005      	add	sp, #20
 800395c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800395e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800395e:	b580      	push	{r7, lr}
 8003960:	b084      	sub	sp, #16
 8003962:	af00      	add	r7, sp, #0
 8003964:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d001      	beq.n	8003974 <osDelay+0x16>
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	e000      	b.n	8003976 <osDelay+0x18>
 8003974:	2301      	movs	r3, #1
 8003976:	0018      	movs	r0, r3
 8003978:	f000 fd5e 	bl	8004438 <vTaskDelay>
  
  return osOK;
 800397c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800397e:	0018      	movs	r0, r3
 8003980:	46bd      	mov	sp, r7
 8003982:	b004      	add	sp, #16
 8003984:	bd80      	pop	{r7, pc}

08003986 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003986:	b580      	push	{r7, lr}
 8003988:	b082      	sub	sp, #8
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	3308      	adds	r3, #8
 8003992:	001a      	movs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2201      	movs	r2, #1
 800399c:	4252      	negs	r2, r2
 800399e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	3308      	adds	r3, #8
 80039a4:	001a      	movs	r2, r3
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	3308      	adds	r3, #8
 80039ae:	001a      	movs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	46bd      	mov	sp, r7
 80039be:	b002      	add	sp, #8
 80039c0:	bd80      	pop	{r7, pc}

080039c2 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039c2:	b580      	push	{r7, lr}
 80039c4:	b082      	sub	sp, #8
 80039c6:	af00      	add	r7, sp, #0
 80039c8:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2200      	movs	r2, #0
 80039ce:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039d0:	46c0      	nop			; (mov r8, r8)
 80039d2:	46bd      	mov	sp, r7
 80039d4:	b002      	add	sp, #8
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039d8:	b580      	push	{r7, lr}
 80039da:	b084      	sub	sp, #16
 80039dc:	af00      	add	r7, sp, #0
 80039de:	6078      	str	r0, [r7, #4]
 80039e0:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	68fa      	ldr	r2, [r7, #12]
 80039ec:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	689a      	ldr	r2, [r3, #8]
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	683a      	ldr	r2, [r7, #0]
 80039fc:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	1c5a      	adds	r2, r3, #1
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	601a      	str	r2, [r3, #0]
}
 8003a14:	46c0      	nop			; (mov r8, r8)
 8003a16:	46bd      	mov	sp, r7
 8003a18:	b004      	add	sp, #16
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
 8003a24:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	3301      	adds	r3, #1
 8003a30:	d103      	bne.n	8003a3a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	691b      	ldr	r3, [r3, #16]
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	e00c      	b.n	8003a54 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	3308      	adds	r3, #8
 8003a3e:	60fb      	str	r3, [r7, #12]
 8003a40:	e002      	b.n	8003a48 <vListInsert+0x2c>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	60fb      	str	r3, [r7, #12]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	68ba      	ldr	r2, [r7, #8]
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d2f6      	bcs.n	8003a42 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	685a      	ldr	r2, [r3, #4]
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	683a      	ldr	r2, [r7, #0]
 8003a62:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	68fa      	ldr	r2, [r7, #12]
 8003a68:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	683a      	ldr	r2, [r7, #0]
 8003a6e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	687a      	ldr	r2, [r7, #4]
 8003a74:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	1c5a      	adds	r2, r3, #1
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	601a      	str	r2, [r3, #0]
}
 8003a80:	46c0      	nop			; (mov r8, r8)
 8003a82:	46bd      	mov	sp, r7
 8003a84:	b004      	add	sp, #16
 8003a86:	bd80      	pop	{r7, pc}

08003a88 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	691b      	ldr	r3, [r3, #16]
 8003a94:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	687a      	ldr	r2, [r7, #4]
 8003a9c:	6892      	ldr	r2, [r2, #8]
 8003a9e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	687a      	ldr	r2, [r7, #4]
 8003aa6:	6852      	ldr	r2, [r2, #4]
 8003aa8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	687a      	ldr	r2, [r7, #4]
 8003ab0:	429a      	cmp	r2, r3
 8003ab2:	d103      	bne.n	8003abc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689a      	ldr	r2, [r3, #8]
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2200      	movs	r2, #0
 8003ac0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	1e5a      	subs	r2, r3, #1
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	b004      	add	sp, #16
 8003ad6:	bd80      	pop	{r7, pc}

08003ad8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b084      	sub	sp, #16
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	6078      	str	r0, [r7, #4]
 8003ae0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d101      	bne.n	8003af0 <xQueueGenericReset+0x18>
 8003aec:	b672      	cpsid	i
 8003aee:	e7fe      	b.n	8003aee <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8003af0:	f001 f99e 	bl	8004e30 <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b00:	434b      	muls	r3, r1
 8003b02:	18d2      	adds	r2, r2, r3
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	1e59      	subs	r1, r3, #1
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b24:	434b      	muls	r3, r1
 8003b26:	18d2      	adds	r2, r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2244      	movs	r2, #68	; 0x44
 8003b30:	21ff      	movs	r1, #255	; 0xff
 8003b32:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2245      	movs	r2, #69	; 0x45
 8003b38:	21ff      	movs	r1, #255	; 0xff
 8003b3a:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d10d      	bne.n	8003b5e <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	691b      	ldr	r3, [r3, #16]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d013      	beq.n	8003b72 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	3310      	adds	r3, #16
 8003b4e:	0018      	movs	r0, r3
 8003b50:	f000 fe8a 	bl	8004868 <xTaskRemoveFromEventList>
 8003b54:	1e03      	subs	r3, r0, #0
 8003b56:	d00c      	beq.n	8003b72 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b58:	f001 f95a 	bl	8004e10 <vPortYield>
 8003b5c:	e009      	b.n	8003b72 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	3310      	adds	r3, #16
 8003b62:	0018      	movs	r0, r3
 8003b64:	f7ff ff0f 	bl	8003986 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	3324      	adds	r3, #36	; 0x24
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f7ff ff0a 	bl	8003986 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003b72:	f001 f96f 	bl	8004e54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003b76:	2301      	movs	r3, #1
}
 8003b78:	0018      	movs	r0, r3
 8003b7a:	46bd      	mov	sp, r7
 8003b7c:	b004      	add	sp, #16
 8003b7e:	bd80      	pop	{r7, pc}

08003b80 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003b80:	b590      	push	{r4, r7, lr}
 8003b82:	b08b      	sub	sp, #44	; 0x2c
 8003b84:	af02      	add	r7, sp, #8
 8003b86:	60f8      	str	r0, [r7, #12]
 8003b88:	60b9      	str	r1, [r7, #8]
 8003b8a:	1dfb      	adds	r3, r7, #7
 8003b8c:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <xQueueGenericCreate+0x18>
 8003b94:	b672      	cpsid	i
 8003b96:	e7fe      	b.n	8003b96 <xQueueGenericCreate+0x16>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d102      	bne.n	8003ba4 <xQueueGenericCreate+0x24>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	61fb      	str	r3, [r7, #28]
 8003ba2:	e003      	b.n	8003bac <xQueueGenericCreate+0x2c>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	68ba      	ldr	r2, [r7, #8]
 8003ba8:	4353      	muls	r3, r2
 8003baa:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8003bac:	69fb      	ldr	r3, [r7, #28]
 8003bae:	3348      	adds	r3, #72	; 0x48
 8003bb0:	0018      	movs	r0, r3
 8003bb2:	f001 f9d5 	bl	8004f60 <pvPortMalloc>
 8003bb6:	0003      	movs	r3, r0
 8003bb8:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d00c      	beq.n	8003bda <xQueueGenericCreate+0x5a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	3348      	adds	r3, #72	; 0x48
 8003bc4:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003bc6:	1dfb      	adds	r3, r7, #7
 8003bc8:	781c      	ldrb	r4, [r3, #0]
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	68b9      	ldr	r1, [r7, #8]
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	69bb      	ldr	r3, [r7, #24]
 8003bd2:	9300      	str	r3, [sp, #0]
 8003bd4:	0023      	movs	r3, r4
 8003bd6:	f000 f805 	bl	8003be4 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8003bda:	69bb      	ldr	r3, [r7, #24]
	}
 8003bdc:	0018      	movs	r0, r3
 8003bde:	46bd      	mov	sp, r7
 8003be0:	b009      	add	sp, #36	; 0x24
 8003be2:	bd90      	pop	{r4, r7, pc}

08003be4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003be4:	b580      	push	{r7, lr}
 8003be6:	b084      	sub	sp, #16
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	60f8      	str	r0, [r7, #12]
 8003bec:	60b9      	str	r1, [r7, #8]
 8003bee:	607a      	str	r2, [r7, #4]
 8003bf0:	001a      	movs	r2, r3
 8003bf2:	1cfb      	adds	r3, r7, #3
 8003bf4:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d103      	bne.n	8003c04 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003bfc:	69bb      	ldr	r3, [r7, #24]
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	601a      	str	r2, [r3, #0]
 8003c02:	e002      	b.n	8003c0a <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003c04:	69bb      	ldr	r3, [r7, #24]
 8003c06:	687a      	ldr	r2, [r7, #4]
 8003c08:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	68ba      	ldr	r2, [r7, #8]
 8003c14:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003c16:	69bb      	ldr	r3, [r7, #24]
 8003c18:	2101      	movs	r1, #1
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	f7ff ff5c 	bl	8003ad8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003c20:	46c0      	nop			; (mov r8, r8)
 8003c22:	46bd      	mov	sp, r7
 8003c24:	b004      	add	sp, #16
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00e      	beq.n	8003c54 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	2200      	movs	r2, #0
 8003c3a:	605a      	str	r2, [r3, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2200      	movs	r2, #0
 8003c40:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.uxRecursiveCallCount = 0;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003c48:	6878      	ldr	r0, [r7, #4]
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	2100      	movs	r1, #0
 8003c50:	f000 f820 	bl	8003c94 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8003c54:	46c0      	nop			; (mov r8, r8)
 8003c56:	46bd      	mov	sp, r7
 8003c58:	b002      	add	sp, #8
 8003c5a:	bd80      	pop	{r7, pc}

08003c5c <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	0002      	movs	r2, r0
 8003c64:	1dfb      	adds	r3, r7, #7
 8003c66:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8003c68:	2301      	movs	r3, #1
 8003c6a:	617b      	str	r3, [r7, #20]
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	613b      	str	r3, [r7, #16]

		pxNewQueue = ( Queue_t * ) xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8003c70:	1dfb      	adds	r3, r7, #7
 8003c72:	781a      	ldrb	r2, [r3, #0]
 8003c74:	6939      	ldr	r1, [r7, #16]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	0018      	movs	r0, r3
 8003c7a:	f7ff ff81 	bl	8003b80 <xQueueGenericCreate>
 8003c7e:	0003      	movs	r3, r0
 8003c80:	60fb      	str	r3, [r7, #12]
		prvInitialiseMutex( pxNewQueue );
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	0018      	movs	r0, r3
 8003c86:	f7ff ffcf 	bl	8003c28 <prvInitialiseMutex>

		return pxNewQueue;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
	}
 8003c8c:	0018      	movs	r0, r3
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	b006      	add	sp, #24
 8003c92:	bd80      	pop	{r7, pc}

08003c94 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b08a      	sub	sp, #40	; 0x28
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
 8003ca0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ca2:	2300      	movs	r3, #0
 8003ca4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8003caa:	6a3b      	ldr	r3, [r7, #32]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d101      	bne.n	8003cb4 <xQueueGenericSend+0x20>
 8003cb0:	b672      	cpsid	i
 8003cb2:	e7fe      	b.n	8003cb2 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cb4:	68bb      	ldr	r3, [r7, #8]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d103      	bne.n	8003cc2 <xQueueGenericSend+0x2e>
 8003cba:	6a3b      	ldr	r3, [r7, #32]
 8003cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d101      	bne.n	8003cc6 <xQueueGenericSend+0x32>
 8003cc2:	2301      	movs	r3, #1
 8003cc4:	e000      	b.n	8003cc8 <xQueueGenericSend+0x34>
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d101      	bne.n	8003cd0 <xQueueGenericSend+0x3c>
 8003ccc:	b672      	cpsid	i
 8003cce:	e7fe      	b.n	8003cce <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	d103      	bne.n	8003cde <xQueueGenericSend+0x4a>
 8003cd6:	6a3b      	ldr	r3, [r7, #32]
 8003cd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d101      	bne.n	8003ce2 <xQueueGenericSend+0x4e>
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e000      	b.n	8003ce4 <xQueueGenericSend+0x50>
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <xQueueGenericSend+0x58>
 8003ce8:	b672      	cpsid	i
 8003cea:	e7fe      	b.n	8003cea <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003cec:	f000 ff3e 	bl	8004b6c <xTaskGetSchedulerState>
 8003cf0:	1e03      	subs	r3, r0, #0
 8003cf2:	d102      	bne.n	8003cfa <xQueueGenericSend+0x66>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d101      	bne.n	8003cfe <xQueueGenericSend+0x6a>
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	e000      	b.n	8003d00 <xQueueGenericSend+0x6c>
 8003cfe:	2300      	movs	r3, #0
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d101      	bne.n	8003d08 <xQueueGenericSend+0x74>
 8003d04:	b672      	cpsid	i
 8003d06:	e7fe      	b.n	8003d06 <xQueueGenericSend+0x72>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003d08:	f001 f892 	bl	8004e30 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d0c:	6a3b      	ldr	r3, [r7, #32]
 8003d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d10:	6a3b      	ldr	r3, [r7, #32]
 8003d12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d14:	429a      	cmp	r2, r3
 8003d16:	d302      	bcc.n	8003d1e <xQueueGenericSend+0x8a>
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d11e      	bne.n	8003d5c <xQueueGenericSend+0xc8>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d1e:	683a      	ldr	r2, [r7, #0]
 8003d20:	68b9      	ldr	r1, [r7, #8]
 8003d22:	6a3b      	ldr	r3, [r7, #32]
 8003d24:	0018      	movs	r0, r3
 8003d26:	f000 f943 	bl	8003fb0 <prvCopyDataToQueue>
 8003d2a:	0003      	movs	r3, r0
 8003d2c:	61fb      	str	r3, [r7, #28]
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d2e:	6a3b      	ldr	r3, [r7, #32]
 8003d30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d009      	beq.n	8003d4a <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d36:	6a3b      	ldr	r3, [r7, #32]
 8003d38:	3324      	adds	r3, #36	; 0x24
 8003d3a:	0018      	movs	r0, r3
 8003d3c:	f000 fd94 	bl	8004868 <xTaskRemoveFromEventList>
 8003d40:	1e03      	subs	r3, r0, #0
 8003d42:	d007      	beq.n	8003d54 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003d44:	f001 f864 	bl	8004e10 <vPortYield>
 8003d48:	e004      	b.n	8003d54 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d001      	beq.n	8003d54 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003d50:	f001 f85e 	bl	8004e10 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003d54:	f001 f87e 	bl	8004e54 <vPortExitCritical>
				return pdPASS;
 8003d58:	2301      	movs	r3, #1
 8003d5a:	e05b      	b.n	8003e14 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d103      	bne.n	8003d6a <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003d62:	f001 f877 	bl	8004e54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003d66:	2300      	movs	r3, #0
 8003d68:	e054      	b.n	8003e14 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003d6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d106      	bne.n	8003d7e <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003d70:	2314      	movs	r3, #20
 8003d72:	18fb      	adds	r3, r7, r3
 8003d74:	0018      	movs	r0, r3
 8003d76:	f000 fdd3 	bl	8004920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003d7e:	f001 f869 	bl	8004e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003d82:	f000 fbb5 	bl	80044f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003d86:	f001 f853 	bl	8004e30 <vPortEnterCritical>
 8003d8a:	6a3b      	ldr	r3, [r7, #32]
 8003d8c:	2244      	movs	r2, #68	; 0x44
 8003d8e:	5c9b      	ldrb	r3, [r3, r2]
 8003d90:	b25b      	sxtb	r3, r3
 8003d92:	3301      	adds	r3, #1
 8003d94:	d103      	bne.n	8003d9e <xQueueGenericSend+0x10a>
 8003d96:	6a3b      	ldr	r3, [r7, #32]
 8003d98:	2244      	movs	r2, #68	; 0x44
 8003d9a:	2100      	movs	r1, #0
 8003d9c:	5499      	strb	r1, [r3, r2]
 8003d9e:	6a3b      	ldr	r3, [r7, #32]
 8003da0:	2245      	movs	r2, #69	; 0x45
 8003da2:	5c9b      	ldrb	r3, [r3, r2]
 8003da4:	b25b      	sxtb	r3, r3
 8003da6:	3301      	adds	r3, #1
 8003da8:	d103      	bne.n	8003db2 <xQueueGenericSend+0x11e>
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	2245      	movs	r2, #69	; 0x45
 8003dae:	2100      	movs	r1, #0
 8003db0:	5499      	strb	r1, [r3, r2]
 8003db2:	f001 f84f 	bl	8004e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003db6:	1d3a      	adds	r2, r7, #4
 8003db8:	2314      	movs	r3, #20
 8003dba:	18fb      	adds	r3, r7, r3
 8003dbc:	0011      	movs	r1, r2
 8003dbe:	0018      	movs	r0, r3
 8003dc0:	f000 fdc2 	bl	8004948 <xTaskCheckForTimeOut>
 8003dc4:	1e03      	subs	r3, r0, #0
 8003dc6:	d11e      	bne.n	8003e06 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003dc8:	6a3b      	ldr	r3, [r7, #32]
 8003dca:	0018      	movs	r0, r3
 8003dcc:	f000 f9f5 	bl	80041ba <prvIsQueueFull>
 8003dd0:	1e03      	subs	r3, r0, #0
 8003dd2:	d011      	beq.n	8003df8 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003dd4:	6a3b      	ldr	r3, [r7, #32]
 8003dd6:	3310      	adds	r3, #16
 8003dd8:	687a      	ldr	r2, [r7, #4]
 8003dda:	0011      	movs	r1, r2
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f000 fd25 	bl	800482c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003de2:	6a3b      	ldr	r3, [r7, #32]
 8003de4:	0018      	movs	r0, r3
 8003de6:	f000 f974 	bl	80040d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003dea:	f000 fb8d 	bl	8004508 <xTaskResumeAll>
 8003dee:	1e03      	subs	r3, r0, #0
 8003df0:	d18a      	bne.n	8003d08 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 8003df2:	f001 f80d 	bl	8004e10 <vPortYield>
 8003df6:	e787      	b.n	8003d08 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003df8:	6a3b      	ldr	r3, [r7, #32]
 8003dfa:	0018      	movs	r0, r3
 8003dfc:	f000 f969 	bl	80040d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003e00:	f000 fb82 	bl	8004508 <xTaskResumeAll>
 8003e04:	e780      	b.n	8003d08 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003e06:	6a3b      	ldr	r3, [r7, #32]
 8003e08:	0018      	movs	r0, r3
 8003e0a:	f000 f962 	bl	80040d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003e0e:	f000 fb7b 	bl	8004508 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003e12:	2300      	movs	r3, #0
		}
	}
}
 8003e14:	0018      	movs	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	b00a      	add	sp, #40	; 0x28
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b08a      	sub	sp, #40	; 0x28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003e30:	6a3b      	ldr	r3, [r7, #32]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <xQueueReceive+0x1e>
 8003e36:	b672      	cpsid	i
 8003e38:	e7fe      	b.n	8003e38 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d103      	bne.n	8003e48 <xQueueReceive+0x2c>
 8003e40:	6a3b      	ldr	r3, [r7, #32]
 8003e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <xQueueReceive+0x30>
 8003e48:	2301      	movs	r3, #1
 8003e4a:	e000      	b.n	8003e4e <xQueueReceive+0x32>
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <xQueueReceive+0x3a>
 8003e52:	b672      	cpsid	i
 8003e54:	e7fe      	b.n	8003e54 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e56:	f000 fe89 	bl	8004b6c <xTaskGetSchedulerState>
 8003e5a:	1e03      	subs	r3, r0, #0
 8003e5c:	d102      	bne.n	8003e64 <xQueueReceive+0x48>
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d101      	bne.n	8003e68 <xQueueReceive+0x4c>
 8003e64:	2301      	movs	r3, #1
 8003e66:	e000      	b.n	8003e6a <xQueueReceive+0x4e>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d101      	bne.n	8003e72 <xQueueReceive+0x56>
 8003e6e:	b672      	cpsid	i
 8003e70:	e7fe      	b.n	8003e70 <xQueueReceive+0x54>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e72:	f000 ffdd 	bl	8004e30 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e76:	6a3b      	ldr	r3, [r7, #32]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e7c:	69fb      	ldr	r3, [r7, #28]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01a      	beq.n	8003eb8 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e82:	68ba      	ldr	r2, [r7, #8]
 8003e84:	6a3b      	ldr	r3, [r7, #32]
 8003e86:	0011      	movs	r1, r2
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f000 f8fc 	bl	8004086 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e8e:	69fb      	ldr	r3, [r7, #28]
 8003e90:	1e5a      	subs	r2, r3, #1
 8003e92:	6a3b      	ldr	r3, [r7, #32]
 8003e94:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e96:	6a3b      	ldr	r3, [r7, #32]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d008      	beq.n	8003eb0 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e9e:	6a3b      	ldr	r3, [r7, #32]
 8003ea0:	3310      	adds	r3, #16
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 fce0 	bl	8004868 <xTaskRemoveFromEventList>
 8003ea8:	1e03      	subs	r3, r0, #0
 8003eaa:	d001      	beq.n	8003eb0 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003eac:	f000 ffb0 	bl	8004e10 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003eb0:	f000 ffd0 	bl	8004e54 <vPortExitCritical>
				return pdPASS;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	e062      	b.n	8003f7e <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d103      	bne.n	8003ec6 <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ebe:	f000 ffc9 	bl	8004e54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	e05b      	b.n	8003f7e <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d106      	bne.n	8003eda <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ecc:	2314      	movs	r3, #20
 8003ece:	18fb      	adds	r3, r7, r3
 8003ed0:	0018      	movs	r0, r3
 8003ed2:	f000 fd25 	bl	8004920 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003eda:	f000 ffbb 	bl	8004e54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ede:	f000 fb07 	bl	80044f0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003ee2:	f000 ffa5 	bl	8004e30 <vPortEnterCritical>
 8003ee6:	6a3b      	ldr	r3, [r7, #32]
 8003ee8:	2244      	movs	r2, #68	; 0x44
 8003eea:	5c9b      	ldrb	r3, [r3, r2]
 8003eec:	b25b      	sxtb	r3, r3
 8003eee:	3301      	adds	r3, #1
 8003ef0:	d103      	bne.n	8003efa <xQueueReceive+0xde>
 8003ef2:	6a3b      	ldr	r3, [r7, #32]
 8003ef4:	2244      	movs	r2, #68	; 0x44
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	5499      	strb	r1, [r3, r2]
 8003efa:	6a3b      	ldr	r3, [r7, #32]
 8003efc:	2245      	movs	r2, #69	; 0x45
 8003efe:	5c9b      	ldrb	r3, [r3, r2]
 8003f00:	b25b      	sxtb	r3, r3
 8003f02:	3301      	adds	r3, #1
 8003f04:	d103      	bne.n	8003f0e <xQueueReceive+0xf2>
 8003f06:	6a3b      	ldr	r3, [r7, #32]
 8003f08:	2245      	movs	r2, #69	; 0x45
 8003f0a:	2100      	movs	r1, #0
 8003f0c:	5499      	strb	r1, [r3, r2]
 8003f0e:	f000 ffa1 	bl	8004e54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f12:	1d3a      	adds	r2, r7, #4
 8003f14:	2314      	movs	r3, #20
 8003f16:	18fb      	adds	r3, r7, r3
 8003f18:	0011      	movs	r1, r2
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	f000 fd14 	bl	8004948 <xTaskCheckForTimeOut>
 8003f20:	1e03      	subs	r3, r0, #0
 8003f22:	d11e      	bne.n	8003f62 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f24:	6a3b      	ldr	r3, [r7, #32]
 8003f26:	0018      	movs	r0, r3
 8003f28:	f000 f931 	bl	800418e <prvIsQueueEmpty>
 8003f2c:	1e03      	subs	r3, r0, #0
 8003f2e:	d011      	beq.n	8003f54 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f30:	6a3b      	ldr	r3, [r7, #32]
 8003f32:	3324      	adds	r3, #36	; 0x24
 8003f34:	687a      	ldr	r2, [r7, #4]
 8003f36:	0011      	movs	r1, r2
 8003f38:	0018      	movs	r0, r3
 8003f3a:	f000 fc77 	bl	800482c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f3e:	6a3b      	ldr	r3, [r7, #32]
 8003f40:	0018      	movs	r0, r3
 8003f42:	f000 f8c6 	bl	80040d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f46:	f000 fadf 	bl	8004508 <xTaskResumeAll>
 8003f4a:	1e03      	subs	r3, r0, #0
 8003f4c:	d191      	bne.n	8003e72 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8003f4e:	f000 ff5f 	bl	8004e10 <vPortYield>
 8003f52:	e78e      	b.n	8003e72 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f54:	6a3b      	ldr	r3, [r7, #32]
 8003f56:	0018      	movs	r0, r3
 8003f58:	f000 f8bb 	bl	80040d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f5c:	f000 fad4 	bl	8004508 <xTaskResumeAll>
 8003f60:	e787      	b.n	8003e72 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f62:	6a3b      	ldr	r3, [r7, #32]
 8003f64:	0018      	movs	r0, r3
 8003f66:	f000 f8b4 	bl	80040d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f6a:	f000 facd 	bl	8004508 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	0018      	movs	r0, r3
 8003f72:	f000 f90c 	bl	800418e <prvIsQueueEmpty>
 8003f76:	1e03      	subs	r3, r0, #0
 8003f78:	d100      	bne.n	8003f7c <xQueueReceive+0x160>
 8003f7a:	e77a      	b.n	8003e72 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8003f7e:	0018      	movs	r0, r3
 8003f80:	46bd      	mov	sp, r7
 8003f82:	b00a      	add	sp, #40	; 0x28
 8003f84:	bd80      	pop	{r7, pc}

08003f86 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003f86:	b580      	push	{r7, lr}
 8003f88:	b084      	sub	sp, #16
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d101      	bne.n	8003f98 <uxQueueMessagesWaiting+0x12>
 8003f94:	b672      	cpsid	i
 8003f96:	e7fe      	b.n	8003f96 <uxQueueMessagesWaiting+0x10>

	taskENTER_CRITICAL();
 8003f98:	f000 ff4a 	bl	8004e30 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fa0:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8003fa2:	f000 ff57 	bl	8004e54 <vPortExitCritical>

	return uxReturn;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8003fa8:	0018      	movs	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	b004      	add	sp, #16
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b086      	sub	sp, #24
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	60f8      	str	r0, [r7, #12]
 8003fb8:	60b9      	str	r1, [r7, #8]
 8003fba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fbc:	2300      	movs	r3, #0
 8003fbe:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d10e      	bne.n	8003fec <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d14e      	bne.n	8004074 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	685b      	ldr	r3, [r3, #4]
 8003fda:	0018      	movs	r0, r3
 8003fdc:	f000 fde2 	bl	8004ba4 <xTaskPriorityDisinherit>
 8003fe0:	0003      	movs	r3, r0
 8003fe2:	617b      	str	r3, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	605a      	str	r2, [r3, #4]
 8003fea:	e043      	b.n	8004074 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d119      	bne.n	8004026 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6898      	ldr	r0, [r3, #8]
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	0019      	movs	r1, r3
 8003ffe:	f001 f979 	bl	80052f4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	689a      	ldr	r2, [r3, #8]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	18d2      	adds	r2, r2, r3
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	429a      	cmp	r2, r3
 800401a:	d32b      	bcc.n	8004074 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	609a      	str	r2, [r3, #8]
 8004024:	e026      	b.n	8004074 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	68d8      	ldr	r0, [r3, #12]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	0019      	movs	r1, r3
 8004032:	f001 f95f 	bl	80052f4 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	68da      	ldr	r2, [r3, #12]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	425b      	negs	r3, r3
 8004040:	18d2      	adds	r2, r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68da      	ldr	r2, [r3, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	429a      	cmp	r2, r3
 8004050:	d207      	bcs.n	8004062 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800405a:	425b      	negs	r3, r3
 800405c:	18d2      	adds	r2, r2, r3
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2b02      	cmp	r3, #2
 8004066:	d105      	bne.n	8004074 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d002      	beq.n	8004074 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	3b01      	subs	r3, #1
 8004072:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800407c:	697b      	ldr	r3, [r7, #20]
}
 800407e:	0018      	movs	r0, r3
 8004080:	46bd      	mov	sp, r7
 8004082:	b006      	add	sp, #24
 8004084:	bd80      	pop	{r7, pc}

08004086 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004086:	b580      	push	{r7, lr}
 8004088:	b082      	sub	sp, #8
 800408a:	af00      	add	r7, sp, #0
 800408c:	6078      	str	r0, [r7, #4]
 800408e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	2b00      	cmp	r3, #0
 8004096:	d018      	beq.n	80040ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a0:	18d2      	adds	r2, r2, r3
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	68da      	ldr	r2, [r3, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	685b      	ldr	r3, [r3, #4]
 80040ae:	429a      	cmp	r2, r3
 80040b0:	d303      	bcc.n	80040ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681a      	ldr	r2, [r3, #0]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68d9      	ldr	r1, [r3, #12]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	0018      	movs	r0, r3
 80040c6:	f001 f915 	bl	80052f4 <memcpy>
	}
}
 80040ca:	46c0      	nop			; (mov r8, r8)
 80040cc:	46bd      	mov	sp, r7
 80040ce:	b002      	add	sp, #8
 80040d0:	bd80      	pop	{r7, pc}

080040d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040d2:	b580      	push	{r7, lr}
 80040d4:	b084      	sub	sp, #16
 80040d6:	af00      	add	r7, sp, #0
 80040d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040da:	f000 fea9 	bl	8004e30 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040de:	230f      	movs	r3, #15
 80040e0:	18fb      	adds	r3, r7, r3
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	2145      	movs	r1, #69	; 0x45
 80040e6:	5c52      	ldrb	r2, [r2, r1]
 80040e8:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040ea:	e013      	b.n	8004114 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d016      	beq.n	8004122 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	3324      	adds	r3, #36	; 0x24
 80040f8:	0018      	movs	r0, r3
 80040fa:	f000 fbb5 	bl	8004868 <xTaskRemoveFromEventList>
 80040fe:	1e03      	subs	r3, r0, #0
 8004100:	d001      	beq.n	8004106 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004102:	f000 fc71 	bl	80049e8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004106:	210f      	movs	r1, #15
 8004108:	187b      	adds	r3, r7, r1
 800410a:	781b      	ldrb	r3, [r3, #0]
 800410c:	3b01      	subs	r3, #1
 800410e:	b2da      	uxtb	r2, r3
 8004110:	187b      	adds	r3, r7, r1
 8004112:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004114:	230f      	movs	r3, #15
 8004116:	18fb      	adds	r3, r7, r3
 8004118:	781b      	ldrb	r3, [r3, #0]
 800411a:	b25b      	sxtb	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	dce5      	bgt.n	80040ec <prvUnlockQueue+0x1a>
 8004120:	e000      	b.n	8004124 <prvUnlockQueue+0x52>
					break;
 8004122:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2245      	movs	r2, #69	; 0x45
 8004128:	21ff      	movs	r1, #255	; 0xff
 800412a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800412c:	f000 fe92 	bl	8004e54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004130:	f000 fe7e 	bl	8004e30 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004134:	230e      	movs	r3, #14
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	2144      	movs	r1, #68	; 0x44
 800413c:	5c52      	ldrb	r2, [r2, r1]
 800413e:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004140:	e013      	b.n	800416a <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	691b      	ldr	r3, [r3, #16]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d016      	beq.n	8004178 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	3310      	adds	r3, #16
 800414e:	0018      	movs	r0, r3
 8004150:	f000 fb8a 	bl	8004868 <xTaskRemoveFromEventList>
 8004154:	1e03      	subs	r3, r0, #0
 8004156:	d001      	beq.n	800415c <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8004158:	f000 fc46 	bl	80049e8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800415c:	210e      	movs	r1, #14
 800415e:	187b      	adds	r3, r7, r1
 8004160:	781b      	ldrb	r3, [r3, #0]
 8004162:	3b01      	subs	r3, #1
 8004164:	b2da      	uxtb	r2, r3
 8004166:	187b      	adds	r3, r7, r1
 8004168:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800416a:	230e      	movs	r3, #14
 800416c:	18fb      	adds	r3, r7, r3
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	b25b      	sxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	dce5      	bgt.n	8004142 <prvUnlockQueue+0x70>
 8004176:	e000      	b.n	800417a <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8004178:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	2244      	movs	r2, #68	; 0x44
 800417e:	21ff      	movs	r1, #255	; 0xff
 8004180:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8004182:	f000 fe67 	bl	8004e54 <vPortExitCritical>
}
 8004186:	46c0      	nop			; (mov r8, r8)
 8004188:	46bd      	mov	sp, r7
 800418a:	b004      	add	sp, #16
 800418c:	bd80      	pop	{r7, pc}

0800418e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800418e:	b580      	push	{r7, lr}
 8004190:	b084      	sub	sp, #16
 8004192:	af00      	add	r7, sp, #0
 8004194:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004196:	f000 fe4b 	bl	8004e30 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d102      	bne.n	80041a8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80041a2:	2301      	movs	r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]
 80041a6:	e001      	b.n	80041ac <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041ac:	f000 fe52 	bl	8004e54 <vPortExitCritical>

	return xReturn;
 80041b0:	68fb      	ldr	r3, [r7, #12]
}
 80041b2:	0018      	movs	r0, r3
 80041b4:	46bd      	mov	sp, r7
 80041b6:	b004      	add	sp, #16
 80041b8:	bd80      	pop	{r7, pc}

080041ba <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80041c2:	f000 fe35 	bl	8004e30 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d102      	bne.n	80041d8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041d2:	2301      	movs	r3, #1
 80041d4:	60fb      	str	r3, [r7, #12]
 80041d6:	e001      	b.n	80041dc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041d8:	2300      	movs	r3, #0
 80041da:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041dc:	f000 fe3a 	bl	8004e54 <vPortExitCritical>

	return xReturn;
 80041e0:	68fb      	ldr	r3, [r7, #12]
}
 80041e2:	0018      	movs	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	b004      	add	sp, #16
 80041e8:	bd80      	pop	{r7, pc}

080041ea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80041ea:	b590      	push	{r4, r7, lr}
 80041ec:	b08d      	sub	sp, #52	; 0x34
 80041ee:	af04      	add	r7, sp, #16
 80041f0:	60f8      	str	r0, [r7, #12]
 80041f2:	60b9      	str	r1, [r7, #8]
 80041f4:	603b      	str	r3, [r7, #0]
 80041f6:	1dbb      	adds	r3, r7, #6
 80041f8:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041fa:	1dbb      	adds	r3, r7, #6
 80041fc:	881b      	ldrh	r3, [r3, #0]
 80041fe:	009b      	lsls	r3, r3, #2
 8004200:	0018      	movs	r0, r3
 8004202:	f000 fead 	bl	8004f60 <pvPortMalloc>
 8004206:	0003      	movs	r3, r0
 8004208:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2b00      	cmp	r3, #0
 800420e:	d010      	beq.n	8004232 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8004210:	2054      	movs	r0, #84	; 0x54
 8004212:	f000 fea5 	bl	8004f60 <pvPortMalloc>
 8004216:	0003      	movs	r3, r0
 8004218:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	2b00      	cmp	r3, #0
 800421e:	d003      	beq.n	8004228 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004220:	69fb      	ldr	r3, [r7, #28]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	631a      	str	r2, [r3, #48]	; 0x30
 8004226:	e006      	b.n	8004236 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	0018      	movs	r0, r3
 800422c:	f000 ff3e 	bl	80050ac <vPortFree>
 8004230:	e001      	b.n	8004236 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004232:	2300      	movs	r3, #0
 8004234:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d016      	beq.n	800426a <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800423c:	1dbb      	adds	r3, r7, #6
 800423e:	881a      	ldrh	r2, [r3, #0]
 8004240:	683c      	ldr	r4, [r7, #0]
 8004242:	68b9      	ldr	r1, [r7, #8]
 8004244:	68f8      	ldr	r0, [r7, #12]
 8004246:	2300      	movs	r3, #0
 8004248:	9303      	str	r3, [sp, #12]
 800424a:	69fb      	ldr	r3, [r7, #28]
 800424c:	9302      	str	r3, [sp, #8]
 800424e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004250:	9301      	str	r3, [sp, #4]
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	9300      	str	r3, [sp, #0]
 8004256:	0023      	movs	r3, r4
 8004258:	f000 f810 	bl	800427c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	0018      	movs	r0, r3
 8004260:	f000 f886 	bl	8004370 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004264:	2301      	movs	r3, #1
 8004266:	61bb      	str	r3, [r7, #24]
 8004268:	e002      	b.n	8004270 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800426a:	2301      	movs	r3, #1
 800426c:	425b      	negs	r3, r3
 800426e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004270:	69bb      	ldr	r3, [r7, #24]
	}
 8004272:	0018      	movs	r0, r3
 8004274:	46bd      	mov	sp, r7
 8004276:	b009      	add	sp, #36	; 0x24
 8004278:	bd90      	pop	{r4, r7, pc}
	...

0800427c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800427c:	b580      	push	{r7, lr}
 800427e:	b086      	sub	sp, #24
 8004280:	af00      	add	r7, sp, #0
 8004282:	60f8      	str	r0, [r7, #12]
 8004284:	60b9      	str	r1, [r7, #8]
 8004286:	607a      	str	r2, [r7, #4]
 8004288:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 800428a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800428c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4936      	ldr	r1, [pc, #216]	; (800436c <prvInitialiseNewTask+0xf0>)
 8004292:	468c      	mov	ip, r1
 8004294:	4463      	add	r3, ip
 8004296:	009b      	lsls	r3, r3, #2
 8004298:	18d3      	adds	r3, r2, r3
 800429a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800429c:	693b      	ldr	r3, [r7, #16]
 800429e:	2207      	movs	r2, #7
 80042a0:	4393      	bics	r3, r2
 80042a2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	2207      	movs	r2, #7
 80042a8:	4013      	ands	r3, r2
 80042aa:	d001      	beq.n	80042b0 <prvInitialiseNewTask+0x34>
 80042ac:	b672      	cpsid	i
 80042ae:	e7fe      	b.n	80042ae <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042b0:	2300      	movs	r3, #0
 80042b2:	617b      	str	r3, [r7, #20]
 80042b4:	e013      	b.n	80042de <prvInitialiseNewTask+0x62>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80042b6:	68ba      	ldr	r2, [r7, #8]
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	18d3      	adds	r3, r2, r3
 80042bc:	7818      	ldrb	r0, [r3, #0]
 80042be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042c0:	2134      	movs	r1, #52	; 0x34
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	18d3      	adds	r3, r2, r3
 80042c6:	185b      	adds	r3, r3, r1
 80042c8:	1c02      	adds	r2, r0, #0
 80042ca:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	18d3      	adds	r3, r2, r3
 80042d2:	781b      	ldrb	r3, [r3, #0]
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d006      	beq.n	80042e6 <prvInitialiseNewTask+0x6a>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	3301      	adds	r3, #1
 80042dc:	617b      	str	r3, [r7, #20]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	2b0f      	cmp	r3, #15
 80042e2:	d9e8      	bls.n	80042b6 <prvInitialiseNewTask+0x3a>
 80042e4:	e000      	b.n	80042e8 <prvInitialiseNewTask+0x6c>
		{
			break;
 80042e6:	46c0      	nop			; (mov r8, r8)
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	2243      	movs	r2, #67	; 0x43
 80042ec:	2100      	movs	r1, #0
 80042ee:	5499      	strb	r1, [r3, r2]

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	2b06      	cmp	r3, #6
 80042f4:	d901      	bls.n	80042fa <prvInitialiseNewTask+0x7e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042f6:	2306      	movs	r3, #6
 80042f8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042fc:	6a3a      	ldr	r2, [r7, #32]
 80042fe:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004302:	6a3a      	ldr	r2, [r7, #32]
 8004304:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8004306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004308:	2200      	movs	r2, #0
 800430a:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	3304      	adds	r3, #4
 8004310:	0018      	movs	r0, r3
 8004312:	f7ff fb56 	bl	80039c2 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004318:	3318      	adds	r3, #24
 800431a:	0018      	movs	r0, r3
 800431c:	f7ff fb51 	bl	80039c2 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004322:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004324:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004326:	6a3b      	ldr	r3, [r7, #32]
 8004328:	2207      	movs	r2, #7
 800432a:	1ad2      	subs	r2, r2, r3
 800432c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800432e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004332:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004334:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004338:	2200      	movs	r2, #0
 800433a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	2250      	movs	r2, #80	; 0x50
 8004340:	2100      	movs	r1, #0
 8004342:	5499      	strb	r1, [r3, r2]
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004344:	683a      	ldr	r2, [r7, #0]
 8004346:	68f9      	ldr	r1, [r7, #12]
 8004348:	693b      	ldr	r3, [r7, #16]
 800434a:	0018      	movs	r0, r3
 800434c:	f000 fcda 	bl	8004d04 <pxPortInitialiseStack>
 8004350:	0002      	movs	r2, r0
 8004352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004354:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 8004356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004358:	2b00      	cmp	r3, #0
 800435a:	d002      	beq.n	8004362 <prvInitialiseNewTask+0xe6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800435c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800435e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004360:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	46bd      	mov	sp, r7
 8004366:	b006      	add	sp, #24
 8004368:	bd80      	pop	{r7, pc}
 800436a:	46c0      	nop			; (mov r8, r8)
 800436c:	3fffffff 	.word	0x3fffffff

08004370 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004378:	f000 fd5a 	bl	8004e30 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800437c:	4b28      	ldr	r3, [pc, #160]	; (8004420 <prvAddNewTaskToReadyList+0xb0>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	1c5a      	adds	r2, r3, #1
 8004382:	4b27      	ldr	r3, [pc, #156]	; (8004420 <prvAddNewTaskToReadyList+0xb0>)
 8004384:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8004386:	4b27      	ldr	r3, [pc, #156]	; (8004424 <prvAddNewTaskToReadyList+0xb4>)
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d109      	bne.n	80043a2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800438e:	4b25      	ldr	r3, [pc, #148]	; (8004424 <prvAddNewTaskToReadyList+0xb4>)
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004394:	4b22      	ldr	r3, [pc, #136]	; (8004420 <prvAddNewTaskToReadyList+0xb0>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d110      	bne.n	80043be <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800439c:	f000 fb3e 	bl	8004a1c <prvInitialiseTaskLists>
 80043a0:	e00d      	b.n	80043be <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80043a2:	4b21      	ldr	r3, [pc, #132]	; (8004428 <prvAddNewTaskToReadyList+0xb8>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d109      	bne.n	80043be <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80043aa:	4b1e      	ldr	r3, [pc, #120]	; (8004424 <prvAddNewTaskToReadyList+0xb4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d802      	bhi.n	80043be <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80043b8:	4b1a      	ldr	r3, [pc, #104]	; (8004424 <prvAddNewTaskToReadyList+0xb4>)
 80043ba:	687a      	ldr	r2, [r7, #4]
 80043bc:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80043be:	4b1b      	ldr	r3, [pc, #108]	; (800442c <prvAddNewTaskToReadyList+0xbc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	1c5a      	adds	r2, r3, #1
 80043c4:	4b19      	ldr	r3, [pc, #100]	; (800442c <prvAddNewTaskToReadyList+0xbc>)
 80043c6:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043cc:	4b18      	ldr	r3, [pc, #96]	; (8004430 <prvAddNewTaskToReadyList+0xc0>)
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	d903      	bls.n	80043dc <prvAddNewTaskToReadyList+0x6c>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043d8:	4b15      	ldr	r3, [pc, #84]	; (8004430 <prvAddNewTaskToReadyList+0xc0>)
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043e0:	0013      	movs	r3, r2
 80043e2:	009b      	lsls	r3, r3, #2
 80043e4:	189b      	adds	r3, r3, r2
 80043e6:	009b      	lsls	r3, r3, #2
 80043e8:	4a12      	ldr	r2, [pc, #72]	; (8004434 <prvAddNewTaskToReadyList+0xc4>)
 80043ea:	189a      	adds	r2, r3, r2
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	3304      	adds	r3, #4
 80043f0:	0019      	movs	r1, r3
 80043f2:	0010      	movs	r0, r2
 80043f4:	f7ff faf0 	bl	80039d8 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80043f8:	f000 fd2c 	bl	8004e54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043fc:	4b0a      	ldr	r3, [pc, #40]	; (8004428 <prvAddNewTaskToReadyList+0xb8>)
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004404:	4b07      	ldr	r3, [pc, #28]	; (8004424 <prvAddNewTaskToReadyList+0xb4>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800440e:	429a      	cmp	r2, r3
 8004410:	d201      	bcs.n	8004416 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004412:	f000 fcfd 	bl	8004e10 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004416:	46c0      	nop			; (mov r8, r8)
 8004418:	46bd      	mov	sp, r7
 800441a:	b002      	add	sp, #8
 800441c:	bd80      	pop	{r7, pc}
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	20000164 	.word	0x20000164
 8004424:	20000064 	.word	0x20000064
 8004428:	20000170 	.word	0x20000170
 800442c:	20000180 	.word	0x20000180
 8004430:	2000016c 	.word	0x2000016c
 8004434:	20000068 	.word	0x20000068

08004438 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004440:	2300      	movs	r3, #0
 8004442:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d010      	beq.n	800446c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800444a:	4b0d      	ldr	r3, [pc, #52]	; (8004480 <vTaskDelay+0x48>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <vTaskDelay+0x1e>
 8004452:	b672      	cpsid	i
 8004454:	e7fe      	b.n	8004454 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8004456:	f000 f84b 	bl	80044f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2100      	movs	r1, #0
 800445e:	0018      	movs	r0, r3
 8004460:	f000 fbfc 	bl	8004c5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004464:	f000 f850 	bl	8004508 <xTaskResumeAll>
 8004468:	0003      	movs	r3, r0
 800446a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8004472:	f000 fccd 	bl	8004e10 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	46bd      	mov	sp, r7
 800447a:	b004      	add	sp, #16
 800447c:	bd80      	pop	{r7, pc}
 800447e:	46c0      	nop			; (mov r8, r8)
 8004480:	2000018c 	.word	0x2000018c

08004484 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b084      	sub	sp, #16
 8004488:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800448a:	4913      	ldr	r1, [pc, #76]	; (80044d8 <vTaskStartScheduler+0x54>)
 800448c:	4813      	ldr	r0, [pc, #76]	; (80044dc <vTaskStartScheduler+0x58>)
 800448e:	4b14      	ldr	r3, [pc, #80]	; (80044e0 <vTaskStartScheduler+0x5c>)
 8004490:	9301      	str	r3, [sp, #4]
 8004492:	2300      	movs	r3, #0
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	2300      	movs	r3, #0
 8004498:	2280      	movs	r2, #128	; 0x80
 800449a:	f7ff fea6 	bl	80041ea <xTaskCreate>
 800449e:	0003      	movs	r3, r0
 80044a0:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d10d      	bne.n	80044c4 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 80044a8:	b672      	cpsid	i
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044aa:	4b0e      	ldr	r3, [pc, #56]	; (80044e4 <vTaskStartScheduler+0x60>)
 80044ac:	2201      	movs	r2, #1
 80044ae:	4252      	negs	r2, r2
 80044b0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044b2:	4b0d      	ldr	r3, [pc, #52]	; (80044e8 <vTaskStartScheduler+0x64>)
 80044b4:	2201      	movs	r2, #1
 80044b6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80044b8:	4b0c      	ldr	r3, [pc, #48]	; (80044ec <vTaskStartScheduler+0x68>)
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044be:	f000 fc83 	bl	8004dc8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044c2:	e004      	b.n	80044ce <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	3301      	adds	r3, #1
 80044c8:	d101      	bne.n	80044ce <vTaskStartScheduler+0x4a>
 80044ca:	b672      	cpsid	i
 80044cc:	e7fe      	b.n	80044cc <vTaskStartScheduler+0x48>
}
 80044ce:	46c0      	nop			; (mov r8, r8)
 80044d0:	46bd      	mov	sp, r7
 80044d2:	b002      	add	sp, #8
 80044d4:	bd80      	pop	{r7, pc}
 80044d6:	46c0      	nop			; (mov r8, r8)
 80044d8:	08005380 	.word	0x08005380
 80044dc:	080049fd 	.word	0x080049fd
 80044e0:	20000188 	.word	0x20000188
 80044e4:	20000184 	.word	0x20000184
 80044e8:	20000170 	.word	0x20000170
 80044ec:	20000168 	.word	0x20000168

080044f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 80044f4:	4b03      	ldr	r3, [pc, #12]	; (8004504 <vTaskSuspendAll+0x14>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	1c5a      	adds	r2, r3, #1
 80044fa:	4b02      	ldr	r3, [pc, #8]	; (8004504 <vTaskSuspendAll+0x14>)
 80044fc:	601a      	str	r2, [r3, #0]
}
 80044fe:	46c0      	nop			; (mov r8, r8)
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	2000018c 	.word	0x2000018c

08004508 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b084      	sub	sp, #16
 800450c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800450e:	2300      	movs	r3, #0
 8004510:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004512:	2300      	movs	r3, #0
 8004514:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004516:	4b3a      	ldr	r3, [pc, #232]	; (8004600 <xTaskResumeAll+0xf8>)
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <xTaskResumeAll+0x1a>
 800451e:	b672      	cpsid	i
 8004520:	e7fe      	b.n	8004520 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004522:	f000 fc85 	bl	8004e30 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004526:	4b36      	ldr	r3, [pc, #216]	; (8004600 <xTaskResumeAll+0xf8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	1e5a      	subs	r2, r3, #1
 800452c:	4b34      	ldr	r3, [pc, #208]	; (8004600 <xTaskResumeAll+0xf8>)
 800452e:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004530:	4b33      	ldr	r3, [pc, #204]	; (8004600 <xTaskResumeAll+0xf8>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d15b      	bne.n	80045f0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004538:	4b32      	ldr	r3, [pc, #200]	; (8004604 <xTaskResumeAll+0xfc>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d057      	beq.n	80045f0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004540:	e02f      	b.n	80045a2 <xTaskResumeAll+0x9a>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8004542:	4b31      	ldr	r3, [pc, #196]	; (8004608 <xTaskResumeAll+0x100>)
 8004544:	68db      	ldr	r3, [r3, #12]
 8004546:	68db      	ldr	r3, [r3, #12]
 8004548:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	3318      	adds	r3, #24
 800454e:	0018      	movs	r0, r3
 8004550:	f7ff fa9a 	bl	8003a88 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	3304      	adds	r3, #4
 8004558:	0018      	movs	r0, r3
 800455a:	f7ff fa95 	bl	8003a88 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004562:	4b2a      	ldr	r3, [pc, #168]	; (800460c <xTaskResumeAll+0x104>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d903      	bls.n	8004572 <xTaskResumeAll+0x6a>
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456e:	4b27      	ldr	r3, [pc, #156]	; (800460c <xTaskResumeAll+0x104>)
 8004570:	601a      	str	r2, [r3, #0]
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004576:	0013      	movs	r3, r2
 8004578:	009b      	lsls	r3, r3, #2
 800457a:	189b      	adds	r3, r3, r2
 800457c:	009b      	lsls	r3, r3, #2
 800457e:	4a24      	ldr	r2, [pc, #144]	; (8004610 <xTaskResumeAll+0x108>)
 8004580:	189a      	adds	r2, r3, r2
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	3304      	adds	r3, #4
 8004586:	0019      	movs	r1, r3
 8004588:	0010      	movs	r0, r2
 800458a:	f7ff fa25 	bl	80039d8 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004592:	4b20      	ldr	r3, [pc, #128]	; (8004614 <xTaskResumeAll+0x10c>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004598:	429a      	cmp	r2, r3
 800459a:	d302      	bcc.n	80045a2 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800459c:	4b1e      	ldr	r3, [pc, #120]	; (8004618 <xTaskResumeAll+0x110>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045a2:	4b19      	ldr	r3, [pc, #100]	; (8004608 <xTaskResumeAll+0x100>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d1cb      	bne.n	8004542 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d001      	beq.n	80045b4 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045b0:	f000 fab8 	bl	8004b24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045b4:	4b19      	ldr	r3, [pc, #100]	; (800461c <xTaskResumeAll+0x114>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d00f      	beq.n	80045e0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045c0:	f000 f82e 	bl	8004620 <xTaskIncrementTick>
 80045c4:	1e03      	subs	r3, r0, #0
 80045c6:	d002      	beq.n	80045ce <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 80045c8:	4b13      	ldr	r3, [pc, #76]	; (8004618 <xTaskResumeAll+0x110>)
 80045ca:	2201      	movs	r2, #1
 80045cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3b01      	subs	r3, #1
 80045d2:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d1f2      	bne.n	80045c0 <xTaskResumeAll+0xb8>

						uxPendedTicks = 0;
 80045da:	4b10      	ldr	r3, [pc, #64]	; (800461c <xTaskResumeAll+0x114>)
 80045dc:	2200      	movs	r2, #0
 80045de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80045e0:	4b0d      	ldr	r3, [pc, #52]	; (8004618 <xTaskResumeAll+0x110>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d003      	beq.n	80045f0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80045e8:	2301      	movs	r3, #1
 80045ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80045ec:	f000 fc10 	bl	8004e10 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80045f0:	f000 fc30 	bl	8004e54 <vPortExitCritical>

	return xAlreadyYielded;
 80045f4:	68bb      	ldr	r3, [r7, #8]
}
 80045f6:	0018      	movs	r0, r3
 80045f8:	46bd      	mov	sp, r7
 80045fa:	b004      	add	sp, #16
 80045fc:	bd80      	pop	{r7, pc}
 80045fe:	46c0      	nop			; (mov r8, r8)
 8004600:	2000018c 	.word	0x2000018c
 8004604:	20000164 	.word	0x20000164
 8004608:	20000124 	.word	0x20000124
 800460c:	2000016c 	.word	0x2000016c
 8004610:	20000068 	.word	0x20000068
 8004614:	20000064 	.word	0x20000064
 8004618:	20000178 	.word	0x20000178
 800461c:	20000174 	.word	0x20000174

08004620 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004626:	2300      	movs	r3, #0
 8004628:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800462a:	4b4c      	ldr	r3, [pc, #304]	; (800475c <xTaskIncrementTick+0x13c>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d000      	beq.n	8004634 <xTaskIncrementTick+0x14>
 8004632:	e083      	b.n	800473c <xTaskIncrementTick+0x11c>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004634:	4b4a      	ldr	r3, [pc, #296]	; (8004760 <xTaskIncrementTick+0x140>)
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3301      	adds	r3, #1
 800463a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800463c:	4b48      	ldr	r3, [pc, #288]	; (8004760 <xTaskIncrementTick+0x140>)
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004642:	693b      	ldr	r3, [r7, #16]
 8004644:	2b00      	cmp	r3, #0
 8004646:	d117      	bne.n	8004678 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8004648:	4b46      	ldr	r3, [pc, #280]	; (8004764 <xTaskIncrementTick+0x144>)
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d001      	beq.n	8004656 <xTaskIncrementTick+0x36>
 8004652:	b672      	cpsid	i
 8004654:	e7fe      	b.n	8004654 <xTaskIncrementTick+0x34>
 8004656:	4b43      	ldr	r3, [pc, #268]	; (8004764 <xTaskIncrementTick+0x144>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	60fb      	str	r3, [r7, #12]
 800465c:	4b42      	ldr	r3, [pc, #264]	; (8004768 <xTaskIncrementTick+0x148>)
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	4b40      	ldr	r3, [pc, #256]	; (8004764 <xTaskIncrementTick+0x144>)
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	4b40      	ldr	r3, [pc, #256]	; (8004768 <xTaskIncrementTick+0x148>)
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	4b40      	ldr	r3, [pc, #256]	; (800476c <xTaskIncrementTick+0x14c>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	1c5a      	adds	r2, r3, #1
 8004670:	4b3e      	ldr	r3, [pc, #248]	; (800476c <xTaskIncrementTick+0x14c>)
 8004672:	601a      	str	r2, [r3, #0]
 8004674:	f000 fa56 	bl	8004b24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004678:	4b3d      	ldr	r3, [pc, #244]	; (8004770 <xTaskIncrementTick+0x150>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	429a      	cmp	r2, r3
 8004680:	d34e      	bcc.n	8004720 <xTaskIncrementTick+0x100>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004682:	4b38      	ldr	r3, [pc, #224]	; (8004764 <xTaskIncrementTick+0x144>)
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d101      	bne.n	8004690 <xTaskIncrementTick+0x70>
 800468c:	2301      	movs	r3, #1
 800468e:	e000      	b.n	8004692 <xTaskIncrementTick+0x72>
 8004690:	2300      	movs	r3, #0
 8004692:	2b00      	cmp	r3, #0
 8004694:	d004      	beq.n	80046a0 <xTaskIncrementTick+0x80>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004696:	4b36      	ldr	r3, [pc, #216]	; (8004770 <xTaskIncrementTick+0x150>)
 8004698:	2201      	movs	r2, #1
 800469a:	4252      	negs	r2, r2
 800469c:	601a      	str	r2, [r3, #0]
					break;
 800469e:	e03f      	b.n	8004720 <xTaskIncrementTick+0x100>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 80046a0:	4b30      	ldr	r3, [pc, #192]	; (8004764 <xTaskIncrementTick+0x144>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	68db      	ldr	r3, [r3, #12]
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046b0:	693a      	ldr	r2, [r7, #16]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d203      	bcs.n	80046c0 <xTaskIncrementTick+0xa0>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80046b8:	4b2d      	ldr	r3, [pc, #180]	; (8004770 <xTaskIncrementTick+0x150>)
 80046ba:	687a      	ldr	r2, [r7, #4]
 80046bc:	601a      	str	r2, [r3, #0]
						break;
 80046be:	e02f      	b.n	8004720 <xTaskIncrementTick+0x100>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80046c0:	68bb      	ldr	r3, [r7, #8]
 80046c2:	3304      	adds	r3, #4
 80046c4:	0018      	movs	r0, r3
 80046c6:	f7ff f9df 	bl	8003a88 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <xTaskIncrementTick+0xbc>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80046d2:	68bb      	ldr	r3, [r7, #8]
 80046d4:	3318      	adds	r3, #24
 80046d6:	0018      	movs	r0, r3
 80046d8:	f7ff f9d6 	bl	8003a88 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80046dc:	68bb      	ldr	r3, [r7, #8]
 80046de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046e0:	4b24      	ldr	r3, [pc, #144]	; (8004774 <xTaskIncrementTick+0x154>)
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d903      	bls.n	80046f0 <xTaskIncrementTick+0xd0>
 80046e8:	68bb      	ldr	r3, [r7, #8]
 80046ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046ec:	4b21      	ldr	r3, [pc, #132]	; (8004774 <xTaskIncrementTick+0x154>)
 80046ee:	601a      	str	r2, [r3, #0]
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046f4:	0013      	movs	r3, r2
 80046f6:	009b      	lsls	r3, r3, #2
 80046f8:	189b      	adds	r3, r3, r2
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4a1e      	ldr	r2, [pc, #120]	; (8004778 <xTaskIncrementTick+0x158>)
 80046fe:	189a      	adds	r2, r3, r2
 8004700:	68bb      	ldr	r3, [r7, #8]
 8004702:	3304      	adds	r3, #4
 8004704:	0019      	movs	r1, r3
 8004706:	0010      	movs	r0, r2
 8004708:	f7ff f966 	bl	80039d8 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004710:	4b1a      	ldr	r3, [pc, #104]	; (800477c <xTaskIncrementTick+0x15c>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004716:	429a      	cmp	r2, r3
 8004718:	d3b3      	bcc.n	8004682 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800471a:	2301      	movs	r3, #1
 800471c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800471e:	e7b0      	b.n	8004682 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004720:	4b16      	ldr	r3, [pc, #88]	; (800477c <xTaskIncrementTick+0x15c>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004726:	4914      	ldr	r1, [pc, #80]	; (8004778 <xTaskIncrementTick+0x158>)
 8004728:	0013      	movs	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	189b      	adds	r3, r3, r2
 800472e:	009b      	lsls	r3, r3, #2
 8004730:	585b      	ldr	r3, [r3, r1]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d907      	bls.n	8004746 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8004736:	2301      	movs	r3, #1
 8004738:	617b      	str	r3, [r7, #20]
 800473a:	e004      	b.n	8004746 <xTaskIncrementTick+0x126>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800473c:	4b10      	ldr	r3, [pc, #64]	; (8004780 <xTaskIncrementTick+0x160>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	1c5a      	adds	r2, r3, #1
 8004742:	4b0f      	ldr	r3, [pc, #60]	; (8004780 <xTaskIncrementTick+0x160>)
 8004744:	601a      	str	r2, [r3, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004746:	4b0f      	ldr	r3, [pc, #60]	; (8004784 <xTaskIncrementTick+0x164>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d001      	beq.n	8004752 <xTaskIncrementTick+0x132>
		{
			xSwitchRequired = pdTRUE;
 800474e:	2301      	movs	r3, #1
 8004750:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8004752:	697b      	ldr	r3, [r7, #20]
}
 8004754:	0018      	movs	r0, r3
 8004756:	46bd      	mov	sp, r7
 8004758:	b006      	add	sp, #24
 800475a:	bd80      	pop	{r7, pc}
 800475c:	2000018c 	.word	0x2000018c
 8004760:	20000168 	.word	0x20000168
 8004764:	2000011c 	.word	0x2000011c
 8004768:	20000120 	.word	0x20000120
 800476c:	2000017c 	.word	0x2000017c
 8004770:	20000184 	.word	0x20000184
 8004774:	2000016c 	.word	0x2000016c
 8004778:	20000068 	.word	0x20000068
 800477c:	20000064 	.word	0x20000064
 8004780:	20000174 	.word	0x20000174
 8004784:	20000178 	.word	0x20000178

08004788 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004788:	b580      	push	{r7, lr}
 800478a:	b082      	sub	sp, #8
 800478c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800478e:	4b22      	ldr	r3, [pc, #136]	; (8004818 <vTaskSwitchContext+0x90>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d003      	beq.n	800479e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004796:	4b21      	ldr	r3, [pc, #132]	; (800481c <vTaskSwitchContext+0x94>)
 8004798:	2201      	movs	r2, #1
 800479a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800479c:	e037      	b.n	800480e <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800479e:	4b1f      	ldr	r3, [pc, #124]	; (800481c <vTaskSwitchContext+0x94>)
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 80047a4:	4b1e      	ldr	r3, [pc, #120]	; (8004820 <vTaskSwitchContext+0x98>)
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	607b      	str	r3, [r7, #4]
 80047aa:	e007      	b.n	80047bc <vTaskSwitchContext+0x34>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d101      	bne.n	80047b6 <vTaskSwitchContext+0x2e>
 80047b2:	b672      	cpsid	i
 80047b4:	e7fe      	b.n	80047b4 <vTaskSwitchContext+0x2c>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	3b01      	subs	r3, #1
 80047ba:	607b      	str	r3, [r7, #4]
 80047bc:	4919      	ldr	r1, [pc, #100]	; (8004824 <vTaskSwitchContext+0x9c>)
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	0013      	movs	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	189b      	adds	r3, r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	585b      	ldr	r3, [r3, r1]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0ee      	beq.n	80047ac <vTaskSwitchContext+0x24>
 80047ce:	687a      	ldr	r2, [r7, #4]
 80047d0:	0013      	movs	r3, r2
 80047d2:	009b      	lsls	r3, r3, #2
 80047d4:	189b      	adds	r3, r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4a12      	ldr	r2, [pc, #72]	; (8004824 <vTaskSwitchContext+0x9c>)
 80047da:	189b      	adds	r3, r3, r2
 80047dc:	603b      	str	r3, [r7, #0]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	685a      	ldr	r2, [r3, #4]
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	605a      	str	r2, [r3, #4]
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	685a      	ldr	r2, [r3, #4]
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	3308      	adds	r3, #8
 80047f0:	429a      	cmp	r2, r3
 80047f2:	d104      	bne.n	80047fe <vTaskSwitchContext+0x76>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	685a      	ldr	r2, [r3, #4]
 80047fa:	683b      	ldr	r3, [r7, #0]
 80047fc:	605a      	str	r2, [r3, #4]
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	68da      	ldr	r2, [r3, #12]
 8004804:	4b08      	ldr	r3, [pc, #32]	; (8004828 <vTaskSwitchContext+0xa0>)
 8004806:	601a      	str	r2, [r3, #0]
 8004808:	4b05      	ldr	r3, [pc, #20]	; (8004820 <vTaskSwitchContext+0x98>)
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	601a      	str	r2, [r3, #0]
}
 800480e:	46c0      	nop			; (mov r8, r8)
 8004810:	46bd      	mov	sp, r7
 8004812:	b002      	add	sp, #8
 8004814:	bd80      	pop	{r7, pc}
 8004816:	46c0      	nop			; (mov r8, r8)
 8004818:	2000018c 	.word	0x2000018c
 800481c:	20000178 	.word	0x20000178
 8004820:	2000016c 	.word	0x2000016c
 8004824:	20000068 	.word	0x20000068
 8004828:	20000064 	.word	0x20000064

0800482c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
 8004832:	6078      	str	r0, [r7, #4]
 8004834:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2b00      	cmp	r3, #0
 800483a:	d101      	bne.n	8004840 <vTaskPlaceOnEventList+0x14>
 800483c:	b672      	cpsid	i
 800483e:	e7fe      	b.n	800483e <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004840:	4b08      	ldr	r3, [pc, #32]	; (8004864 <vTaskPlaceOnEventList+0x38>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	3318      	adds	r3, #24
 8004846:	001a      	movs	r2, r3
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	0011      	movs	r1, r2
 800484c:	0018      	movs	r0, r3
 800484e:	f7ff f8e5 	bl	8003a1c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	2101      	movs	r1, #1
 8004856:	0018      	movs	r0, r3
 8004858:	f000 fa00 	bl	8004c5c <prvAddCurrentTaskToDelayedList>
}
 800485c:	46c0      	nop			; (mov r8, r8)
 800485e:	46bd      	mov	sp, r7
 8004860:	b002      	add	sp, #8
 8004862:	bd80      	pop	{r7, pc}
 8004864:	20000064 	.word	0x20000064

08004868 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b084      	sub	sp, #16
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	68db      	ldr	r3, [r3, #12]
 8004874:	68db      	ldr	r3, [r3, #12]
 8004876:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 8004878:	68bb      	ldr	r3, [r7, #8]
 800487a:	2b00      	cmp	r3, #0
 800487c:	d101      	bne.n	8004882 <xTaskRemoveFromEventList+0x1a>
 800487e:	b672      	cpsid	i
 8004880:	e7fe      	b.n	8004880 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	3318      	adds	r3, #24
 8004886:	0018      	movs	r0, r3
 8004888:	f7ff f8fe 	bl	8003a88 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800488c:	4b1e      	ldr	r3, [pc, #120]	; (8004908 <xTaskRemoveFromEventList+0xa0>)
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d11d      	bne.n	80048d0 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	3304      	adds	r3, #4
 8004898:	0018      	movs	r0, r3
 800489a:	f7ff f8f5 	bl	8003a88 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a2:	4b1a      	ldr	r3, [pc, #104]	; (800490c <xTaskRemoveFromEventList+0xa4>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	429a      	cmp	r2, r3
 80048a8:	d903      	bls.n	80048b2 <xTaskRemoveFromEventList+0x4a>
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ae:	4b17      	ldr	r3, [pc, #92]	; (800490c <xTaskRemoveFromEventList+0xa4>)
 80048b0:	601a      	str	r2, [r3, #0]
 80048b2:	68bb      	ldr	r3, [r7, #8]
 80048b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048b6:	0013      	movs	r3, r2
 80048b8:	009b      	lsls	r3, r3, #2
 80048ba:	189b      	adds	r3, r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4a14      	ldr	r2, [pc, #80]	; (8004910 <xTaskRemoveFromEventList+0xa8>)
 80048c0:	189a      	adds	r2, r3, r2
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	3304      	adds	r3, #4
 80048c6:	0019      	movs	r1, r3
 80048c8:	0010      	movs	r0, r2
 80048ca:	f7ff f885 	bl	80039d8 <vListInsertEnd>
 80048ce:	e007      	b.n	80048e0 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	3318      	adds	r3, #24
 80048d4:	001a      	movs	r2, r3
 80048d6:	4b0f      	ldr	r3, [pc, #60]	; (8004914 <xTaskRemoveFromEventList+0xac>)
 80048d8:	0011      	movs	r1, r2
 80048da:	0018      	movs	r0, r3
 80048dc:	f7ff f87c 	bl	80039d8 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048e4:	4b0c      	ldr	r3, [pc, #48]	; (8004918 <xTaskRemoveFromEventList+0xb0>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ea:	429a      	cmp	r2, r3
 80048ec:	d905      	bls.n	80048fa <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80048ee:	2301      	movs	r3, #1
 80048f0:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80048f2:	4b0a      	ldr	r3, [pc, #40]	; (800491c <xTaskRemoveFromEventList+0xb4>)
 80048f4:	2201      	movs	r2, #1
 80048f6:	601a      	str	r2, [r3, #0]
 80048f8:	e001      	b.n	80048fe <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 80048fe:	68fb      	ldr	r3, [r7, #12]
}
 8004900:	0018      	movs	r0, r3
 8004902:	46bd      	mov	sp, r7
 8004904:	b004      	add	sp, #16
 8004906:	bd80      	pop	{r7, pc}
 8004908:	2000018c 	.word	0x2000018c
 800490c:	2000016c 	.word	0x2000016c
 8004910:	20000068 	.word	0x20000068
 8004914:	20000124 	.word	0x20000124
 8004918:	20000064 	.word	0x20000064
 800491c:	20000178 	.word	0x20000178

08004920 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004928:	4b05      	ldr	r3, [pc, #20]	; (8004940 <vTaskInternalSetTimeOutState+0x20>)
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004930:	4b04      	ldr	r3, [pc, #16]	; (8004944 <vTaskInternalSetTimeOutState+0x24>)
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	605a      	str	r2, [r3, #4]
}
 8004938:	46c0      	nop			; (mov r8, r8)
 800493a:	46bd      	mov	sp, r7
 800493c:	b002      	add	sp, #8
 800493e:	bd80      	pop	{r7, pc}
 8004940:	2000017c 	.word	0x2000017c
 8004944:	20000168 	.word	0x20000168

08004948 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b086      	sub	sp, #24
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2b00      	cmp	r3, #0
 8004956:	d101      	bne.n	800495c <xTaskCheckForTimeOut+0x14>
 8004958:	b672      	cpsid	i
 800495a:	e7fe      	b.n	800495a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d101      	bne.n	8004966 <xTaskCheckForTimeOut+0x1e>
 8004962:	b672      	cpsid	i
 8004964:	e7fe      	b.n	8004964 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 8004966:	f000 fa63 	bl	8004e30 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800496a:	4b1d      	ldr	r3, [pc, #116]	; (80049e0 <xTaskCheckForTimeOut+0x98>)
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	693a      	ldr	r2, [r7, #16]
 8004976:	1ad3      	subs	r3, r2, r3
 8004978:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	3301      	adds	r3, #1
 8004980:	d102      	bne.n	8004988 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004982:	2300      	movs	r3, #0
 8004984:	617b      	str	r3, [r7, #20]
 8004986:	e024      	b.n	80049d2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681a      	ldr	r2, [r3, #0]
 800498c:	4b15      	ldr	r3, [pc, #84]	; (80049e4 <xTaskCheckForTimeOut+0x9c>)
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	429a      	cmp	r2, r3
 8004992:	d007      	beq.n	80049a4 <xTaskCheckForTimeOut+0x5c>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	429a      	cmp	r2, r3
 800499c:	d302      	bcc.n	80049a4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800499e:	2301      	movs	r3, #1
 80049a0:	617b      	str	r3, [r7, #20]
 80049a2:	e016      	b.n	80049d2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	68fa      	ldr	r2, [r7, #12]
 80049aa:	429a      	cmp	r2, r3
 80049ac:	d20c      	bcs.n	80049c8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1ad2      	subs	r2, r2, r3
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	0018      	movs	r0, r3
 80049be:	f7ff ffaf 	bl	8004920 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80049c2:	2300      	movs	r3, #0
 80049c4:	617b      	str	r3, [r7, #20]
 80049c6:	e004      	b.n	80049d2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80049c8:	683b      	ldr	r3, [r7, #0]
 80049ca:	2200      	movs	r2, #0
 80049cc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80049ce:	2301      	movs	r3, #1
 80049d0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 80049d2:	f000 fa3f 	bl	8004e54 <vPortExitCritical>

	return xReturn;
 80049d6:	697b      	ldr	r3, [r7, #20]
}
 80049d8:	0018      	movs	r0, r3
 80049da:	46bd      	mov	sp, r7
 80049dc:	b006      	add	sp, #24
 80049de:	bd80      	pop	{r7, pc}
 80049e0:	20000168 	.word	0x20000168
 80049e4:	2000017c 	.word	0x2000017c

080049e8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80049ec:	4b02      	ldr	r3, [pc, #8]	; (80049f8 <vTaskMissedYield+0x10>)
 80049ee:	2201      	movs	r2, #1
 80049f0:	601a      	str	r2, [r3, #0]
}
 80049f2:	46c0      	nop			; (mov r8, r8)
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}
 80049f8:	20000178 	.word	0x20000178

080049fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b082      	sub	sp, #8
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004a04:	f000 f84e 	bl	8004aa4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004a08:	4b03      	ldr	r3, [pc, #12]	; (8004a18 <prvIdleTask+0x1c>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b01      	cmp	r3, #1
 8004a0e:	d9f9      	bls.n	8004a04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004a10:	f000 f9fe 	bl	8004e10 <vPortYield>
		prvCheckTasksWaitingTermination();
 8004a14:	e7f6      	b.n	8004a04 <prvIdleTask+0x8>
 8004a16:	46c0      	nop			; (mov r8, r8)
 8004a18:	20000068 	.word	0x20000068

08004a1c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b082      	sub	sp, #8
 8004a20:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a22:	2300      	movs	r3, #0
 8004a24:	607b      	str	r3, [r7, #4]
 8004a26:	e00c      	b.n	8004a42 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004a28:	687a      	ldr	r2, [r7, #4]
 8004a2a:	0013      	movs	r3, r2
 8004a2c:	009b      	lsls	r3, r3, #2
 8004a2e:	189b      	adds	r3, r3, r2
 8004a30:	009b      	lsls	r3, r3, #2
 8004a32:	4a14      	ldr	r2, [pc, #80]	; (8004a84 <prvInitialiseTaskLists+0x68>)
 8004a34:	189b      	adds	r3, r3, r2
 8004a36:	0018      	movs	r0, r3
 8004a38:	f7fe ffa5 	bl	8003986 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	3301      	adds	r3, #1
 8004a40:	607b      	str	r3, [r7, #4]
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2b06      	cmp	r3, #6
 8004a46:	d9ef      	bls.n	8004a28 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004a48:	4b0f      	ldr	r3, [pc, #60]	; (8004a88 <prvInitialiseTaskLists+0x6c>)
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f7fe ff9b 	bl	8003986 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004a50:	4b0e      	ldr	r3, [pc, #56]	; (8004a8c <prvInitialiseTaskLists+0x70>)
 8004a52:	0018      	movs	r0, r3
 8004a54:	f7fe ff97 	bl	8003986 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004a58:	4b0d      	ldr	r3, [pc, #52]	; (8004a90 <prvInitialiseTaskLists+0x74>)
 8004a5a:	0018      	movs	r0, r3
 8004a5c:	f7fe ff93 	bl	8003986 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004a60:	4b0c      	ldr	r3, [pc, #48]	; (8004a94 <prvInitialiseTaskLists+0x78>)
 8004a62:	0018      	movs	r0, r3
 8004a64:	f7fe ff8f 	bl	8003986 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004a68:	4b0b      	ldr	r3, [pc, #44]	; (8004a98 <prvInitialiseTaskLists+0x7c>)
 8004a6a:	0018      	movs	r0, r3
 8004a6c:	f7fe ff8b 	bl	8003986 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004a70:	4b0a      	ldr	r3, [pc, #40]	; (8004a9c <prvInitialiseTaskLists+0x80>)
 8004a72:	4a05      	ldr	r2, [pc, #20]	; (8004a88 <prvInitialiseTaskLists+0x6c>)
 8004a74:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004a76:	4b0a      	ldr	r3, [pc, #40]	; (8004aa0 <prvInitialiseTaskLists+0x84>)
 8004a78:	4a04      	ldr	r2, [pc, #16]	; (8004a8c <prvInitialiseTaskLists+0x70>)
 8004a7a:	601a      	str	r2, [r3, #0]
}
 8004a7c:	46c0      	nop			; (mov r8, r8)
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	b002      	add	sp, #8
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20000068 	.word	0x20000068
 8004a88:	200000f4 	.word	0x200000f4
 8004a8c:	20000108 	.word	0x20000108
 8004a90:	20000124 	.word	0x20000124
 8004a94:	20000138 	.word	0x20000138
 8004a98:	20000150 	.word	0x20000150
 8004a9c:	2000011c 	.word	0x2000011c
 8004aa0:	20000120 	.word	0x20000120

08004aa4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b082      	sub	sp, #8
 8004aa8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004aaa:	e01a      	b.n	8004ae2 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8004aac:	f000 f9c0 	bl	8004e30 <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8004ab0:	4b10      	ldr	r3, [pc, #64]	; (8004af4 <prvCheckTasksWaitingTermination+0x50>)
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	3304      	adds	r3, #4
 8004abc:	0018      	movs	r0, r3
 8004abe:	f7fe ffe3 	bl	8003a88 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004ac2:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <prvCheckTasksWaitingTermination+0x54>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	1e5a      	subs	r2, r3, #1
 8004ac8:	4b0b      	ldr	r3, [pc, #44]	; (8004af8 <prvCheckTasksWaitingTermination+0x54>)
 8004aca:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004acc:	4b0b      	ldr	r3, [pc, #44]	; (8004afc <prvCheckTasksWaitingTermination+0x58>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	1e5a      	subs	r2, r3, #1
 8004ad2:	4b0a      	ldr	r3, [pc, #40]	; (8004afc <prvCheckTasksWaitingTermination+0x58>)
 8004ad4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 8004ad6:	f000 f9bd 	bl	8004e54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	0018      	movs	r0, r3
 8004ade:	f000 f80f 	bl	8004b00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004ae2:	4b06      	ldr	r3, [pc, #24]	; (8004afc <prvCheckTasksWaitingTermination+0x58>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d1e0      	bne.n	8004aac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004aea:	46c0      	nop			; (mov r8, r8)
 8004aec:	46bd      	mov	sp, r7
 8004aee:	b002      	add	sp, #8
 8004af0:	bd80      	pop	{r7, pc}
 8004af2:	46c0      	nop			; (mov r8, r8)
 8004af4:	20000138 	.word	0x20000138
 8004af8:	20000164 	.word	0x20000164
 8004afc:	2000014c 	.word	0x2000014c

08004b00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b082      	sub	sp, #8
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b0c:	0018      	movs	r0, r3
 8004b0e:	f000 facd 	bl	80050ac <vPortFree>
			vPortFree( pxTCB );
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	0018      	movs	r0, r3
 8004b16:	f000 fac9 	bl	80050ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004b1a:	46c0      	nop			; (mov r8, r8)
 8004b1c:	46bd      	mov	sp, r7
 8004b1e:	b002      	add	sp, #8
 8004b20:	bd80      	pop	{r7, pc}
	...

08004b24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b082      	sub	sp, #8
 8004b28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004b2a:	4b0e      	ldr	r3, [pc, #56]	; (8004b64 <prvResetNextTaskUnblockTime+0x40>)
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d101      	bne.n	8004b38 <prvResetNextTaskUnblockTime+0x14>
 8004b34:	2301      	movs	r3, #1
 8004b36:	e000      	b.n	8004b3a <prvResetNextTaskUnblockTime+0x16>
 8004b38:	2300      	movs	r3, #0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d004      	beq.n	8004b48 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004b3e:	4b0a      	ldr	r3, [pc, #40]	; (8004b68 <prvResetNextTaskUnblockTime+0x44>)
 8004b40:	2201      	movs	r2, #1
 8004b42:	4252      	negs	r2, r2
 8004b44:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004b46:	e008      	b.n	8004b5a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004b48:	4b06      	ldr	r3, [pc, #24]	; (8004b64 <prvResetNextTaskUnblockTime+0x40>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	68db      	ldr	r3, [r3, #12]
 8004b50:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685a      	ldr	r2, [r3, #4]
 8004b56:	4b04      	ldr	r3, [pc, #16]	; (8004b68 <prvResetNextTaskUnblockTime+0x44>)
 8004b58:	601a      	str	r2, [r3, #0]
}
 8004b5a:	46c0      	nop			; (mov r8, r8)
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	b002      	add	sp, #8
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	46c0      	nop			; (mov r8, r8)
 8004b64:	2000011c 	.word	0x2000011c
 8004b68:	20000184 	.word	0x20000184

08004b6c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b082      	sub	sp, #8
 8004b70:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004b72:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <xTaskGetSchedulerState+0x30>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d102      	bne.n	8004b80 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	607b      	str	r3, [r7, #4]
 8004b7e:	e008      	b.n	8004b92 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b80:	4b07      	ldr	r3, [pc, #28]	; (8004ba0 <xTaskGetSchedulerState+0x34>)
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d102      	bne.n	8004b8e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004b88:	2302      	movs	r3, #2
 8004b8a:	607b      	str	r3, [r7, #4]
 8004b8c:	e001      	b.n	8004b92 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004b92:	687b      	ldr	r3, [r7, #4]
	}
 8004b94:	0018      	movs	r0, r3
 8004b96:	46bd      	mov	sp, r7
 8004b98:	b002      	add	sp, #8
 8004b9a:	bd80      	pop	{r7, pc}
 8004b9c:	20000170 	.word	0x20000170
 8004ba0:	2000018c 	.word	0x2000018c

08004ba4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d044      	beq.n	8004c44 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004bba:	4b25      	ldr	r3, [pc, #148]	; (8004c50 <xTaskPriorityDisinherit+0xac>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	d001      	beq.n	8004bc8 <xTaskPriorityDisinherit+0x24>
 8004bc4:	b672      	cpsid	i
 8004bc6:	e7fe      	b.n	8004bc6 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8004bc8:	68bb      	ldr	r3, [r7, #8]
 8004bca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d101      	bne.n	8004bd4 <xTaskPriorityDisinherit+0x30>
 8004bd0:	b672      	cpsid	i
 8004bd2:	e7fe      	b.n	8004bd2 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8004bd4:	68bb      	ldr	r3, [r7, #8]
 8004bd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bd8:	1e5a      	subs	r2, r3, #1
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d02c      	beq.n	8004c44 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d128      	bne.n	8004c44 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bf2:	68bb      	ldr	r3, [r7, #8]
 8004bf4:	3304      	adds	r3, #4
 8004bf6:	0018      	movs	r0, r3
 8004bf8:	f7fe ff46 	bl	8003a88 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c00:	68bb      	ldr	r3, [r7, #8]
 8004c02:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c08:	2207      	movs	r2, #7
 8004c0a:	1ad2      	subs	r2, r2, r3
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c14:	4b0f      	ldr	r3, [pc, #60]	; (8004c54 <xTaskPriorityDisinherit+0xb0>)
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d903      	bls.n	8004c24 <xTaskPriorityDisinherit+0x80>
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c20:	4b0c      	ldr	r3, [pc, #48]	; (8004c54 <xTaskPriorityDisinherit+0xb0>)
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c28:	0013      	movs	r3, r2
 8004c2a:	009b      	lsls	r3, r3, #2
 8004c2c:	189b      	adds	r3, r3, r2
 8004c2e:	009b      	lsls	r3, r3, #2
 8004c30:	4a09      	ldr	r2, [pc, #36]	; (8004c58 <xTaskPriorityDisinherit+0xb4>)
 8004c32:	189a      	adds	r2, r3, r2
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	3304      	adds	r3, #4
 8004c38:	0019      	movs	r1, r3
 8004c3a:	0010      	movs	r0, r2
 8004c3c:	f7fe fecc 	bl	80039d8 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004c40:	2301      	movs	r3, #1
 8004c42:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004c44:	68fb      	ldr	r3, [r7, #12]
	}
 8004c46:	0018      	movs	r0, r3
 8004c48:	46bd      	mov	sp, r7
 8004c4a:	b004      	add	sp, #16
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	46c0      	nop			; (mov r8, r8)
 8004c50:	20000064 	.word	0x20000064
 8004c54:	2000016c 	.word	0x2000016c
 8004c58:	20000068 	.word	0x20000068

08004c5c <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b084      	sub	sp, #16
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
 8004c64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004c66:	4b21      	ldr	r3, [pc, #132]	; (8004cec <prvAddCurrentTaskToDelayedList+0x90>)
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c6c:	4b20      	ldr	r3, [pc, #128]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	3304      	adds	r3, #4
 8004c72:	0018      	movs	r0, r3
 8004c74:	f7fe ff08 	bl	8003a88 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3301      	adds	r3, #1
 8004c7c:	d10b      	bne.n	8004c96 <prvAddCurrentTaskToDelayedList+0x3a>
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d008      	beq.n	8004c96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c84:	4b1a      	ldr	r3, [pc, #104]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	1d1a      	adds	r2, r3, #4
 8004c8a:	4b1a      	ldr	r3, [pc, #104]	; (8004cf4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c8c:	0011      	movs	r1, r2
 8004c8e:	0018      	movs	r0, r3
 8004c90:	f7fe fea2 	bl	80039d8 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c94:	e026      	b.n	8004ce4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c96:	68fa      	ldr	r2, [r7, #12]
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	18d3      	adds	r3, r2, r3
 8004c9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c9e:	4b14      	ldr	r3, [pc, #80]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	68ba      	ldr	r2, [r7, #8]
 8004ca4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d209      	bcs.n	8004cc2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cae:	4b12      	ldr	r3, [pc, #72]	; (8004cf8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	3304      	adds	r3, #4
 8004cb8:	0019      	movs	r1, r3
 8004cba:	0010      	movs	r0, r2
 8004cbc:	f7fe feae 	bl	8003a1c <vListInsert>
}
 8004cc0:	e010      	b.n	8004ce4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004cc2:	4b0e      	ldr	r3, [pc, #56]	; (8004cfc <prvAddCurrentTaskToDelayedList+0xa0>)
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	4b0a      	ldr	r3, [pc, #40]	; (8004cf0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3304      	adds	r3, #4
 8004ccc:	0019      	movs	r1, r3
 8004cce:	0010      	movs	r0, r2
 8004cd0:	f7fe fea4 	bl	8003a1c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004cd4:	4b0a      	ldr	r3, [pc, #40]	; (8004d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	68ba      	ldr	r2, [r7, #8]
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d202      	bcs.n	8004ce4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004cde:	4b08      	ldr	r3, [pc, #32]	; (8004d00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004ce0:	68ba      	ldr	r2, [r7, #8]
 8004ce2:	601a      	str	r2, [r3, #0]
}
 8004ce4:	46c0      	nop			; (mov r8, r8)
 8004ce6:	46bd      	mov	sp, r7
 8004ce8:	b004      	add	sp, #16
 8004cea:	bd80      	pop	{r7, pc}
 8004cec:	20000168 	.word	0x20000168
 8004cf0:	20000064 	.word	0x20000064
 8004cf4:	20000150 	.word	0x20000150
 8004cf8:	20000120 	.word	0x20000120
 8004cfc:	2000011c 	.word	0x2000011c
 8004d00:	20000184 	.word	0x20000184

08004d04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004d04:	b580      	push	{r7, lr}
 8004d06:	b084      	sub	sp, #16
 8004d08:	af00      	add	r7, sp, #0
 8004d0a:	60f8      	str	r0, [r7, #12]
 8004d0c:	60b9      	str	r1, [r7, #8]
 8004d0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	3b04      	subs	r3, #4
 8004d14:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2280      	movs	r2, #128	; 0x80
 8004d1a:	0452      	lsls	r2, r2, #17
 8004d1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	3b04      	subs	r3, #4
 8004d22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8004d24:	68ba      	ldr	r2, [r7, #8]
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	3b04      	subs	r3, #4
 8004d2e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004d30:	4a08      	ldr	r2, [pc, #32]	; (8004d54 <pxPortInitialiseStack+0x50>)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3b14      	subs	r3, #20
 8004d3a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	3b20      	subs	r3, #32
 8004d46:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004d48:	68fb      	ldr	r3, [r7, #12]
}
 8004d4a:	0018      	movs	r0, r3
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	b004      	add	sp, #16
 8004d50:	bd80      	pop	{r7, pc}
 8004d52:	46c0      	nop			; (mov r8, r8)
 8004d54:	08004d59 	.word	0x08004d59

08004d58 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8004d5e:	2300      	movs	r3, #0
 8004d60:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004d62:	4b07      	ldr	r3, [pc, #28]	; (8004d80 <prvTaskExitError+0x28>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3301      	adds	r3, #1
 8004d68:	d001      	beq.n	8004d6e <prvTaskExitError+0x16>
 8004d6a:	b672      	cpsid	i
 8004d6c:	e7fe      	b.n	8004d6c <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8004d6e:	b672      	cpsid	i
	while( ulDummy == 0 )
 8004d70:	46c0      	nop			; (mov r8, r8)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d0fc      	beq.n	8004d72 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004d78:	46c0      	nop			; (mov r8, r8)
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b002      	add	sp, #8
 8004d7e:	bd80      	pop	{r7, pc}
 8004d80:	2000000c 	.word	0x2000000c

08004d84 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8004d88:	46c0      	nop			; (mov r8, r8)
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bd80      	pop	{r7, pc}
	...

08004d90 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8004d90:	4a0b      	ldr	r2, [pc, #44]	; (8004dc0 <pxCurrentTCBConst2>)
 8004d92:	6813      	ldr	r3, [r2, #0]
 8004d94:	6818      	ldr	r0, [r3, #0]
 8004d96:	3020      	adds	r0, #32
 8004d98:	f380 8809 	msr	PSP, r0
 8004d9c:	2002      	movs	r0, #2
 8004d9e:	f380 8814 	msr	CONTROL, r0
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8004da8:	46ae      	mov	lr, r5
 8004daa:	bc08      	pop	{r3}
 8004dac:	bc04      	pop	{r2}
 8004dae:	b662      	cpsie	i
 8004db0:	4718      	bx	r3
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	46c0      	nop			; (mov r8, r8)
 8004db6:	46c0      	nop			; (mov r8, r8)
 8004db8:	46c0      	nop			; (mov r8, r8)
 8004dba:	46c0      	nop			; (mov r8, r8)
 8004dbc:	46c0      	nop			; (mov r8, r8)
 8004dbe:	46c0      	nop			; (mov r8, r8)

08004dc0 <pxCurrentTCBConst2>:
 8004dc0:	20000064 	.word	0x20000064
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8004dc4:	46c0      	nop			; (mov r8, r8)
 8004dc6:	46c0      	nop			; (mov r8, r8)

08004dc8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	*(portNVIC_SYSPRI2) |= portNVIC_PENDSV_PRI;
 8004dcc:	4b0e      	ldr	r3, [pc, #56]	; (8004e08 <xPortStartScheduler+0x40>)
 8004dce:	681a      	ldr	r2, [r3, #0]
 8004dd0:	4b0d      	ldr	r3, [pc, #52]	; (8004e08 <xPortStartScheduler+0x40>)
 8004dd2:	21ff      	movs	r1, #255	; 0xff
 8004dd4:	0409      	lsls	r1, r1, #16
 8004dd6:	430a      	orrs	r2, r1
 8004dd8:	601a      	str	r2, [r3, #0]
	*(portNVIC_SYSPRI2) |= portNVIC_SYSTICK_PRI;
 8004dda:	4b0b      	ldr	r3, [pc, #44]	; (8004e08 <xPortStartScheduler+0x40>)
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	4b0a      	ldr	r3, [pc, #40]	; (8004e08 <xPortStartScheduler+0x40>)
 8004de0:	21ff      	movs	r1, #255	; 0xff
 8004de2:	0609      	lsls	r1, r1, #24
 8004de4:	430a      	orrs	r2, r1
 8004de6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	prvSetupTimerInterrupt();
 8004de8:	f000 f898 	bl	8004f1c <prvSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004dec:	4b07      	ldr	r3, [pc, #28]	; (8004e0c <xPortStartScheduler+0x44>)
 8004dee:	2200      	movs	r2, #0
 8004df0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8004df2:	f7ff ffcd 	bl	8004d90 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004df6:	f7ff fcc7 	bl	8004788 <vTaskSwitchContext>
	prvTaskExitError();
 8004dfa:	f7ff ffad 	bl	8004d58 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	0018      	movs	r0, r3
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	46c0      	nop			; (mov r8, r8)
 8004e08:	e000ed20 	.word	0xe000ed20
 8004e0c:	2000000c 	.word	0x2000000c

08004e10 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	*( portNVIC_INT_CTRL ) = portNVIC_PENDSVSET;
 8004e14:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <vPortYield+0x1c>)
 8004e16:	2280      	movs	r2, #128	; 0x80
 8004e18:	0552      	lsls	r2, r2, #21
 8004e1a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8004e1c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004e20:	f3bf 8f6f 	isb	sy
}
 8004e24:	46c0      	nop			; (mov r8, r8)
 8004e26:	46bd      	mov	sp, r7
 8004e28:	bd80      	pop	{r7, pc}
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	e000ed04 	.word	0xe000ed04

08004e30 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	af00      	add	r7, sp, #0
    portDISABLE_INTERRUPTS();
 8004e34:	b672      	cpsid	i
    uxCriticalNesting++;
 8004e36:	4b06      	ldr	r3, [pc, #24]	; (8004e50 <vPortEnterCritical+0x20>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	1c5a      	adds	r2, r3, #1
 8004e3c:	4b04      	ldr	r3, [pc, #16]	; (8004e50 <vPortEnterCritical+0x20>)
 8004e3e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8004e40:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8004e44:	f3bf 8f6f 	isb	sy
}
 8004e48:	46c0      	nop			; (mov r8, r8)
 8004e4a:	46bd      	mov	sp, r7
 8004e4c:	bd80      	pop	{r7, pc}
 8004e4e:	46c0      	nop			; (mov r8, r8)
 8004e50:	2000000c 	.word	0x2000000c

08004e54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e58:	4b09      	ldr	r3, [pc, #36]	; (8004e80 <vPortExitCritical+0x2c>)
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <vPortExitCritical+0x10>
 8004e60:	b672      	cpsid	i
 8004e62:	e7fe      	b.n	8004e62 <vPortExitCritical+0xe>
    uxCriticalNesting--;
 8004e64:	4b06      	ldr	r3, [pc, #24]	; (8004e80 <vPortExitCritical+0x2c>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	1e5a      	subs	r2, r3, #1
 8004e6a:	4b05      	ldr	r3, [pc, #20]	; (8004e80 <vPortExitCritical+0x2c>)
 8004e6c:	601a      	str	r2, [r3, #0]
    if( uxCriticalNesting == 0 )
 8004e6e:	4b04      	ldr	r3, [pc, #16]	; (8004e80 <vPortExitCritical+0x2c>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d100      	bne.n	8004e78 <vPortExitCritical+0x24>
    {
        portENABLE_INTERRUPTS();
 8004e76:	b662      	cpsie	i
    }
}
 8004e78:	46c0      	nop			; (mov r8, r8)
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	46c0      	nop			; (mov r8, r8)
 8004e80:	2000000c 	.word	0x2000000c

08004e84 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8004e84:	f3ef 8010 	mrs	r0, PRIMASK
 8004e88:	b672      	cpsid	i
 8004e8a:	4770      	bx	lr
	/* To avoid compiler warnings.  The return statement will nevere be reached,
	but some compilers warn if it is not included, while others won't compile if
	it is. */
	return 0;
#endif
}
 8004e8c:	46c0      	nop			; (mov r8, r8)
 8004e8e:	0018      	movs	r0, r3

08004e90 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8004e90:	f380 8810 	msr	PRIMASK, r0
 8004e94:	4770      	bx	lr
	/* Just to avoid compiler warning.  ulMask is used from the asm code but
	the compiler can't see that.  Some compilers generate warnings without the
	following line, while others generate warnings if the line is included. */
	( void ) ulMask;
#endif
}
 8004e96:	46c0      	nop			; (mov r8, r8)
	...

08004ea0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ea0:	f3ef 8009 	mrs	r0, PSP
 8004ea4:	4b0e      	ldr	r3, [pc, #56]	; (8004ee0 <pxCurrentTCBConst>)
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	3820      	subs	r0, #32
 8004eaa:	6010      	str	r0, [r2, #0]
 8004eac:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004eae:	4644      	mov	r4, r8
 8004eb0:	464d      	mov	r5, r9
 8004eb2:	4656      	mov	r6, sl
 8004eb4:	465f      	mov	r7, fp
 8004eb6:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8004eb8:	b508      	push	{r3, lr}
 8004eba:	b672      	cpsid	i
 8004ebc:	f7ff fc64 	bl	8004788 <vTaskSwitchContext>
 8004ec0:	b662      	cpsie	i
 8004ec2:	bc0c      	pop	{r2, r3}
 8004ec4:	6811      	ldr	r1, [r2, #0]
 8004ec6:	6808      	ldr	r0, [r1, #0]
 8004ec8:	3010      	adds	r0, #16
 8004eca:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004ecc:	46a0      	mov	r8, r4
 8004ece:	46a9      	mov	r9, r5
 8004ed0:	46b2      	mov	sl, r6
 8004ed2:	46bb      	mov	fp, r7
 8004ed4:	f380 8809 	msr	PSP, r0
 8004ed8:	3820      	subs	r0, #32
 8004eda:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8004edc:	4718      	bx	r3
 8004ede:	46c0      	nop			; (mov r8, r8)

08004ee0 <pxCurrentTCBConst>:
 8004ee0:	20000064 	.word	0x20000064
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8004ee4:	46c0      	nop			; (mov r8, r8)
 8004ee6:	46c0      	nop			; (mov r8, r8)

08004ee8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8004eee:	f7ff ffc9 	bl	8004e84 <ulSetInterruptMaskFromISR>
 8004ef2:	0003      	movs	r3, r0
 8004ef4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ef6:	f7ff fb93 	bl	8004620 <xTaskIncrementTick>
 8004efa:	1e03      	subs	r3, r0, #0
 8004efc:	d003      	beq.n	8004f06 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			*(portNVIC_INT_CTRL) = portNVIC_PENDSVSET;
 8004efe:	4b06      	ldr	r3, [pc, #24]	; (8004f18 <xPortSysTickHandler+0x30>)
 8004f00:	2280      	movs	r2, #128	; 0x80
 8004f02:	0552      	lsls	r2, r2, #21
 8004f04:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f7ff ffc1 	bl	8004e90 <vClearInterruptMaskFromISR>
}
 8004f0e:	46c0      	nop			; (mov r8, r8)
 8004f10:	46bd      	mov	sp, r7
 8004f12:	b002      	add	sp, #8
 8004f14:	bd80      	pop	{r7, pc}
 8004f16:	46c0      	nop			; (mov r8, r8)
 8004f18:	e000ed04 	.word	0xe000ed04

08004f1c <prvSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
void prvSetupTimerInterrupt( void )
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	af00      	add	r7, sp, #0
   ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
 }
 #endif /* configUSE_TICKLESS_IDLE */

/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL = 0UL;
 8004f20:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <prvSetupTimerInterrupt+0x34>)
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE = 0UL;
 8004f26:	4b0b      	ldr	r3, [pc, #44]	; (8004f54 <prvSetupTimerInterrupt+0x38>)
 8004f28:	2200      	movs	r2, #0
 8004f2a:	601a      	str	r2, [r3, #0]

 /* Configure SysTick to interrupt at the requested rate. */
 portNVIC_SYSTICK_LOAD = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f2c:	4b0a      	ldr	r3, [pc, #40]	; (8004f58 <prvSetupTimerInterrupt+0x3c>)
 8004f2e:	681a      	ldr	r2, [r3, #0]
 8004f30:	23fa      	movs	r3, #250	; 0xfa
 8004f32:	0099      	lsls	r1, r3, #2
 8004f34:	0010      	movs	r0, r2
 8004f36:	f7fb f8ef 	bl	8000118 <__udivsi3>
 8004f3a:	0003      	movs	r3, r0
 8004f3c:	001a      	movs	r2, r3
 8004f3e:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <prvSetupTimerInterrupt+0x40>)
 8004f40:	3a01      	subs	r2, #1
 8004f42:	601a      	str	r2, [r3, #0]
 portNVIC_SYSTICK_CTRL = portNVIC_SYSTICK_CLK | portNVIC_SYSTICK_INT | portNVIC_SYSTICK_ENABLE;
 8004f44:	4b02      	ldr	r3, [pc, #8]	; (8004f50 <prvSetupTimerInterrupt+0x34>)
 8004f46:	2207      	movs	r2, #7
 8004f48:	601a      	str	r2, [r3, #0]
}
 8004f4a:	46c0      	nop			; (mov r8, r8)
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bd80      	pop	{r7, pc}
 8004f50:	e000e010 	.word	0xe000e010
 8004f54:	e000e018 	.word	0xe000e018
 8004f58:	20000000 	.word	0x20000000
 8004f5c:	e000e014 	.word	0xe000e014

08004f60 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8004f6c:	f7ff fac0 	bl	80044f0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004f70:	4b49      	ldr	r3, [pc, #292]	; (8005098 <pvPortMalloc+0x138>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004f78:	f000 f8e0 	bl	800513c <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f7c:	4b47      	ldr	r3, [pc, #284]	; (800509c <pvPortMalloc+0x13c>)
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	4013      	ands	r3, r2
 8004f84:	d000      	beq.n	8004f88 <pvPortMalloc+0x28>
 8004f86:	e079      	b.n	800507c <pvPortMalloc+0x11c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d012      	beq.n	8004fb4 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8004f8e:	2208      	movs	r2, #8
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	189b      	adds	r3, r3, r2
 8004f94:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2207      	movs	r2, #7
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	d00a      	beq.n	8004fb4 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2207      	movs	r2, #7
 8004fa2:	4393      	bics	r3, r2
 8004fa4:	3308      	adds	r3, #8
 8004fa6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2207      	movs	r2, #7
 8004fac:	4013      	ands	r3, r2
 8004fae:	d001      	beq.n	8004fb4 <pvPortMalloc+0x54>
 8004fb0:	b672      	cpsid	i
 8004fb2:	e7fe      	b.n	8004fb2 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d060      	beq.n	800507c <pvPortMalloc+0x11c>
 8004fba:	4b39      	ldr	r3, [pc, #228]	; (80050a0 <pvPortMalloc+0x140>)
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	687a      	ldr	r2, [r7, #4]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d85b      	bhi.n	800507c <pvPortMalloc+0x11c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004fc4:	4b37      	ldr	r3, [pc, #220]	; (80050a4 <pvPortMalloc+0x144>)
 8004fc6:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8004fc8:	4b36      	ldr	r3, [pc, #216]	; (80050a4 <pvPortMalloc+0x144>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fce:	e004      	b.n	8004fda <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	687a      	ldr	r2, [r7, #4]
 8004fe0:	429a      	cmp	r2, r3
 8004fe2:	d903      	bls.n	8004fec <pvPortMalloc+0x8c>
 8004fe4:	697b      	ldr	r3, [r7, #20]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d1f1      	bne.n	8004fd0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004fec:	4b2a      	ldr	r3, [pc, #168]	; (8005098 <pvPortMalloc+0x138>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	697a      	ldr	r2, [r7, #20]
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d042      	beq.n	800507c <pvPortMalloc+0x11c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004ff6:	693b      	ldr	r3, [r7, #16]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	2208      	movs	r2, #8
 8004ffc:	189b      	adds	r3, r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	681a      	ldr	r2, [r3, #0]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005008:	697b      	ldr	r3, [r7, #20]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	1ad2      	subs	r2, r2, r3
 8005010:	2308      	movs	r3, #8
 8005012:	005b      	lsls	r3, r3, #1
 8005014:	429a      	cmp	r2, r3
 8005016:	d916      	bls.n	8005046 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	18d3      	adds	r3, r2, r3
 800501e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005020:	68bb      	ldr	r3, [r7, #8]
 8005022:	2207      	movs	r2, #7
 8005024:	4013      	ands	r3, r2
 8005026:	d001      	beq.n	800502c <pvPortMalloc+0xcc>
 8005028:	b672      	cpsid	i
 800502a:	e7fe      	b.n	800502a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	685a      	ldr	r2, [r3, #4]
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	1ad2      	subs	r2, r2, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005038:	697b      	ldr	r3, [r7, #20]
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	0018      	movs	r0, r3
 8005042:	f000 f8db 	bl	80051fc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005046:	4b16      	ldr	r3, [pc, #88]	; (80050a0 <pvPortMalloc+0x140>)
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	697b      	ldr	r3, [r7, #20]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	1ad2      	subs	r2, r2, r3
 8005050:	4b13      	ldr	r3, [pc, #76]	; (80050a0 <pvPortMalloc+0x140>)
 8005052:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005054:	4b12      	ldr	r3, [pc, #72]	; (80050a0 <pvPortMalloc+0x140>)
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	4b13      	ldr	r3, [pc, #76]	; (80050a8 <pvPortMalloc+0x148>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	429a      	cmp	r2, r3
 800505e:	d203      	bcs.n	8005068 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005060:	4b0f      	ldr	r3, [pc, #60]	; (80050a0 <pvPortMalloc+0x140>)
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	4b10      	ldr	r3, [pc, #64]	; (80050a8 <pvPortMalloc+0x148>)
 8005066:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	4b0b      	ldr	r3, [pc, #44]	; (800509c <pvPortMalloc+0x13c>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	431a      	orrs	r2, r3
 8005072:	697b      	ldr	r3, [r7, #20]
 8005074:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	2200      	movs	r2, #0
 800507a:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800507c:	f7ff fa44 	bl	8004508 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2207      	movs	r2, #7
 8005084:	4013      	ands	r3, r2
 8005086:	d001      	beq.n	800508c <pvPortMalloc+0x12c>
 8005088:	b672      	cpsid	i
 800508a:	e7fe      	b.n	800508a <pvPortMalloc+0x12a>
	return pvReturn;
 800508c:	68fb      	ldr	r3, [r7, #12]
}
 800508e:	0018      	movs	r0, r3
 8005090:	46bd      	mov	sp, r7
 8005092:	b006      	add	sp, #24
 8005094:	bd80      	pop	{r7, pc}
 8005096:	46c0      	nop			; (mov r8, r8)
 8005098:	20001198 	.word	0x20001198
 800509c:	200011a4 	.word	0x200011a4
 80050a0:	2000119c 	.word	0x2000119c
 80050a4:	20001190 	.word	0x20001190
 80050a8:	200011a0 	.word	0x200011a0

080050ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80050ac:	b580      	push	{r7, lr}
 80050ae:	b084      	sub	sp, #16
 80050b0:	af00      	add	r7, sp, #0
 80050b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d035      	beq.n	800512a <vPortFree+0x7e>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80050be:	2308      	movs	r3, #8
 80050c0:	425b      	negs	r3, r3
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	18d3      	adds	r3, r2, r3
 80050c6:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	685a      	ldr	r2, [r3, #4]
 80050d0:	4b18      	ldr	r3, [pc, #96]	; (8005134 <vPortFree+0x88>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4013      	ands	r3, r2
 80050d6:	d101      	bne.n	80050dc <vPortFree+0x30>
 80050d8:	b672      	cpsid	i
 80050da:	e7fe      	b.n	80050da <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d001      	beq.n	80050e8 <vPortFree+0x3c>
 80050e4:	b672      	cpsid	i
 80050e6:	e7fe      	b.n	80050e6 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	685a      	ldr	r2, [r3, #4]
 80050ec:	4b11      	ldr	r3, [pc, #68]	; (8005134 <vPortFree+0x88>)
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4013      	ands	r3, r2
 80050f2:	d01a      	beq.n	800512a <vPortFree+0x7e>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d116      	bne.n	800512a <vPortFree+0x7e>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	685a      	ldr	r2, [r3, #4]
 8005100:	4b0c      	ldr	r3, [pc, #48]	; (8005134 <vPortFree+0x88>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	43db      	mvns	r3, r3
 8005106:	401a      	ands	r2, r3
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800510c:	f7ff f9f0 	bl	80044f0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005110:	68bb      	ldr	r3, [r7, #8]
 8005112:	685a      	ldr	r2, [r3, #4]
 8005114:	4b08      	ldr	r3, [pc, #32]	; (8005138 <vPortFree+0x8c>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	18d2      	adds	r2, r2, r3
 800511a:	4b07      	ldr	r3, [pc, #28]	; (8005138 <vPortFree+0x8c>)
 800511c:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	0018      	movs	r0, r3
 8005122:	f000 f86b 	bl	80051fc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005126:	f7ff f9ef 	bl	8004508 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800512a:	46c0      	nop			; (mov r8, r8)
 800512c:	46bd      	mov	sp, r7
 800512e:	b004      	add	sp, #16
 8005130:	bd80      	pop	{r7, pc}
 8005132:	46c0      	nop			; (mov r8, r8)
 8005134:	200011a4 	.word	0x200011a4
 8005138:	2000119c 	.word	0x2000119c

0800513c <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800513c:	b580      	push	{r7, lr}
 800513e:	b084      	sub	sp, #16
 8005140:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005142:	2380      	movs	r3, #128	; 0x80
 8005144:	015b      	lsls	r3, r3, #5
 8005146:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005148:	4b26      	ldr	r3, [pc, #152]	; (80051e4 <prvHeapInit+0xa8>)
 800514a:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	2207      	movs	r2, #7
 8005150:	4013      	ands	r3, r2
 8005152:	d00c      	beq.n	800516e <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	3307      	adds	r3, #7
 8005158:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	2207      	movs	r2, #7
 800515e:	4393      	bics	r3, r2
 8005160:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005162:	68ba      	ldr	r2, [r7, #8]
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	1ad2      	subs	r2, r2, r3
 8005168:	4b1e      	ldr	r3, [pc, #120]	; (80051e4 <prvHeapInit+0xa8>)
 800516a:	18d3      	adds	r3, r2, r3
 800516c:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005172:	4b1d      	ldr	r3, [pc, #116]	; (80051e8 <prvHeapInit+0xac>)
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005178:	4b1b      	ldr	r3, [pc, #108]	; (80051e8 <prvHeapInit+0xac>)
 800517a:	2200      	movs	r2, #0
 800517c:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	68ba      	ldr	r2, [r7, #8]
 8005182:	18d3      	adds	r3, r2, r3
 8005184:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005186:	2208      	movs	r2, #8
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	1a9b      	subs	r3, r3, r2
 800518c:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	2207      	movs	r2, #7
 8005192:	4393      	bics	r3, r2
 8005194:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005196:	68fa      	ldr	r2, [r7, #12]
 8005198:	4b14      	ldr	r3, [pc, #80]	; (80051ec <prvHeapInit+0xb0>)
 800519a:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800519c:	4b13      	ldr	r3, [pc, #76]	; (80051ec <prvHeapInit+0xb0>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2200      	movs	r2, #0
 80051a2:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80051a4:	4b11      	ldr	r3, [pc, #68]	; (80051ec <prvHeapInit+0xb0>)
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	2200      	movs	r2, #0
 80051aa:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	68fa      	ldr	r2, [r7, #12]
 80051b4:	1ad2      	subs	r2, r2, r3
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80051ba:	4b0c      	ldr	r3, [pc, #48]	; (80051ec <prvHeapInit+0xb0>)
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	685a      	ldr	r2, [r3, #4]
 80051c6:	4b0a      	ldr	r3, [pc, #40]	; (80051f0 <prvHeapInit+0xb4>)
 80051c8:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	685a      	ldr	r2, [r3, #4]
 80051ce:	4b09      	ldr	r3, [pc, #36]	; (80051f4 <prvHeapInit+0xb8>)
 80051d0:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80051d2:	4b09      	ldr	r3, [pc, #36]	; (80051f8 <prvHeapInit+0xbc>)
 80051d4:	2280      	movs	r2, #128	; 0x80
 80051d6:	0612      	lsls	r2, r2, #24
 80051d8:	601a      	str	r2, [r3, #0]
}
 80051da:	46c0      	nop			; (mov r8, r8)
 80051dc:	46bd      	mov	sp, r7
 80051de:	b004      	add	sp, #16
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	20000190 	.word	0x20000190
 80051e8:	20001190 	.word	0x20001190
 80051ec:	20001198 	.word	0x20001198
 80051f0:	200011a0 	.word	0x200011a0
 80051f4:	2000119c 	.word	0x2000119c
 80051f8:	200011a4 	.word	0x200011a4

080051fc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b084      	sub	sp, #16
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005204:	4b27      	ldr	r3, [pc, #156]	; (80052a4 <prvInsertBlockIntoFreeList+0xa8>)
 8005206:	60fb      	str	r3, [r7, #12]
 8005208:	e002      	b.n	8005210 <prvInsertBlockIntoFreeList+0x14>
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	60fb      	str	r3, [r7, #12]
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d8f7      	bhi.n	800520a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	18d3      	adds	r3, r2, r3
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	429a      	cmp	r2, r3
 800522a:	d108      	bne.n	800523e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	685a      	ldr	r2, [r3, #4]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	685b      	ldr	r3, [r3, #4]
 8005234:	18d2      	adds	r2, r2, r3
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	68ba      	ldr	r2, [r7, #8]
 8005248:	18d2      	adds	r2, r2, r3
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	429a      	cmp	r2, r3
 8005250:	d118      	bne.n	8005284 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	4b14      	ldr	r3, [pc, #80]	; (80052a8 <prvInsertBlockIntoFreeList+0xac>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	429a      	cmp	r2, r3
 800525c:	d00d      	beq.n	800527a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	18d2      	adds	r2, r2, r3
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681a      	ldr	r2, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	601a      	str	r2, [r3, #0]
 8005278:	e008      	b.n	800528c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800527a:	4b0b      	ldr	r3, [pc, #44]	; (80052a8 <prvInsertBlockIntoFreeList+0xac>)
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	601a      	str	r2, [r3, #0]
 8005282:	e003      	b.n	800528c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800528c:	68fa      	ldr	r2, [r7, #12]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	429a      	cmp	r2, r3
 8005292:	d002      	beq.n	800529a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	46bd      	mov	sp, r7
 800529e:	b004      	add	sp, #16
 80052a0:	bd80      	pop	{r7, pc}
 80052a2:	46c0      	nop			; (mov r8, r8)
 80052a4:	20001190 	.word	0x20001190
 80052a8:	20001198 	.word	0x20001198

080052ac <__libc_init_array>:
 80052ac:	b570      	push	{r4, r5, r6, lr}
 80052ae:	2600      	movs	r6, #0
 80052b0:	4d0c      	ldr	r5, [pc, #48]	; (80052e4 <__libc_init_array+0x38>)
 80052b2:	4c0d      	ldr	r4, [pc, #52]	; (80052e8 <__libc_init_array+0x3c>)
 80052b4:	1b64      	subs	r4, r4, r5
 80052b6:	10a4      	asrs	r4, r4, #2
 80052b8:	42a6      	cmp	r6, r4
 80052ba:	d109      	bne.n	80052d0 <__libc_init_array+0x24>
 80052bc:	2600      	movs	r6, #0
 80052be:	f000 f82b 	bl	8005318 <_init>
 80052c2:	4d0a      	ldr	r5, [pc, #40]	; (80052ec <__libc_init_array+0x40>)
 80052c4:	4c0a      	ldr	r4, [pc, #40]	; (80052f0 <__libc_init_array+0x44>)
 80052c6:	1b64      	subs	r4, r4, r5
 80052c8:	10a4      	asrs	r4, r4, #2
 80052ca:	42a6      	cmp	r6, r4
 80052cc:	d105      	bne.n	80052da <__libc_init_array+0x2e>
 80052ce:	bd70      	pop	{r4, r5, r6, pc}
 80052d0:	00b3      	lsls	r3, r6, #2
 80052d2:	58eb      	ldr	r3, [r5, r3]
 80052d4:	4798      	blx	r3
 80052d6:	3601      	adds	r6, #1
 80052d8:	e7ee      	b.n	80052b8 <__libc_init_array+0xc>
 80052da:	00b3      	lsls	r3, r6, #2
 80052dc:	58eb      	ldr	r3, [r5, r3]
 80052de:	4798      	blx	r3
 80052e0:	3601      	adds	r6, #1
 80052e2:	e7f2      	b.n	80052ca <__libc_init_array+0x1e>
 80052e4:	0800548c 	.word	0x0800548c
 80052e8:	0800548c 	.word	0x0800548c
 80052ec:	0800548c 	.word	0x0800548c
 80052f0:	08005490 	.word	0x08005490

080052f4 <memcpy>:
 80052f4:	2300      	movs	r3, #0
 80052f6:	b510      	push	{r4, lr}
 80052f8:	429a      	cmp	r2, r3
 80052fa:	d100      	bne.n	80052fe <memcpy+0xa>
 80052fc:	bd10      	pop	{r4, pc}
 80052fe:	5ccc      	ldrb	r4, [r1, r3]
 8005300:	54c4      	strb	r4, [r0, r3]
 8005302:	3301      	adds	r3, #1
 8005304:	e7f8      	b.n	80052f8 <memcpy+0x4>

08005306 <memset>:
 8005306:	0003      	movs	r3, r0
 8005308:	1812      	adds	r2, r2, r0
 800530a:	4293      	cmp	r3, r2
 800530c:	d100      	bne.n	8005310 <memset+0xa>
 800530e:	4770      	bx	lr
 8005310:	7019      	strb	r1, [r3, #0]
 8005312:	3301      	adds	r3, #1
 8005314:	e7f9      	b.n	800530a <memset+0x4>
	...

08005318 <_init>:
 8005318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800531a:	46c0      	nop			; (mov r8, r8)
 800531c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800531e:	bc08      	pop	{r3}
 8005320:	469e      	mov	lr, r3
 8005322:	4770      	bx	lr

08005324 <_fini>:
 8005324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005326:	46c0      	nop			; (mov r8, r8)
 8005328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800532a:	bc08      	pop	{r3}
 800532c:	469e      	mov	lr, r3
 800532e:	4770      	bx	lr
